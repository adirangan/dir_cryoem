function C_q_ = innerproduct_q__k_svds_1(flag_S_vs_M,n_svd_r,svd_r_,n_svd_l,svd_l_,svd_s_,svd_V_r_,n_r,grid_p_,n_w_,n_A,T_q_,M_q_);
% Assumes that M_q_ is the same size and dimensions as T_q_.;
% Assumes quasi-uniform polar-grid defined via n_r , .. , n_A.;
% Uses svd-expansion defined via n_svd_r , .. , svd_V_r_.;
% Assumes that C_q_ is large enough to hold all n_w_max = n_w_(1+n_r-1) ;
% modes for each of the n_svd_l terms in the svd-expansion;
% (assuming of course that n_w_(1+n_r-1) is the largest value within n_w_).;
% modes in C_q_ are stored in the order: (mode 0 , mode 1 , ... , mode -1).;
% The mode-k for term-l is stored in C_q_(1+l + k*n_svd_l).;
% The logical flag_S_vs_M determines the sign of the complex exponential.;
% flag_S_vs_M .eqv. .true. --> transformation applied to S, use +.;
% flag_S_vs_M .eqv. .false. --> transformation applied to M, use -.;
warning_flag = 1;
verbose = 0;
if (verbose>0);
disp(sprintf(' %% [entering innerproduct_q__k_svds_1] n_r %d',n_r));
end;%if;
svd_r_max = svd_r_(1+n_svd_r-1);
R_q = 2*pi*grid_p_(1+n_r-1);
if (R_q>svd_r_max & warning_flag);
disp(sprintf(' %% Warning, 2*pi*r %f > svd_r_max %f in innerproduct_q__k_svds_1',R_q,svd_r_max));
end;%if;
n_w_max = n_w_(1+n_r-1);
if (verbose>0);
disp(sprintf(' %% n_w_max %d',n_w_max));
end;%if;
C_q_ = zeros(n_svd_l,n_w_max);
for l=0:n_svd_l-1;
for nw=0:n_w_max-1;
C_q_(1+l+nw*n_svd_l) = 0.0 + i*0.0;
end;%for;
end;%for;
C_q = 0.0 + i*0.0;
ic = 0;
for nr=0:n_r-1;
R_q = 2*pi*grid_p_(1+nr);
n_svd_r_v = (n_svd_r-1)*R_q/svd_r_max;
n_svd_r_pre = max(0,min(n_svd_r-1,floor(n_svd_r_v)));
n_svd_r_pos = max(0,min(n_svd_r-1,ceil(n_svd_r_v)));
d_svd_r_pre = abs(n_svd_r_v - n_svd_r_pre);
d_svd_r_pos = abs(n_svd_r_pos - n_svd_r_v);
if (d_svd_r_pre+d_svd_r_pos<=0.0);
alpha_r = 0.0;
beta_r = 1.0;
 else;
alpha_r = d_svd_r_pre / (d_svd_r_pre + d_svd_r_pos);
beta_r = d_svd_r_pos / (d_svd_r_pre + d_svd_r_pos);
end;%if;
if (verbose>1);
disp(sprintf(' %% nr %d R_q %f n_svd_r_pre %d n_svd_r_pos',nr,R_q,n_svd_r_pre,n_svd_r_pos));
disp(sprintf(' %% d_svd_r_pre %f d_svd_r_pos %f',d_svd_r_pre,d_svd_r_pos));
disp(sprintf(' %% alpha_r %f beta_r %f',alpha_r,beta_r));
end;%if;
if (nr>0);
R_pre = 0.5*(grid_p_(1+nr-1) + grid_p_(1+nr));
 else;
R_pre = grid_p_(1+0);
end;%if;
if (nr<n_r-1);
R_pos = 0.5*(grid_p_(1+nr+1) + grid_p_(1+nr));
 else;
R_pos = grid_p_(1+n_r-1);
end;%if;
dr = R_pos - R_pre;
%    We set the zero-mode to zero;
if (grid_p_(1+nr)<=0.0);
dr = 0.0;
end;%if;
if (verbose>1);
disp(sprintf(' %% nr %d n_w_(1+nr) %d R_pre %f R_pos %f dr %f',nr,n_w_(1+nr),R_pre,R_pos,dr));
end;%if;
dw = 2*pi/(1.0*max(1,n_w_(1+nr)));
dA = (R_pre*dr + (dr.^2)/2)*dw;
%    We assume that the fourier basis is orthonormal (not merely orthogonal);
dAn = dA;
if (verbose>1);
disp(sprintf(' %% nr %d dr %f dw %f dA %f',nr,dr,dw,dA));
end;%if;
ic_store = ic;
for l=0:n_svd_l-1;
D_V_r = beta_r*svd_V_r_(1+n_svd_r_pre + l*n_svd_r) + alpha_r*svd_V_r_(1+n_svd_r_pos + l*n_svd_r);
D_s = svd_s_(1+l);
I_l = svd_l_(1+l);
if (verbose>2 & nr<5);
disp(sprintf(' %% l %d I_l %d D_V_r %f D_s %f',l,I_l,D_V_r,D_s));
end;%if;
ic = ic_store;
for nw=0:n_w_(1+nr)-1;
nwt = periodize(nw+I_l,0,n_w_(1+nr));
ict = ic-nw+nwt;
if (verbose>3 & nr<5);
disp(sprintf(' %% nw %d I_l %d nwt %d',nw,I_l,nwt));
end;%if;
if (nw>n_w_(1+nr)/2);
nw_fix = nw - n_w_(1+nr) + n_w_max;
if (verbose>3 & nr<5);
disp(sprintf(' %% nw %d nw_fix %d full loop',nw,nw_fix));
end;%if;
if (flag_S_vs_M==1) C_q = conj(D_s*D_V_r*T_q_(1+ict))*M_q_(1+ic); end;%if
if (flag_S_vs_M==0) C_q = conj(D_s*D_V_r*T_q_(1+ic))*M_q_(1+ict); end;%if
nw_C = l + nw_fix*n_svd_l;
C_q_(1+nw_C) = C_q_(1+nw_C) + C_q*dAn;
 elseif (nw==n_w_(1+nr)/2);
nw_fix = nw;
if (verbose>3 & nr<5);
disp(sprintf(' %% nw %d nw_fix %d half orig',nw,nw_fix));
end;%if;
if (flag_S_vs_M==1) C_q = 0.5*conj(D_s*D_V_r*T_q_(1+ict))*M_q_(1+ic); end;%ifn
if (flag_S_vs_M==0) C_q = 0.5*conj(D_s*D_V_r*T_q_(1+ic))*M_q_(1+ict); end;%if
nw_C = l + nw_fix*n_svd_l;
C_q_(1+nw_C) = C_q_(1+nw_C) + C_q*dAn;
nw_fix = nw - n_w_(1+nr) + n_w_max;
if (verbose>3 & nr<5);
disp(sprintf(' %% nw %d nw_fix %d half loop',nw,nw_fix));
end;%if;
if (flag_S_vs_M==1) C_q = 0.5*conj(D_s*D_V_r*T_q_(1+ict))*M_q_(1+ic); end;%if
if (flag_S_vs_M==0) C_q = 0.5*conj(D_s*D_V_r*T_q_(1+ic))*M_q_(1+ict); end;%if
nw_C = l + nw_fix*n_svd_l;
C_q_(1+nw_C) = C_q_(1+nw_C) + C_q*dAn;
 else;
nw_fix = nw;
if (verbose>3 & nr<5);
disp(sprintf(' %% nw %d nw_fix %d full orig',nw,nw_fix));
end;%if;
if (flag_S_vs_M==1) C_q = conj(D_s*D_V_r*T_q_(1+ict))*M_q_(1+ic); end;%if
if (flag_S_vs_M==0) C_q = conj(D_s*D_V_r*T_q_(1+ic))*M_q_(1+ict); end;%if
nw_C = l + nw_fix*n_svd_l;
C_q_(1+nw_C) = C_q_(1+nw_C) + C_q*dAn;
end;%if;
ic = ic + 1;
end;%for;
end;%for;
end;%for;
if (verbose>0);
disp(sprintf(' %% [finished innerproduct_q__k_svds_1] n_r %d',n_r));
end;%if;

