function output_ = bilinear_interpolant(x_,y_,nn_,np_,pn_,pp_);
% Assumes that x_ and y_ are n_p-by-1, ;
% and that nn_,np_,pn_ and pp_ are 1-by-n_d. ;
% The square is given by: ;
%  np        pp   ;
%     +----+      ;
%     |    |      ;
%     |    |      ;
%     +----+      ;
%  nn        pn   ;
x_ = x_(:);
y_ = y_(:);
nn_ = transpose(nn_(:));
np_ = transpose(np_(:));
pn_ = transpose(pn_(:));
pp_ = transpose(pp_(:));
n_p = numel(x_);
n_d = numel(nn_);
output_ = zeros(n_p,n_d);
output_00_ = 0.25*ones(n_p,1)*(+nn_+np_+pn_+pp_);
output_x0_ = 0.25*x_*(-nn_-np_+pn_+pp_);
output_0y_ = 0.25*y_*(-nn_+np_-pn_+pp_);
output_xy_ = 0.25*(x_.*y_)*(+nn_-np_-pn_+pp_);
output_ = output_00_ + output_x0_ + output_0y_ + output_xy_ ;
