function output = interp2(n_x,min_x,max_x,n_y,min_y,max_y,F_,x_loc,y_loc);
% assumes regular grid for x and y ;
% periodic boundary conditions ;

output=0;
x_loc = periodize(x_loc,min_x,max_x);
nx_d = n_x*(x_loc-min_x)/(max_x-min_x);
nx_pre = floor(nx_d);
dx_pre = abs(nx_pre - nx_d);
nx_pos = ceil(nx_d);
dx_pos = abs(nx_pos - nx_d);
if (nx_pos>=n_x);
nx_pos = nx_pos - n_x;
end;%if (nx_pos>=n_x);
y_loc = periodize(y_loc,min_y,max_y);
ny_d = n_y*(y_loc-min_y)/(max_y-min_y);
ny_pre = floor(ny_d);
dy_pre = abs(ny_pre - ny_d);
ny_pos = ceil(ny_d);
dy_pos = abs(ny_pos - ny_d);
if (ny_pos>=n_y);
ny_pos = ny_pos - n_y;
end;%if (ny_pos>=n_y);
d_prepre = sqrt((dx_pre).^2 + (dy_pre).^2);
d_prepos = sqrt((dx_pre).^2 + (dy_pos).^2);
d_pospre = sqrt((dx_pos).^2 + (dy_pre).^2);
d_pospos = sqrt((dx_pos).^2 + (dy_pos).^2);
flag_E=1;

% case 1;
A = d_prepre;
B = d_prepos;
C = d_pospre;
D = d_pospos;
if (flag_E) && (A<=C) && (A<=D) && (B<=C) && (B<=D);
flag_E=0;
if (A+B<=0);
output = F_(1 + nx_pre + ny_pre*n_x);
 else;
alpha = A/(A+B);
beta = B/(A+B);
output = beta*F_(1 + nx_pre + ny_pre*n_x) + alpha*F_(1 + nx_pre + ny_pos*n_x);
end;% if;
end;% if;

% case 2;
A = d_prepre;
B = d_pospre;
C = d_prepos;
D = d_pospos;
if (flag_E) && (A<=C) && (A<=D) && (B<=C) && (B<=D);
flag_E=0;
if (A+B<=0);
output = F_(1 + nx_pre + ny_pre*n_x);
 else;
alpha = A/(A+B);
beta = B/(A+B);
output = beta*F_(1 + nx_pre + ny_pre*n_x) + alpha*F_(1 + nx_pos + ny_pre*n_x);
end;%if;
end;%if;

% case 3;
A = d_prepre;
B = d_pospos;
C = d_prepos;
D = d_pospre;
if (flag_E) && (A<=C) && (A<=D) && (B<=C) && (B<=D);
flag_E=0;
if (A+B<=0);
output = F_(1 + nx_pre + ny_pre*n_x);
 else;
alpha = A/(A+B);
beta = B/(A+B);
output = beta*F_(1 + nx_pre + ny_pre*n_x) + alpha*F_(1 + nx_pos + ny_pos*n_x);
end;%if;
end;%if;

% case 4;
A = d_prepos;
B = d_pospre;
C = d_prepre;
D = d_pospos;
if (flag_E) && (A<=C) && (A<=D) && (B<=C) && (B<=D);
flag_E=0;
if (A+B<=0);
output = F_(1 + nx_pre + ny_pos*n_x);
 else;
alpha = A/(A+B);
beta = B/(A+B);
output = beta*F_(1 + nx_pre + ny_pos*n_x) + alpha*F_(1 + nx_pos + ny_pre*n_x);
end;%if;
end;%if;

% case 5;
A = d_prepos;
B = d_pospos;
C = d_prepre;
D = d_pospre;
if (flag_E) && (A<=C) && (A<=D) && (B<=C) && (B<=D);
flag_E=0;
if (A+B<=0);
output = F_(1 + nx_pre + ny_pos*n_x);
 else;
alpha = A/(A+B);
beta = B/(A+B);
output = beta*F_(1 + nx_pre + ny_pos*n_x) + alpha*F_(1 + nx_pos + ny_pos*n_x);
end;%if;
end;%if;

% case 6;
A = d_pospre;
B = d_pospos;
C = d_prepre;
D = d_prepos;
if (flag_E) && (A<=C) && (A<=D) && (B<=C) && (B<=D);
flag_E=0;
if (A+B<=0);
output = F_(1 + nx_pos + ny_pre*n_x);
 else;
alpha = A/(A+B);
beta = B/(A+B);
output = beta*F_(1 + nx_pos + ny_pre*n_x) + alpha*F_(1 + nx_pos + ny_pos*n_x);
end;%if;
end;%if;
