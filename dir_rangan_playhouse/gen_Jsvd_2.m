function [n_svd_r,svd_r_,n_svd_d,svd_d_,n_svd_l,svd_l_,svd_U_d_,svd_s_,svd_V_r_] = gen_Jsvd_2(K_max,N_pixels,eps_target,l_max);
% Generating svd-expansion of F_ (note that this factorizes by construction) ; 
% the maximum delta is chosen so that the expansion works from ;
% K_max to K_max-1 ;
% Generate svd-expansion ;
verbose=0;
if (nargin<4); l_max = 15; end;
if (verbose>1); disp(sprintf(' %% [entering gen_Jsvd_2] l_max %d',l_max)); end;%if;
eps_target = eps_target;
R_target = ceil(2*pi*K_max) ;
R_preget = ceil(2*pi*max(1,(K_max-1))) ;
z_target = N_pixels*pi*sqrt(2)*R_target/R_preget ;
D_target = z_target/R_target;
n_r = 128 ; n_d = 128 ;
r_ = linspace(0,R_target,n_r);
d_ = linspace(0,D_target,n_d);
clear S_l_ S_u_ S_s_ S_v_ ;
[R_,D_] = meshgrid(r_,d_); Z_ = R_.*D_;
l = 0; n_S = 0; continue_flag=1;
while (continue_flag);
if (l==0); l_ = [0]; else l_ = [-l,+l] ; end;
for l_tmp = l_;
J_tmp = besselj(l_tmp,Z_);
[U,S,V] = svds(J_tmp,8); S = diag(S); [S_ret] = find(S>eps_target) ;
if ~isempty(S_ret);
if (verbose>1); disp(sprintf(' %% l %+.2d, found %d terms [%0.2f,..,%0.2f];',l_tmp,length(S_ret),S(S_ret(1)),S(S_ret(end)))); end;%if
for ij = 1:length(S_ret);
S_l_(1+n_S) = l_tmp;
S_u_(:,1+n_S) = U(:,S_ret(ij));
S_s_(1,1+n_S) = S(S_ret(ij),1);
S_v_(:,1+n_S) = V(:,S_ret(ij));
n_S = n_S + 1;
end;%for ij = 1:length(S_ret);
end;%if ~isempty(S_ret);
end;% for l_tmp = l_;
l=l+1;
if (l>l_max); continue_flag=0; else continue_flag=1; end;
end;%while (continue_flag);
if (verbose>1); disp(sprintf(' %% total of n_S %d terms found;',n_S)); end%if;

n_svd_r = n_r;
svd_r_ = r_;
n_svd_d = n_d;
svd_d_ = d_;
n_svd_l = n_S;
svd_l_ = S_l_;
svd_U_d_ = S_u_;
svd_s_ = S_s_;
svd_V_r_ = S_v_;
