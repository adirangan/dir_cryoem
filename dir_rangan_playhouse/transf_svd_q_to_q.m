function M_q_ = transf_svd_q_to_q(n_svd_r,svd_r_,n_svd_d,svd_d_,n_svd_l,svd_l_,svd_U_d_,svd_s_,svd_V_r_,n_r,grid_p_,n_w_,n_A,S_q_,delta_x,delta_y);
% Assumes that M_q_ is the same size and dimensions as S_q_;
% Currently brute force convolution using svd-expansion;
% defined via n_svd_r, .. , svd_V_r_;
M_q_ = zeros(n_A,1);
delta = sqrt(delta_x.^2 + delta_y.^2);
svd_d_max = svd_d_(1+n_svd_d-1);
if (delta>svd_d_max);
disp(sprintf(' %% Warning, delta %f > svd_d_max %f in transf_svd_q_to_q',delta,svd_d_max));
end;%if;
svd_r_max = svd_r_(1+n_svd_r-1);
R_q = grid_p_(1+n_r-1);
if (2*pi*R_q>svd_r_max);
disp(sprintf(' %% Warning, 2*pi*r %f > svd_r_max %f in transf_svd_q_to_q',2*pi*R_q,svd_r_max));
end;%if;
omega = atan2(delta_y,delta_x);
n_svd_d_v = (n_svd_d-1)*delta/svd_d_max;
n_svd_d_pre = max(0,min(n_svd_d-1,floor(n_svd_d_v)));
n_svd_d_pos = max(0,min(n_svd_d-1,ceil(n_svd_d_v)));
d_svd_d_pre = abs(n_svd_d_v - n_svd_d_pre);
d_svd_d_pos = abs(n_svd_d_pos - n_svd_d_v);
if (d_svd_d_pre+d_svd_d_pos<=0.0);
alpha_d = 0.0;
beta_d = 1.0;
 else;
alpha_d = d_svd_d_pre / (d_svd_d_pre + d_svd_d_pos);
beta_d = d_svd_d_pos / (d_svd_d_pre + d_svd_d_pos);
end;%if;
C_w_ = zeros(n_svd_l,1);
ic=0;
for nr=0:n_r-1;
R_q = 2*pi*grid_p_(1+nr);
n_svd_r_v = (n_svd_r-1)*R_q/svd_r_max;
n_svd_r_pre = max(0,min(n_svd_r-1,floor(n_svd_r_v)));
n_svd_r_pos = max(0,min(n_svd_r-1,ceil(n_svd_r_v)));
d_svd_r_pre = abs(n_svd_r_v - n_svd_r_pre);
d_svd_r_pos = abs(n_svd_r_pos - n_svd_r_v);
if (d_svd_r_pre+d_svd_r_pos<=0.0);
alpha_r = 0.0;
beta_r = 1.0;
 else;
alpha_r = d_svd_r_pre / (d_svd_r_pre + d_svd_r_pos);
beta_r = d_svd_r_pos / (d_svd_r_pre + d_svd_r_pos);
end;%if;
for l=0:n_svd_l-1;
theta = svd_l_(1+l)*(pi/2 - omega);
C_w = exp(-i*theta);
D_V_r = beta_r*svd_V_r_(1+n_svd_r_pre + l*n_svd_r) + alpha_r*svd_V_r_(1+n_svd_r_pos + l*n_svd_r);
D_U_d = beta_d*svd_U_d_(1+n_svd_d_pre + l*n_svd_d) + alpha_d*svd_U_d_(1+n_svd_d_pos + l*n_svd_d);
D_s = svd_s_(1+l);
C_w_(1+l) = (D_U_d * D_s * D_V_r) * C_w;
end;%for;
for nw=0:n_w_(1+nr)-1;
M_q_(1+ic) = 0.0 + i*0.0;
for l=0:n_svd_l-1;
I_l = svd_l_(1+l);
C_q = C_w_(1+l);
nwt = periodize(nw+I_l,0,n_w_(1+nr));
M_q_(1+ic) = M_q_(1+ic) + C_q*S_q_(1+ic - nw + nwt);
end;%for;
ic = ic + 1;
end;%for;
end;%for;

