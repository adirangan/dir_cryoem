function C_p = innerproduct_qcrop(n_r,grid_p_,n_w_,n_A,T_p_,M_p_);
% assumes that M_p_ is the same size and dimensions as T_p_ ;
% assumes quasi-uniform polar-grid;
% removes q==n_w_(nr)/2 term. ;
C_p = 0.0 + i*0.0;
ic = 0;
for nr=0:n_r-1;
if (nr>0);
R_pre = 0.5*(grid_p_(1+nr-1) + grid_p_(1+nr));
 else;
R_pre = grid_p_(1+0);
end;%if;
if (nr<n_r-1);
R_pos = 0.5*(grid_p_(1+nr+1) + grid_p_(1+nr));
 else;
R_pos = grid_p_(1+n_r-1);
end;%if;
dr = R_pos - R_pre;
% We set the zero-mode to zero;
if (grid_p_(1+nr)<=0.0d0);
dr = 0.0d0;
end;%if;
dw = 2*pi/(1.0d0*max(1,n_w_(1+nr)));
dA = (R_pre*dr + (dr.^2)/2)*dw;
C_tmp = 0.0 + i*0.0;
n_w_t = floor(1.0d0*n_w_(1+nr)/2.0d0);
for nw=0:n_w_(1+nr)-1;
if (nw~=n_w_t);
C_tmp = C_tmp + conj(T_p_(1+ic))*M_p_(1+ic);
end;%if (nw~=n_w_t);
ic = ic + 1;
end;%for nw=0:n_w_(1+nr)-1;
C_tmp = C_tmp * dA;
C_p = C_p + C_tmp;
end;%for nr=0:n_r-1;
