function CTF_R_S__ = ti8_build_CTF_R_S_quad_3(verbose,n_gamma_z,gamma_z_,n_r,grid_p_,weight_p_,n_w_,n_A,n_S,I_S_sample_,ld_S,S_p__,n_CTF,ld_CTF,CTF_p__);
% %%%%%%%%%%%%%%%%%%%%%%%;
% Calculates : ;
% CTF_R_S__(ngz + n_gamma_z*(nctf + n_CTF*ns)) = Z_q_(ngz),;
% where:;
% Z_q_(ngz) = \| CTF_p_(nctf) .* R(ngz) ( S_p__(ns*ld_S) ) \|_{L^{2}} , ;
% where:;
% ".*" is a pointwise product, ;
% CTF_p_ is a CTF-function given on nonuniform polar grid,;
% S_p_ is a template given on a nonuniform polar grid,;
% and R is rotation by +gamma_z_(ngz).;
% (see test_transforms_4_dr.f for examples).;
% This calculation is carried out by considering;
% the bessel-function expansions of: ;
% dconjg(CTF_p_).*(CTF_p_);
% and;
% dconjg(S_p_).*(S_p_),;
% and appealing to the fft.;
% %%%%%%%%%%%%%%%%%%%%%%%;
if (verbose>1); disp(sprintf(' %% [entering ti8_build_CTF_R_S_quad_3]')); end;
CTF_R_S__ = zeros(n_gamma_z,1);
n_w_max = n_w_(1+n_r-1);
flag_nufft = 0;
flag_nufft = 0;
if (n_gamma_z~=n_w_max); flag_nufft=1; end;
if (n_gamma_z==n_w_max);
for nw=0:n_w_max-1;
if (abs(2*pi*nw/n_w_max - gamma_z_(1+nw))>1e-12); flag_nufft=1; end;
end;%for nw=0:n_w_max-1;
end;%if (n_gamma_z==n_w_max);
if (verbose>1);
disp(sprintf(' %% n_w_max: %d',n_w_max));
disp(sprintf(' %% flag_nufft: %d',flag_nufft));
end;%if (verbose>1);
for ns=0:n_S-1;
if (verbose>2); disp(sprintf(' %% ns %d',ns)); end;
S_p_ = S_p__(1+I_S_sample_(1+ns)*ld_S + [0:n_A-1]);
if (verbose>2);
Z_q = sum(weight_p_.*S_p_.*S_p_); Z_q = zsqrt(Z_q);%/(n_r*n_r);
disp(sprintf(' %% |S_p__(1+%d*ld_S)| %0.6f %0.6fi: ',ns,real(Z_q),imag(Z_q)));
end;%if (verbose>2);
for nctf=0:n_CTF-1;
if (verbose>2); disp(sprintf(' %% nctf: %d',nctf)); end;
CTF_p_= CTF_p__(1+nctf*ld_CTF + [0:n_A-1]);
S_q_ = interp_p_to_q(n_r,n_w_,n_A,conj(S_p_).*S_p_);
CTF_q_ = interp_p_to_q(n_r,n_w_,n_A,conj(CTF_p_).*CTF_p_);
Z_q_ = ifft(innerproduct_q_k_stretch_quad_0(n_r,grid_p_,weight_p_,n_w_,n_A,S_q_,CTF_q_))*n_w_max;
if (flag_nufft); Z_q_ = interp1_nufft(n_w_max,0.0d0,2.0d0*pi,Z_q_,gamma_z_); end;%if (flag_nufft);
for ngz=0:n_gamma_z-1;
Z_q = Z_q_(1+ngz);
CTF_R_S__(1+ngz + n_gamma_z*(nctf + n_CTF*ns)) = sqrt(Z_q);%/(n_r^2);
end;%for ngz=0:n_gamma_z-1;
end;%for nctf=0:n_CTF-1;
end;%for ns=0:n_S-1;
if (verbose>1); disp(sprintf(' %% [finished ti8_build_CTF_R_S_quad_3]')); end;

