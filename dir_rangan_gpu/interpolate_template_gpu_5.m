%{
if ~exist('wS_from_single_shell_gpu_sba__','var'); wS_from_single_shell_gpu_sba__=[]; end;
if ~exist('dwSda_from_single_shell_gpu_sba__','var'); dwSda_from_single_shell_gpu_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_gpu_sba__','var'); dwSdb_from_single_shell_gpu_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_gpu_sba__','var'); ddwSdaa_from_single_shell_gpu_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_gpu_sba__','var'); ddwSdab_from_single_shell_gpu_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_gpu_sba__','var'); ddwSdbb_from_single_shell_gpu_sba__=[]; end;
%}
function ...
[ ...
 parameter ...
,template_gpu_wkS__ ...
,n_w ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_gpu_sba__ ...
,dtemplateda_gpu_wkS__ ...
,dtemplatedb_gpu_wkS__ ...
,dtemplatedc_gpu_wkS__ ...
,dwSda_from_single_shell_gpu_sba__ ...
,dwSdb_from_single_shell_gpu_sba__ ...
,ddtemplatedaa_gpu_wkS__ ...
,ddtemplatedab_gpu_wkS__ ...
,ddtemplatedac_gpu_wkS__ ...
,ddtemplatedbb_gpu_wkS__ ...
,ddtemplatedbc_gpu_wkS__ ...
,ddtemplatedcc_gpu_wkS__ ...
,ddwSdaa_from_single_shell_gpu_sba__ ...
,ddwSdab_from_single_shell_gpu_sba__ ...
,ddwSdbb_from_single_shell_gpu_sba__ ...
] = ...
interpolate_template_gpu_5( ...
 parameter ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_gpu_qk_ ...
,viewing_k_eq_d ...
,template_k_eq_d ...
,n_w_0in ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_gpu_sba__ ...
,dwSda_from_single_shell_gpu_sba__ ...
,dwSdb_from_single_shell_gpu_sba__ ...
,ddwSdaa_from_single_shell_gpu_sba__ ...
,ddwSdab_from_single_shell_gpu_sba__ ...
,ddwSdbb_from_single_shell_gpu_sba__ ...
);
%%%%;
% Uses a_k_p_gpu_qk_ to evaluate templates on a collection of points on spherical shells. ;
% Each spherical-shell has the same resolution, determined by viewing_k_eq_d and template_k_eq_d and/or n_w_max. ;
% We assume that each spherical-shell is discretized with a (potentially adaptive) discretization with: ;
% a collection of equispaced longitudes (i.e., azimuthal-points) for each latitude (i.e., polar-point), with: ;
% polar-points equispaced from [0,pi]. ;
% Furthermore, we assume that the number of longitudes on each pole is 1, ;
% and that the number of longitudes at each other latitude is even. ;
%%%%;
% This code is largely similar to interpolate_template_4.m ;
% As an additional feature we calculate T_k_p_gpu_wkS__ as an alternative to S_k_p_gpu_wkS__. ;
% This can provide some accuracy near the poles. ;
%%%%;
% ;
% inputs: ;
% ;
% flag_verbose = integer verbosity_level. ;
% n_qk = integer total number of points in spherical discretization. ;
% n_qk_csum_ = integer array of size (n_k_p_r). n_qk_csum_(1+nk_p_r) is the number of points prior to shell nk_p_r. ;
% k_p_r_qk_ = double array of size (n_qk). k_p_r_qk_(1+na) = radius of point na. ;
% k_p_azimu_b_qk_ = double array of size (n_qk). k_p_azimu_b_qk_(1+na) = azimu_b of point na. ;
% k_p_polar_a_qk_ = double array of size (n_qk). k_p_polar_a_qk_(1+na) = azimu_b of point na. ;
% weight_3d_k_p_qk_ = double array of size (n_qk). weight_3d_k_p_qk_(1+na) = quadrature-weight (3d) for point na. ;
% weight_shell_qk_ = double array of size (n_qk). weight_shell_qk_(1+na) = quadrature-weight (shell) for point na. ;
% n_k_p_r = integer number of shells. ;
% k_p_r_ = double array of size (n_k_p_r). k_p_r_(1+nk_p_r) = radius of shell nk_p_r.
% weight_3d_k_p_r_ = double array of size (n_k_p_r). weight_3d_k_p_r_(1+nk_p_r) = quadrature-weight for shell nk_p_r. ;
% k_c_0_qk_ = double array of size (n_qk). k_c_0_qk_(1+na) = k_c_0 of point na. ;
% k_c_1_qk_ = double array of size (n_qk). k_c_1_qk_(1+na) = k_c_1 of point na. ;
% k_c_2_qk_ = double array of size (n_qk). k_c_2_qk_(1+na) = k_c_2 of point na. ;
% n_polar_a_k_ = integer array of size (n_k_p_r). n_polar_a_k_(1+nk_p_r) = number of latitudinal-lines for shell nk_p_r. ;
% polar_a_ka__ = cell-array of size (n_k_p_r). polar_a_ka__{1+nk_p_r} = double array of size n_polar_a_k_(1+nk_p_r) storing latitudes. ;
% n_azimu_b_ka__ = cell-array of size (n_k_p_r). n_azimu_b_ka__{1+nk_p_r} = integer array of size n_polar_a_k_(1+nk_p_r) storing n_azimu_b per latitude. ;
% a_k_p_gpu_qk_ = complex gpu-array of size (n_qk). a_k_p_gpu_qk_(1+na) = function-value a for point na. ;
% viewing_k_eq_d = real equatorial-distance used for sampling viewing angles and templates. ;
% template_k_eq_d = real equatorial-distance used for sampling inplane-shifts along each template. ;
% n_w_0in = integer. used if template_k_eq_d <=0; desired n_w for templates. ;
% n_viewing_S = integer. number of viewing angles (i.e., number of templates) .;
% viewing_azimu_b_S_ = real array of size (n_viewing_S,1). ;
%                        azimu_b values for each template. ;
% viewing_polar_a_S_ = real array of size (n_viewing_S,1). ;
%                        polar_a values for each template. ;
% viewing_weight_S_ = real array of size (n_viewing_S,1). ;
%                       integration weight (on shell of radius 1) for each template. ;
% n_viewing_polar_a = integer. number of distinct polar_a across the viewing angles. ;
% viewing_polar_a_ = real array of size (n_viewing_polar_a,1). ;
%                    polar_a values for each viewing_polar_a_. ;
% n_viewing_azimu_b_ = integer array of size (n_viewing_polar_a,1). ;
%                      number of azimu_b values for each polar_a. ;
%                      These azimu_b values are assumed to be equispaced on [0,2*pi). ;
% viewing_gamma_z_S_ = real gamma_z value for each template. (typically 0.0). ;
% ;
% outputs: ;
% ;
% template_gpu_wkS__ = complex array of templates. ;
%                  template_gpu_wkS__(1+nw+nk_p_r*n_w_max,1+nS) ;
%                  stores template value for angle-index nw, radial-index nk_p_r, ;
%                  and viewing_azimu_b = viewing_azimu_b_all_(1+nS). ;
%                  and viewing_polar_a = viewing_polar_a_all_(1+nS). ;
% dtemplatedx_gpu_wkS__ = complex array analogous to template_gpu_wkS__. ;
%                     stores first-derivative of template with respect to: ;
%                     x==a: polar_a ; %<-- note that the first-derivative with respect to polar_a has a different sign than wignerd_c produces. ;
%                     x==b: azimu_b ;
%                     x==c: gamma_z ;
% ddtemplatedxy_gpu_wkS__ = complex array analogous to template_gpu_wkS__. ;
%                       stores second-derivative of template with respect to x and y (see above). ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

str_thisfunction = 'interpolate_template_gpu_5';

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

if nargin<1;
disp(sprintf(' %% test with test_%s.m',str_thisfunction));
disp('returning'); return;
end;%if nargin<1;

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;
if (nargin<1+na); n_order=[]; end; na=na+1;
if (nargin<1+na); n_qk=[]; end; na=na+1;
if (nargin<1+na); n_qk_csum_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_qk_=[]; end; na=na+1;
if (nargin<1+na); k_p_azimu_b_qk_=[]; end; na=na+1;
if (nargin<1+na); k_p_polar_a_qk_=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_p_qk_=[]; end; na=na+1;
if (nargin<1+na); weight_shell_qk_=[]; end; na=na+1;
if (nargin<1+na); n_k_p_r=[]; end; na=na+1;
if (nargin<1+na); k_p_r_=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_p_r_=[]; end; na=na+1;
if (nargin<1+na); k_c_0_qk_=[]; end; na=na+1;
if (nargin<1+na); k_c_1_qk_=[]; end; na=na+1;
if (nargin<1+na); k_c_2_qk_=[]; end; na=na+1;
if (nargin<1+na); n_polar_a_k_=[]; end; na=na+1;
if (nargin<1+na); polar_a_ka__=[]; end; na=na+1;
if (nargin<1+na); n_azimu_b_ka__=[]; end; na=na+1;
if (nargin<1+na); a_k_p_gpu_qk_=[]; end; na=na+1;
if (nargin<1+na); viewing_k_eq_d=[]; end; na=na+1;
if (nargin<1+na); template_k_eq_d=[]; end; na=na+1;
if (nargin<1+na); n_w_0in=[]; end; na=na+1;
if (nargin<1+na); n_viewing_S=[]; end; na=na+1;
if (nargin<1+na); viewing_azimu_b_S_=[]; end; na=na+1;
if (nargin<1+na); viewing_polar_a_S_=[]; end; na=na+1;
if (nargin<1+na); viewing_weight_S_=[]; end; na=na+1;
if (nargin<1+na); n_viewing_polar_a=[]; end; na=na+1;
if (nargin<1+na); viewing_polar_a_=[]; end; na=na+1;
if (nargin<1+na); n_viewing_azimu_b_=[]; end; na=na+1;
if (nargin<1+na); viewing_gamma_z_S_=[]; end; na=na+1;
if (nargin<1+na); wS_from_single_shell_gpu_sba__=[]; end; na=na+1;
if (nargin<1+na); dwSda_from_single_shell_gpu_sba__=[]; end; na=na+1;
if (nargin<1+na); dwSdb_from_single_shell_gpu_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdaa_from_single_shell_gpu_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdab_from_single_shell_gpu_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdbb_from_single_shell_gpu_sba__=[]; end; na=na+1;

if isempty(parameter); parameter=struct('type','parameter'); end;
if ~isfield(parameter,'flag_verbose'); parameter.flag_verbose=0; end;
flag_verbose=parameter.flag_verbose;
if ~isfield(parameter,'flag_attend'); parameter.flag_attend=0; end;
flag_attend=parameter.flag_attend;

if (flag_verbose>0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;

f_zero = gpuArray( single(0.0));
if ~strcmp(class(a_k_p_gpu_qk_),'gpuArray'); tmp_t = tic(); a_k_p_gpu_qk_ = gpuArray( (a_k_p_gpu_qk_)); tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_p_gpu_qk_: time %0.6fs',tmp_t)); end; end;

flag_1 = 1;
flag_d = (nargout>=12);
flag_dd = (nargout>=17);

if (flag_verbose>0); disp(sprintf(' %% flag_1 %d flag_d %d flag_dd %d',flag_1,flag_d,flag_dd)); end;

if isempty(n_order); n_order = 5; end;
if isempty(viewing_gamma_z_S_); viewing_gamma_z_S_ = zeros(n_viewing_S,1); end;

%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% First determine the viewing angles.')); end;
%%%%%%%%;
if isempty(n_viewing_S);
if (flag_verbose>0); disp(sprintf(' %% calling sample_shell_5.')); end;
tmp_t = tic();
k_p_r = 1.0;
[ ...
 n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,~ ...
,~ ...
,~ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
sample_shell_5( ...
 k_p_r ...
,viewing_k_eq_d ...
,'L' ...
) ; %<-- obtain viewing angles. ;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% sample_shell_5: time %0.6fs',tmp_t)); end;
end;%if isempty(n_viewing_S);
%%%%;
if isempty(viewing_weight_S_); viewing_weight_S_ = ones(n_viewing_S,1); end;
%%%%;
if isempty(n_viewing_polar_a);
if (flag_verbose>0); disp(sprintf(' %% defining n_viewing_polar_a.')); end;
tmp_t = tic();
viewing_polar_a_ = unique(viewing_polar_a_S_); n_viewing_polar_a = numel(viewing_polar_a_);
n_viewing_azimu_b_ = zeros(n_viewing_polar_a,1);
for nviewing_polar_a=0:n_viewing_polar_a-1;
viewing_polar_a = viewing_polar_a_(1+nviewing_polar_a);
n_viewing_azimu_b_(1+nviewing_polar_a) = numel(efind(abs(viewing_polar_a_S_-viewing_polar_a)<1e-12));
end;%for nviewing_polar_a=0:n_viewing_polar_a-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% n_viewing_azimu_b_: time %0.6fs',tmp_t)); end;
end;%if isempty(n_viewing_polar_a);
%%%%;
n_viewing_azimu_b_sum = sum(n_viewing_azimu_b_);
n_viewing_azimu_b_csum_ = cumsum([0;n_viewing_azimu_b_]);
if (flag_verbose>0); disp(sprintf(' %% n_viewing_S %d n_viewing_polar_a %d n_viewing_azimu_b_sum %d',n_viewing_S,n_viewing_polar_a,n_viewing_azimu_b_sum)); end;
if (flag_verbose>2); fprintf(1,' %% \t\n'); darray_printf_margin(viewing_azimu_b_S_,1,n_viewing_S,' %% viewing_azimu_b_S_: '); end;
if (flag_verbose>2); fprintf(1,' %% \t\n'); darray_printf_margin(viewing_polar_a_S_,1,n_viewing_S,' %% viewing_polar_a_S_: '); end;
if (flag_verbose>2); fprintf(1,' %% \t\n'); darray_printf_margin(viewing_weight_S_,1,n_viewing_S,' %% viewing_weight_S_: '); end;
if (flag_verbose>2); fprintf(1,' %% \t\n'); darray_printf_margin(viewing_polar_a_,1,n_viewing_polar_a,' %% viewing_polar_a_: '); end;
if (flag_verbose>2); fprintf(1,' %% \t\n'); darray_printf_margin(n_viewing_azimu_b_,1,n_viewing_polar_a,' %% n_viewing_azimu_b_: '); end;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% Now determine the points along each equatorial plane (i.e., the points for each template).')); end;
%%%%%%%%;
n_w = 0;
if (template_k_eq_d>0);
k_p_r = 1;
n_equator = 3+round(2*pi*k_p_r/template_k_eq_d);
n_polar_a = 3+round(n_equator/2);
n_w = 2*n_polar_a;
end;%if (template_k_eq_d>0);
if (template_k_eq_d<=0);
%n_w = max(6,n_w_0in);
n_w = n_w_0in; %<-- no minimum. ;
end;%if (template_k_eq_d<=0);
if (flag_verbose>0); disp(sprintf(' %% n_w %d',n_w)); end;
n_w_max = n_w; n_w_sum = n_w_max*n_k_p_r; n_w_ = n_w_max*ones(n_k_p_r,1); n_w_csum_ = cumsum([0;n_w_]);
%%%%%%%%;
tolerance_w = 0.5*(2*pi)/max(1,n_w_max); %<-- tolerance used for correction. ;

%%%%%%%%;
% First check spherical-grid for consistency. ;
% For efficiency the spherical-grid should be generated using: ;
% flag_uniform_over_n_k_p_r = 1;
% flag_uniform_over_polar_a = 0;
% str_T_vs_L = 'C2';
% For accuracy one might consider increasing the angular-resolution (on each shell) ;
% without necessarily increasing the radial-resolution (i.e., the distance between shells). ;
%%%%%%%%;
[ ...
 parameter ...
,polar_a_single_shell_ ...
,n_azimu_b_single_shell_ ...
,n_polar_a_single_shell ...
,polar_a_single_shell_lim_ ...
,n_q_single_shell ...
,k_c_0_single_shell_ ...
,k_c_1_single_shell_ ...
,k_c_2_single_shell_ ...
,k_p_azimu_b_single_shell_ ...
,k_p_polar_a_single_shell_ ...
,weight_3d_k_single_shell_ ...
,weight_shell_qk_single_shell_ ...
,weight_shell_qk_unit_shell_ ...
] = ...
interpolate_template_consistency_check_0( ...
 parameter ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,[] ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
);

%%%%%%%%;
% Now generate great-circles for the templates. ;
%%%%%%%%;
tmp_t = tic();
if (flag_verbose>0); disp(sprintf(' %% calling cg_rhs_gpu_2.')); end;
n_S = n_viewing_S;
if  flag_1 & ~flag_d & ~flag_dd ;
[ ...
 k_p_polar_a_gpu_wS__ ...
,k_p_azimu_b_gpu_wS__ ...
,k_c_0_gpu_wS__ ...
,k_c_1_gpu_wS__ ...
,k_c_2_gpu_wS__ ...
,k_p_r01_gpu_wS__ ...
] = ...
cg_rhs_gpu_2( ...
 n_S ...
,n_w_max ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_gamma_z_S_ ...
);
end;%if  flag_1 & ~flag_d & ~flag_dd ;
if  flag_1 &  flag_d & ~flag_dd ;
[ ...
 k_p_polar_a_gpu_wS__ ...
,k_p_azimu_b_gpu_wS__ ...
,k_c_0_gpu_wS__ ...
,k_c_1_gpu_wS__ ...
,k_c_2_gpu_wS__ ...
,k_p_r01_gpu_wS__ ...
,dtau_k_p_polar_a_gpu_wS3___ ...
,dtau_k_p_azimu_b_gpu_wS3___ ...
,dtau_k_c_0_gpu_wS3___ ...
,dtau_k_c_1_gpu_wS3___ ...
,dtau_k_c_2_gpu_wS3___ ...
,dtau_k_p_r01_gpu_wS3___ ...
] = ...
cg_rhs_gpu_2( ...
 n_S ...
,n_w_max ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_gamma_z_S_ ...
);
end;%if  flag_1 &  flag_d & ~flag_dd ;
if  flag_1 &  flag_d &  flag_dd ;
[ ...
 k_p_polar_a_gpu_wS__ ...
,k_p_azimu_b_gpu_wS__ ...
,k_c_0_gpu_wS__ ...
,k_c_1_gpu_wS__ ...
,k_c_2_gpu_wS__ ...
,k_p_r01_gpu_wS__ ...
,dtau_k_p_polar_a_gpu_wS3___ ...
,dtau_k_p_azimu_b_gpu_wS3___ ...
,dtau_k_c_0_gpu_wS3___ ...
,dtau_k_c_1_gpu_wS3___ ...
,dtau_k_c_2_gpu_wS3___ ...
,dtau_k_p_r01_gpu_wS3___ ...
,dtau_dtau_k_p_polar_a_gpu_wS33____ ...
,dtau_dtau_k_p_azimu_b_gpu_wS33____ ...
,dtau_dtau_k_c_0_gpu_wS33____ ...
,dtau_dtau_k_c_1_gpu_wS33____ ...
,dtau_dtau_k_c_2_gpu_wS33____ ...
,dtau_dtau_k_p_r01_gpu_wS33____ ...
] = ...
cg_rhs_gpu_2( ...
 n_S ...
,n_w_max ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_gamma_z_S_ ...
);
end;%if  flag_1 &  flag_d &  flag_dd ;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% cg_rhs_gpu_2: time %0.6fs',tmp_t)); end;
%%%%%%%%;
tmp_t = tic();
n_wS = n_w_max*n_S; n_3 = 3;
k_p_polar_a_gpu_wS_ = gpuArray( reshape(k_p_polar_a_gpu_wS__,[n_wS,1]) );
k_p_azimu_b_gpu_wS_ = gpuArray( reshape(k_p_azimu_b_gpu_wS__,[n_wS,1]) );
k_c_0_gpu_wS_ = gpuArray( reshape(k_c_0_gpu_wS__,[n_wS,1]) );
k_c_1_gpu_wS_ = gpuArray( reshape(k_c_1_gpu_wS__,[n_wS,1]) );
k_c_2_gpu_wS_ = gpuArray( reshape(k_c_2_gpu_wS__,[n_wS,1]) );
k_p_r01_gpu_wS_ = gpuArray( reshape(k_p_r01_gpu_wS__,[n_wS,1]) );
if flag_d;
dtau_k_p_polar_a_gpu_wS3__ = gpuArray( reshape(dtau_k_p_polar_a_gpu_wS3___,[n_wS,n_3]) );
dtau_k_p_azimu_b_gpu_wS3__ = gpuArray( reshape(dtau_k_p_azimu_b_gpu_wS3___,[n_wS,n_3]) );
dtau_k_c_0_gpu_wS3__ = gpuArray( reshape(dtau_k_c_0_gpu_wS3___,[n_wS,n_3]) );
dtau_k_c_1_gpu_wS3__ = gpuArray( reshape(dtau_k_c_1_gpu_wS3___,[n_wS,n_3]) );
dtau_k_c_2_gpu_wS3__ = gpuArray( reshape(dtau_k_c_2_gpu_wS3___,[n_wS,n_3]) );
dtau_k_p_r01_gpu_wS3__ = gpuArray( reshape(dtau_k_p_r01_gpu_wS3___,[n_wS,n_3]) );
end;%if flag_d;
if flag_dd;
dtau_dtau_k_p_polar_a_gpu_wS33___ = gpuArray( reshape(dtau_dtau_k_p_polar_a_gpu_wS33____,[n_wS,n_3,n_3]) );
dtau_dtau_k_p_azimu_b_gpu_wS33___ = gpuArray( reshape(dtau_dtau_k_p_azimu_b_gpu_wS33____,[n_wS,n_3,n_3]) );
dtau_dtau_k_c_0_gpu_wS33___ = gpuArray( reshape(dtau_dtau_k_c_0_gpu_wS33____,[n_wS,n_3,n_3]) );
dtau_dtau_k_c_1_gpu_wS33___ = gpuArray( reshape(dtau_dtau_k_c_1_gpu_wS33____,[n_wS,n_3,n_3]) );
dtau_dtau_k_c_2_gpu_wS33___ = gpuArray( reshape(dtau_dtau_k_c_2_gpu_wS33____,[n_wS,n_3,n_3]) );
dtau_dtau_k_p_r01_gpu_wS33___ = gpuArray( reshape(dtau_dtau_k_p_r01_gpu_wS33____,[n_wS,n_3,n_3]) );
end;%if flag_dd;
n_attend = 0;
if flag_attend==0;
% skipping any lsq-correction. ;
end;%if flag_attend==0;
if flag_attend==1;
disp(sprintf(' %% Warning, flag_attend==1 in %s',str_thisfunction));
end;%if flag_attend==1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% reshaping + n_attend: time %0.6fs',tmp_t)); end;

%%%%%%%%;
% Now generate the interpolation operator. ;
%%%%%%%%;
if  flag_1 & ~flag_d & ~flag_dd
if isempty(wS_from_single_shell_gpu_sba__);
if (flag_verbose>0); disp(sprintf(' %% calling shell_k_p_scatter_from_adaptive_interpolate_n_gpu_9.')); end;
tmp_t = tic();
[ ...
 wS_from_single_shell_gpu_sba__ ...
] = ...
shell_k_p_scatter_from_adaptive_interpolate_n_gpu_9( ...
 n_order ...
,n_polar_a_single_shell ...
,n_azimu_b_single_shell_ ...
,polar_a_single_shell_lim_ ...
,n_wS ...
,k_p_polar_a_gpu_wS_ ...
,k_p_azimu_b_gpu_wS_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% shell_k_p_scatter_from_adaptive_interpolate_n_gpu_9 (flag_1): time %0.6fs',tmp_t)); end;
end;%if isempty(wS_from_single_shell_gpu_sba__);
end;%if  flag_1 & ~flag_d & ~flag_dd
if  flag_1 &  flag_d & ~flag_dd
if ...
0 ...
|isempty(wS_from_single_shell_gpu_sba__) ...
|isempty(dwSda_from_single_shell_gpu_sba__) ...
|isempty(dwSdb_from_single_shell_gpu_sba__) ...
;
if (flag_verbose>0); disp(sprintf(' %% calling shell_k_p_scatter_from_adaptive_interpolate_n_gpu_9.')); end;
tmp_t = tic();
[ ...
 wS_from_single_shell_gpu_sba__ ...
,dwSda_from_single_shell_gpu_sba__ ...
,dwSdb_from_single_shell_gpu_sba__ ...
] = ...
shell_k_p_scatter_from_adaptive_interpolate_n_gpu_9( ...
 n_order ...
,n_polar_a_single_shell ...
,n_azimu_b_single_shell_ ...
,polar_a_single_shell_lim_ ...
,n_wS ...
,k_p_polar_a_gpu_wS_ ...
,k_p_azimu_b_gpu_wS_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% shell_k_p_scatter_from_adaptive_interpolate_n_gpu_9 (flag_d): time %0.6fs',tmp_t)); end;
end;%if;
end;%if  flag_1 &  flag_d & ~flag_dd
if  flag_1 &  flag_d &  flag_dd
if ...
0 ...
|isempty(wS_from_single_shell_gpu_sba__) ...
|isempty(dwSda_from_single_shell_gpu_sba__) ...
|isempty(dwSdb_from_single_shell_gpu_sba__) ...
|isempty(ddwSdaa_from_single_shell_gpu_sba__) ...
|isempty(ddwSdab_from_single_shell_gpu_sba__) ...
|isempty(ddwSdbb_from_single_shell_gpu_sba__) ...
;
if (flag_verbose>0); disp(sprintf(' %% calling shell_k_p_scatter_from_adaptive_interpolate_n_gpu_9.')); end;
tmp_t = tic();
[ ...
 wS_from_single_shell_gpu_sba__ ...
,dwSda_from_single_shell_gpu_sba__ ...
,dwSdb_from_single_shell_gpu_sba__ ...
,ddwSdaa_from_single_shell_gpu_sba__ ...
,ddwSdab_from_single_shell_gpu_sba__ ...
,ddwSdbb_from_single_shell_gpu_sba__ ...
] = ...
shell_k_p_scatter_from_adaptive_interpolate_n_gpu_9( ...
 n_order ...
,n_polar_a_single_shell ...
,n_azimu_b_single_shell_ ...
,polar_a_single_shell_lim_ ...
,n_wS ...
,k_p_polar_a_gpu_wS_ ...
,k_p_azimu_b_gpu_wS_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% shell_k_p_scatter_from_adaptive_interpolate_n_gpu_9 (flag_dd): time %0.6fs',tmp_t)); end;
end;%if;
end;%if  flag_1 &  flag_d &  flag_dd
%%%%%%%%;

%%%%%%%%;
if sum(~isfinite(wS_from_single_shell_gpu_sba__),'all')> 0; disp(sprintf(' %% Warning, wS_from_single_shell_gpu_sba__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dwSda_from_single_shell_gpu_sba__),'all')> 0; disp(sprintf(' %% Warning, dwSda_from_single_shell_gpu_sba__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dwSdb_from_single_shell_gpu_sba__),'all')> 0; disp(sprintf(' %% Warning, dwSdb_from_single_shell_gpu_sba__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddwSdaa_from_single_shell_gpu_sba__),'all')> 0; disp(sprintf(' %% Warning, ddwSdaa_from_single_shell_gpu_sba__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddwSdab_from_single_shell_gpu_sba__),'all')> 0; disp(sprintf(' %% Warning, ddwSdab_from_single_shell_gpu_sba__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddwSdbb_from_single_shell_gpu_sba__),'all')> 0; disp(sprintf(' %% Warning, ddwSdbb_from_single_shell_gpu_sba__ not finite in %s',str_thisfunction)); end;
%%%%%%%%;

%%%%%%%%;
% Now apply the interpolation operator. ;
% Note that the derivatives with respect to gamma_z (i.e., tab_c) are opposite to sph_template_3. ;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% applying interpolation operator.')); end;
tmp_t_0 = tic();
S_k_p_gpu_wSk__ = gpuArray( zeros(n_wS,n_k_p_r) );
if flag_d;
dSda_k_p_gpu_wSk__ = gpuArray( zeros(n_wS,n_k_p_r) );
dSdb_k_p_gpu_wSk__ = gpuArray( zeros(n_wS,n_k_p_r) );
dSdc_k_p_gpu_wSk__ = gpuArray( zeros(n_wS,n_k_p_r) );
end;%if flag_d;
if flag_dd;
ddSdaa_k_p_gpu_wSk__ = gpuArray( zeros(n_wS,n_k_p_r) );
ddSdab_k_p_gpu_wSk__ = gpuArray( zeros(n_wS,n_k_p_r) );
ddSdac_k_p_gpu_wSk__ = gpuArray( zeros(n_wS,n_k_p_r) );
ddSdbb_k_p_gpu_wSk__ = gpuArray( zeros(n_wS,n_k_p_r) );
ddSdbc_k_p_gpu_wSk__ = gpuArray( zeros(n_wS,n_k_p_r) );
ddSdcc_k_p_gpu_wSk__ = gpuArray( zeros(n_wS,n_k_p_r) );
end;%if flag_dd;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
tab_a = 0; tab_b = 1; tab_c = 2;
for nk_p_r=0:n_k_p_r-1;
if (flag_verbose>0); disp(sprintf(' %% nk_p_r %d/%d',nk_p_r,n_k_p_r)); end;
tmp_t_1 = tic();
a_k_p_single_shell_gpu_ = a_k_p_gpu_qk_(1+nk_p_r*n_q_single_shell+[0:n_q_single_shell-1]);
S_k_p_gpu_wS_ = wS_from_single_shell_gpu_sba__*a_k_p_single_shell_gpu_;
if flag_d;
dSda_k_p_gpu_wS_ = dwSda_from_single_shell_gpu_sba__*a_k_p_single_shell_gpu_;
dSdb_k_p_gpu_wS_ = dwSdb_from_single_shell_gpu_sba__*a_k_p_single_shell_gpu_;
end;%if flag_d;
if flag_dd;
ddSdaa_k_p_gpu_wS_ = ddwSdaa_from_single_shell_gpu_sba__*a_k_p_single_shell_gpu_;
ddSdab_k_p_gpu_wS_ = ddwSdab_from_single_shell_gpu_sba__*a_k_p_single_shell_gpu_;
ddSdbb_k_p_gpu_wS_ = ddwSdbb_from_single_shell_gpu_sba__*a_k_p_single_shell_gpu_;
end;%if flag_dd;
tmp_t_1 = toc(tmp_t_1); if (flag_verbose>0); disp(sprintf(' %% extract ddSdxx_k_p_gpu_wS_: time %0.6fs',tmp_t_1)); end;
%%%%%%%%;
S_k_p_gpu_wSk__(:,1+nk_p_r) = S_k_p_gpu_wS_;
if flag_d;
tmp_t_1 = tic();
dSda_k_p_gpu_wSk__(:,1+nk_p_r) = ...
+ bsxfun(@times,dSda_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_a)) ...
+ bsxfun(@times,dSdb_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_a)) ...
;
dSdb_k_p_gpu_wSk__(:,1+nk_p_r) = ...
+ bsxfun(@times,dSda_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_b)) ...
+ bsxfun(@times,dSdb_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_b)) ...
;
dSdc_k_p_gpu_wSk__(:,1+nk_p_r) = ...
+ bsxfun(@times,dSda_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_c)) ...
+ bsxfun(@times,dSdb_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_c)) ...
;
tmp_t_1 = toc(tmp_t_1); if (flag_verbose>0); disp(sprintf(' %% calculate dSdx_k_p_gpu_wSk__: time %0.6fs',tmp_t_1)); end;
end;%if flag_d;
if flag_dd;
tmp_t_1 = tic();
ddSdaa_k_p_gpu_wSk__(:,1+nk_p_r) = ...
+ 1.0*bsxfun(@times,dSda_k_p_gpu_wS_,dtau_dtau_k_p_polar_a_gpu_wS33___(:,1+tab_a,1+tab_a)) ...
+ 1.0*bsxfun(@times,dSdb_k_p_gpu_wS_,dtau_dtau_k_p_azimu_b_gpu_wS33___(:,1+tab_a,1+tab_a)) ...
+ 1.0*bsxfun(@times,ddSdaa_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_a).*dtau_k_p_polar_a_gpu_wS3__(:,1+tab_a)) ...
+ 1.0*bsxfun(@times,ddSdab_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_a).*dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_a)) ...
+ 1.0*bsxfun(@times,ddSdab_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_a).*dtau_k_p_polar_a_gpu_wS3__(:,1+tab_a)) ...
+ 1.0*bsxfun(@times,ddSdbb_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_a).*dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_a)) ...
;
ddSdab_k_p_gpu_wSk__(:,1+nk_p_r) = ...
+ 1.0*bsxfun(@times,dSda_k_p_gpu_wS_,dtau_dtau_k_p_polar_a_gpu_wS33___(:,1+tab_a,1+tab_b)) ...
+ 1.0*bsxfun(@times,dSdb_k_p_gpu_wS_,dtau_dtau_k_p_azimu_b_gpu_wS33___(:,1+tab_a,1+tab_b)) ...
+ 1.0*bsxfun(@times,ddSdaa_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_a).*dtau_k_p_polar_a_gpu_wS3__(:,1+tab_b)) ...
+ 1.0*bsxfun(@times,ddSdab_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_a).*dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_b)) ...
+ 1.0*bsxfun(@times,ddSdab_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_a).*dtau_k_p_polar_a_gpu_wS3__(:,1+tab_b)) ...
+ 1.0*bsxfun(@times,ddSdbb_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_a).*dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_b)) ...
;
ddSdac_k_p_gpu_wSk__(:,1+nk_p_r) = ...
+ 1.0*bsxfun(@times,dSda_k_p_gpu_wS_,dtau_dtau_k_p_polar_a_gpu_wS33___(:,1+tab_a,1+tab_c)) ...
+ 1.0*bsxfun(@times,dSdb_k_p_gpu_wS_,dtau_dtau_k_p_azimu_b_gpu_wS33___(:,1+tab_a,1+tab_c)) ...
+ 1.0*bsxfun(@times,ddSdaa_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_a).*dtau_k_p_polar_a_gpu_wS3__(:,1+tab_c)) ...
+ 1.0*bsxfun(@times,ddSdab_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_a).*dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_c)) ...
+ 1.0*bsxfun(@times,ddSdab_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_a).*dtau_k_p_polar_a_gpu_wS3__(:,1+tab_c)) ...
+ 1.0*bsxfun(@times,ddSdbb_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_a).*dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_c)) ...
;
ddSdbb_k_p_gpu_wSk__(:,1+nk_p_r) = ...
+ 1.0*bsxfun(@times,dSda_k_p_gpu_wS_,dtau_dtau_k_p_polar_a_gpu_wS33___(:,1+tab_b,1+tab_b)) ...
+ 1.0*bsxfun(@times,dSdb_k_p_gpu_wS_,dtau_dtau_k_p_azimu_b_gpu_wS33___(:,1+tab_b,1+tab_b)) ...
+ 1.0*bsxfun(@times,ddSdaa_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_b).*dtau_k_p_polar_a_gpu_wS3__(:,1+tab_b)) ...
+ 1.0*bsxfun(@times,ddSdab_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_b).*dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_b)) ...
+ 1.0*bsxfun(@times,ddSdab_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_b).*dtau_k_p_polar_a_gpu_wS3__(:,1+tab_b)) ...
+ 1.0*bsxfun(@times,ddSdbb_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_b).*dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_b)) ...
;
ddSdbc_k_p_gpu_wSk__(:,1+nk_p_r) = ...
+ 1.0*bsxfun(@times,dSda_k_p_gpu_wS_,dtau_dtau_k_p_polar_a_gpu_wS33___(:,1+tab_b,1+tab_c)) ...
+ 1.0*bsxfun(@times,dSdb_k_p_gpu_wS_,dtau_dtau_k_p_azimu_b_gpu_wS33___(:,1+tab_b,1+tab_c)) ...
+ 1.0*bsxfun(@times,ddSdaa_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_b).*dtau_k_p_polar_a_gpu_wS3__(:,1+tab_c)) ...
+ 1.0*bsxfun(@times,ddSdab_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_b).*dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_c)) ...
+ 1.0*bsxfun(@times,ddSdab_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_b).*dtau_k_p_polar_a_gpu_wS3__(:,1+tab_c)) ...
+ 1.0*bsxfun(@times,ddSdbb_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_b).*dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_c)) ...
;
ddSdcc_k_p_gpu_wSk__(:,1+nk_p_r) = ...
+ 1.0*bsxfun(@times,dSda_k_p_gpu_wS_,dtau_dtau_k_p_polar_a_gpu_wS33___(:,1+tab_c,1+tab_c)) ...
+ 1.0*bsxfun(@times,dSdb_k_p_gpu_wS_,dtau_dtau_k_p_azimu_b_gpu_wS33___(:,1+tab_c,1+tab_c)) ...
+ 1.0*bsxfun(@times,ddSdaa_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_c).*dtau_k_p_polar_a_gpu_wS3__(:,1+tab_c)) ...
+ 1.0*bsxfun(@times,ddSdab_k_p_gpu_wS_,dtau_k_p_polar_a_gpu_wS3__(:,1+tab_c).*dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_c)) ...
+ 1.0*bsxfun(@times,ddSdab_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_c).*dtau_k_p_polar_a_gpu_wS3__(:,1+tab_c)) ...
+ 1.0*bsxfun(@times,ddSdbb_k_p_gpu_wS_,dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_c).*dtau_k_p_azimu_b_gpu_wS3__(:,1+tab_c)) ...
;
tmp_t_1 = toc(tmp_t_1); if (flag_verbose>0); disp(sprintf(' %% calculate ddSdxx_k_p_gpu_wSk__: time %0.6fs',tmp_t_1)); end;
end;%if flag_dd;
%%%%%%%%%%%%%%%%;
if ~flag_attend | n_attend==0;
if (flag_verbose>0); disp(sprintf(' %% skipping any lsq-correction')); end;
end;%if ~flag_attend | n_attend==0;
%%%%%%%%%%%%%%%%;
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
tmp_t_0 = toc(tmp_t_0); if (flag_verbose>0); disp(sprintf(' %% applying interpolation operator: time %0.6fs',tmp_t_0)); end;

%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% permuting template values.')); end;
tmp_t = tic();
S_k_p_gpu_wkS__ = reshape(permute(reshape(S_k_p_gpu_wSk__,[n_w_max,n_S,n_k_p_r]),[1,3,2]),[n_w_sum,n_S]);
if flag_d;
if (flag_verbose>0); disp(sprintf(' %% permuting dtemplate values.')); end;
dSda_k_p_gpu_wkS__ = reshape(permute(reshape(dSda_k_p_gpu_wSk__,[n_w_max,n_S,n_k_p_r]),[1,3,2]),[n_w_sum,n_S]);
dSdb_k_p_gpu_wkS__ = reshape(permute(reshape(dSdb_k_p_gpu_wSk__,[n_w_max,n_S,n_k_p_r]),[1,3,2]),[n_w_sum,n_S]);
dSdc_k_p_gpu_wkS__ = reshape(permute(reshape(dSdc_k_p_gpu_wSk__,[n_w_max,n_S,n_k_p_r]),[1,3,2]),[n_w_sum,n_S]);
end;%if flag_d;
if flag_dd;
if (flag_verbose>0); disp(sprintf(' %% permuting ddtemplate values.')); end;
ddSdaa_k_p_gpu_wkS__ = reshape(permute(reshape(ddSdaa_k_p_gpu_wSk__,[n_w_max,n_S,n_k_p_r]),[1,3,2]),[n_w_sum,n_S]);
ddSdab_k_p_gpu_wkS__ = reshape(permute(reshape(ddSdab_k_p_gpu_wSk__,[n_w_max,n_S,n_k_p_r]),[1,3,2]),[n_w_sum,n_S]);
ddSdac_k_p_gpu_wkS__ = reshape(permute(reshape(ddSdac_k_p_gpu_wSk__,[n_w_max,n_S,n_k_p_r]),[1,3,2]),[n_w_sum,n_S]);
ddSdbb_k_p_gpu_wkS__ = reshape(permute(reshape(ddSdbb_k_p_gpu_wSk__,[n_w_max,n_S,n_k_p_r]),[1,3,2]),[n_w_sum,n_S]);
ddSdbc_k_p_gpu_wkS__ = reshape(permute(reshape(ddSdbc_k_p_gpu_wSk__,[n_w_max,n_S,n_k_p_r]),[1,3,2]),[n_w_sum,n_S]);
ddSdcc_k_p_gpu_wkS__ = reshape(permute(reshape(ddSdcc_k_p_gpu_wSk__,[n_w_max,n_S,n_k_p_r]),[1,3,2]),[n_w_sum,n_S]);
end;%if flag_dd;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% permuting template values: time %0.6fs',tmp_t)); end;
%%%%%%%%;

%%%%%%%%;
% Copying to output. ;
%%%%%%%%;
tmp_t = tic();
if flag_1; template_gpu_wkS__ = S_k_p_gpu_wkS__; end;
if flag_d;
dtemplateda_gpu_wkS__ = dSda_k_p_gpu_wkS__;
dtemplatedb_gpu_wkS__ = dSdb_k_p_gpu_wkS__;
dtemplatedc_gpu_wkS__ = dSdc_k_p_gpu_wkS__;
end;%if flag_d;
if flag_dd;
ddtemplatedaa_gpu_wkS__ = ddSdaa_k_p_gpu_wkS__;
ddtemplatedab_gpu_wkS__ = ddSdab_k_p_gpu_wkS__;
ddtemplatedac_gpu_wkS__ = ddSdac_k_p_gpu_wkS__;
ddtemplatedbb_gpu_wkS__ = ddSdbb_k_p_gpu_wkS__;
ddtemplatedbc_gpu_wkS__ = ddSdbc_k_p_gpu_wkS__;
ddtemplatedcc_gpu_wkS__ = ddSdcc_k_p_gpu_wkS__;
end;%if flag_dd;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% copying to output: time %0.6fs',tmp_t)); end;
%%%%%%%%;

%%%%%%%%;
if flag_1;
if sum(~isfinite(template_gpu_wkS__),'all')> 0; disp(sprintf(' %% Warning, template_gpu_wkS__ not finite in %s',str_thisfunction)); end;
end;%if flag_1;
if sum(~isfinite(n_w),'all')> 0; disp(sprintf(' %% Warning, n_w not finite in %s',str_thisfunction)); end;
if sum(~isfinite(n_viewing_S),'all')> 0; disp(sprintf(' %% Warning, n_viewing_S not finite in %s',str_thisfunction)); end;
if sum(~isfinite(viewing_azimu_b_S_),'all')> 0; disp(sprintf(' %% Warning, viewing_azimu_b_S_ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(viewing_polar_a_S_),'all')> 0; disp(sprintf(' %% Warning, viewing_polar_a_S_ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(viewing_weight_S_),'all')> 0; disp(sprintf(' %% Warning, viewing_weight_S_ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(n_viewing_polar_a),'all')> 0; disp(sprintf(' %% Warning, n_viewing_polar_a not finite in %s',str_thisfunction)); end;
if sum(~isfinite(viewing_polar_a_),'all')> 0; disp(sprintf(' %% Warning, viewing_polar_a_ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(n_viewing_azimu_b_),'all')> 0; disp(sprintf(' %% Warning, n_viewing_azimu_b_ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(viewing_gamma_z_S_),'all')> 0; disp(sprintf(' %% Warning, viewing_gamma_z_S_ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(wS_from_single_shell_gpu_sba__),'all')> 0; disp(sprintf(' %% Warning, wS_from_single_shell_gpu_sba__ not finite in %s',str_thisfunction)); end;
if flag_d;
if sum(~isfinite(dtemplateda_gpu_wkS__),'all')> 0; disp(sprintf(' %% Warning, dtemplateda_gpu_wkS__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dtemplatedb_gpu_wkS__),'all')> 0; disp(sprintf(' %% Warning, dtemplatedb_gpu_wkS__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dtemplatedc_gpu_wkS__),'all')> 0; disp(sprintf(' %% Warning, dtemplatedc_gpu_wkS__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dwSda_from_single_shell_gpu_sba__),'all')> 0; disp(sprintf(' %% Warning, dwSda_from_single_shell_gpu_sba__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dwSdb_from_single_shell_gpu_sba__),'all')> 0; disp(sprintf(' %% Warning, dwSdb_from_single_shell_gpu_sba__ not finite in %s',str_thisfunction)); end;
end;%if flag_d;
if flag_dd;
if sum(~isfinite(ddtemplatedaa_gpu_wkS__),'all')> 0; disp(sprintf(' %% Warning, ddtemplatedaa_gpu_wkS__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddtemplatedab_gpu_wkS__),'all')> 0; disp(sprintf(' %% Warning, ddtemplatedab_gpu_wkS__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddtemplatedac_gpu_wkS__),'all')> 0; disp(sprintf(' %% Warning, ddtemplatedac_gpu_wkS__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddtemplatedbb_gpu_wkS__),'all')> 0; disp(sprintf(' %% Warning, ddtemplatedbb_gpu_wkS__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddtemplatedbc_gpu_wkS__),'all')> 0; disp(sprintf(' %% Warning, ddtemplatedbc_gpu_wkS__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddtemplatedcc_gpu_wkS__),'all')> 0; disp(sprintf(' %% Warning, ddtemplatedcc_gpu_wkS__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddwSdaa_from_single_shell_gpu_sba__),'all')> 0; disp(sprintf(' %% Warning, ddwSdaa_from_single_shell_gpu_sba__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddwSdab_from_single_shell_gpu_sba__),'all')> 0; disp(sprintf(' %% Warning, ddwSdab_from_single_shell_gpu_sba__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddwSdbb_from_single_shell_gpu_sba__),'all')> 0; disp(sprintf(' %% Warning, ddwSdbb_from_single_shell_gpu_sba__ not finite in %s',str_thisfunction)); end;
end;%if flag_dd;
%%%%%%%%;

if (flag_verbose>0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;



