function ...
[ ...
 parameter ...
] = ...
kappa_gpu_basic_recon_4( ...
 parameter ...
);

str_thisfunction = 'kappa_gpu_basic_recon_4';

%%%%%%%%;
if nargin<1;
disp(sprintf(' %% testing %s',str_thisfunction));
parameter = struct('type','parameter'); parameter.flag_verbose = 1; parameter.flag_disp = 1; parameter.flag_check = 0;
parameter.flag_recalc_qref_from_data=0;
parameter.flag_recalc_dtau_qref_from_data=0;
parameter.flag_recalc_dtau_dtau_qref_from_data=0;
parameter.kernel_basic_l_max_use = 24;
parameter.kernel_basic_l_max_band = floor(24/2)-1;%parameter.kernel_basic_l_max_band = +Inf;
parameter.kernel_basic_l_max_ext = ceil(1.25*parameter.kernel_basic_l_max_use);
parameter.flag_kernel_full = 1; %<-- if set to 1 then use full brute-force kernel. ;
parameter.kernel_basic_qref_k_eq_d_double = [];
kappa_gpu_basic_recon_4( ...
 parameter ...
);
disp('returning'); return;
end;%if nargin<1;
%%%%%%%%;

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;

l_max=[];
kappa_norm_=[];
chebfun_kernel_norm_=[];
deconvolve_q=[];
relative_error_full_=[];
chebleg_d_=[];
k_p_r_max=[];
k_eq_d=[];
n_k_p_r=[];
k_p_r_1=[];
k_p_r_=[];
n_shell=[];
azimu_b_shell_=[];
polar_a_shell_=[];
weight_shell_=[];
k_c_0_shell_=[];
k_c_1_shell_=[];
k_c_2_shell_=[];
k_p_r_shell_=[];
n_lm=[];
m_max_=[];
n_m_max=[];
Y_l_val_=[];
Y_m_val_=[];
weight_3d_k_p_r_=[];

if isempty(parameter); parameter=struct('type','parameter'); end;
if ~isfield(parameter,'flag_verbose'); parameter.flag_verbose=0; end;
flag_verbose=parameter.flag_verbose;
if ~isfield(parameter,'flag_disp'); parameter.flag_disp=0; end;
flag_disp=parameter.flag_disp; nf=0;
if ~isfield(parameter,'flag_check'); parameter.flag_check=0; end;
flag_check=parameter.flag_check;
if ~isfield(parameter,'tolerance_master'); parameter.tolerance_master=1e-2; end;
tolerance_master=parameter.tolerance_master;
if ~isfield(parameter,'kernel_basic_l_max_use'); parameter.kernel_basic_l_max_use=49; end;
kernel_basic_l_max_use=parameter.kernel_basic_l_max_use;
if ~isfield(parameter,'kernel_basic_l_max_ext'); parameter.kernel_basic_l_max_ext=ceil(1.25*kernel_basic_l_max_use); end;
kernel_basic_l_max_ext=parameter.kernel_basic_l_max_ext;
if ~isfield(parameter,'kernel_basic_l_max_band'); parameter.kernel_basic_l_max_band=+Inf; end;
kernel_basic_l_max_band=parameter.kernel_basic_l_max_band;
if ~isfield(parameter,'kernel_basic_qref_k_eq_d_double'); parameter.kernel_basic_qref_k_eq_d_double=[]; end;
kernel_basic_qref_k_eq_d_double=parameter.kernel_basic_qref_k_eq_d_double;
%%%%;
if ~isfield(parameter,'flag_recalc_qref_from_data'); parameter.flag_recalc_qref_from_data=1; end;
flag_recalc_qref_from_data=parameter.flag_recalc_qref_from_data;
if ~isfield(parameter,'flag_recalc_dtau_qref_from_data'); parameter.flag_recalc_dtau_qref_from_data=1; end;
flag_recalc_dtau_qref_from_data=parameter.flag_recalc_dtau_qref_from_data;
if ~isfield(parameter,'flag_recalc_dtau_dtau_qref_from_data'); parameter.flag_recalc_dtau_dtau_qref_from_data=1; end;
flag_recalc_dtau_dtau_qref_from_data=parameter.flag_recalc_dtau_dtau_qref_from_data;
%%%%;

if (flag_verbose> 0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;

%%%%%%%%;
if isempty(l_max); l_max = kernel_basic_l_max_use; end;
l_val_ = transpose([0:l_max]);
%%%%%%%%;
% generating KAPPA. ;
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_verbose = 0; parameter.flag_disp = 0;
parameter.kernel_basic_l_max_use = kernel_basic_l_max_use;
parameter.kernel_basic_l_max_ext = ceil(1.25*parameter.kernel_basic_l_max_use);
parameter.kernel_basic_l_max_band = floor(parameter.kernel_basic_l_max_use/2)-1;
parameter.flag_kernel_full = 1; %<-- if set to 1 then use basic. ;
[ ...
 ~ ...
,KAPPA ...
,qref_k_eq_d ...
,qref_n_shell ...
,qref_azimu_b_shell_ ...
,qref_polar_a_shell_ ...
,qref_weight_shell_ ...
,qref_k_c_0_shell_ ...
,qref_k_c_1_shell_ ...
,qref_k_c_2_shell_ ...
,qref_n_polar_a ...
,qref_polar_a_ ...
,qref_n_azimu_b_ ...
] = ...
kappa_basic_1( ...
 parameter ...
);
%%%%%%%%;
flag_verbose = 1; flag_disp = 1; nf=0;
l_max = KAPPA.l_max_use;
l_max_band = KAPPA.l_max_band;
Rz = KAPPA.Rz;
dRz = KAPPA.dRz;
Ry = KAPPA.Ry;
dRy = KAPPA.dRy;
kappa_norm_ = KAPPA.kappa_norm_;
flag_kernel_full = KAPPA.flag_kernel_full;
n_nearest_total = KAPPA.n_nearest_total;
qref_k_eq_d = KAPPA.qref_k_eq_d;
qref_n_shell = KAPPA.qref_n_shell;
qref_azimu_b_shell_ = KAPPA.qref_azimu_b_shell_;
qref_polar_a_shell_ = KAPPA.qref_polar_a_shell_;
qref_weight_shell_ = KAPPA.qref_weight_shell_;
qref_k_c_0_shell_ = KAPPA.qref_k_c_0_shell_;
qref_k_c_1_shell_ = KAPPA.qref_k_c_1_shell_;
qref_k_c_2_shell_ = KAPPA.qref_k_c_2_shell_;
qref_n_polar_a = KAPPA.qref_n_polar_a;
qref_polar_a_ = KAPPA.qref_polar_a_;
qref_n_azimu_b_ = KAPPA.qref_n_azimu_b_;
qref_k_c_qc__ = KAPPA.qref_k_c_qc__;
a_full_node_ = KAPPA.a_full_node_;
n_a_use = numel(a_full_node_);
chebfun_kernel_norm_ = KAPPA.chebfun_kernel_norm_;
if (flag_verbose>0);
  disp(sprintf(' %% KAPPA.qref_k_eq_d %+0.6f',KAPPA.qref_k_eq_d));
  disp(sprintf(' %% KAPPA.n_nearest_total %+0.6f',KAPPA.n_nearest_total));
  disp(sprintf(' %% KAPPA.qref_n_shell %+0.6f',KAPPA.qref_n_shell));
  disp(sprintf(' %% KAPPA.qref_n_polar_a %+0.6f',KAPPA.qref_n_polar_a));
end;%if (flag_verbose>0);
%%%%;
% build grid on shell. ;
%%%%;
k_p_r_max = 48.0/(2*pi);
n_k_p_r = 2; k_p_r_1 = 1.0; k_p_r_2 = 2.0; k_p_r_ = [k_p_r_1;k_p_r_2];
k_eq_d = KAPPA.qref_k_eq_d;
n_shell = KAPPA.qref_n_shell;
azimu_b_shell_ = KAPPA.qref_azimu_b_shell_;
polar_a_shell_ = KAPPA.qref_polar_a_shell_;
weight_shell_ = KAPPA.qref_weight_shell_;
k_c_0_shell_ = KAPPA.qref_k_c_0_shell_;
k_c_1_shell_ = KAPPA.qref_k_c_1_shell_;
k_c_2_shell_ = KAPPA.qref_k_c_2_shell_;
k_p_r_shell_ = k_p_r_(1+0)*ones(n_shell,1);

n_q = qref_n_shell; n_3 = 3; deconvolve_q = sqrt(4*pi);
%%%%%%%%;
% Now testing with image-data. ;
%%%%%%%%;
n_w = 98; n_w_max = n_w; n_w_sum = n_w_max*n_k_p_r;
n_M = 4;
rng(0);
viewing_polar_a_M_ = 2*pi*rand(n_M,1);
viewing_azimu_b_M_ = 2*pi*rand(n_M,1);
viewing_gamma_z_M_ = 2*pi*rand(n_M,1);
%%%%%%%%;
rng(0);
M_k_p_wkM__ = randn(n_w_sum,n_M); M_k_p_wM_ = reshape(M_k_p_wkM__,[n_w_sum*n_M,1]);
%%%%%%%%;

%%%%%%%%;
% reconstructing with kappa_basic_apply_4. ;
%%%%%%%%;
rng(1);
weight_imagecount_M_ = rand(n_M,1);
n_CTF = 3;
index_nCTF_from_nM_ = max(0,min(n_CTF-1,floor(n_CTF*rand(n_M,1))));
CTF_k_p_wkC__ = rand(n_w_sum,n_CTF);
dtau_viewing_polar_a_M_ = 2*pi*rand(n_M,1);
dtau_viewing_azimu_b_M_ = 2*pi*rand(n_M,1);
dtau_viewing_gamma_z_M_ = 2*pi*rand(n_M,1);
%%%%%%%%;
tmp_t = tic();
KAPPA = [];
[ ...
 parameter ...
,KAPPA ...
,a_restore_mid_C2M0_k_p_qk_ ...
,a_restore_mid_C1M1_k_p_qk_ ...
,a_restore_mid_C0M2_k_p_qk_ ...
,dtau_a_restore_mid_C2M0_k_p_qk_ ...
,dtau_a_restore_mid_C1M1_k_p_qk_ ...
,dtau_a_restore_mid_C0M2_k_p_qk_ ...
,dtau_dtau_a_restore_mid_C2M0_k_p_qk_ ...
,dtau_dtau_a_restore_mid_C1M1_k_p_qk_ ...
,dtau_dtau_a_restore_mid_C0M2_k_p_qk_ ...
] = ...
kappa_basic_apply_4( ...
 parameter ...
,KAPPA ...
,n_w_max ...
,n_M ...
,weight_imagecount_M_ ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_M_ ...
,dtau_viewing_polar_a_M_ ...
,dtau_viewing_azimu_b_M_ ...
,dtau_viewing_gamma_z_M_ ...
,n_k_p_r ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,qref_k_eq_d ...
,qref_n_shell ...
,qref_azimu_b_shell_ ...
,qref_polar_a_shell_ ...
,qref_weight_shell_ ...
,qref_k_c_0_shell_ ...
,qref_k_c_1_shell_ ...
,qref_k_c_2_shell_ ...
,qref_n_polar_a ...
,qref_polar_a_ ...
,qref_n_azimu_b_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% kappa_basic_apply_4: time %0.6fs',tmp_t)); end;
%%%%%%%%;
tmp_t = tic();
KAPPA_gpu = [];
[ ...
 parameter ...
,KAPPA_gpu ...
,a_restore_mid_C2M0_k_p_gpu_qk_ ...
,a_restore_mid_C1M1_k_p_gpu_qk_ ...
,a_restore_mid_C0M2_k_p_gpu_qk_ ...
,dtau_a_restore_mid_C2M0_k_p_gpu_qk_ ...
,dtau_a_restore_mid_C1M1_k_p_gpu_qk_ ...
,dtau_a_restore_mid_C0M2_k_p_gpu_qk_ ...
,dtau_dtau_a_restore_mid_C2M0_k_p_gpu_qk_ ...
,dtau_dtau_a_restore_mid_C1M1_k_p_gpu_qk_ ...
,dtau_dtau_a_restore_mid_C0M2_k_p_gpu_qk_ ...
] = ...
kappa_gpu_basic_apply_4( ...
 parameter ...
,KAPPA_gpu ...
,n_w_max ...
,n_M ...
,weight_imagecount_M_ ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_M_ ...
,dtau_viewing_polar_a_M_ ...
,dtau_viewing_azimu_b_M_ ...
,dtau_viewing_gamma_z_M_ ...
,n_k_p_r ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,qref_k_eq_d ...
,qref_n_shell ...
,qref_azimu_b_shell_ ...
,qref_polar_a_shell_ ...
,qref_weight_shell_ ...
,qref_k_c_0_shell_ ...
,qref_k_c_1_shell_ ...
,qref_k_c_2_shell_ ...
,qref_n_polar_a ...
,qref_polar_a_ ...
,qref_n_azimu_b_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% kappa_gpu_basic_apply_4: time %0.6fs',tmp_t)); end;
%%%%%%%%;
fnorm_disp(flag_verbose,'a_restore_mid_C2M0_k_p_qk_',a_restore_mid_C2M0_k_p_qk_,'a_restore_mid_C2M0_k_p_gpu_qk_',a_restore_mid_C2M0_k_p_gpu_qk_);
fnorm_disp(flag_verbose,'a_restore_mid_C1M1_k_p_qk_',a_restore_mid_C1M1_k_p_qk_,'a_restore_mid_C1M1_k_p_gpu_qk_',a_restore_mid_C1M1_k_p_gpu_qk_);
fnorm_disp(flag_verbose,'a_restore_mid_C0M2_k_p_qk_',a_restore_mid_C0M2_k_p_qk_,'a_restore_mid_C0M2_k_p_gpu_qk_',a_restore_mid_C0M2_k_p_gpu_qk_);
fnorm_disp(flag_verbose,'dtau_a_restore_mid_C2M0_k_p_qk_',dtau_a_restore_mid_C2M0_k_p_qk_,'dtau_a_restore_mid_C2M0_k_p_gpu_qk_',dtau_a_restore_mid_C2M0_k_p_gpu_qk_);
fnorm_disp(flag_verbose,'dtau_a_restore_mid_C1M1_k_p_qk_',dtau_a_restore_mid_C1M1_k_p_qk_,'dtau_a_restore_mid_C1M1_k_p_gpu_qk_',dtau_a_restore_mid_C1M1_k_p_gpu_qk_);
fnorm_disp(flag_verbose,'dtau_a_restore_mid_C0M2_k_p_qk_',dtau_a_restore_mid_C0M2_k_p_qk_,'dtau_a_restore_mid_C0M2_k_p_gpu_qk_',dtau_a_restore_mid_C0M2_k_p_gpu_qk_);
fnorm_disp(flag_verbose,'dtau_dtau_a_restore_mid_C2M0_k_p_qk_',dtau_dtau_a_restore_mid_C2M0_k_p_qk_,'dtau_dtau_a_restore_mid_C2M0_k_p_gpu_qk_',dtau_dtau_a_restore_mid_C2M0_k_p_gpu_qk_);
fnorm_disp(flag_verbose,'dtau_dtau_a_restore_mid_C1M1_k_p_qk_',dtau_dtau_a_restore_mid_C1M1_k_p_qk_,'dtau_dtau_a_restore_mid_C1M1_k_p_gpu_qk_',dtau_dtau_a_restore_mid_C1M1_k_p_gpu_qk_);
fnorm_disp(flag_verbose,'dtau_dtau_a_restore_mid_C0M2_k_p_qk_',dtau_dtau_a_restore_mid_C0M2_k_p_qk_,'dtau_dtau_a_restore_mid_C0M2_k_p_gpu_qk_',dtau_dtau_a_restore_mid_C0M2_k_p_gpu_qk_);
%%%%%%%%;

if (flag_verbose> 0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;

