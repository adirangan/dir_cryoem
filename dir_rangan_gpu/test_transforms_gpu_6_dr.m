%%%%%%%%;
% Based on test_transforms_4_dr.m. ;
% Sets up a few templates and images ;
% tests ampmh_X_wSM___8.m ;
%%%%%%%%;
% tests gpu functions. ;
% (remember to module load cuda-?? first). ;
%%%%%%%%;

flag_verbose = 1;

%%%%%%%%;
% Now set up polar-quadrature-weights. ;
%%%%%%%%;
k_p_r_max = 48/(2*pi); k_eq_d = 1.0/(2*pi); TorL = 'L';
[ ...
 n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
] = ...
get_weight_3d_1( ...
 flag_verbose ...
,k_p_r_max ...
,k_eq_d ...
,TorL ...
);
%%%%;
l_max_upb = round(2*pi*k_p_r_max);
l_max_max = min(l_max_upb,1+ceil(2*pi*k_p_r_(end)));
n_w_max = 2*(l_max_max+1); n_w_0in_ = n_w_max*ones(n_k_p_r,1);
[ ...
 n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,k_p_r_wk_ ...
,k_p_w_wk_ ...
,k_c_0_wk_ ...
,k_c_1_wk_ ...
] = ...
get_weight_2d_2( ...
 flag_verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,-1 ...
,n_w_0in_ ...
);
%%%%%%%%;
n_w_sum = sum(n_w_); n_w_csum_ = cumsum([0;n_w_]);

%%%%%%%%;
% Now use ampmh_X_wSM___8 to estimate integral of plane-wave times bessel times plane-wave. ;
% Note that ampmh_X_wSM___8 assumes an isotropic CTF. ;
% I.e., the inputs CTF_UX_S_k_q_wnS__ and CTF_UX_S_l2_ ;
% combine an angularly-independent CTF with the templates S_k_q_wnS__. ;
%%%%%%%%;
flag_CTF_use = 1;
flag_delta_use = 1;
n_S = 700; n_M = 500;
if (flag_verbose); disp(sprintf(' %% testing ampmh_X_wSM___8.m using n_S %d templates and n_M %d images. ',n_S,n_M)); end;
delta_max = 0.1;
delta_S_S_ = rand(n_S,1)*delta_max;
omega_S_S_ = 2*pi*rand(n_S,1);
delta_S_2S__ = zeros(2,n_S);
S_k_p_wkS__ = zeros(n_w_sum,n_S);
S_k_q_wkS__ = zeros(n_w_sum,n_S);
for nS=0:n_S-1;
tmp_delta_S = delta_S_S_(1+nS);
tmp_omega_S = omega_S_S_(1+nS);
tmp_delta_S_ = tmp_delta_S * [cos(tmp_omega_S) ; sin(tmp_omega_S)];
delta_S_2S__(:,1+nS) = tmp_delta_S_;
S_k_p_wkS__(:,1+nS) = exp(2*pi*i*k_p_r_wk_.*tmp_delta_S.*cos(k_p_w_wk_-tmp_omega_S));
S_k_q_wkS__(:,1+nS) = interp_p_to_q(n_k_p_r,n_w_,n_w_sum,S_k_p_wkS__(:,1+nS));
end;%for nS=0:n_S-1;
delta_M_M_ = rand(n_M,1)*delta_max;
omega_M_M_ = 2*pi*rand(n_M,1);
delta_M_M_(1+0) = delta_S_S_(1+0); omega_M_M_(1+0) = omega_S_S_(1+0); %<-- ensure that the first image matches the first template. ;
delta_M_2M__ = zeros(2,n_M);
M_k_p_wkM__ = zeros(n_w_sum,n_M);
M_k_q_wkM__ = zeros(n_w_sum,n_M);
for nM=0:n_M-1;
tmp_delta_M = delta_M_M_(1+nM);
tmp_omega_M = omega_M_M_(1+nM);
tmp_delta_M_ = tmp_delta_M * [cos(tmp_omega_M) ; sin(tmp_omega_M)];
delta_M_2M__(:,1+nM) = tmp_delta_M_;
M_k_p_wkM__(:,1+nM) = exp(2*pi*i*k_p_r_wk_.*tmp_delta_M.*cos(k_p_w_wk_-tmp_omega_M));
M_k_q_wkM__(:,1+nM) = interp_p_to_q(n_k_p_r,n_w_,n_w_sum,M_k_p_wkM__(:,1+nM));
end;%for nM=0:n_M-1;
CTF_alpha = flag_CTF_use*1.5;
CTF_k_p_r_k_ = besselj(0,CTF_alpha*k_p_r_);
CTF_k_p_r_wk_ = besselj(0,CTF_alpha*k_p_r_wk_); CTF_wk_ = CTF_k_p_r_wk_;
%%%%%%%%;
% Prepare FTK. ;
%%%%%%%%;
delta_r_max = flag_delta_use*0.05; n_delta_v_requested = flag_delta_use*16;
delta_r_p = 0.05;
delta_r_s = delta_r_max/sqrt(2*log(1/delta_r_p));
delta_r_N = delta_r_max * (2*pi*k_p_r_max) / (pi*sqrt(2));
svd_eps = 1e-3;
tmp_t = tic();
FTK = ampmh_FTK_1(n_k_p_r,k_p_r_,k_p_r_max,delta_r_max,svd_eps,n_delta_v_requested);
tmp_t = toc(tmp_t); if (flag_verbose); disp(sprintf(' %% FTK: time %0.6fs',tmp_t)); end;
disp(sprintf(' %% p-val %0.4f delta_r_max %0.6f sigma %0.4f N_pixel %0.4f --> FTK.n_svd_l %d, n_delta_v_requested %d',delta_r_p,delta_r_max,delta_r_s,delta_r_N,FTK.n_svd_l,n_delta_v_requested));
%%%%%%%%;
% Prepare principal-modes. ;
%%%%%%%%;
n_UX_rank = n_k_p_r-1; %<-- just to check dimensions.; 
UX_kn__ = zeros(n_k_p_r,n_UX_rank);
X_weight_r_ = zeros(n_k_p_r,1);
[ ...
 X_kk__ ...
,X_weight_r_ ...
] = ...
principled_marching_empirical_cost_matrix_0( ...
 n_k_p_r ...
,k_p_r_ ...
,weight_2d_k_p_r_ ...
,n_w_ ...
,n_M ...
,M_k_p_wkM__ ...
);
[tmp_UX_kn__,tmp_SX_k__,tmp_VX_kn__] = svds(X_kk__,n_UX_rank);
UX_kn__(:,1:n_UX_rank) = tmp_UX_kn__(:,1:n_UX_rank);
pm_n_UX_rank = n_UX_rank; %<-- just to check dimension. ;
%%%%%%%%;
% Prepare quasi-images. ;
%%%%%%%%;
n_UX_rank = n_k_p_r;
tmp_t = tic();
svd_VUXM_lwnM____ = tpmh_VUXM_lwnM____3(FTK,n_k_p_r,n_w_,n_M,M_k_q_wkM__,pm_n_UX_rank,UX_kn__,X_weight_r_);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% svd_VUXM_lwnM____: time %0.6fs',tmp_t)); end;
tmp_t = tic();
svd_VUXM_lwnM____ = tpmh_VUXM_lwnM____4(FTK,n_k_p_r,n_w_,n_M,M_k_q_wkM__,pm_n_UX_rank,UX_kn__,X_weight_r_);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% svd_VUXM_lwnM____: time %0.6fs',tmp_t)); end;
tmp_t = tic();
svd_VUXM_gpu_lwnM____ = tpmh_VUXM_gpu_lwnM____4(FTK,n_k_p_r,n_w_,n_M,M_k_q_wkM__,pm_n_UX_rank,UX_kn__,X_weight_r_);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% svd_VUXM_gpu_lwnM____: time %0.6fs',tmp_t)); end;
fnorm_disp(flag_verbose,'svd_VUXM_lwnM____',svd_VUXM_lwnM____,'svd_VUXM_gpu_lwnM____',svd_VUXM_gpu_lwnM____);
%%%%%%%%;
% Now calculate norms of the translated images. ;
%%%%%%%%;
tmp_t = tic();
UX_M_l2_dM__ = ampmh_UX_M_l2_dM__1(FTK,n_w_,n_M,pm_n_UX_rank,svd_VUXM_lwnM____);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% UX_M_l2_dM__: time %0.6fs',tmp_t)); end;
disp(sprintf(' %% average l2-norm of images: %0.16f %%<-- should be 1 ',mean(UX_M_l2_dM__(:))/(pi*k_p_r_max^2)));
tmp_t = tic();
UX_M_l2_gpu_dM__ = ampmh_UX_M_l2_gpu_dM__2(FTK,n_w_,n_M,pm_n_UX_rank,svd_VUXM_lwnM____);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% UX_M_l2_gpu_dM__: time %0.6fs',tmp_t)); end;
fnorm_disp(flag_verbose,'UX_M_l2_dM__',UX_M_l2_dM__,'UX_M_l2_gpu_dM__',UX_M_l2_gpu_dM__);
%%%%%%%%;
% Prepare CTF_UX_S_k_q_wnS__. ;
%%%%%%%%;
tmp_t = tic();
S_k_q_wSk___ = permute(reshape(S_k_q_wkS__,[n_w_max,n_k_p_r,n_S]),[1,3,2]);
CTF_UX_S_k_q_wnS__ = reshape(permute(reshape(reshape(S_k_q_wSk___,[n_w_max*n_S,n_k_p_r])*diag(X_weight_r_.*CTF_k_p_r_k_)*UX_kn__,[n_w_max,n_S,pm_n_UX_rank]),[1,3,2]),[n_w_max*pm_n_UX_rank,n_S]);
CTF_UX_S_l2_S_ = sum(abs(CTF_UX_S_k_q_wnS__).^2,1)/n_w_max;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% CTF_UX_S_k_q_wnS__: time %0.6fs',tmp_t)); end;
%%%%%%%%;
% Calculate ampmh_X_wSM___8. ;
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 0;
parameter.n_M_per_Mbatch = 24;
parameter.n_S_per_Sbatch = 24;
tmp_t = tic();
[ ...
 parameter ...
,X_wSM_ampm___ ...
,delta_x_wSM___ ...
,delta_y_wSM___ ...
,gamma_z_wSM___ ...
,I_value_wSM___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_S_ ...
,n_M ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% X_wSM___: time %0.6fs',tmp_t)); end;
X_wSM_ampm___ = real(X_wSM_ampm___);
%%%%%%%%;
% Calculate ampmh_X_gpu_wSM___8. ;
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_verbose = 0;
parameter.flag_compute_I_value = 0;
parameter.n_M_per_Mbatch = 128;
parameter.n_S_per_Sbatch = 128;
tmp_t = tic();
[ ...
 parameter ...
,X_gpu_wSM_ampm___ ...
,delta_x_gpu_wSM___ ...
,delta_y_gpu_wSM___ ...
,gamma_z_gpu_wSM___ ...
,I_value_gpu_wSM___ ...
] = ...
ampmh_X_gpu_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_S_ ...
,n_M ...
,svd_VUXM_gpu_lwnM____ ...
,UX_M_l2_gpu_dM__ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% X_gpu_wSM___: time %0.6fs',tmp_t)); end;
X_gpu_wSM_ampm___ = real(X_gpu_wSM_ampm___);
fnorm_disp(flag_verbose,'X_wSM_ampm___',X_wSM_ampm___,'X_gpu_wSM_ampm___',X_gpu_wSM_ampm___);
%%%%%%%%;
