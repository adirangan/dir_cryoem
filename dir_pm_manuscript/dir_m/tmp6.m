clear CTF_k_p_r_xavg_k_;
%%%%%%%%;
% Now calculate kernel for each cluster. ;
%%%%%%%%;
S_k_q_wkS___ = reshape(S_k_q_wkS__,[n_w_max,n_k_p_r,n_S]);
tmp_X_weight_r_ = sqrt(weight_2d_k_p_r_);
tot_t_kern_S = 0;
tot_t0_kern_S = 0;
tot_t1_kern_S = 0;
tot_t2_kern_S = 0;
tot_t3_kern_S = 0;
tmp_t = tic();
%%%%%%%%;
% Note that CTF is included in X_S_kkc___, but not X_S_kk__. ;
%%%%%%%%;
tmp_t1 = tic();
tmp_X_00__ = zeros(n_k_p_r,n_k_p_r);
for nS=0:n_S-1;
tmp_S_k_q_wk__ = S_k_q_wkS___(:,:,1+nS);
tmp_X_00_single__ = ctranspose(tmp_S_k_q_wk__)*tmp_S_k_q_wk__;
tmp_X_00__ = tmp_X_00__ + tmp_X_00_single__;
end;%for nS=0:n_S-1;
tmp_X_00__ = (2*pi)^2 * tmp_X_00__ / n_S ;
tmp_t1 = toc(tmp_t1); tot_t1_kern_S = tot_t1_kern_S + tmp_t1;
%%%%;
tmp_t2 = tic();
tmp_X_01__ = zeros(n_k_p_r,n_k_p_r);
tmp_S_k_q_k0S_ = sum(reshape(S_k_q_wkS___(1+0,:,:),[n_k_p_r,n_S]),2);
tmp_X_01__ = (2*pi)^2 * conj(tmp_S_k_q_k0S_) * transpose(tmp_S_k_q_k0S_) / n_S^2 ;
tmp_t2 = toc(tmp_t2); tot_t2_kern_S = tot_t2_kern_S + tmp_t2;
%%%%;
tmp_t3 = tic();
tmp_X__ = diag(tmp_X_weight_r_) * (2*real(tmp_X_00__) - 2*real(tmp_X_01__)) * diag(tmp_X_weight_r_) ;
tmp_t3 = toc(tmp_t3); tot_t3_kern_S = tot_t3_kern_S + tmp_t3;
%%%%;
X_S_kk__ = tmp_X__;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_S_kk__: %0.3fs',tmp_t)); end;
clear tmp_S* tmp_X*;
%%%%%%%%;
tmp_t = tic;
for ncluster=0:n_cluster-1;
tmp_CTF_k_p_r_xavg_k_ = CTF_k_p_r_xavg_kc__(:,1+ncluster);
X_S_kkc___(:,:,1+ncluster) = diag(tmp_CTF_k_p_r_xavg_k_)*X_S_kk__*diag(tmp_CTF_k_p_r_xavg_k_);
end;%for ncluster=0:n_cluster-1;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_S_kkc___: %0.3fs',tmp_t)); end;
tot_t_kern_S = tmp_t;
if (verbose>1); disp(sprintf(' %% X_S_kkc___: %0.3fs %0.3fs %0.3fs %0.3fs --> %0.3fs',tot_t0_kern_S,tot_t1_kern_S,tot_t2_kern_S,tot_t3_kern_S,tot_t_kern_S)); end;
%%%%%%%%;
X_S_avg_kk__ = mean(X_S_kkc___(:,:,1+index_ncluster_from_nM_),3);
%%%%%%%%;
% Now use X_S_avg_kk__ to find single set of principal-modes for all clusters. ;
%%%%%%%%;
n_UX_rank = n_k_p_r-1; %<-- just to check dimensions. ;
tmp_t = tic();
[tmp_UX__,tmp_SX__,tmp_VX__] = svds(X_S_avg_kk__,n_UX_rank); tmp_SX_ = diag(tmp_SX__);
UX_S_avg_kn__ = tmp_UX__;
SX_S_avg_k_ = diag(tmp_SX__);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UX_S_avg_kn__: %0.3fs',tmp_t)); end;
tot_t_UX_s_avg = tmp_t;
%%%%%%%%;
% Now calculate alignment, using cluster-specific CTF. ;
%%%%%%%%;
fname_mat = sprintf('%s_mat/pm_fig_X_2d_Semp_d1_FIGK__.mat',dir_pm);
if (flag_recalc | ~exist(fname_mat,'file'));
disp(sprintf(' %% %s not found, creating',fname_mat));
%%%%%%%%;
weight_2d_k_all_scaled_ = weight_2d_k_all_*4*pi^2;
S_k_q_wkS___ = reshape(S_k_q_wkS__,[n_w_max,n_k_p_r,n_S]);
S_k_q_kwS___ = permute(S_k_q_wkS___,[2,1,3]);
M_k_q_wkM___ = reshape(M_k_q_wkM__,[n_w_max,n_k_p_r,n_M]);
M_k_q_kwM___ = permute(M_k_q_wkM___,[2,1,3]);
%%%%%%%%;
tot_t_kern_ = zeros(n_UX_rank,1);
tot_t_fill_ = zeros(n_UX_rank,1);
tot_t_mult_ = zeros(n_UX_rank,1);
tot_t_ifft_ = zeros(n_UX_rank,1);
tot_o_fill_ = zeros(n_UX_rank,1);
tot_o_mult_ = zeros(n_UX_rank,1);
tot_o_ifft_ = zeros(n_UX_rank,1);
X_wSMe___ = zeros(n_w_max,n_S,n_M);
X_wSM0___ = zeros(n_w_max,n_S,n_M);
l2er_X_X_n_ = zeros(n_UX_rank,1);
corr_X_X_n_ = zeros(n_UX_rank,1);
prct_X_X_n_ = zeros(n_UX_rank,1);
for nUX_rank=[n_UX_rank-1:-1:0];%for nUX_rank=n_UX_rank-1:-1:0
pm_n_UX_rank = 1+nUX_rank;
if (verbose); disp(sprintf(' %% pm_n_UX_rank %d/%d',pm_n_UX_rank,n_UX_rank)); end;
X_wSM___ = zeros(n_w_max,n_S,n_M);
for ncluster=0:n_cluster-1;
index_nM_from_ncluster_ = index_nM_from_ncluster__{1+ncluster};
n_index_nM_from_ncluster = n_index_nM_from_ncluster_(1+ncluster);
assert(n_index_nM_from_ncluster==numel(index_nM_from_ncluster_));
tmp_n_M = n_index_nM_from_ncluster;
tmp_M_k_q_kwM___ = M_k_q_kwM___(:,:,1+index_nM_from_ncluster_);
%%%%;
tmp_t = tic;
tmp_CTF_k_p_r_xavg_k_ = CTF_k_p_r_xavg_kc__(:,1+ncluster);
tmp_X_S_kk__ = diag(tmp_CTF_k_p_r_xavg_k_)*X_S_kk__*diag(tmp_CTF_k_p_r_xavg_k_);
[tmp_UX__,tmp_SX__,tmp_VX__] = svds(tmp_X_S_kk__,pm_n_UX_rank); tmp_SX_ = diag(tmp_SX__);
tmp_UX_weight_kn__ = diag(X_weight_r_)*tmp_UX__;
tmp_t = toc(tmp_t); if (verbose>2); disp(sprintf(' %% tmp_UX_weight_kn__: %0.3fs --> %0.2fGHz',tmp_t,tmp_o/tmp_t/1e9)); end;
tot_t_kern_(1+nUX_rank) = tot_t_kern_(1+nUX_rank) + tmp_t;
%%%%;
tmp_t = tic();
tmp_CTF_S_k_q_kwS___ = bsxfun(@times,S_k_q_kwS___,reshape(tmp_CTF_k_p_r_xavg_k_,[n_k_p_r,1,1]));
UX_weight_CTF_S_k_q_nwS___ = reshape(transpose(tmp_UX_weight_kn__)*reshape(tmp_CTF_S_k_q_kwS___,[n_k_p_r,n_w_max*n_S]),[pm_n_UX_rank,n_w_max,n_S]);
UX_weight_conj_CTF_S_k_q_Snw___ = conj(permute(UX_weight_CTF_S_k_q_nwS___,[3,1,2]));
tmp_o = pm_n_UX_rank*n_k_p_r*n_w_max*n_S;
tmp_t = toc(tmp_t); if (verbose>2); disp(sprintf(' %% fill: %0.3fs --> %0.2fGHz',tmp_t,tmp_o/tmp_t/1e9)); end;
tot_o_fill_(1+nUX_rank) = tot_o_fill_(1+nUX_rank) + tmp_o;
tot_t_fill_(1+nUX_rank) = tot_t_fill_(1+nUX_rank) + tmp_t;
for tmp_nM=0:tmp_n_M-1;
nM = index_nM_from_ncluster_(1+tmp_nM);
%%%%;
tmp_t = tic();
UX_weight_M_k_q_nwM___ = reshape(transpose(tmp_UX_weight_kn__)*reshape(tmp_M_k_q_kwM___(:,:,1+tmp_nM),[n_k_p_r,n_w_max*1]),[pm_n_UX_rank,n_w_max,1]);
UX_weight_M_k_q_nMw___ = permute(UX_weight_M_k_q_nwM___,[1,3,2]);
tmp_o = pm_n_UX_rank*n_k_p_r*n_w_max*1;
tmp_t = toc(tmp_t); if (verbose>2); disp(sprintf(' %% fill: %0.3fs --> %0.2fGHz',tmp_t,tmp_o/tmp_t/1e9)); end;
tot_o_fill_(1+nUX_rank) = tot_o_fill_(1+nUX_rank) + tmp_o;
tot_t_fill_(1+nUX_rank) = tot_t_fill_(1+nUX_rank) + tmp_t;
%%%%;
tmp_t = tic();
conj_S_CTF_weight_weight_M_k_q_SMw___ = zeros(n_S,1,n_w_max);
for nw=0:n_w_max-1;
conj_S_CTF_weight_weight_M_k_q_SMw___(:,:,1+nw) = UX_weight_conj_CTF_S_k_q_Snw___(:,:,1+nw) * UX_weight_M_k_q_nMw___(:,:,1+nw);
end;%for nw=0:n_w_max-1;
tmp_o = n_w_max * n_S * 1 * pm_n_UX_rank;
tmp_t = toc(tmp_t); if (verbose>2); disp(sprintf(' %% mult: %0.3fs --> %0.2fGHz',tmp_t,tmp_o/tmp_t/1e9)); end;
tot_o_mult_(1+nUX_rank) = tot_o_mult_(1+nUX_rank) + tmp_o;
tot_t_mult_(1+nUX_rank) = tot_t_mult_(1+nUX_rank) + tmp_t;
%%%%;
tmp_t = tic();
ifft_conj_S_CTF_weight_weight_M_k_q_wSM___ = ifft(permute(conj_S_CTF_weight_weight_M_k_q_SMw___,[3,1,2]),[],1);
tmp_o = n_S * 1 * n_w_max * log(n_w_max);
tmp_t = toc(tmp_t); if (verbose>2); disp(sprintf(' %% ifft: %0.3fs --> %0.2fGHz',tmp_t,tmp_o/tmp_t/1e9)); end;
tot_o_ifft_(1+nUX_rank) = tot_o_ifft_(1+nUX_rank) + tmp_o;
tot_t_ifft_(1+nUX_rank) = tot_t_ifft_(1+nUX_rank) + tmp_t;
X_wSM___(:,:,1+nM) = real(ifft_conj_S_CTF_weight_weight_M_k_q_wSM___);
%%%%;
end;%for tmp_nM=0:tmp_n_M-1;
end;%for ncluster=0:n_cluster-1;
if (verbose>1); disp(sprintf(' %% tot_t_fill %0.3fs --> %0.2fGH',tot_t_fill_(1+nUX_rank),tot_o_fill_(1+nUX_rank)/tot_t_fill_(1+nUX_rank)/1e9)); end;
if (verbose>1); disp(sprintf(' %% tot_t_mult %0.3fs --> %0.2fGH',tot_t_mult_(1+nUX_rank),tot_o_mult_(1+nUX_rank)/tot_t_mult_(1+nUX_rank)/1e9)); end;
if (verbose>1); disp(sprintf(' %% tot_t_ifft %0.3fs --> %0.2fGH',tot_t_ifft_(1+nUX_rank),tot_o_ifft_(1+nUX_rank)/tot_t_ifft_(1+nUX_rank)/1e9)); end;
if (nUX_rank==n_UX_rank-1);
X_wSMe___ = X_wSM___;
end;%if (nUX_rank==n_UX_rank-1);
X_wSM0___ = X_wSM___;
l2er_X_X = fnorm(X_wSMe___ - X_wSM0___) / fnorm(X_wSMe___);
l2er_X_X_n_(1+nUX_rank) = l2er_X_X;
corr_X_X = corr(X_wSMe___(:),X_wSM0___(:));
corr_X_X_n_(1+nUX_rank) = corr_X_X;
[~,tmp_nw_SM_] = max(X_wSM0___,[],1); tmp_nw_SM_ = tmp_nw_SM_-1;
tmp_X_SM___ = zeros(1,n_S,n_M);
for nM=0:n_M-1; for nS=0:n_S-1;
tmp_nw = tmp_nw_SM_(1,1+nS,1+nM);
tmp_X = X_wSMe___(1+tmp_nw,1+nS,1+nM);
tmp_X_SM___(1,1+nS,1+nM) = tmp_X;
end;end;%for nM=0:n_M-1; for nS=0:n_S-1;
tmp_X_SM___ = repmat(tmp_X_SM___,[n_w_max,1,1]);
tmp_X_SM___ = X_wSMe___ > tmp_X_SM___;
tmp_p__ = sum(tmp_X_SM___,1)/n_w_max;
tmp_p = mean(tmp_p__,'all');
prct_X_X_n_(1+nUX_rank) = tmp_p;
%%%%%%%%;
tmp_t = tic();
gamma_z_ = 2*pi*[0:n_w_max-1]/n_w_max;
nS=3; nM=1;
X1_w_ = X_wSM___(:,1+nS,1+nM);
X0_w_ = zeros(n_w_max,1);
for nw=0:n_w_max-1;
gamma_z = 2*pi*nw/n_w_max;
S_k_p_wk_ = S_k_p_wkS__(:,1+nS); M_k_p_wk_ = M_k_p_wkM__(:,1+nM);
T_k_p_wk_ = reshape(reshape(S_k_p_wk_,[n_w_max,n_k_p_r])*diag(CTF_k_p_r_xavg_kc__(:,1+index_ncluster_from_nM_(1+nM))),[n_w_max*n_k_p_r,1]);
N_k_p_wk_ = rotate_p_to_p_fftw(n_k_p_r,n_w_,n_w_sum,M_k_p_wk_,-gamma_z);
X0_w_(1+nw) = real(sum(conj(T_k_p_wk_).*N_k_p_wk_.*weight_2d_k_all_scaled_));
end;%for nw=0:n_w_max-1;
tmp_o = n_w_max * n_k_p_r * n_w_max;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% test: %0.3fs --> %0.2fGHz',tmp_t,tmp_o/tmp_t/1e9)); end;
if (verbose); disp(sprintf(' %% X0_w_ vs X1_w_: %0.16f',fnorm(X0_w_-X1_w_)/fnorm(X0_w_))); end;
end;%for nUX_rank=0:n_UX_rank-1;
%%%%%%%%;
save(fname_mat ...
     ,'weight_2d_k_all_scaled_','CTF_k_p_r_xavg_kc__' ...
     ,'prct_X_X_n_','corr_X_X_n_','l2er_X_X_n_' ...
     ,'tot_t_kern_','tot_t_fill_','tot_t_mult_','tot_t_ifft_','tot_o_fill_','tot_o_mult_','tot_o_ifft_' ...
     );
%%%%%%%%;
end;%if (~exist(fname_mat,'file'));
if ( exist(fname_mat,'file'));
disp(sprintf(' %% %s found, not creating',fname_mat));
load(fname_mat);
end;%if ( exist(fname_mat,'file'));
%%%%%%%%;

fname_fig = sprintf('%s_jpg/pm_fig_X_2d_Semp_d1_FIGK__',dir_pm);
if (flag_replot | ~exist(sprintf('%s.jpg',fname_fig),'file'));
disp(sprintf(' %% %s not found, creating',fname_fig));
figure(1+nf);nf=nf+1;figmed;
%%%%;
subplot(1,3,1);
plot(1:n_UX_rank,l2er_X_X_n_,'ko-','MarkerFaceColor','k');
xlim([0,n_k_p_r]); set(gca,'XTick',0:7:49); xlabel('rank $H$','Interpreter','latex');
ylabel('error'); grid on;
legend({'frob'});
title('relative error');
%%%%;
subplot(1,3,2);
hold on;
plot(1:n_UX_rank,0+corr_X_X_n_,'ko-','MarkerFaceColor','r');
plot(1:n_UX_rank,1-prct_X_X_n_,'ko-','MarkerFaceColor','c');
hold off;
xlim([0,n_k_p_r]); set(gca,'XTick',0:7:49); xlabel('rank $H$','Interpreter','latex');
ylim([0.5,1]); ylabel('value'); set(gca,'YTick',0.5:0.05:1.0); grid on;
legend({'corr','prct'});
title('correlation');
%%%%;
subplot(1,3,3);
tot_t_all_ = tot_t_kern_S + tot_t_kern_ + tot_t_fill_ + tot_t_mult_ + tot_t_ifft_ ;
hold on;
plot(1:n_UX_rank,max(tot_t_mult_+tot_t_ifft_)./tot_t_all_,'ko-','MarkerFaceColor','r');
plot(1:n_UX_rank,max(tot_o_mult_)./tot_o_mult_,'ko-','MarkerFaceColor','c');
plot(1:n_UX_rank,ones(1,n_UX_rank),'k-','LineWidth',0.5);
hold off;
xlim([0,n_k_p_r]); set(gca,'XTick',0:7:49); xlabel('rank $H$','Interpreter','latex');
ylim([0,16]); ylabel('factor'); set(gca,'YTick',0:1:16); grid on;
legend({'time','ops'});
title('speedup');
%%%%;
disp(sprintf(' %% writing %s',fname_fig));
print('-djpeg',sprintf('%s.jpg',fname_fig));
print('-depsc',sprintf('%s.eps',fname_fig));
close(gcf);
end;%if (~exist(sprintf('%s.jpg',fname_fig),'file'));
if ( exist(sprintf('%s.jpg',fname_fig),'file'));
disp(sprintf(' %% %s found, not creating',fname_fig));
end;%if ( exist(sprintf('%s.jpg',fname_fig),'file'));
%%%%%%%%;

fname_fig = sprintf('%s_jpg/pm_fig_X_2d_Semp_d1_FIGL__',dir_pm);
if (flag_replot | ~exist(sprintf('%s.jpg',fname_fig),'file'));
disp(sprintf(' %% %s not found, creating',fname_fig));
figure(1+nf);nf=nf+1;set(gcf,'Position',1+[0,0,1024+256,512]);
tmp_ij_ = 1:15;
%%%%;
subplot(1,3,1);
plot(tmp_ij_,l2er_X_X_n_(tmp_ij_),'ko-','MarkerFaceColor','k');
xlim([0,max(tmp_ij_)+1]); set(gca,'XTick',1:2:max(tmp_ij_)); xlabel('rank $H$','Interpreter','latex');
ylim([0.0,1.0]); ylabel('error'); set(gca,'YTick',0.0:0.05:1.0); grid on;
legend({'frob'});
title('relative error');
%%%%;
subplot(1,3,2);
hold on;
plot(tmp_ij_,0+corr_X_X_n_(tmp_ij_),'ko-','MarkerFaceColor','r');
plot(tmp_ij_,1-prct_X_X_n_(tmp_ij_),'ko-','MarkerFaceColor','c');
hold off;
xlim([0,max(tmp_ij_)+1]); set(gca,'XTick',1:2:max(tmp_ij_)); xlabel('rank $H$','Interpreter','latex');
ylim([0.5,1]); ylabel('value'); set(gca,'YTick',0.5:0.05:1.0); grid on;
legend({'corr','prct'},'Location','East');
title('correlation');
%%%%;
subplot(1,3,3);
tot_t_all_ = tot_t_kern_S + tot_t_kern_ + tot_t_fill_ + tot_t_mult_ + tot_t_ifft_ ;
hold on;
plot(tmp_ij_,max(tot_t_mult_+tot_t_ifft_)./tot_t_all_(tmp_ij_),'ko-','MarkerFaceColor','r');
plot(tmp_ij_,max(tot_o_mult_)./tot_o_mult_(tmp_ij_),'ko-','MarkerFaceColor','c');
plot(tmp_ij_,ones(1,numel(tmp_ij_)),'k-','LineWidth',0.5);
hold off;
xlim([0,max(tmp_ij_)+1]); set(gca,'XTick',1:2:max(tmp_ij_)); xlabel('rank $H$','Interpreter','latex');
ylim([0,16]); ylabel('factor'); set(gca,'YTick',0:1:16); grid on;
legend({'time','ops'});
title('speedup');
%%%%;
disp(sprintf(' %% writing %s',fname_fig));
print('-djpeg',sprintf('%s.jpg',fname_fig));
print('-depsc',sprintf('%s.eps',fname_fig));
close(gcf);
end;%if (~exist(sprintf('%s.jpg',fname_fig),'file'));
if ( exist(sprintf('%s.jpg',fname_fig),'file'));
disp(sprintf(' %% %s found, not creating',fname_fig));
end;%if ( exist(sprintf('%s.jpg',fname_fig),'file'));
%%%%%%%%;
