%%%%%%%%;
% intended for use with test_slice_vs_volume_integral_trpv1_11.m ;
% limiting to principal-modes. ;
% This is substantially simpler than test_slice_vs_volume_integral_helper_eig_equa_band_3, ;
% and only uses ssnll_from_a_k_Y_12, instead of ddssnll_2. ;
% Verdict: The bandlimiting (to fixed l_max) prevents the longitudinal-perturbation from appearing cost-free. ;
% See test_slice_vs_volume_integral_helper_eig_equa_band_5.m. ;
%%%%%%%%;

[~,str_hostname] = system('hostname');
flag_128G = 0 ...
| ~isempty(strfind(str_hostname,'xcalibr8')) ...
| ~isempty(strfind(str_hostname,'crunchy')) ...
| ~isempty(strfind(str_hostname,'linserv')) ...
;

n_3 = 3;
if ~exist('KAPPA','var'); KAPPA=[]; end;
if ~exist('Ylm_uklma___','var'); Ylm_uklma___=[]; end;
if ~exist('k_p_azimu_b_sub_uka__','var'); k_p_azimu_b_sub_uka__=[]; end;
if ~exist('k_p_polar_a_sub_uka__','var'); k_p_polar_a_sub_uka__=[]; end;
if ~exist('l_max_uk_','var'); l_max_uk_=[]; end;
if ~exist('index_nu_n_k_per_shell_from_nk_p_r_','var'); index_nu_n_k_per_shell_from_nk_p_r_=[]; end;
if ~exist('index_k_per_shell_uka__','var'); index_k_per_shell_uka__=[]; end;
if ~exist('V_lmm___','var'); V_lmm___=[]; end;
if ~exist('L_lm__','var'); L_lm__=[]; end;
if ~exist('d0W_betazeta_mlma____','var'); d0W_betazeta_mlma____=[]; end;
if ~exist('d1W_betazeta_mlma____','var'); d1W_betazeta_mlma____=[]; end;
if ~exist('d2W_betazeta_mlma____','var'); d2W_betazeta_mlma____=[]; end;
%%%%;
if ~exist('pm_Ylm_uklma___','var'); pm_Ylm_uklma___=[]; end;
if ~exist('pm_k_p_azimu_b_sub_uka__','var'); pm_k_p_azimu_b_sub_uka__=[]; end;
if ~exist('pm_k_p_polar_a_sub_uka__','var'); pm_k_p_polar_a_sub_uka__=[]; end;
if ~exist('pm_l_max_uk_','var'); pm_l_max_uk_=[]; end;
if ~exist('pm_index_nu_n_k_per_shell_from_nk_p_r_','var'); pm_index_nu_n_k_per_shell_from_nk_p_r_=[]; end;
if ~exist('pm_index_k_per_shell_uka__','var'); pm_index_k_per_shell_uka__=[]; end;

%%%%%%%%;
% If necessary, calculate the idealized principal-modes for unit CTF. ;
%%%%%%%%;
if ~exist('X_2d_x1_d0_kk__','var');
[X_2d_x1_d0_kk__,X_2d_x1_d0_weight_r_] = principled_marching_cost_matrix_6(n_k_p_r,k_p_r_,weight_2d_k_p_r_,l_max_,[],[],a_k_Y_quad_yk_);
end;%if ~exist('X_2d_x1_d0_kk__','var');
%%%%%%%%;
% Now determine principal-modes (to high precision). ;
%%%%%%%%;
if ~exist('tolerance_pm','var'); tolerance_pm = 1e-3; end;
if (tolerance_pm>=1e-6); tolerance_pm=1e-6; end;
n_UX_rank = n_k_p_r-1; %<-- just to check dimensions. ;
X_kk__ = X_2d_x1_d0_kk__;
[tmp_UX__,tmp_SX__,tmp_VX__] = svds(X_kk__,n_UX_rank); tmp_SX_ = diag(tmp_SX__);
pm_n_UX_rank = max(find(tmp_SX_/max(tmp_SX_)> tolerance_pm));
UX_kn__ = zeros(n_k_p_r,n_UX_rank); SX_k_ = zeros(n_UX_rank,1);
UX_kn__(:,:) = tmp_UX__(:,1+[0:n_UX_rank-1]);
SX_k_(:) = tmp_SX_(1+[0:n_UX_rank-1]);
nlt = -log10(tolerance_pm);
str_tolerance_pm = sprintf('nlt%.2dpm%d',10*nlt,pm_n_UX_rank);
if (flag_verbose>0); disp(sprintf(' %% tolerance_pm %0.6f: pm_n_UX_rank %d/%d --> %s',tolerance_pm,pm_n_UX_rank,n_UX_rank,str_tolerance_pm)); end;
%%%%%%%%;
[ ...
 ~ ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_k_p_r_max ...
,pm_l_max_ ...
,pm_n_k_all ...
,pm_n_k_all_csum_ ...
,pm_k_p_r_all_ ...
,pm_k_p_azimu_b_all_ ...
,pm_k_p_polar_a_all_ ...
,pm_weight_3d_k_all_ ...
,pm_weight_shell_k_ ...
,pm_weight_3d_k_p_r_ ...
,pm_n_w_ ...
,pm_weight_2d_k_p_r_ ...
,pm_weight_2d_wk_ ...
] = ...
get_weight_pm_3( ...
 parameter ...
,pm_n_UX_rank ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,weight_3d_k_p_r_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
);
pm_n_w_max = max(pm_n_w_);
pm_n_w_sum = sum(pm_n_w_);
pm_n_w_csum_ = cumsum([0;pm_n_w_]);
pm_n_lm_ = (pm_l_max_+1).^2;
pm_n_lm_max = max(pm_n_lm_);
pm_n_lm_sum = sum(pm_n_lm_);
pm_n_lm_csum_ = cumsum([0;pm_n_lm_]);
pm_l_max_max = max(pm_l_max_);
%%%%%%%%;

%%%%%%%%;
% Now form a_x1_UX_Y_quad_yn__ ;
%%%%%%%%;
X_weight_r_ = X_2d_x1_d0_weight_r_;
a_x1_UX_Y_quad_yn__ = zeros(n_lm_max,pm_n_UX_rank);
for nUX_rank=0:pm_n_UX_rank-1;
for nk_p_r=0:n_k_p_r-1;
tmp_l_max = l_max_(1+nk_p_r);
tmp_n_lm = (tmp_l_max+1).^2;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:tmp_n_lm-1);
a_x1_UX_Y_quad_yn__(1:tmp_n_lm,1+nUX_rank) = a_x1_UX_Y_quad_yn__(1:tmp_n_lm,1+nUX_rank) + UX_kn__(1+nk_p_r,1+nUX_rank)*X_weight_r_(1+nk_p_r)*a_k_Y_quad_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nUX_rank=0:pm_n_UX_rank-1;
a_x1_UX_Y_quad_yn_ = local_yk_from_yk__(pm_n_k_p_r,pm_l_max_,a_x1_UX_Y_quad_yn__);
if (flag_verbose>0); disp(sprintf(' %% a_x1_UX_Y_quad_yn_ vs a_x1_UX_Y_quad_yn__(:): %0.16f',fnorm(a_x1_UX_Y_quad_yn_-a_x1_UX_Y_quad_yn__(:)))); end;
pm_a_k_Y_quad_yk__ = a_x1_UX_Y_quad_yn__;
pm_a_k_Y_quad_yk_ = a_x1_UX_Y_quad_yn_;
%%%%;
flag_check=1;
if flag_check;
a_k_Y_reco_yk_ = zeros(n_lm_sum,1);
for nUX_rank=0:pm_n_UX_rank-1;
for nk_p_r=0:n_k_p_r-1;
tmp_l_max = l_max_(1+nk_p_r);
tmp_n_lm = (tmp_l_max+1).^2;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:tmp_n_lm-1);
a_k_Y_reco_yk_(1+tmp_index_) = a_k_Y_reco_yk_(1+tmp_index_) + UX_kn__(1+nk_p_r,1+nUX_rank)/max(1e-12,X_weight_r_(1+nk_p_r))*a_x1_UX_Y_quad_yn__(1:tmp_n_lm,1+nUX_rank);
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nUX_rank=0:pm_n_UX_rank-1;
a_k_Y_diff_yk_ = a_k_Y_quad_yk_ - a_k_Y_reco_yk_;
[~,~,a_k_Y_quad_l3] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_Y_quad_yk_,0);
[~,~,a_k_Y_reco_l3] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_Y_reco_yk_,0);
[~,~,a_k_Y_diff_l3] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_Y_diff_yk_,0);
[~,~,a_k_Y_quad_l2] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_2d_k_p_r_,l_max_,a_k_Y_quad_yk_,0);
[~,~,a_k_Y_reco_l2] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_2d_k_p_r_,l_max_,a_k_Y_reco_yk_,0);
[~,~,pm_a_k_Y_quad_l3] = spharm_normalize_2(pm_n_k_p_r,pm_k_p_r_,pm_weight_3d_k_p_r_,pm_l_max_,pm_a_k_Y_quad_yk_,0);
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_quad_yk_ vs a_k_Y_reco_yk_: %0.16f %%<-- will not be small if tolerance_pm> 0',a_k_Y_diff_l3/max(1e-12,a_k_Y_quad_l3))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_quad_l3 %0.6f',a_k_Y_quad_l3)); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_reco_l3 %0.6f',a_k_Y_reco_l3)); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_quad_l2 %0.6f',a_k_Y_quad_l2)); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_reco_l2 %0.6f',a_k_Y_reco_l2)); end;
if (flag_verbose>0); disp(sprintf(' %% pm_a_k_Y_quad_l3 %0.6f',pm_a_k_Y_quad_l3)); end;
end;%if flag_check;
%%%%%%%%;

%%%%%%%%;
% Use a_x1_UX_Y_quad_yn_ to generate pm_S_use_k_p_wkS__ := S_x1_UX_k_p_wnS__. ;
% Note that poles are included for subsequent interpolation (when estimating ddssnll_lsq). ;
%%%%%%%%;
[ ...
 n_viewing_S_use ...
,viewing_azimu_b_S_use_ ...
,viewing_polar_a_S_use_ ...
,viewing_weight_S_use_ ...
,viewing_k_c_0_S_use_ ...
,viewing_k_c_1_S_use_ ...
,viewing_k_c_2_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
] = ...
sample_shell_6( ...
 1.0 ...
,1.0/k_p_r_max ...
,'C' ...
,1 ...
) ;
%%%%;
tmp_t = tic();
[ ...
 pm_S_use_k_p_wkS___ ...
,~ ...
,n_S_use ...
,viewing_azimu_b_S_use_ ...
,viewing_polar_a_S_use_ ...
,viewing_weight_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
] = ...
pm_template_2( ...
 0*flag_verbose ...
,l_max ...
,pm_n_k_p_r ...
,a_x1_UX_Y_quad_yn__ ...
,[] ...
,-1 ...
,n_w_max ...
,n_viewing_S_use ...
,viewing_azimu_b_S_use_ ...
,viewing_polar_a_S_use_ ...
,viewing_weight_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
);
pm_S_use_k_p_wkS__ = reshape(pm_S_use_k_p_wkS___,[pm_n_w_sum,n_S_use]);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% pm_S_use_k_p_wkS__ (pm_template_2): %0.6fs',tmp_t)); end;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% size(pm_S_use_k_p_wkS__): [%d,%d] \t memory_GB(''pm_S_use_k_p_wkS__''): %0.2f',size(pm_S_use_k_p_wkS__),memory_GB('pm_S_use_k_p_wkS__'))); end;

%%%%%%%%;
% Now define pm_M_use_k_p_wkM__. ;
%%%%%%%%;
n_M_use = 1024;
viewing_weight_M_use_ = ones(n_M_use,1);
viewing_weight_M_use_ = viewing_weight_M_use_*sum(viewing_weight_S_use_)/max(1e-12,sum(viewing_weight_M_use_));
index_equa_band_coar_ = efind(abs(viewing_polar_a_S_use_-pi/2)<1e-6); n_equa_band_coar = numel(index_equa_band_coar_);
viewing_polar_a_S_coar_ = viewing_polar_a_S_use_(1+index_equa_band_coar_);
viewing_azimu_b_S_coar_ = viewing_azimu_b_S_use_(1+index_equa_band_coar_);
viewing_gamma_z_S_coar_ = zeros(n_equa_band_coar,1);
euler_polar_a_M_use_ = pi/2*ones(n_M_use,1);
euler_azimu_b_M_use_ = linspace(0,2*pi,n_M_use+1); euler_azimu_b_M_use_ = transpose(euler_azimu_b_M_use_(1:n_M_use));
euler_gamma_z_M_use_ = zeros(n_M_use,1);
tmp_i_ = [index_equa_band_coar_(:);index_equa_band_coar_(1)];
tmp_x_ = viewing_azimu_b_S_use_(1+tmp_i_); tmp_x_(end) = tmp_x_(end)+2*pi;
tmp_y__ = permute(pm_S_use_k_p_wkS__(:,1+tmp_i_),[2,1]);
pm_M_use_k_p_wkM__ = permute(interp1(tmp_x_,tmp_y__,euler_azimu_b_M_use_,'cubic'),[2,1]);
%%%%;
factor_imagecount_M_use_ = ones(n_M_use,1);
tmp_f = sum(factor_imagecount_M_use_.*viewing_weight_M_use_);
factor_imagecount_M_use_ = factor_imagecount_M_use_./max(1e-12,tmp_f);
%%%%%%%%;

flag_calc=flag_128G;
if flag_calc;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
flag_implicit_dtau = 1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
lsigma_dist = +Inf;
weight_imagecount_M_use_ = viewing_weight_M_use_ .* factor_imagecount_M_use_ ;
str_infix = 'lsigma_pInf';
str_dir_mat = sprintf('%s_mat',dir_ssnll);
str_dir_jpg = sprintf('%s_jpg',dir_ssnll);
if flag_implicit_dtau==0; str_fname_nopath_prefix = sprintf('eig_from_synth_%s_%s',str_tolerance_pm,str_infix); end;
if flag_implicit_dtau==1; str_fname_nopath_prefix = sprintf('eig_i1_from_synth_%s_%s',str_tolerance_pm,str_infix); end;
%%%%%%%%;
% Now calculate reconstruction. ;
%%%%%%%%;

parameter_KAPPA = struct('type','KAPPA');
parameter_KAPPA.flag_verbose = 0*flag_verbose;
parameter_KAPPA.flag_kernel_full = KAPPA_flag_kernel_full;
parameter_KAPPA.flag_kernel_qpro_d0 = 1;
parameter_KAPPA.flag_kernel_qpro_d1 = 1;
parameter_KAPPA.kernel_qpro_polar_a_pole_north = KAPPA_pole_north_double;
parameter_KAPPA.kernel_qpro_polar_a_pole_south = KAPPA_pole_south_double;
parameter_KAPPA.kernel_qpro_qref_k_eq_d_double = KAPPA_qref_k_eq_d_double;
[ ...
 parameter_KAPPA ...
,KAPPA ...
,pm_a_restore_C2M0_k_Y_yk__ ...
,pm_a_restore_C1M1_k_Y_yk__ ...
,pm_a_restore_C0M2_k_Y_yk__ ...
] = ...
kappa_qpro_apply_3( ...
 parameter_KAPPA ...
,KAPPA ...
,pm_n_w_max ...
,n_M_use ...
,weight_imagecount_M_use_ ...
,euler_polar_a_M_use_ ...
,euler_azimu_b_M_use_ ...
,euler_gamma_z_M_use_ ...
,[] ...
,[] ...
,[] ...
,pm_n_k_p_r ...
,pm_M_use_k_p_wkM__ ...
,[] ...
,[] ...
,[] ...
);
%%%%%%%%;
n_type_ = [0,1];
for n_type = n_type_;
ntype = 0;
if n_type==ntype; tmp_pm_yk__ = pm_a_restore_C2M0_k_Y_yk__; tmp_str = 'pm_a_restore_C2M0_k_Y_yk__'; end; ntype = ntype + 1;
if n_type==ntype; tmp_pm_yk__ = pm_a_restore_C1M1_k_Y_yk__; tmp_str = 'pm_a_restore_C1M1_k_Y_yk__'; end; ntype = ntype + 1;
%%%%;
tmp_t = tic();
tmp_pm_yk_ = local_yk_from_yk__(pm_n_k_p_r,pm_l_max_,tmp_pm_yk__);
%%%%;
[ ...
 tmp_quad_ ...
,pm_Ylm_uklma___ ...
,pm_k_p_azimu_b_sub_uka__ ...
,pm_k_p_polar_a_sub_uka__ ...
,pm_l_max_uk_ ...
,pm_index_nu_n_k_per_shell_from_nk_p_r_ ...
,pm_index_k_per_shell_uka__ ...
] = ...
convert_spharm_to_k_p_4( ...
 0*flag_verbose ...
,pm_n_k_all ...
,pm_n_k_all_csum_ ...
,pm_k_p_r_all_ ...
,pm_k_p_azimu_b_all_ ...
,pm_k_p_polar_a_all_ ...
,pm_weight_3d_k_all_ ...
,pm_weight_shell_k_ ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_weight_3d_k_p_r_ ...
,pm_l_max_ ...
,tmp_pm_yk_ ...
,pm_Ylm_uklma___ ...
,pm_k_p_azimu_b_sub_uka__ ...
,pm_k_p_polar_a_sub_uka__ ...
,pm_l_max_uk_ ...
,pm_index_nu_n_k_per_shell_from_nk_p_r_ ...
,pm_index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% %s: convert_spharm_to_k_p_4: time %0.2fs',tmp_str,tmp_t)); end;
ntype = 0;
if n_type==ntype; pm_a_restore_C2M0_k_p_quad_ = tmp_quad_; end; ntype = ntype + 1;
if n_type==ntype; pm_a_restore_C1M1_k_p_quad_ = tmp_quad_; end; ntype = ntype + 1;
end;%for n_type = n_type_;
%%%%;
pm_a_restore_Fbp0_k_p_quad_ = pm_a_restore_C1M1_k_p_quad_./max(1e-12,pm_a_restore_C2M0_k_p_quad_);
%%%%;
tmp_t = tic();
tmp_str = 'pm_a_k_Y_Fbp0_yk_';
[ ...
 pm_a_k_Y_Fbp0_yk_ ...
,pm_Ylm_uklma___ ...
,pm_k_p_azimu_b_sub_uka__ ...
,pm_k_p_polar_a_sub_uka__ ...
,pm_l_max_uk_ ...
,pm_index_nu_n_k_per_shell_from_nk_p_r_ ...
,pm_index_k_per_shell_uka__ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,pm_n_k_all ...
,pm_n_k_all_csum_ ...
,pm_k_p_r_all_ ...
,pm_k_p_azimu_b_all_ ...
,pm_k_p_polar_a_all_ ...
,pm_weight_3d_k_all_ ...
,pm_weight_shell_k_ ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_weight_3d_k_p_r_ ...
,pm_l_max_ ...
,pm_a_restore_Fbp0_k_p_quad_ ...
,pm_Ylm_uklma___ ...
,pm_k_p_azimu_b_sub_uka__ ...
,pm_k_p_polar_a_sub_uka__ ...
,pm_l_max_uk_ ...
,pm_index_nu_n_k_per_shell_from_nk_p_r_ ...
,pm_index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% %s: convert_spharm_to_k_p_4: time %0.2fs',tmp_str,tmp_t)); end;
%%%%;
pm_a_k_Y_Fbp0_yk__ = local_yk__from_yk_(pm_n_k_p_r,pm_l_max_,pm_a_k_Y_Fbp0_yk_);

%%%%%%%%;
% Now, after reconstruction, calculate the ssnll. ;
%%%%%%%%;
tmp_t = tic();
parameter_ssnll = struct('type','parameter');
parameter_ssnll.flag_verbose = 0*flag_verbose;
parameter_ssnll.n_order = 5;
[ ...
 parameter_ssnll ...
,pm_ssnll_quad_q2d_M_ ...
,pm_ssnll_quad_q2d ...
] = ...
ssnll_from_a_k_Y_13( ...
 parameter_ssnll ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_k_p_r_max ...
,pm_l_max_ ...
,pm_a_k_Y_quad_yk__ ...
,[] ...
,pm_n_w_ ...
,pm_weight_2d_k_p_r_ ...
,pm_weight_2d_wk_ ...
,n_S_use ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_S_use_ ...
,viewing_azimu_b_S_use_ ...
,viewing_weight_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
,n_M_use ...
,weight_imagecount_M_use_ ...
,pm_M_use_k_p_wkM__ ...
,[] ...
,[] ...
,[] ...
,[] ...
,euler_polar_a_M_use_ ...
,euler_azimu_b_M_use_ ...
,euler_gamma_z_M_use_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% ssnll_from_a_k_Y_13: time %0.2fs',tmp_t)); end;
%%%%%%%%;
tmp_t = tic();
parameter_ssnll = struct('type','parameter');
parameter_ssnll.flag_verbose = 0*flag_verbose;
parameter_ssnll.n_order = 5;
[ ...
 parameter_ssnll ...
,pm_ssnll_Fbp0_q2d_M_ ...
,pm_ssnll_Fbp0_q2d ...
] = ...
ssnll_from_a_k_Y_13( ...
 parameter_ssnll ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_k_p_r_max ...
,pm_l_max_ ...
,pm_a_k_Y_Fbp0_yk__ ...
,[] ...
,pm_n_w_ ...
,pm_weight_2d_k_p_r_ ...
,pm_weight_2d_wk_ ...
,n_S_use ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_S_use_ ...
,viewing_azimu_b_S_use_ ...
,viewing_weight_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
,n_M_use ...
,weight_imagecount_M_use_ ...
,pm_M_use_k_p_wkM__ ...
,[] ...
,[] ...
,[] ...
,[] ...
,euler_polar_a_M_use_ ...
,euler_azimu_b_M_use_ ...
,euler_gamma_z_M_use_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% ssnll_from_a_k_Y_13: time %0.2fs',tmp_t)); end;
%%%%%%%%;

%%%%%%%%;
% Now perturb the image euler-angles and repeat. ;
%%%%%%%%;
dtau_perturb_ = 1e-1*[-5:+5]; n_dtau_perturb = numel(dtau_perturb_);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
for ndtau_perturb=0:n_dtau_perturb-1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
dtau_perturb = dtau_perturb_(1+ndtau_perturb);
perturb_euler_azimu_b_M_use_ = euler_azimu_b_M_use_ + dtau_perturb*sin(2*euler_azimu_b_M_use_);
%%%%%%%%;
parameter_KAPPA = struct('type','KAPPA');
parameter_KAPPA.flag_verbose = 0*flag_verbose;
parameter_KAPPA.flag_kernel_full = KAPPA_flag_kernel_full;
parameter_KAPPA.flag_kernel_qpro_d0 = 1;
parameter_KAPPA.flag_kernel_qpro_d1 = 1;
parameter_KAPPA.kernel_qpro_polar_a_pole_north = KAPPA_pole_north_double;
parameter_KAPPA.kernel_qpro_polar_a_pole_south = KAPPA_pole_south_double;
parameter_KAPPA.kernel_qpro_qref_k_eq_d_double = KAPPA_qref_k_eq_d_double;
[ ...
 parameter_KAPPA ...
,KAPPA ...
,pm_a_perturb_C2M0_k_Y_pyk___{1+ndtau_perturb} ...
,pm_a_perturb_C1M1_k_Y_pyk___{1+ndtau_perturb} ...
,pm_a_perturb_C0M2_k_Y_pyk___{1+ndtau_perturb} ...
] = ...
kappa_qpro_apply_3( ...
 parameter_KAPPA ...
,KAPPA ...
,pm_n_w_max ...
,n_M_use ...
,weight_imagecount_M_use_ ...
,euler_polar_a_M_use_ ...
,perturb_euler_azimu_b_M_use_ ...
,euler_gamma_z_M_use_ ...
,[] ...
,[] ...
,[] ...
,pm_n_k_p_r ...
,pm_M_use_k_p_wkM__ ...
,[] ...
,[] ...
,[] ...
);
%%%%%%%%;
n_type_ = [0,1];
for n_type = n_type_;
ntype = 0;
if n_type==ntype; tmp_pm_yk__ = pm_a_perturb_C2M0_k_Y_pyk___{1+ndtau_perturb}; tmp_str = 'pm_a_perturb_C2M0_k_Y_yk__'; end; ntype = ntype + 1;
if n_type==ntype; tmp_pm_yk__ = pm_a_perturb_C1M1_k_Y_pyk___{1+ndtau_perturb}; tmp_str = 'pm_a_perturb_C1M1_k_Y_yk__'; end; ntype = ntype + 1;
%%%%;
tmp_t = tic();
tmp_pm_yk_ = local_yk_from_yk__(pm_n_k_p_r,pm_l_max_,tmp_pm_yk__);
%%%%;
[ ...
 tmp_quad_ ...
,pm_Ylm_uklma___ ...
,pm_k_p_azimu_b_sub_uka__ ...
,pm_k_p_polar_a_sub_uka__ ...
,pm_l_max_uk_ ...
,pm_index_nu_n_k_per_shell_from_nk_p_r_ ...
,pm_index_k_per_shell_uka__ ...
] = ...
convert_spharm_to_k_p_4( ...
 0*flag_verbose ...
,pm_n_k_all ...
,pm_n_k_all_csum_ ...
,pm_k_p_r_all_ ...
,pm_k_p_azimu_b_all_ ...
,pm_k_p_polar_a_all_ ...
,pm_weight_3d_k_all_ ...
,pm_weight_shell_k_ ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_weight_3d_k_p_r_ ...
,pm_l_max_ ...
,tmp_pm_yk_ ...
,pm_Ylm_uklma___ ...
,pm_k_p_azimu_b_sub_uka__ ...
,pm_k_p_polar_a_sub_uka__ ...
,pm_l_max_uk_ ...
,pm_index_nu_n_k_per_shell_from_nk_p_r_ ...
,pm_index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% %s: convert_spharm_to_k_p_4: time %0.2fs',tmp_str,tmp_t)); end;
ntype = 0;
if n_type==ntype; pm_a_perturb_C2M0_k_p_quad_p__{1+ndtau_perturb} = tmp_quad_; end; ntype = ntype + 1;
if n_type==ntype; pm_a_perturb_C1M1_k_p_quad_p__{1+ndtau_perturb} = tmp_quad_; end; ntype = ntype + 1;
end;%for n_type = n_type_;
%%%%;
pm_a_perturb_Fbp1_k_p_quad_p__{1+ndtau_perturb} = pm_a_perturb_C1M1_k_p_quad_p__{1+ndtau_perturb}./max(1e-12,pm_a_perturb_C2M0_k_p_quad_p__{1+ndtau_perturb});
%%%%;
tmp_t = tic();
tmp_str = 'pm_a_k_Y_Fbp1_yk_p__{1+ndtau_perturb}';
[ ...
 pm_a_k_Y_Fbp1_yk_p__{1+ndtau_perturb} ...
,pm_Ylm_uklma___ ...
,pm_k_p_azimu_b_sub_uka__ ...
,pm_k_p_polar_a_sub_uka__ ...
,pm_l_max_uk_ ...
,pm_index_nu_n_k_per_shell_from_nk_p_r_ ...
,pm_index_k_per_shell_uka__ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,pm_n_k_all ...
,pm_n_k_all_csum_ ...
,pm_k_p_r_all_ ...
,pm_k_p_azimu_b_all_ ...
,pm_k_p_polar_a_all_ ...
,pm_weight_3d_k_all_ ...
,pm_weight_shell_k_ ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_weight_3d_k_p_r_ ...
,pm_l_max_ ...
,pm_a_perturb_Fbp1_k_p_quad_p__{1+ndtau_perturb} ...
,pm_Ylm_uklma___ ...
,pm_k_p_azimu_b_sub_uka__ ...
,pm_k_p_polar_a_sub_uka__ ...
,pm_l_max_uk_ ...
,pm_index_nu_n_k_per_shell_from_nk_p_r_ ...
,pm_index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% %s: convert_spharm_to_k_p_4: time %0.2fs',tmp_str,tmp_t)); end;
%%%%;
pm_a_k_Y_Fbp1_pyk___{1+ndtau_perturb} = local_yk__from_yk_(pm_n_k_p_r,pm_l_max_,pm_a_k_Y_Fbp1_yk_p__{1+ndtau_perturb});
%%%%;
tmp_t = tic();
parameter_ssnll = struct('type','parameter');
parameter_ssnll.flag_verbose = 0*flag_verbose;
parameter_ssnll.n_order = 5;
[ ...
 parameter_ssnll ...
,pm_ssnll_Fbp1_q2d_Mp__(:,1+ndtau_perturb) ...
,pm_ssnll_Fbp1_q2d_p_(1+ndtau_perturb) ...
] = ...
ssnll_from_a_k_Y_13( ...
 parameter_ssnll ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_k_p_r_max ...
,pm_l_max_ ...
,pm_a_k_Y_Fbp1_pyk___{1+ndtau_perturb} ...
,[] ...
,pm_n_w_ ...
,pm_weight_2d_k_p_r_ ...
,pm_weight_2d_wk_ ...
,n_S_use ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_S_use_ ...
,viewing_azimu_b_S_use_ ...
,viewing_weight_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
,n_M_use ...
,weight_imagecount_M_use_ ...
,pm_M_use_k_p_wkM__ ...
,[] ...
,[] ...
,[] ...
,[] ...
,euler_polar_a_M_use_ ...
,perturb_euler_azimu_b_M_use_ ...
,euler_gamma_z_M_use_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% ssnll_from_a_k_Y_13: time %0.2fs',tmp_t)); end;
%%%%%%%%;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%for ndtau_perturb=0:n_dtau_perturb-1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%%%%%%%%;
% Now collate results. ;
%%%%%%%%;
pm_weight_3d_riesz_k_p_r_ = pm_weight_3d_k_p_r_;
[pm_a_k_Y_quad_lr] = sqrt(local_f_bar_dot_g_(pm_n_k_p_r,pm_weight_3d_riesz_k_p_r_,pm_l_max_,0,pm_a_k_Y_quad_yk_,pm_a_k_Y_quad_yk_));
[pm_a_k_Y_Fbp0_lr] = sqrt(local_f_bar_dot_g_(pm_n_k_p_r,pm_weight_3d_riesz_k_p_r_,pm_l_max_,0,pm_a_k_Y_Fbp0_yk_,pm_a_k_Y_Fbp0_yk_));
for ndtau_perturb=0:n_dtau_perturb-1;
[pm_a_k_Y_Fbp1_lr_p_(1+ndtau_perturb)] = sqrt(local_f_bar_dot_g_(pm_n_k_p_r,pm_weight_3d_riesz_k_p_r_,pm_l_max_,0,pm_a_k_Y_Fbp1_pyk___{1+ndtau_perturb},pm_a_k_Y_Fbp1_pyk___{1+ndtau_perturb}));
pm_a_k_Y_dvol_pyk___{1+ndtau_perturb} = pm_a_k_Y_Fbp1_pyk___{1+ndtau_perturb} - pm_a_k_Y_Fbp0_yk__;
[pm_a_k_Y_dvol_lr_p_(1+ndtau_perturb)] = sqrt(local_f_bar_dot_g_(pm_n_k_p_r,pm_weight_3d_riesz_k_p_r_,pm_l_max_,0,pm_a_k_Y_dvol_pyk___{1+ndtau_perturb},pm_a_k_Y_dvol_pyk___{1+ndtau_perturb}));
end;%for ndtau_perturb=0:n_dtau_perturb-1;
%%%%%%%%;
% Simple estimate of quadratic term. ;
%%%%%%%%;
ij_mid = ceil(n_dtau_perturb/2); ij_pos = ij_mid+2; ij_neg = ij_mid-2;
tmp_dvol = (pm_a_k_Y_dvol_lr_p_(ij_pos) + pm_a_k_Y_dvol_lr_p_(ij_neg))/2;
ddssnll_dif = (pm_ssnll_Fbp1_q2d_p_(ij_pos) - 2*pm_ssnll_Fbp1_q2d_p_(ij_mid) + pm_ssnll_Fbp1_q2d_p_(ij_neg))/max(1e-12,tmp_dvol^2);
%%%%%%%%;

%%%%%%%%;
% Verdict: actually the bandlimiting prevents the longitudinal-perturbation from appearing cost-free! ;
%%%%%%%%;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%if flag_calc;

disp(sprintf(' %% returning after diagnostic')); return;

