function X = common_line_0(n_k_p_r,weight_k_p_r_,n_w_,S_k_p_,S_viewing_polar_a,S_viewing_azimu_b,S_viewing_gamma_z,M_k_p_,M_viewing_polar_a,M_viewing_azimu_b,M_viewing_gamma_z);
% Here we return the inner product of S and M along their common line. ;
% The general formula used here is as follows. ;
% let sa and ca be sin(viewing_polar_a) and cos(viewing_polar_a), respectively. ;
% let sb and cb be sin(viewing_azimu_b) and cos(viewing_azimu_b), respectively. ;
% let sc and cc be sin(inplane_gamma_z) and cos(inplane_gamma_z), respectively. ;
% And rotation by viewing_azimu_b about the +z-axis is represented as: ;
% Rz(viewing_azimu_b) = ;
% [ +cb -sb 0 ] ;
% [ +sb +cb 0 ] ;
% [  0   0  1 ] ;
% And rotation by viewing_polar_a about the +y-axis is represented as: ;
% Ry(viewing_polar_a) = ;
% [ +ca 0 +sa ] ;
% [  0  1  0  ] ;
% [ -sa 0 +ca ] ;
% And rotation by inplane_gamma_z about the +z-axis is represented as: ;
% Rz(inplane_gamma_z) = ;
% [ +cc -sc 0 ] ;
% [ +sc +cc 0 ] ;
% [  0   0  1 ] ;
% Which, collectively, implies that under the transform: ;
% Rz(viewing_azimu_b) * Ry(viewing_polar_a) * Rz(inplane_gamma_z), ;
% Which is the same as: ;
% [ +cb -sb 0 ] [ +ca*cc -ca*sc +sa ]   [ +cb*ca*cc - sb*sc , -cb*ca*sc -sb*cc , +cb*sa ];
% [ +sb +cb 0 ] [ +sc    +cc    0   ] = [ +sb*ca*cc + cb*sc , -sb*ca*sc +cb*cc , +sb*sa ];
% [  0   0  1 ] [ -sa*cc +sa*sc +ca ]   [ -sa*cc            , +sa*sc           , +ca    ];
% the point [1;0;0] is mapped to: ;
% [ template_k_c_0 ; template_k_c_1 ; template_k_c_2 ] = [ +cb*ca*cc - sb*sc ; +sb*ca*cc + cb*sc ; -sa*cc ];
% ;
% In other words: 
% the point M_k_p_(1+nw)==M_k_p__(1+nw,1+nM), ;
% corresponding to the nw-th point on the nM-th image-ring, ;
% is generated using inplane_gamma_z = 2*pi*nw/n_w, ;
% as well as viewing_polar_a and viewing_azimu_b. ;
% Thus, the k_c_ location for that point (in 3d) is: ;
% k_c_ = [ +cb*ca*cc - sb*sc ; +sb*ca*cc + cb*sc ; -sa*cc ]. ;
% Correspondingly, the k_p_r01, k_p_polar_a and k_p_azimu_b for that point can be calculated as: ;
% k_p_r01 = sqrt(k_c_(1+0)^2 + k_c_(1+1)^2) = ;
% k_p_polar_a = atan2(k_p_r01,k_c_(1+2));
% k_p_azimu_b = atan2(k_c_(1+1),k_c_(1+0));
% ;
% Here we adopt the convention that the input viewing_gamma_z for each image-ring ;
% should be applied as an inplane rotation of the image-ring itself before calculating k_c_. ;
% Thus, the viewing_gamma_z is simply subtracted from the inplane_gamma_z associated with each point nw in that image-ring. ;
% Consequently, we can combine viewing_gamma_z and inplane_gamma_z as follows: ;
% combine_gamma_z = inplane_gamma_z - viewing_gamma_z, ;
% redefine sc and cc using combine_gamma_z (rather than inplane_gamma_z) and repeat the calculation above. ;
% This results in k_c_ intersecting with the equatorial-plane when k_c_(1+2) = -sa*cc = 0, ;
% or when cos(combine_gamma_z) = 0, or when combine_gamma_z = \pm pi/2. ;
% In terms of matrices, the point M_k_p_(1+nw) is mapped to: ;
% Rz(viewing_azimu_b) * Ry(viewing_polar_a) * Rz(-viewing_gamma_z) * Rz(inplane_gamma_z) * [1;0;0] ;
% = Rz(viewing_azimu_b) * Ry(viewing_polar_a) * Rz(combine_gamma_z) * [1;0;0] ;
% ;
% Given two images, S and M, with different sets of viewing angles, we first rotate both so that the first (say S) ;
% is situated in the equatorial plane and aligned so that nw=0 corresponds to the x-axis. ;
% i.e., we multiply both S and M by inv( Rz(S_viewing_azimu_b) * Ry(S_viewing_polar_a) * Rz(-S_viewing_gamma_z) ) ;
% or by Rz(+S_viewing_gamma_z) * Ry(-S_viewing_polar_a) * Rz(-S_viewing_azimu_b) . ;
% This then transforms M into a (rotated) N as follows: ;
% N_k_p_(1+nw) = Rz(+S_viewing_gamma_z) * Ry(-S_viewing_polar_a) * Rz(-S_viewing_azimu_b) * Rz(M_viewing_azimu_b) * Ry(M_viewing_polar_a) * Rz(-M_viewing_gamma_z) * Rz(M_inplane_gamma_z) * [1;0;0] ;
% where the viewing-angles of N must be determined by the product of the 6 matrices above. ;
% Once we have expressed N_k_p_(1+nw) = Rz(N_viewing_azimu_b) * Ry(N_viewing_polar_a) * Rz(-N_viewing_gamma_z) * [1;0;0] ;
% we can immediately see that N intersects the equatorial plane when N_combine_gamma_z = \pm pi/2, ;
% or when N_inplane_gamma_z = 2*pi*nw/n_w = N_viewing_gamma_z \pm pi/2. ;
% These two points, respectively, correspond to N_k_c_ = [-sb*sc ; +cb*sc ; 0] = [\mp sin(N_viewing_azimu_b) ; \pm cos(N_viewing_azimu_b) ; 0 ] ;
% which in turn must correspond to S_k_c_ = [+cc;+sc;0] = [ cos(S_inplane_gamma_z) ; sin(S_inplane_gamma_z) ; 0 ] ;
% implying that S_inplane_gamma_z must be N_viewing_azimu_b \pm pi/2. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

n_w_max = max(n_w_);
n_w_sum = sum(n_w_);
n_w_csum_ = cumsum([0;n_w_]);

N_R_all = Rz(+S_viewing_gamma_z) * Ry(-S_viewing_polar_a) * Rz(-S_viewing_azimu_b) * Rz(M_viewing_azimu_b) * Ry(M_viewing_polar_a) * Rz(-M_viewing_gamma_z) ;
tmp_e_ = R_to_euler_0(N_R_all);
N_viewing_gamma_z = -tmp_e_(1+0);
N_viewing_polar_a = +tmp_e_(1+1);
N_viewing_azimu_b = +tmp_e_(1+2);

S_sub_ = zeros(n_k_p_r,2);
M_sub_ = zeros(n_k_p_r,2);
X_sub_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
tmp_ij_ = n_w_csum_(1+nk_p_r) + (0:n_w_(1+nk_p_r)-1);
S_sub_(1+nk_p_r,:) = interp1_nufft(n_w_(1+nk_p_r),0,2*pi,S_k_p_(1+tmp_ij_),N_viewing_azimu_b + pi/2 * [+1;-1]);
M_sub_(1+nk_p_r,:) = interp1_nufft(n_w_(1+nk_p_r),0,2*pi,M_k_p_(1+tmp_ij_),N_viewing_gamma_z + pi/2 * [+1;-1]);
X_sub_(1+nk_p_r,:) = sum(conj(S_sub_(1+nk_p_r,:)).*M_sub_(1+nk_p_r,:));
end;%for nk_p_r=0:n_k_p_r-1;

X = sum(X_sub_(:).*weight_k_p_r_(:));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
function R = Rz(w);
cw = cos(w); sw = sin(w);
R = [+cw -sw   0 ; +sw +cw   0 ;   0   0   1 ];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
function R = Ry(w);
cw = cos(w); sw = sin(w);
R = [+cw   0 +sw ;   0   1   0 ; -sw   0 +cw ];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
