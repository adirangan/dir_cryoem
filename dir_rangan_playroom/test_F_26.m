function [l2error] = test_F_26(N_pixel,K_max,n_node,n_iteration);
% testing functional lsq for 3d case. ;
% analytically calculate the overlap integral between two plane-waves in a ball, ;
% as well as the derivative of that overlap integral. : ;
% Can explicitly write down function that can be used to determine the derivative ;
% of terms like f_{j}^{\dagger} f_{j^{\prime}}, ;
% as well as the error E. ;
% Now calculating total (average) error across disc using lsq-interpolation. ;
% Using quadrature grid. ;
% Switching to pseudoinverse. ;
% Pulling out delta_t independent term from derivative. ;
% Using roughly equispaced initial nodes. ;
% Attempting to vectorize derivative calculation. ;
% Attempting to use ode23. ;
% try: ;
%{
  l2error = test_F_26(1.5,17.5,21,1024);
  %}

ni=1;
if (nargin<ni); N_pixel = 1.5; end; ni=ni+1;
if (nargin<ni); K_max = 17.5; end; ni=ni+1;
if (nargin<ni); n_node = 21; end; ni=ni+1;
if (nargin<ni); n_iteration = 1024; end; ni=ni+1;
% clear; N_pixel = 1.5; K_max = 17.5; n_node = 21; n_iteration = 1024*0.25;

verbose=1;
%h_ = @(delta_d,R_max) 4*pi*( sin(R_max.*delta_d) - (R_max.*delta_d).*cos(R_max.*delta_d) ) ./ delta_d.^3 ; % calculates <f_j,f_k>. ;
h_ = @(kd) 4*pi*( sin(kd) - (kd).*cos(kd) ) ./ kd.^3 ; % calculates <f_j,f_k>, normalized so that <f,f> = 4*pi/3, rather than 4*pi/3*R_max^3 ;
dh_ = @(kd) 12*pi*( (kd.^2/3 - 1) .* sin(kd) + (kd).*cos(kd) ) ./ kd.^4 ;
%%%%%%%%%%%%%%%%;
flag_disp=0;
if flag_disp; % test integral. ;
tmp_K_max = 17.5; R_max = 2*pi*tmp_K_max; l_max = 32;
z_target = N_pixel*pi*sqrt(2); D_target = z_target/R_max;
eps_target = 1e-0; % tolerance used for svd-expansion. ;
l_max = 32; % maximum order of bessel-functions to retain. ;
n_r_degree = 63; % degree of orthonormal-polynomial to use for r = |k|. ;
n_d_degree = 65; % degree of orthonormal-polynomial to use for d = |delta|. ;
[n_svd_r,svd_r_,svd_r_m,svd_r_c,svd_r_w_,svd_r_Jv_,n_svd_d,svd_d_,svd_d_m,svd_d_c,svd_d_w_,svd_d_Jv_,n_svd_l,svd_l_,svd_U_d_,svd_s_,svd_V_r_] = gen_j3svd_5c(tmp_K_max,N_pixel,eps_target,l_max,n_r_degree,n_d_degree);
%%%%%%%%;
sample_equatorial_distance = 0.125;
n_A=0; n_w_ = zeros(n_r_degree,1);
n_shell_ = cell(n_r_degree,1);
theta_shell__ = cell(n_r_degree,1);
phi_shell__ = cell(n_r_degree,1);
weight_shell__ = cell(n_r_degree,1);
for nq=1:n_r_degree;
tmp_equatorial_distance = sample_equatorial_distance / (svd_r_(nq)/R_max) ;
[n_shell_{nq},theta_shell__{nq},phi_shell__{nq},weight_shell__{nq}] = sample_shell_3(1,tmp_equatorial_distance,'L') ;
n_w_(nq) = n_shell_{nq};
n_A = n_A + n_w_(nq);
end;%for nq=1:n_r_degree;
disp(num2str(transpose(n_w_)));
disp(sprintf(' %% n_A %d',n_A));
%%%%%%%%;
r_magnitude_sample_ = zeros(n_A,1); r_theta_sample_ = zeros(n_A,1); r_phi_sample_ = zeros(n_A,1); quad_weight_sample_ = zeros(n_A,1);
ic=0;
for nq=1:n_r_degree;
tmp = n_shell_{nq};
r_magnitude_sample_(ic + (1:tmp),1) = svd_r_(nq);
r_theta_sample_(ic + (1:tmp),1) = theta_shell__{nq};
r_phi_sample_(ic + (1:tmp),1) = phi_shell__{nq};
quad_weight_sample_(ic + (1:tmp),1) = svd_r_w_(nq) .* svd_r_c^3 * weight_shell__{nq};
ic = ic + tmp;
end;%for nq=1:n_r_degree;
r_sample_ = zeros(n_A,3);
r_sample_(:,1) = cos(r_theta_sample_).*sin(r_phi_sample_).*r_magnitude_sample_;
r_sample_(:,2) = sin(r_theta_sample_).*sin(r_phi_sample_).*r_magnitude_sample_;
r_sample_(:,3) = cos(r_phi_sample_).*r_magnitude_sample_;
%%%%%%%%;
for ni=1:8;
tmp_dA_ = D_target*rand(1,3); tmp_dB_ = D_target*rand(1,3);
fA_sample_ = exp( +i * ( r_sample_(:,1)*tmp_dA_(1) + r_sample_(:,2)*tmp_dA_(2) + r_sample_(:,3)*tmp_dA_(3) ) );
fB_sample_ = exp( +i * ( r_sample_(:,1)*tmp_dB_(1) + r_sample_(:,2)*tmp_dB_(2) + r_sample_(:,3)*tmp_dB_(3) ) );
h_sample_ = conj(fA_sample_).*fB_sample_;
tmp_hq = sum(h_sample_.*quad_weight_sample_);
tmp_d = tmp_dA_ - tmp_dB_; tmp_d = sqrt(tmp_d(1)^2 + tmp_d(2)^2 + tmp_d(3)^2);
tmp_hx = h_(tmp_d*R_max)*R_max^3;
disp(sprintf(' %% test %d: error abs(tmp_hx-tmp_hq)/tmp_hx = %0.16f/%0.16f = %0.16f',ni,abs(tmp_hx-tmp_hq),tmp_hx,abs(tmp_hx-tmp_hq)/tmp_hx));
end;%for ni=1:8;
end;%if flag_disp;
%%%%%%%%%%%%%%%%;
flag_disp=0;
if flag_disp; % test derivative. ;
tmp_K_max = 17.5; R_max = 2*pi*tmp_K_max;
z_target = N_pixel*pi*sqrt(2); D_target = z_target/R_max;
tmp_d_ = linspace(0,D_target,1024);
tmp_h_ = h_(tmp_d_*R_max)*R_max^3; tmp_dh1_ = dh_(tmp_d_*R_max)*R_max^3;
dkd = mean(diff(tmp_d_*R_max));
tmp_dh2_ = (tmp_h_(3:end)-tmp_h_(1:end-2))/(2*dkd);
plot(kd_,tmp_h_,'k-',kd_,tmp_dh1_,'ro-',kd_(2:end-1),tmp_dh2_,'gx-');
end;%if flag_disp;
%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% use to generate svd-expansion. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
%N_pixel = 1.5;
R_max = 2*pi*K_max; l_max = 32;
z_target = N_pixel*pi*sqrt(2); D_target = z_target/R_max;
eps_target = 1e-0; % tolerance used for svd-expansion. ;
l_max = 32; % maximum order of bessel-functions to retain. ;
n_r_degree = 63; % degree of orthonormal-polynomial to use for r = |k|. ;
n_d_degree = 65; % degree of orthonormal-polynomial to use for d = |delta|. ;
[n_svd_r,svd_r_,svd_r_m,svd_r_c,svd_r_w_,svd_r_Jv_,n_svd_d,svd_d_,svd_d_m,svd_d_c,svd_d_w_,svd_d_Jv_,n_svd_l,svd_l_,svd_U_d_,svd_s_,svd_V_r_] = gen_j3svd_5c(K_max,N_pixel,eps_target,l_max,n_r_degree,n_d_degree);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% define quadrature weights. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
sample_equatorial_distance = 0.25;
d_r_ = svd_d_;
n_A=0; n_w_ = zeros(n_d_degree,1);
n_shell_ = cell(n_d_degree,1);
theta_shell__ = cell(n_d_degree,1);
phi_shell__ = cell(n_d_degree,1);
weight_shell__ = cell(n_d_degree,1);
for nq=1:n_d_degree;
tmp_equatorial_distance = sample_equatorial_distance / (svd_d_(nq)/D_target) ;
[n_shell_{nq},theta_shell__{nq},phi_shell__{nq},weight_shell__{nq}] = sample_shell_3(1,tmp_equatorial_distance,'L') ;
n_w_(nq) = n_shell_{nq};
n_A = n_A + n_w_(nq);
end;%for nq=1:n_d_degree;
disp(num2str(transpose(n_w_)));
disp(sprintf(' %% n_A %d',n_A));
%%%%%%%%;
delta_magnitude_sample_ = zeros(n_A,1); delta_theta_sample_ = zeros(n_A,1); delta_phi_sample_ = zeros(n_A,1); quad_weight_sample_ = zeros(n_A,1);
ic=0;
for nq=1:n_d_degree;
tmp = n_shell_{nq};
delta_magnitude_sample_(ic + (1:tmp),1) = svd_d_(nq);
delta_theta_sample_(ic + (1:tmp),1) = theta_shell__{nq};
delta_phi_sample_(ic + (1:tmp),1) = phi_shell__{nq};
quad_weight_sample_(ic + (1:tmp),1) = svd_d_w_(nq) .* svd_d_c^3 * weight_shell__{nq};
ic = ic + tmp;
end;%for nq=1:n_d_degree;
delta_sample_ = zeros(n_A,3);
delta_sample_(:,1) = cos(delta_theta_sample_).*sin(delta_phi_sample_).*delta_magnitude_sample_;
delta_sample_(:,2) = sin(delta_theta_sample_).*sin(delta_phi_sample_).*delta_magnitude_sample_;
delta_sample_(:,3) = cos(delta_phi_sample_).*delta_magnitude_sample_;
flag_disp=0;
if flag_disp;
tmp_k = 2.35/D_target;
tmp_Iq = sum(cos(tmp_k*delta_magnitude_sample_.*cos(delta_phi_sample_)).*quad_weight_sample_);
tmp_Ix = 4*pi*(1/tmp_k^3)*( sin(tmp_k*D_target) - (tmp_k*D_target)*cos(tmp_k*D_target) );
disp(sprintf(' %% Integration Error (tmp_Ix-tmp_Iq)/tmp_Ix = %0.16f/%0.16f = %0.16f',(tmp_Ix-tmp_Iq),tmp_Ix,(tmp_Ix-tmp_Iq)/tmp_Ix));
end;%if flag_disp;
flag_disp=0;
if flag_disp;
figure(1); subplot(1,1,1); hold on;
c_ = colormap('parula'); n_c = size(c_,1); clim = [min(quad_weight_sample_),max(quad_weight_sample_)];
for na=1:n_A;
nc = max(1,min(n_c,floor(n_c*(quad_weight_sample_(na,1) - clim(1))/diff(clim))));
plot3(delta_sample_(na,1),delta_sample_(na,2),delta_sample_(na,3),'.','Color',c_(nc,:),'MarkerSize',5);
end;%for na=1:n_A;
set(gca,'XTick',[],'YTick',[],'ZTick',[]);axis vis3d;
title('quad weight');
end;%if flag_disp;

%%%%%%%%%%%%%%%%;
svd_tolerance = 1e-6; rng(1);
delta_node_ = D_target*randn(3,n_node)/sqrt(3);
%%%%%%%%;
[t_,delta_node_IE__] = ode23(@(t,y) test_F_26_gradient(t,y,svd_tolerance,R_max,D_target,n_A,delta_sample_,quad_weight_sample_),[0:1:n_iteration],[delta_node_(:);0]);
l2error_ = [1;diff(delta_node_IE__(:,end))];
flag_disp=1;
if flag_disp;
plot(log10(t_),log10(l2error_),'k.-');
end;%if flag_disp;
l2error = l2error_(end);
%%%%%%%%%%%%%%%%;

%{
  figure(1);clf;hold on;
  %for n_node=[1+8,1+12,1+20,1+12+20,1+12+20+30];
  for n_node=[128];
  disp(sprintf(' %% n_node %d',n_node));
  delta_node_ = D_target*randn(3,n_node)/sqrt(3);
  [t_,delta_node_IE__] = ode23(@(t,y) test_F_26_gradient(t,y,svd_tolerance,R_max,D_target,n_A,delta_sample_,quad_weight_sample_),[0:1:n_iteration]/R_max,[delta_node_(:);0]);
  l2error_ = [1;diff(delta_node_IE__(:,end))*R_max];
  plot(log10(t_),log10(l2error_),'k.-'); drawnow();
  end;%for n_node=[1+12,1+12+20,1+12+20+30];
  hold off;
  xlabel('log10(t)'); ylabel('log10(E)');
  %}




