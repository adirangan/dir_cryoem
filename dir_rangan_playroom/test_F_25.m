function [E3_avg_] = test_F_25(N_pixel,n_node,dt,n_iteration);
% testing functional lsq for 3d case. ;
% analytically calculate the overlap integral between two plane-waves in a ball, ;
% as well as the derivative of that overlap integral. : ;
% Can explicitly write down function that can be used to determine the derivative ;
% of terms like f_{j}^{\dagger} f_{j^{\prime}}, ;
% as well as the error E. ;
% Now calculating total (average) error across disc using lsq-interpolation. ;
% Using quadrature grid. ;
% Switching to pseudoinverse. ;
% Pulling out delta_t independent term from derivative. ;
% Using roughly equispaced initial nodes. ;
% Attempting to vectorize derivative calculation. ;
% try: ;
%{
  E3_avg_ = test_F_25(1.5,1+12+20,0.075,1024*32);
  %}

ni=1;
if (nargin<ni); N_pixel=1.5; end; ni=ni+1;
if (nargin<ni); n_node=21; end; ni=ni+1;
if (nargin<ni); dt=0.075; end; ni=ni+1;
if (nargin<ni); n_iteration=32; end; ni=ni+1;
% N_pixel = 1.5; n_node = 21; dt = 0.075; n_iteration = 32;

verbose=1;
%h_ = @(delta_d,R_max) 4*pi*( sin(R_max.*delta_d) - (R_max.*delta_d).*cos(R_max.*delta_d) ) ./ delta_d.^3 ; % calculates <f_j,f_k>. ;
h_ = @(kd) 4*pi*( sin(kd) - (kd).*cos(kd) ) ./ kd.^3 ; % calculates <f_j,f_k>, normalized so that <f,f> = 4*pi/3, rather than 4*pi/3*R_max^3 ;
dh_ = @(kd) 12*pi*( (kd.^2/3 - 1) .* sin(kd) + (kd).*cos(kd) ) ./ kd.^4 ;
flag_disp=0;
if flag_disp; % test derivative. ;
kd_ = linspace(0,1,1024);
tmp_h_ = h_(kd_); tmp_dh_ = dh_(kd_);
dkd = mean(diff(kd_));
tmp_dh2_ = (tmp_h_(3:end)-tmp_h_(1:end-2))/(2*dkd);
plot(kd_,tmp_h_,'k-',kd_,tmp_dh_,'ro-',kd_(2:end-1),tmp_dh2_,'gx-');
end;%if flag_disp;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% use to generate svd-expansion. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
%N_pixel = 1.5;
K_max = 1; l_max = 32;
eps_target = 1e-8; % tolerance used for svd-expansion. ;
l_max = 32; % maximum order of bessel-functions to retain. ;
n_r_degree = 63; % degree of orthonormal-polynomial to use for r = |k|. ;
n_d_degree = 65; % degree of orthonormal-polynomial to use for d = |delta|. ;
z_target = N_pixel*pi*sqrt(2); D_target = z_target/(2*pi*K_max);
[n_svd_r,svd_r_,svd_r_m,svd_r_c,svd_r_w_,svd_r_Jv_,n_svd_d,svd_d_,svd_d_m,svd_d_c,svd_d_w_,svd_d_Jv_,n_svd_l,svd_l_,svd_U_d_,svd_s_,svd_V_r_] = gen_j3svd_5c(K_max,N_pixel,eps_target,l_max,n_r_degree,n_d_degree);
max_k_p = svd_r_c;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% define quadrature weights. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
sample_equatorial_distance = 0.25;
d_r_ = svd_d_;
n_A=0; n_w_ = zeros(n_d_degree,1);
n_shell_ = cell(n_d_degree,1);
theta_shell__ = cell(n_d_degree,1);
phi_shell__ = cell(n_d_degree,1);
weight_shell__ = cell(n_d_degree,1);
for nq=1:n_d_degree;
tmp_equatorial_distance = sample_equatorial_distance / (svd_d_(nq)/D_target) ;
[n_shell_{nq},theta_shell__{nq},phi_shell__{nq},weight_shell__{nq}] = sample_shell_3(1,tmp_equatorial_distance,'L') ;
n_w_(nq) = n_shell_{nq};
n_A = n_A + n_w_(nq);
end;%for nq=1:n_d_degree;
disp(num2str(transpose(n_w_)));
disp(sprintf(' %% n_A %d',n_A));
%%%%%%%%;
delta_magnitude_sample_ = zeros(n_A,1); delta_w_sample_ = zeros(n_A,1); quad_weight_sample_ = zeros(n_A,1);
ic=0;
for nq=1:n_d_degree;
tmp = n_shell_{nq};
delta_magnitude_sample_(ic + (1:tmp),1) = svd_d_(nq);
delta_theta_sample_(ic + (1:tmp),1) = theta_shell__{nq};
delta_phi_sample_(ic + (1:tmp),1) = phi_shell__{nq};
quad_weight_sample_(ic + (1:tmp),1) = svd_d_w_(nq) .* svd_d_c^3 * weight_shell__{nq};
ic = ic + tmp;
end;%for nq=1:n_d_degree;
delta_sample_ = zeros(n_A,3);
delta_sample_(:,1) = cos(delta_theta_sample_).*sin(delta_phi_sample_).*delta_magnitude_sample_;
delta_sample_(:,2) = sin(delta_theta_sample_).*sin(delta_phi_sample_).*delta_magnitude_sample_;
delta_sample_(:,3) = cos(delta_phi_sample_).*delta_magnitude_sample_;
flag_disp=1;
if flag_disp;
tmp_k = 2.35/D_target;
tmp_Iq = sum(cos(tmp_k*delta_magnitude_sample_.*cos(delta_phi_sample_)).*quad_weight_sample_);
tmp_Ix = 4*pi*(1/tmp_k^3)*( sin(tmp_k*D_target) - (tmp_k*D_target)*cos(tmp_k*D_target) );
disp(sprintf(' %% Error (Ix-Iq)/Ix = %0.16f/%0.16f = %0.16f',(tmp_Ix-tmp_Iq),tmp_Ix,(tmp_Ix-tmp_Iq)/tmp_Ix));
end;%if flag_disp;
flag_disp=0;
if flag_disp;
figure(1); subplot(1,1,1); hold on;
c_ = colormap('parula'); n_c = size(c_,1); clim = [min(quad_weight_sample_),max(quad_weight_sample_)];
for na=1:n_A;
nc = max(1,min(n_c,floor(n_c*(quad_weight_sample_(na,1) - clim(1))/diff(clim))));
plot3(delta_sample_(na,1),delta_sample_(na,2),delta_sample_(na,3),'.','Color',c_(nc,:),'MarkerSize',5);
end;%for na=1:n_A;
set(gca,'XTick',[],'YTick',[],'ZTick',[]);axis vis3d;
title('quad weight');
end;%if flag_disp;

%n_node = 13;
svd_tolerance = 1e-6; rng(1);
%%%%%%%%%%%%%%%%;
%delta_s = sqrt(3/n_node)*D_target;
%delta_node_ = delta_s*hexgrid_0(n_node);
%delta_node_ = delta_node_ + randn(size(delta_node_))*delta_s/32;
delta_node_ = D_target*randn(3,n_node)/sqrt(3);
%%%%%%%%%%%%%%%%;

%dt = 0.075; 
t_frame = 8.0; % draw every t_frame seconds. ;
%n_iteration = 1024*1;
E3_quad_ = zeros(n_iteration,1);
E3_avg_ = zeros(n_iteration,1);
t_start = tic; t_draw = toc(t_start);
for niteration=1:n_iteration;
%%%%%%%%%%%%%%%%;
H_ = zeros(n_node,n_node);
for nnodeA=1:n_node; for nnodeB=1:n_node;
d = (delta_node_(:,nnodeB) - delta_node_(:,nnodeA));
if (nnodeA~=nnodeB); H_(nnodeA,nnodeB) = h_(norm(d)*max_k_p); end;
if (nnodeA==nnodeB); H_(nnodeA,nnodeB) = (4*pi/3); end;
end;end;%for nnodeA=1:n_node; for nnodeB=1:n_node;
%disp(sprintf(' %% ni %d/%d n_node %d cond(H_) %0.2f',niteration,n_iteration,n_node,cond(H_)));
[HU_,HS_,HV_] = svd(H_); HS_ = diag(HS_); H_ij_ = find(HS_./HS_(1) < svd_tolerance);
GS_ = 1./HS_; GS_(H_ij_)=0; GS_ = diag(GS_);
G_ = HV_*GS_*transpose(HU_);
dhx__ = zeros(n_node,n_node);
dhy__ = zeros(n_node,n_node);
dhz__ = zeros(n_node,n_node);
ddx_ = repmat(delta_node_(1,:),n_node,1) - repmat(transpose(delta_node_(1,:)),1,n_node);
ddy_ = repmat(delta_node_(2,:),n_node,1) - repmat(transpose(delta_node_(2,:)),1,n_node);
ddz_ = repmat(delta_node_(3,:),n_node,1) - repmat(transpose(delta_node_(3,:)),1,n_node);
hypot_dd_ = sqrt(ddx_.^2+ddy_.^2+ddz_.^2);
tmp_ = dh_(hypot_dd_*max_k_p)*max_k_p./hypot_dd_; tmp_(find(hypot_dd_==0)) = 0;
dhx__ = - tmp_ .* ddx_;
dhy__ = - tmp_ .* ddy_;
dhz__ = - tmp_ .* ddz_;
%%%%%%%%%%%%%%%%;
dE3k_sample___ = zeros(n_A,2,n_node);
ddx_ = repmat(delta_sample_(:,1)',n_node,1) - repmat(delta_node_(1,:)',1,n_A);
ddy_ = repmat(delta_sample_(:,2)',n_node,1) - repmat(delta_node_(2,:)',1,n_A);
ddz_ = repmat(delta_sample_(:,3)',n_node,1) - repmat(delta_node_(3,:)',1,n_A);
hypot_dd_ = sqrt(ddx_.^2+ddy_.^2+ddz_.^2);
ij_=find(hypot_dd_==0);
ft_ = h_(hypot_dd_*max_k_p); ft_(ij_) = (4*pi/3);
alpha_= G_*ft_;
E3_sample_ = ( (4*pi/3) - sum(alpha_.*ft_,1) ) / (4*pi/3); % Sampled relative error. ;
E3_quad = abs(E3_sample_)*quad_weight_sample_;
tmp_ = dh_(hypot_dd_*max_k_p)*max_k_p./hypot_dd_; tmp_(ij_) = 0;
dftx_ = - tmp_.*ddx_;
dfty_ = - tmp_.*ddy_;
dftz_ = - tmp_.*ddz_;
dE3x_sample_ = 2*alpha_.*(dhx__*alpha_) - 2*alpha_.*dftx_;
dE3y_sample_ = 2*alpha_.*(dhy__*alpha_) - 2*alpha_.*dfty_;
dE3z_sample_ = 2*alpha_.*(dhz__*alpha_) - 2*alpha_.*dftz_;
t_mid = toc(t_start); if (mod(ni,100)==0); disp(sprintf(' %% ni %d/%d; time %f E3 %0.16f',niteration,n_iteration,t_mid,E3_quad)); end;
E3_quad_(niteration) = E3_quad; E3_avg_(niteration) = E3_quad;
dE3x_quad_ = dE3x_sample_*quad_weight_sample_;
dE3y_quad_ = dE3y_sample_*quad_weight_sample_;
dE3z_quad_ = dE3z_sample_*quad_weight_sample_;
%%%%%%%%%%%%%%%%;
if (t_mid-t_draw>t_frame); flag_disp=1; else flag_disp=0; end;
if (niteration==n_iteration); flag_disp=1; end;
if flag_disp;
figure(2); clf; 
%subplot(2,2,1); cla; hold on;
%polarpatch_adaptive(d_r_,n_w_,E3_sample_,colormap('hot'),[0,max(E3_sample_)]);
%plot(D_target*cos(linspace(0,2*pi,256)),D_target*sin(linspace(0,2*pi,256)),'k-');
%plot(delta_node_(1,:),delta_node_(2,:),'p','MarkerSize',15,'MarkerFaceColor','g');
%set(gca,'XTick',[],'YTick',[]);axis square;
%title(sprintf(' ni %d/%d: Error<=%f',niteration,n_iteration,max(E3_sample_)));
%hold off;
%subplot(2,2,3); cla; hold on;
subplot(1,3,3); cla; hold on;
%polarpatch_adaptive(d_r_,n_w_,log10(E3_sample_),colormap('hot'),log10(max(E3_sample_))+[-3,0]);
%plot(D_target*cos(linspace(0,2*pi,256)),D_target*sin(linspace(0,2*pi,256)),'k-');
%plot(delta_node_(1,:),delta_node_(2,:),'p','MarkerSize',15,'MarkerFaceColor','g');
plot3(delta_node_(1,:),delta_node_(2,:),delta_node_(3,:),'s','MarkerSize',15,'MarkerFaceColor','g');
%set(gca,'XTick',[],'YTick',[]);axis square;
set(gca,'XTick',[],'YTick',[],'Ztick',[]);axis vis3d;
%title(sprintf(' ni %d/%d: log10(Error)<=%f',niteration,n_iteration,log10(max(E3_sample_))));
%hold off;
%subplot(2,2,2); cla; hold on;
subplot(1,3,1); cla; hold on;
plot(1:niteration,E3_avg_(1:niteration),'k.-');ylim([0,max(E3_avg_)]); xlim([1,n_iteration]); xlabel('iteration'); ylabel('Avg Error');
hold off;
%subplot(2,2,4); cla; hold on;
subplot(1,3,2); cla; hold on;
plot(1:niteration,log10(abs(E3_avg_(1:niteration))),'k.-');ylim([-9,0]); xlim([1,n_iteration]); xlabel('iteration'); ylabel('log10(Avg Error)');
hold off;
set(gcf,'Position',1+[0,0,1024*1.5,1024]);
drawnow(); t_mid = toc(t_start); t_draw = t_mid;
end;%if flag_disp;
%%%%%%%%%%%%%%%%;
delta_node_ = delta_node_ - dt*transpose([ dE3x_quad_ , dE3y_quad_ , dE3z_quad_ ]);
for nnode=1:n_node;
tmp = sqrt( delta_node_(1,nnode).^2 + delta_node_(2,nnode).^2 + delta_node_(3,nnode).^2 );
if (tmp>1.25*D_target); delta_node_(:,nnode) = 1.25*D_target * delta_node_(:,nnode)/tmp; end;
end;%for nnode=1:n_node;
%%%%%%%%%%%%%%%%;
end;%for niteration=1:n_iteration;

fname_mat = sprintf('./dir_svd/E3_avg_N%.2d_n%d.mat',round(10*N_pixel),n_node);
save(fname_mat,'E3_avg_','N_pixel','n_node','dt','n_iteration');

fname_fig = sprintf('./dir_svd/E3_avg_N%.2d_n%d',round(10*N_pixel),n_node);
print('-depsc',sprintf('%s.eps',fname_fig));
print('-djpeg',sprintf('%s.jpg',fname_fig));


