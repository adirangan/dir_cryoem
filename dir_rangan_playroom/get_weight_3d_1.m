function ...
[ ...
 n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
] = ...
get_weight_3d_1( ...
 verbose ...
,k_p_r_max ...
,k_eq_d ...
,TorL ...
);

na=0;
if (nargin<1+na); verbose=[]; end; na=na+1;
if (nargin<1+na); k_p_r_max=[]; end; na=na+1;
if (nargin<1+na); k_eq_d=[]; end; na=na+1;
if (nargin<1+na); TorL=[]; end; na=na+1;
if isempty(verbose); verbose=0; end;
if isempty(k_p_r_max); k_p_r_max = 1.0; end;
if isempty(k_eq_d); k_eq_d = 1.0/(2*pi); end;
if isempty(TorL); TorL = 'L'; end;

n_k_p_r = 1+ceil(k_p_r_max/k_eq_d); [a_jx_,a_jw_] = jacpts(n_k_p_r,0,2);
k_p_r_ = (a_jx_+1.0)*k_p_r_max/2; weight_3d_k_p_r_ = a_jw_*(k_p_r_max/2)^3;

