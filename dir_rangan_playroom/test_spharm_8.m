function [X0_,X1_,X2_] = test_spharm_8(n_k,k_,n_l_,a_,b_);
% tests registration between molecule_A and molecule_B using an array of beta (fast only);
% when no inputs are passed we import two spherical harmonic representations (generated by kspacegrid_to_model): ;
% molecule_A: modsph_A_ori = spiral ;
% molecule_B: modsph_B_ori = spiral with twisted tail ;
% ;
% n_k = integer maximum k ;
% k_ = real array of length n_k; k_(nk) = k_value for shell nk ;
% n_l_ = integer array of length n_k; n_l_(nk) = spherical harmonic order on shell nk; n_l_(nk) corresponds to n_lm_(nk) = (n_l_(nk)+1)^2 coefficients ;
% a_ = complex array of length \sum_{nk} (n_lm_(nk)+1)^2 ; coefficients are ordered in a row, with m varying quickly and l varying slowly ;
% b_ = complex array of length \sum_{nk} (n_lm_(nk)+1)^2 ; coefficients are ordered in a row, with m varying quickly and l varying slowly ;
% a_ corresponds to molecule_a, b_ to molecule_b ;
% ;
% X_ = complex array of size (n_m_max,n_m_max,n_m_max) ;
% X_(nalpha,ngamma,nbeta) corresponds to the innerproduct between molecule_A and molecule_B, where ;
% the latter has been rotated by euler-angles alpha,beta,gamma. ;
% Note that alpha_ and gamma_ are arrays from 0 to 2*pi, ;
% whereas beta_ is an array from -pi to pi. ;
% ;
% test with: ;
%{
  [X0_,X1_,X2_] = test_spharm_8();
  %}

verbose=1;

if nargin<5;
xnodesr_ = MDA_read_r8('./dir_mdaT/xnodesr_.mda');
isph_start_ = MDA_read_i4('./dir_mdaT/isph_start_.mda');
nterms_sph_ = MDA_read_i4('./dir_mdaT/nterms_sph_.mda');
modsph_A_ori_ = MDA_read_c16('./dir_mdaT/modsph_A_ori_.mda');
modsph_B_ori_ = MDA_read_c16('./dir_mdaT/modsph_B_ori_.mda');
n_k = length(isph_start_);
k_ = xnodesr_;
n_l_ = nterms_sph_;
n_lm_ = (n_l_+1).^2;
a_ = modsph_A_ori_;
b_ = modsph_B_ori_;
end;%if nargin<4;

% generating innerproduct array over beta_;
k_max = k_(end);
n_l_max = n_l_(end);
m_max_ = -n_l_max : +n_l_max;
n_m_max = length(m_max_);

%beta_ = linspace(-pi,pi,n_m_max+1); beta_ = beta_(1:end-1); n_beta = length(beta_);

n_beta = 33;
beta_ = linspace(-pi,pi,n_beta+1); beta_ = beta_(1:end-1); n_beta = length(beta_);

tic;
X0_ = zeros(n_m_max,n_m_max,n_beta);
verbose_tab = 0;
for nbeta = 1:n_beta;
beta = beta_(nbeta);
W_ = wignerd_b(n_l_max,beta);
C_ = zeros(n_m_max,n_m_max);
n_W_ = zeros(1,1+n_l_max); for (nl=0:n_l_max); n_W_(1+nl) = numel(W_{1+nl}); end;
n_wignerd_ = cumsum([0,n_W_]);
for nmn = 1:n_m_max;
mn = m_max_(nmn);
for nmp = 1:n_m_max;
mp = m_max_(nmp);
C_tmp = 0;
for nk = 1:n_k;
k_val = k_(nk);
n_l = n_l_(nk); n_lm = n_lm_(nk); ix_base = sum(n_lm_(1:nk-1));
a_k_ = a_(ix_base + (1:n_lm)); b_k_ = b_(ix_base + (1:n_lm));
if (abs(mn)<=n_l & abs(mp)<=n_l);
for nl = 0:n_l;
mn_flag=0; if (abs(mn)<=nl); mn_flag=1; ix_mn = 1+nl*(nl+1)+mn; end;
mp_flag=0; if (abs(mp)<=nl); mp_flag=1; ix_mp = 1+nl*(nl+1)+mp; end;
if (mn_flag & mp_flag);
if (verbose>2); disp(sprintf(' ')); end; %verbose
if (verbose>2); disp(sprintf(' nmn %d mn %d ',nmn-1,mn)); end; %verbose
if (verbose>2); disp(sprintf(' nmp %d mp %d ',nmp-1,mp)); end; %verbose
if (verbose>2); disp(sprintf(' nk %d k %f ',nk-1,k_val)); end; %verbose
if (verbose>2); disp(sprintf(' n_l %d n_lm %d ',n_l,n_lm)); end; %verbose
a_base = ix_base; b_base = ix_base;
if (verbose>2); disp(sprintf(' a_base %d b_base %d ',a_base,b_base)); end; %verbose
n_wignerd = n_wignerd_(1+nl);
if (verbose>2); disp(sprintf(' n_wignerd %d a_mn %d b_mp %d',n_wignerd,ix_mn-1,ix_mp-1)); end; %verbose
nwignerd = n_wignerd + (nmn-1) + (nmp-1)*(1+2*nl);
if (verbose>2); disp(sprintf(' nwignerd %d wignerd %f ',nwignerd,W_{1+nl}(1+nl+mn,1+nl+mp))); end; %verbose
if (verbose>2); disp(sprintf(' a %f,%f b %f,%f ',real(a_k_(ix_mn)),imag(a_k_(ix_mn)),real(b_k_(ix_mp)),imag(b_k_(ix_mp)))); end; %verbose
C_tmp = C_tmp + k_val^2 * conj(a_k_(ix_mn))*W_{1+nl}(1+nl+mn,1+nl+mp)*b_k_(ix_mp);
if (verbose>2); disp(sprintf(' C %f,%f ',real(C_tmp),imag(C_tmp))); end; %verbose
if (verbose>2); verbose_tab = verbose_tab+1; end; %verbose
if (verbose_tab>5); disp('returning'); return; end;
end;%if (mn_flag & mp_flag);
end;%for nl = 0:n_l;
end;%if (abs(mn)<=n_l & abs(mp)<=n_l);
end;%for nk = 1:n_k;
C_(nmn,nmp) = C_tmp;
end;%for nmp = 1:n_m_max;
end;%for nmn = 1:n_m_max;
%X0_(:,:,nbeta) = recenter2(squeeze(C_(:,:)));
X0_(:,:,nbeta) = recenter2(fft2(recenter2(squeeze(C_(:,:)))));
%X0_(:,:,nbeta) = (fft2((squeeze(C_(:,:)))));
%X0_(:,:,nbeta) = (((squeeze(C_(:,:)))));
end;%for nbeta = 1:n_beta;
t_0 = toc; if (verbose); disp(sprintf(' %% X0 time %0.2f',t_0)); end;

tic;
X1_ = zeros(n_m_max,n_m_max,n_beta);
verbose_tab = 0;
for nbeta = 0:n_beta-1;
beta = beta_(1+nbeta);
W_ = wignerd_b(n_l_max,beta);
C_ = zeros(n_m_max,n_m_max);
n_W_ = zeros(1,1+n_l_max); for (nl=0:n_l_max); n_W_(1+nl) = numel(W_{1+nl}); end;
n_wignerd_ = cumsum([0,n_W_]);
wignerd_ = zeros(1,n_wignerd_(end));
for (nl=0:n_l_max); wignerd_(n_wignerd_(1+nl) + (1:numel(W_{1+nl}))) = W_{1+nl}(:); end;
for nmn = 0:n_m_max-1;
mn = -n_l_max + nmn;
for nmp = 0:n_m_max-1;
mp = -n_l_max + nmp;
C = 0;
a_base = 0;
b_base = 0;
for nk = 0:n_k-1;
k_val = k_(1+nk);
n_l = n_l_(1+nk); n_lm = (1+n_l)*(1+n_l);
% X0: ;
ix_base = sum(n_lm_(1:1+nk-1)); a_k_ = a_(ix_base + (1:n_lm)); b_k_ = b_(ix_base + (1:n_lm));
if (abs(mn)<=n_l & abs(mp)<=n_l);
for nl = 0:n_l;
n_wignerd = n_wignerd_(1+nl);
mn_flag=0; if (abs(mn)<=nl); mn_flag=1; a_mn = nl*(nl+1)+mn; end;
mp_flag=0; if (abs(mp)<=nl); mp_flag=1; b_mp = nl*(nl+1)+mp; end;
if (mn_flag & mp_flag);
nwignerd = n_wignerd + (nl+mn) + (nl+mp)*(1+2*nl);
wignerd = wignerd_(1+nwignerd);
a = a_(1+a_base+a_mn);
b = b_(1+b_base+b_mp);
%C = C + k_val^2 * conj(a)*wignerd*b;
% X0: ;
%C = C + k_val^2 * conj(a_k_(1+a_mn))*W_{1+nl}(1+nl+mn,1+nl+mp)*b_k_(1+b_mp);
%C = C + k_val^2 * conj(a)*W_{1+nl}(1+nl+mn,1+nl+mp)*b;
C = C + k_val^2 * conj(a)*wignerd*b;
if (verbose>2); disp(sprintf(' ')); end; %verbose
if (verbose>2); disp(sprintf(' nmn %d mn %d ',nmn-1,mn)); end; %verbose
if (verbose>2); disp(sprintf(' nmp %d mp %d ',nmp-1,mp)); end; %verbose
if (verbose>2); disp(sprintf(' nk %d k %f ',nk-1,k_val)); end; %verbose
if (verbose>2); disp(sprintf(' n_l %d n_lm %d ',n_l,n_lm)); end; %verbose
if (verbose>2); disp(sprintf(' a_base %d b_base %d ',a_base,b_base)); end; %verbose
if (verbose>2); disp(sprintf(' n_wignerd %d a_mn %d b_mp %d',n_wignerd,ix_mn-1,ix_mp-1)); end; %verbose
if (verbose>2); disp(sprintf(' nwignerd %d wignerd %f ',nwignerd,wignerd)); end; %verbose
if (verbose>2); disp(sprintf(' a %f,%f b %f,%f ',real(a_k_(ix_mn)),imag(a_k_(ix_mn)),real(b_k_(ix_mp)),imag(b_k_(ix_mp)))); end; %verbose
if (verbose>2); disp(sprintf(' C %f,%f ',real(C),imag(C))); end; %verbose
if (verbose>2); verbose_tab = verbose_tab+1; end; %verbose
if (verbose_tab>5); disp('returning'); return; end;
end;%if (mn_flag & mp_flag);
end;%for nl = 0:n_l;
end;%if (abs(mn)<=n_l & abs(mp)<=n_l);
a_base = a_base + n_lm; b_base = b_base + n_lm;
end;%for nk = 0:n_k-1;
C_(1+nmn,1+nmp) = C;
end;%for nmp = 0:n_m_max-1;
end;%for nmn = 0:n_m_max-1;
%X1_(:,:,1+nbeta) = recenter2(squeeze(C_(:,:)));
X1_(:,:,1+nbeta) = recenter2(fft2(recenter2(squeeze(C_(:,:)))));
%X1_(:,:,1+nbeta) = (fft2((squeeze(C_(:,:)))));
%X1_(:,:,1+nbeta) = (((squeeze(C_(:,:)))));
end;%for nbeta = 0:n_beta-1;
t_1 = toc; if (verbose); disp(sprintf(' %% X1 time %0.2f',t_1)); end;


X2_ = MDA_read_c16('./dir_mdaT/X_.mda');

figure;
prows = min(ceil(sqrt(n_beta)),5);
pcols = ceil(n_beta/prows);
for nbeta = 1:n_beta;
subplot(prows,pcols,nbeta); imagesc(real(squeeze(X0_(:,:,nbeta)))); set(gca,'XTick',[],'YTick',[]);
title(sprintf(' X0 %d',nbeta));
end;%for nbeta = 1:n_beta;
figure;
prows = min(ceil(sqrt(n_beta)),5);
pcols = ceil(n_beta/prows);
for nbeta = 1:n_beta;
subplot(prows,pcols,nbeta); imagesc(real(squeeze(X1_(:,:,nbeta)))); set(gca,'XTick',[],'YTick',[]);
title(sprintf(' X1 %d',nbeta));
end;%for nbeta = 1:n_beta;
figure;
prows = min(ceil(sqrt(n_beta)),5);
pcols = ceil(n_beta/prows);
for nbeta = 1:n_beta;
subplot(prows,pcols,nbeta); imagesc(real(squeeze(X2_(:,:,nbeta)))); set(gca,'XTick',[],'YTick',[]);
title(sprintf(' X2 %d',nbeta));
end;%for nbeta = 1:n_beta;


