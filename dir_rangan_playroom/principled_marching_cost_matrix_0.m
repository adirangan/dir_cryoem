function [X_,X_ori_,X_tau_,weight_so3,n_m_max,polar_a_,azimu_b_,gamma_z_] = principled_marching_cost_matrix_0(n_k_p_r,l_max,a_k_Y__);
% very inefficient: need to precompute wigner-d and reorganized a_k_Y__(:,nk_p_r), as well as use fft instead of nufft ;
verbose=1;
%%%%%%%%;
n_lm_max = (1+l_max)^2;
n_m_max = 1+2*l_max;
n_polar_a = n_m_max; polar_a_ = linspace(-pi,pi,n_polar_a+1); polar_a_ = polar_a_(1:end-1);
n_azimu_b = n_m_max; azimu_b_ = linspace(0,2*pi,n_azimu_b+1); azimu_b_ = azimu_b_(1:end-1);
n_gamma_z = n_m_max; gamma_z_ = linspace(0,2*pi,n_gamma_z+1); gamma_z_ = gamma_z_(1:end-1);
weight_so3 = (2*pi)*(2*pi)*4; %<-- total volume of so3. ;
weight_sub = ((2*pi)/n_m_max)^3; %<-- abs(sin(polar_a))*weight_sub is used for each summand on so3. ;
%%%%%%%%;
X_ori_ = zeros(n_k_p_r,n_k_p_r);
for nk_p_r_1=1:n_k_p_r;
for nk_p_r_2=nk_p_r_1:n_k_p_r;
polar_a = 0;
X_ori_(nk_p_r_1,nk_p_r_2) = register_spharm_to_spharm_2(verbose,1,1,1,l_max,a_k_Y__(:,nk_p_r_1),a_k_Y__(:,nk_p_r_2));
X_ori_(nk_p_r_2,nk_p_r_1) = conj(X_ori_(nk_p_r_1,nk_p_r_2));
tmp_sum = 0;
for npolar_a=1:n_polar_a;
polar_a = polar_a_(npolar_a);
%[tmp_X_tau__] = register_spharm_to_spharm_single_beta_2(verbose,1,1,1,l_max,a_k_Y__(:,nk_p_r_1),a_k_Y__(:,nk_p_r_2),polar_a,n_m_max,azimu_b_,n_m_max,gamma_z_,[],[],[],[]);
[tmp_X_tau__] = register_spharm_to_spharm_single_beta_2(verbose,1,1,1,l_max,a_k_Y__(:,nk_p_r_1),a_k_Y__(:,nk_p_r_2),polar_a,0,[],0,[],[],[],[],[]);
tmp_sum = tmp_sum + sum(tmp_X_tau__,'all')*abs(sin(polar_a))*weight_sub; %<-- need quadrature weight to ensure uniform measure over SO3. ;
end;%for npolar_a=1:n_polar_a;
if (verbose>1); disp(sprintf(' %% nk_p_r_1 %d nk_p_r_2 %d --> sum %0.16f',nk_p_r_1,nk_p_r_2,real(tmp_sum))); end;
X_tau_(nk_p_r_1,nk_p_r_2) = tmp_sum;
X_tau_(nk_p_r_2,nk_p_r_1) = conj(tmp_sum);
end;%for nk_p_r_2=nk_p_r_1:n_k_p_r;
if (verbose>0); disp(sprintf(' %% nk_p_r_1 %d nk_p_r_2 %d --> sum %0.16f',nk_p_r_1,nk_p_r_2,real(tmp_sum))); end;
end;%for nk_p_r_1=1:n_k_p_r;
%%%%%%%%;
X_ = real(X_ori_)*weight_so3 - real(X_tau_);
%%%%%%%%;
