function ...
[ ...
 parameter ...
] = ...
sphere_post_0( ...
 parameter ...
,polar_a ...
,azimu_b ...
,delta_polar_a ...
,delta_azimu_b ...
,delta_gamma_z ...
);

str_thisfunction = 'sphere_post_0';

if nargin<1;
disp(sprintf(' %% testing %s',str_thisfunction));
parameter = struct('type','parameter');
figure(1);clf;figsml;
plot_sphere_grid_0;
hold on;
sphere_post_0(parameter);
hold off;
xlabel('x0');
ylabel('x1');
zlabel('x2');
axis equal; axis vis3d;
disp('returning'); return;
end;%if nargin<1;

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;
if (nargin<1+na); polar_a=[]; end; na=na+1;
if (nargin<1+na); azimu_b=[]; end; na=na+1;
if (nargin<1+na); delta_polar_a=[]; end; na=na+1;
if (nargin<1+na); delta_azimu_b=[]; end; na=na+1;
if (nargin<1+na); delta_gamma_z=[]; end; na=na+1;

if isempty(parameter); parameter=struct('type','parameter'); end;
if ~isfield(parameter,'flag_verbose'); parameter.flag_verbose=0; end;
flag_verbose=parameter.flag_verbose;
if ~isfield(parameter,'k_p_r_max'); parameter.k_p_r_max=1.0; end;
k_p_r_max=parameter.k_p_r_max;
if ~isfield(parameter,'c_use__'); parameter.c_use__=colormap_beach(); end;
c_use__=parameter.c_use__; n_c_use = size(c_use__,1);
if ~isfield(parameter,'post_r_base'); parameter.post_r_base=1.0/2*pi/16; end;
post_r_base=parameter.post_r_base;
if ~isfield(parameter,'post_h_base'); parameter.post_h_base=4.0*parameter.post_r_base; end;
post_h_base=parameter.post_h_base;
if ~isfield(parameter,'post_n_side'); parameter.post_n_side=3; end;
post_n_side=parameter.post_n_side;
if ~isfield(parameter,'post_n_tall'); parameter.post_n_tall=16; end;
post_n_tall=parameter.post_n_tall;
if ~isfield(parameter,'post_linecolor'); parameter.post_linecolor=[0,0,0]; end;
post_linecolor=parameter.post_linecolor;
if ~isfield(parameter,'post_linewidth'); parameter.post_linewidth=1; end;
post_linewidth=parameter.post_linewidth;

if (flag_verbose> 0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;

if isempty(polar_a); polar_a = +pi/2.0; end;
if isempty(azimu_b); azimu_b = -pi/3.0; end;
if isempty(delta_polar_a); delta_polar_a = -0.15; end;
if isempty(delta_azimu_b); delta_azimu_b = +0.20; end;
if isempty(delta_gamma_z); delta_gamma_z = -0.50; end;

post_c_base_ = c_use__(round(n_c_use/2),:);
ca = cos(polar_a); sa = sin(polar_a);
cb = cos(azimu_b); sb = sin(azimu_b);
Rz__ = [ +cb , -sb , 0 ; +sb , +cb , 0 ; 0 , 0 , 1];
Ry__ = [ +ca , 0 , +sa ; 0 , 1 , 0 ; -sa , 0 , +ca ];
R__ = Rz__*Ry__ ;
delta_x0 = +cb*ca*delta_polar_a - sb*sa*delta_azimu_b; %<-- (dxda + dxdb)*(cbsa) ;
delta_x1 = +sb*ca*delta_polar_a + cb*sa*delta_azimu_b; %<-- (dxda + dxdb)*(sbsa) ;
delta_x2 = -   sa*delta_polar_a +     0*delta_azimu_b; %<-- (dxda + dxdb)*(ca) ;
delta_xx_ = inv(R__)*[delta_x0;delta_x1;delta_x2];
post_base_3st___ = zeros(3,post_n_side,post_n_tall);
post_c_t3__ = zeros(post_n_tall,3);
for post_ntall=0:post_n_tall-1;
post_t = (1.0*post_ntall)/max(1,(post_n_tall-1));
nc_use = max(0,min(n_c_use-1,round(n_c_use/2-1 + (post_t*delta_gamma_z)*0.5*n_c_use)));
post_c_t3__(1+post_ntall,:) = c_use__(1+nc_use,:);
for post_nside=0:post_n_side-1;
post_w = (2*pi*post_nside)/max(1,post_n_side) + (2*pi)*post_t*delta_gamma_z/max(1,post_n_side);
post_b_ = [ post_r_base*cos(post_w) ; post_r_base*sin(post_w) ; sqrt(1-post_r_base.^2) * 1.0 ] ;
post_base_3st___(:,1+post_nside,1+post_ntall) = ...
  post_b_ ...
+ post_t*[0;0;post_h_base] ...
+ post_t.^2 * delta_xx_ ...
;
end;%for post_nside=0:post_n_side-1;
end;%for post_ntall=0:post_n_tall-1;
post_base_3st___ = pagemtimes(R__,post_base_3st___); %<-- list of vertices in post. ;
post_base_sst3___ = repmat(permute(post_base_3st___,[2,3,1]),[2,1,1]); %<-- list sides twice. ;
[post_base_p_4p3___,post_base_c_1p3___] = tmp_panel_from_vertex(post_base_sst3___,post_c_t3__);
%%%%;
p = patch( ...
 post_base_p_4p3___(:,:,1+0) ...
,post_base_p_4p3___(:,:,1+1) ...
,post_base_p_4p3___(:,:,1+2) ...
,post_base_c_1p3___ ...
);
set(p,'LineStyle','none');
%%%%;
p = patch( ...
 post_base_sst3___(:,end,1+0) ...
,post_base_sst3___(:,end,1+1) ...
,post_base_sst3___(:,end,1+2) ...
,post_c_t3__(end,:) ...
);
set(p,'LineStyle','none');
%%%%;
l = line( ...
 post_base_sst3___(:,1,1+0) ...
,post_base_sst3___(:,1,1+1) ...
,post_base_sst3___(:,1,1+2) ...
,'Color',post_linecolor ...
,'LineWidth',post_linewidth ...
);
%%%%;
l = line( ...
 post_base_sst3___(:,end,1+0) ...
,post_base_sst3___(:,end,1+1) ...
,post_base_sst3___(:,end,1+2) ...
,'Color',post_linecolor ...
,'LineWidth',post_linewidth ...
);
%%%%;
for post_nside=0:post_n_side-1;
l = line( ...
 post_base_sst3___(1+post_nside,:,1+0) ...
,post_base_sst3___(1+post_nside,:,1+1) ...
,post_base_sst3___(1+post_nside,:,1+2) ...
,'Color',post_linecolor ...
,'LineWidth',post_linewidth ...
);
end;%for post_nside=0:post_n_side-1;
%%%%;

if (flag_verbose> 0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;

function [p_4p3___,c_1p3___] = tmp_panel_from_vertex(st3___,t3__);
% converts list of (n_side,n_tall,3) into faces for patch. ;
[n_side,n_tall,n_3] = size(st3___);
p_4st3____ = zeros(4,n_side-1,n_tall-1,3);
c_st3___ = zeros(n_side-1,n_tall-1,3);
for ntall=0:n_tall-1-1;
for nside=0:n_side-1-1;
p_4st3____(:,1+nside,1+ntall,1+0) = ...
[ ...
 st3___(1+nside+0,1+ntall+0,1+0) ...
,st3___(1+nside+1,1+ntall+0,1+0) ...
,st3___(1+nside+1,1+ntall+1,1+0) ...
,st3___(1+nside+0,1+ntall+1,1+0) ...
];
p_4st3____(:,1+nside,1+ntall,1+1) = ...
[ ...
 st3___(1+nside+0,1+ntall+0,1+1) ...
,st3___(1+nside+1,1+ntall+0,1+1) ...
,st3___(1+nside+1,1+ntall+1,1+1) ...
,st3___(1+nside+0,1+ntall+1,1+1) ...
];
p_4st3____(:,1+nside,1+ntall,1+2) = ...
[ ...
 st3___(1+nside+0,1+ntall+0,1+2) ...
,st3___(1+nside+1,1+ntall+0,1+2) ...
,st3___(1+nside+1,1+ntall+1,1+2) ...
,st3___(1+nside+0,1+ntall+1,1+2) ...
];
c_st3___(1+nside,1+ntall,:) = t3__(1+ntall+0,:);
end;%for nside=0:n_side-1-1;
end;%for ntall=0:n_tall-1-1;
p_4p3___ = reshape(p_4st3____,[4,(n_side-1)*(n_tall-1),3]);
c_1p3___ = reshape(c_st3___,[1,(n_side-1)*(n_tall-1),3]);

