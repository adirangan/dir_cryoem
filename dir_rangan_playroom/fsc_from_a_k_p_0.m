function ...
[ ...
 parameter ...
,fsc_k_ ...
] = ...
fsc_from_a_k_p_0( ...
 parameter ...
,n_k_all ...
,n_k_p_r ...
,n_k_all_csum_ ...
,weight_3d_k_all_ ...
,a_k_p_ ...
,b_k_p_ ...
);
%{

%%%%%%%%;
% Fourier-shell-correlation. ;
% Test with trpv1. ;
%%%%%%%%;
if ~exist('dir_pm','var'); test_pm_trpv1c_9b; end;
%%%%%%%%;
parameter_fsc = struct('type','parameter');
parameter_fsc.flag_register = 0;
[ ...
 parameter_fsc ...
,fsc_0_k_ ...
,X_best_r0 ...
] = ...
fsc_from_a_k_Y_0( ...
 parameter_fsc ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,0 ...
,l_max_ ...
,a_k_Y_quad_ ...
,c_k_Y_reco_ ...
);
%%%%%%%%;
parameter_fsc = struct('type','parameter');
[ ...
 parameter_fsc ...
,fsc_1_k_ ...
] = ...
fsc_from_a_k_p_0( ...
 parameter_fsc ...
,n_k_all ...
,n_k_p_r ...
,n_k_all_csum_ ...
,weight_3d_k_all_ ...
,a_k_p_quad_ ...
,c_k_p_reco_ ...
);
%%%%%%%%;
 figure(1+nf);nf=nf+1;
 clf; figmed;
 subplot(1,2,1);
 k_Ainv_p_r_ = (2*k_p_r_)/(n_x_M_u * Pixel_Spacing);
 k_Ainv_p_r_max = (2*k_p_r_max)/(n_x_M_u * Pixel_Spacing);
 hold on;
 plot(k_Ainv_p_r_,real(fsc_0_k_),'r-',k_Ainv_p_r_,real(fsc_1_k_),'b-',k_Ainv_p_r_,0.5*ones(size(k_p_r_)),'k:','LineWidth',3);
 xlim([0,k_Ainv_p_r_max]);
 ylim([0,1]);
 xlabel('k'); ylabel('fsc');
 hold off;
 subplot(1,2,2);
 kinv_A_p_r_ = 1./max(1e-12,k_Ainv_p_r_);
 hold on;
 plot(log10(kinv_A_p_r_),real(fsc_0_k_),'r-',log10(kinv_A_p_r_),real(fsc_1_k_),'b-',log10(kinv_A_p_r_),0.5*ones(size(k_p_r_)),'k:','LineWidth',3);
 xlim([0,+2]);
 ylim([0,1]);
 xlabel('log10(l = 1/k)'); ylabel('fsc');
 hold off;
  
  %}

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;

if isempty(parameter); parameter = struct('type','parameter'); end;
if ~isfield(parameter,'verbose'); parameter.verbose=0; end;
if ~isfield(parameter,'flag_register'); parameter.flag_register=0; end;
verbose = parameter.verbose;
flag_register = parameter.flag_register;
if flag_register~=0; disp(sprintf(' %% Warning, flag_register~=0 not implemented in fsc_from_a_k_p_0')); end;

%%%%%%%%;
fsc_k_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
n_k_all_csum = n_k_all_csum_(1+nk_p_r);
tmp_index_ = n_k_all_csum_(1+nk_p_r+0):n_k_all_csum_(1+nk_p_r+1)-1;
w_k_ = weight_3d_k_all_(1+tmp_index_);
w_k_ = w_k_./max(1e-12,sum(w_k_));
a_k_ = a_k_p_(1+tmp_index_);
b_k_ = b_k_p_(1+tmp_index_);
a_k_avg = sum(a_k_.*w_k_); a_k_std = sqrt( sum( abs(a_k_-a_k_avg).^2 .* w_k_ ) );
b_k_avg = sum(b_k_.*w_k_); b_k_std = sqrt( sum( abs(b_k_-b_k_avg).^2 .* w_k_ ) );
a_k_ = (a_k_-a_k_avg)./max(1e-12,a_k_std);
b_k_ = (b_k_-b_k_avg)./max(1e-12,b_k_std);
fsc = sum(conj(a_k_).*w_k_.*b_k_);
fsc_k_(1+nk_p_r) = fsc;
end;%for nk_p_r=0:n_k_p_r-1;

