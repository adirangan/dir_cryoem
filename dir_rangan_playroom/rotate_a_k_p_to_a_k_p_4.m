%{
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
%}
function ...
[ ...
 parameter ...
,R_use__ ...
,a_R_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
] = ...
rotate_a_k_p_to_a_k_p_4( ...
 parameter ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,euler_0in_ ...
,R_use__ ...
);
% Rotates a_k_p_qk_ by euler_use_, producing a_R_k_p_qk_. ;
% Intended for use similar to interpolate_template_R_0. ;

str_thisfunction = 'rotate_a_k_p_to_a_k_p_4';

if (nargin<1);
%%%%%%%%;
flag_verbose = 1; flag_disp = 1; nf=0;
if (flag_verbose); disp(sprintf(' %% testing rotate_a_k_p_to_a_k_p_4')); end;
%%%%%%%%;
k_int = 24;
k_eq_d_double = 0.250;
t_eq_d_double = 0.500;
n_order = 9;
%%%%;
k_p_r_max = k_int/(2*pi); k_eq_d = k_eq_d_double/(2*pi); str_C2 = 'C2';
flag_uniform_over_n_k_p_r = 1;
flag_uniform_over_polar_a = 0; %<-- This is set to match test_ssnll_from_a_k_p_14 ;
[ ...
 n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,~ ...
,~ ...
,~ ...
,~ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
] = ...
sample_sphere_7( ...
 0*flag_verbose ...
,k_p_r_max ...
,k_eq_d ...
,str_C2 ...
,flag_uniform_over_n_k_p_r ...
,flag_uniform_over_polar_a ...
) ;
%%%%;
qref_k_eq_d = k_eq_d_double/(2*pi)/max(1e-12,k_p_r_max);
[ ...
 qref_n_shell ...
,qref_azimu_b_shell_ ...
,qref_polar_a_shell_ ...
,qref_weight_shell_ ...
,qref_k_c_0_shell_ ...
,qref_k_c_1_shell_ ...
,qref_k_c_2_shell_ ...
,qref_n_polar_a ...
,qref_polar_a_ ...
,qref_n_azimu_b_ ...
] = ...
sample_shell_6( ...
 1.0 ...
,qref_k_eq_d ...
,str_C2 ...
,flag_uniform_over_polar_a ...
) ;
%%%%;
assert(fnorm(qref_azimu_b_shell_-k_p_azimu_b_qk_(1:qref_n_shell))<1e-12);
assert(fnorm(qref_polar_a_shell_-k_p_polar_a_qk_(1:qref_n_shell))<1e-12);
assert(fnorm(sum(qref_weight_shell_)-4*pi)<1e-12);
n_q = qref_n_shell;
weight_3d_k_p_qk__ = reshape(weight_3d_k_p_qk_,[n_q,n_k_p_r]);
weight_shell_qk__ = reshape(weight_shell_qk_,[n_q,n_k_p_r]);
assert(fnorm(4*pi*weight_3d_k_p_r_ - reshape(sum(weight_3d_k_p_qk__,1),[1,n_k_p_r]))<1e-12);
%%%%;
%%%%%%%%;
% collapse to single shell. ;
%%%%%%%%;
%%%%;
n_k_p_r = 1;
n_q = qref_n_shell;
n_qk = n_q;
n_qk_csum_ = [0;n_q];
k_p_r_qk_ = k_p_r_max*ones(n_q,1);
k_p_azimu_b_qk_ = qref_azimu_b_shell_;
k_p_polar_a_qk_ = qref_polar_a_shell_;
weight_3d_k_p_qk_ = qref_weight_shell_;
weight_shell_qk_ = qref_weight_shell_;
k_p_r_ = k_p_r_max;
weight_3d_k_p_r_ = (4/3)*pi*k_p_r_max^3;
k_c_0_qk_ = qref_k_c_0_shell_;
k_c_1_qk_ = qref_k_c_1_shell_;
k_c_2_qk_ = qref_k_c_2_shell_;
%%%%%%%%;
l_max_upb = 36;
l_max_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
l_max_(1+nk_p_r) = max(0,min(l_max_upb,1+ceil(2*pi*k_p_r_(1+nk_p_r))));
end;%for nk_p_r=0:n_k_p_r-1;
n_lm_ = (l_max_+1).^2;
n_lm_max = max(n_lm_);
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
l_max_max = max(l_max_);
m_max_ = -l_max_max : +l_max_max;
n_m_max = length(m_max_);
Y_l_val_ = zeros(n_lm_sum,1);
Y_m_val_ = zeros(n_lm_sum,1);
Y_k_val_ = zeros(n_lm_sum,1);
for nk_p_r=0:n_k_p_r-1;
l_max = l_max_(1+nk_p_r);
tmp_l_val_ = zeros(n_lm_(1+nk_p_r),1);
tmp_m_val_ = zeros(n_lm_(1+nk_p_r),1);
na=0; 
for l_val=0:l_max;
for m_val=-l_val:+l_val;
tmp_l_val_(1+na) = l_val;
tmp_m_val_(1+na) = m_val;
na=na+1;
end;%for m_val=-l_val:+l_val;
end;%for l_val=0:l_max;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
Y_l_val_(1+tmp_index_) = tmp_l_val_;
Y_m_val_(1+tmp_index_) = tmp_m_val_;
Y_k_val_(1+tmp_index_) = k_p_r_(1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
weight_Y_ = zeros(n_lm_sum,1);
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
weight_Y_(1+tmp_index_) = weight_3d_k_p_r_(1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;
if (flag_verbose); disp(sprintf(' %% n_qk %d, l_max_max %d',n_qk,l_max_max)); end;
%%%%%%%%;
rng(0); a_k_Y_true_ = ( randn(n_lm_sum,1) + i*randn(n_lm_sum,1) ).*exp(-(Y_l_val_+abs(Y_m_val_)).^2/(2*(l_max_max/2)^2));
tmp_t = tic;
[a_k_p_quad_] = real(convert_spharm_to_k_p_1(0*flag_verbose,n_qk,n_qk_csum_,k_p_r_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,weight_3d_k_p_qk_,weight_shell_qk_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_Y_true_))*k_p_r_max^1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_Y_true_ --> a_k_p_quad_ time %0.2fs',tmp_t)); end;
tmp_t = tic;
[a_k_Y_reco_] = convert_k_p_to_spharm_1(0*flag_verbose,n_qk,n_qk_csum_,k_p_r_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,weight_3d_k_p_qk_,weight_shell_qk_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_p_quad_)*k_p_r_max^1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_Y_reco_ time %0.2fs',tmp_t)); end;
fnorm_disp(flag_verbose,'a_k_Y_true_',a_k_Y_true_,'a_k_Y_reco_',a_k_Y_reco_,' %<-- should be large');
a_k_Y_true_ = a_k_Y_reco_;
tmp_t = tic;
[a_k_p_quad_] = real(convert_spharm_to_k_p_1(0*flag_verbose,n_qk,n_qk_csum_,k_p_r_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,weight_3d_k_p_qk_,weight_shell_qk_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_Y_true_))*k_p_r_max^1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_Y_true_ --> a_k_p_quad_ time %0.2fs',tmp_t)); end;
tmp_t = tic;
[a_k_Y_reco_] = convert_k_p_to_spharm_1(0*flag_verbose,n_qk,n_qk_csum_,k_p_r_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,weight_3d_k_p_qk_,weight_shell_qk_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_p_quad_)*k_p_r_max^1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_Y_reco_ time %0.2fs',tmp_t)); end;
fnorm_disp(flag_verbose,'a_k_Y_true_',a_k_Y_true_,'a_k_Y_reco_',a_k_Y_reco_,' %<-- should be small');
%%%%%%%%;
euler_d_ = [+0.4,-0.25,-0.1];
%%%%%%%%;
euler_b_ = [euler_d_(1+0),0,0];
b_k_Y_true_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,a_k_Y_true_,euler_b_*pi);
tmp_t = tic;
[b_k_p_quad_] = real(convert_spharm_to_k_p_1(0*flag_verbose,n_qk,n_qk_csum_,k_p_r_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,weight_3d_k_p_qk_,weight_shell_qk_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,b_k_Y_true_))*k_p_r_max^1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% b_k_Y_true_ --> b_k_p_quad_ time %0.2fs',tmp_t)); end;
%%%%;
tmp_t = tic;
a_k_p_qk_ = a_k_p_quad_;
euler_0in_ = euler_b_*pi;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
[ ...
 ~ ...
,~ ...
,b_k_p_qk_ ...
,~ ...
] = ...
rotate_a_k_p_to_a_k_p_4( ...
 [] ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,euler_0in_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_p_qk_ --> b_k_p_qk_ time %0.2fs',tmp_t)); end;
fnorm_disp(flag_verbose,'b_k_p_quad_',b_k_p_quad_,'b_k_p_qk_',b_k_p_qk_,' %<-- should be small');
%%%%%%%%;
euler_c_ = [euler_d_(1+0),euler_d_(1+1),0];
c_k_Y_true_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,a_k_Y_true_,euler_c_*pi);
tmp_t = tic;
[c_k_p_quad_] = real(convert_spharm_to_k_p_1(0*flag_verbose,n_qk,n_qk_csum_,k_p_r_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,weight_3d_k_p_qk_,weight_shell_qk_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,c_k_Y_true_))*k_p_r_max^1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% c_k_Y_true_ --> c_k_p_quad_ time %0.2fs',tmp_t)); end;
%%%%;
tmp_t = tic;
a_k_p_qk_ = a_k_p_quad_;
euler_0in_ = euler_c_*pi;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
[ ...
 ~ ...
,~ ...
,c_k_p_qk_ ...
,~ ...
] = ...
rotate_a_k_p_to_a_k_p_4( ...
 [] ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,euler_0in_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_p_qk_ --> c_k_p_qk_ time %0.2fs',tmp_t)); end;
fnorm_disp(flag_verbose,'c_k_p_quad_',c_k_p_quad_,'c_k_p_qk_',c_k_p_qk_,' %<-- should be small');
%%%%%%%%;
d_k_Y_true_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,a_k_Y_true_,euler_d_*pi);
tmp_t = tic;
[d_k_p_quad_] = real(convert_spharm_to_k_p_1(0*flag_verbose,n_qk,n_qk_csum_,k_p_r_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,weight_3d_k_p_qk_,weight_shell_qk_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,d_k_Y_true_))*k_p_r_max^1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% d_k_Y_true_ --> d_k_p_quad_ time %0.2fs',tmp_t)); end;
%%%%;
tmp_t = tic;
a_k_p_qk_ = a_k_p_quad_;
euler_0in_ = euler_d_*pi;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
[ ...
 ~ ...
,~ ...
,d_k_p_qk_ ...
,~ ...
] = ...
rotate_a_k_p_to_a_k_p_4( ...
 [] ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,euler_0in_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_p_qk_ --> d_k_p_qk_ time %0.2fs',tmp_t)); end;
fnorm_disp(flag_verbose,'d_k_p_quad_',d_k_p_quad_,'d_k_p_qk_',d_k_p_qk_,' %<-- should be small');
%%%%%%%%;
e_k_Y_true_ = a_k_Y_true_;
e_k_Y_true_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,e_k_Y_true_,[euler_d_(1+0),0,0]*pi);
e_k_Y_true_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,e_k_Y_true_,[0,euler_d_(1+1),0]*pi);
e_k_Y_true_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,e_k_Y_true_,[0,0,euler_d_(1+2)]*pi);
disp(sprintf(' %% e_k_Y_true vs d_k_Y_true error: %0.16f',fnorm(e_k_Y_true_-d_k_Y_true_)/fnorm(e_k_Y_true_)));
%%%%%%%%;
if flag_disp;
%%%%%%%%;
figure(1+nf);nf=nf+1;clf;figbig;
flag_2d_vs_3d = 1;
subplot(2,2,1);
imagesc_polar_a_azimu_b_0(k_p_polar_a_qk_,k_p_azimu_b_qk_,real(a_k_p_quad_),4*[-1,+1],colormap(colormap_80s));
xlim([0,2*pi]); ylim([0,1*pi]);
set(gca,'XTick',linspace(0,2*pi,21),'XTickLabel',linspace(0,2,21)); xlabel('azimu/\pi'); xtickangle(90);
set(gca,'YTick',linspace(0,1*pi,11),'YTickLabel',linspace(0,1,11)); ylabel('polar/\pi');
title(sprintf('\\tau [0;0;0]\\pi'));
subplot(2,2,2);
imagesc_polar_a_azimu_b_0(k_p_polar_a_qk_,k_p_azimu_b_qk_,real(b_k_p_quad_),4*[-1,+1],colormap(colormap_80s));
xlim([0,2*pi]); ylim([0,1*pi]);
set(gca,'XTick',linspace(0,2*pi,21),'XTickLabel',linspace(0,2,21)); xlabel('azimu/\pi'); xtickangle(90);
set(gca,'YTick',linspace(0,1*pi,11),'YTickLabel',linspace(0,1,11)); ylabel('polar/\pi');
title(sprintf('\\tau [%+0.2f,%+0.2f,%+0.2f]\\pi',euler_b_));
subplot(2,2,3);
imagesc_polar_a_azimu_b_0(k_p_polar_a_qk_,k_p_azimu_b_qk_,real(c_k_p_quad_),4*[-1,+1],colormap(colormap_80s));
xlim([0,2*pi]); ylim([0,1*pi]);
set(gca,'XTick',linspace(0,2*pi,21),'XTickLabel',linspace(0,2,21)); xlabel('azimu/\pi'); xtickangle(90);
set(gca,'YTick',linspace(0,1*pi,11),'YTickLabel',linspace(0,1,11)); ylabel('polar/\pi');
title(sprintf('\\tau [%+0.2f,%+0.2f,%+0.2f]\\pi',euler_c_));
subplot(2,2,4);
imagesc_polar_a_azimu_b_0(k_p_polar_a_qk_,k_p_azimu_b_qk_,real(d_k_p_quad_),4*[-1,+1],colormap(colormap_80s));
xlim([0,2*pi]); ylim([0,1*pi]);
set(gca,'XTick',linspace(0,2*pi,21),'XTickLabel',linspace(0,2,21)); xlabel('azimu/\pi'); xtickangle(90);
set(gca,'YTick',linspace(0,1*pi,11),'YTickLabel',linspace(0,1,11)); ylabel('polar/\pi');
title(sprintf('\\tau [%+0.2f,%+0.2f,%+0.2f]\\pi',euler_d_));
%%%%;
figure(1+nf);nf=nf+1;clf;figbig;
flag_2d_vs_3d = 0;
subplot(2,2,1);
imagesc_polar_a_azimu_b_0(k_p_polar_a_qk_,k_p_azimu_b_qk_,real(a_k_p_quad_),4*[-1,+1],colormap(colormap_80s),flag_2d_vs_3d);
xlabel('x');ylabel('y');zlabel('z'); axis vis3d;
title(sprintf('\\tau [0;0;0]\\pi'));
subplot(2,2,2);
imagesc_polar_a_azimu_b_0(k_p_polar_a_qk_,k_p_azimu_b_qk_,real(b_k_p_quad_),4*[-1,+1],colormap(colormap_80s),flag_2d_vs_3d);
xlabel('x');ylabel('y');zlabel('z'); axis vis3d;
title(sprintf('\\tau [%+0.2f,%+0.2f,%+0.2f]\\pi',euler_b_));
subplot(2,2,3);
imagesc_polar_a_azimu_b_0(k_p_polar_a_qk_,k_p_azimu_b_qk_,real(c_k_p_quad_),4*[-1,+1],colormap(colormap_80s),flag_2d_vs_3d);
xlabel('x');ylabel('y');zlabel('z'); axis vis3d;
title(sprintf('\\tau [%+0.2f,%+0.2f,%+0.2f]\\pi',euler_c_));
subplot(2,2,4);
imagesc_polar_a_azimu_b_0(k_p_polar_a_qk_,k_p_azimu_b_qk_,real(d_k_p_quad_),4*[-1,+1],colormap(colormap_80s),flag_2d_vs_3d);
xlabel('x');ylabel('y');zlabel('z'); axis vis3d;
title(sprintf('\\tau [%+0.2f,%+0.2f,%+0.2f]\\pi',euler_d_));
%%%%;
figure(1+nf);nf=nf+1;clf;figbig;
flag_2d_vs_3d = 0;
subplot(2,3,1);
imagesc_polar_a_azimu_b_0(k_p_polar_a_qk_,k_p_azimu_b_qk_,k_c_0_qk_,[-1,+1],colormap(colormap_80s),flag_2d_vs_3d);
xlabel('x');ylabel('y');zlabel('z'); axis vis3d;
title(sprintf('x'));
subplot(2,3,2);
imagesc_polar_a_azimu_b_0(k_p_polar_a_qk_,k_p_azimu_b_qk_,k_c_1_qk_,[-1,+1],colormap(colormap_80s),flag_2d_vs_3d);
xlabel('x');ylabel('y');zlabel('z'); axis vis3d;
title(sprintf('y',euler_b_));
subplot(2,3,3);
imagesc_polar_a_azimu_b_0(k_p_polar_a_qk_,k_p_azimu_b_qk_,k_c_2_qk_,[-1,+1],colormap(colormap_80s),flag_2d_vs_3d);
xlabel('x');ylabel('y');zlabel('z'); axis vis3d;
title(sprintf('z',euler_c_));
subplot(2,3,4);
imagesc_polar_a_azimu_b_0(k_p_polar_a_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,[0,1*pi],colormap(colormap_80s),flag_2d_vs_3d);
xlabel('x');ylabel('y');zlabel('z'); axis vis3d;
title(sprintf('polar',euler_c_));
subplot(2,3,5);
imagesc_polar_a_azimu_b_0(k_p_polar_a_qk_,k_p_azimu_b_qk_,k_p_azimu_b_qk_,[0,2*pi],colormap(colormap_80s),flag_2d_vs_3d);
xlabel('x');ylabel('y');zlabel('z'); axis vis3d;
title(sprintf('azimu',euler_c_));
%%%%%%%%;
end;%if flag_disp;
%%%%%%%%;
disp('returning'); return;
end;%if (nargin<1);

flag_verbose=0;

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;
if (nargin<1+na); n_order=[]; end; na=na+1;
if (nargin<1+na); n_qk=[]; end; na=na+1;
if (nargin<1+na); n_qk_csum_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_qk_=[]; end; na=na+1;
if (nargin<1+na); k_p_azimu_b_qk_=[]; end; na=na+1;
if (nargin<1+na); k_p_polar_a_qk_=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_p_qk_=[]; end; na=na+1;
if (nargin<1+na); weight_shell_qk_=[]; end; na=na+1;
if (nargin<1+na); n_k_p_r=[]; end; na=na+1;
if (nargin<1+na); k_p_r_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_max=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_p_r_=[]; end; na=na+1;
if (nargin<1+na); k_c_0_qk_=[]; end; na=na+1;
if (nargin<1+na); k_c_1_qk_=[]; end; na=na+1;
if (nargin<1+na); k_c_2_qk_=[]; end; na=na+1;
if (nargin<1+na); n_polar_a_k_=[]; end; na=na+1;
if (nargin<1+na); polar_a_ka__=[]; end; na=na+1;
if (nargin<1+na); n_azimu_b_ka__=[]; end; na=na+1;
if (nargin<1+na); a_k_p_qk_=[]; end; na=na+1;
if (nargin<1+na); ba_from_single_shell_baba__=[]; end; na=na+1;
if (nargin<1+na); euler_0in_=[]; end; na=na+1;
if (nargin<1+na); R_use__=[]; end; na=na+1;

if (flag_verbose>0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;

%%%%%%%%;
% Check spherical-grid for consistency. ;
% For efficiency the spherical-grid should be generated using: ;
% flag_uniform_over_n_k_p_r = 1;
% flag_uniform_over_polar_a = 0;
% str_T_vs_L = 'C2';
% For accuracy one might consider increasing the angular-resolution (on each shell) ;
% without necessarily increasing the radial-resolution (i.e., the distance between shells). ;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% Check spherical-grid for consistency.')); end;
%%%%%%%%;
[ ...
 parameter ...
,polar_a_single_shell_ ...
,n_azimu_b_single_shell_ ...
,n_polar_a_single_shell ...
,polar_a_single_shell_lim_ ...
,n_q_single_shell ...
,k_c_0_single_shell_ ...
,k_c_1_single_shell_ ...
,k_c_2_single_shell_ ...
,k_p_azimu_b_single_shell_ ...
,k_p_polar_a_single_shell_ ...
,weight_3d_k_single_shell_ ...
,weight_shell_qk_single_shell_ ...
,weight_shell_qk_unit_shell_ ...
] = ...
interpolate_template_consistency_check_0( ...
 parameter ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
);
%%%%%%%%;

%%%%%%%%;
% define rotations. ;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% defining rotations.')); end;
Rz = @(azimu_b) ...
[ +cos(azimu_b) -sin(azimu_b) 0 ; ...
  +sin(azimu_b) +cos(azimu_b) 0 ; ...
   0             0            1 ; ...
] ;
%%%%%%%%;
Ry = @(polar_a) ...
[ +cos(polar_a) 0 +sin(polar_a) ; ...
   0            1  0            ; ...
  -sin(polar_a) 0 +cos(polar_a) ; ...
];
%%%%%%%%;
if isempty(R_use__);
if (flag_verbose>0); disp(sprintf(' %% defining R_use__.')); end;
%euler_use_ = euler_0in_; %<-- note that we define R_use__ via the given rotation. ;
euler_use_ = -flip(euler_0in_); %<-- note that we define R_use__ via the inverse rotation. ;
%euler_use_ = flip(euler_0in_); %<-- note that we define R_use__ via the reversed rotation. ;
%euler_use_ = -euler_0in_; %<-- note that we define R_use__ via the negated rotation. ;
R_use__ = euler_to_R_0(euler_use_);
fnorm_disp(flag_verbose,'R_use__',R_use__,'euler_to_R_0(euler_use_)',euler_to_R_0(euler_use_));
fnorm_disp(flag_verbose,'euler_use_',euler_use_,'R_to_euler_0(R_use__)',R_to_euler_0(R_use__));
end;%if isempty(R_use__);

%%%%%%%%;
% Now rotate the quadrature-grid. ;
%%%%%%%%;
euler_use_ = R_to_euler_0(R_use__);
if (flag_verbose>0); disp(sprintf(' %% rotating quadrature-grid.')); end;
tmp_t = tic();
tmp_q3__ = cat(2,k_c_0_single_shell_,k_c_1_single_shell_,k_c_2_single_shell_)*transpose(R_use__);
R_k_c_0_single_shell_ = tmp_q3__(:,1+0); R_k_c_1_single_shell_ = tmp_q3__(:,1+1); R_k_c_2_single_shell_ = tmp_q3__(:,1+2);
R_k_p_r01_single_shell_ = sqrt(R_k_c_0_single_shell_.^2 + R_k_c_1_single_shell_.^2);
R_k_p_polar_a_single_shell_ = atan2(R_k_p_r01_single_shell_,R_k_c_2_single_shell_);
R_k_p_azimu_b_single_shell_ = atan2(R_k_c_1_single_shell_,R_k_c_0_single_shell_);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% rotating quadrature-grid: %0.6fs',tmp_t)); end;
%%%%%%%%;

%%%%%%%%;
% build interpolant. ;
%%%%%%%%;
if isempty(ba_from_single_shell_baba__);
if (flag_verbose>0); disp(sprintf(' %% Building interpolant')); end;
if (flag_verbose>0); disp(sprintf(' %% calling shell_k_p_scatter_from_adaptive_interpolate_n_9.')); end;
tmp_t = tic();
[ ...
 ba_from_single_shell_baba__ ...
] = ...
shell_k_p_scatter_from_adaptive_interpolate_n_9( ...
 n_order ...
,n_polar_a_single_shell ...
,n_azimu_b_single_shell_ ...
,polar_a_single_shell_lim_ ...
,n_q_single_shell ...
,R_k_p_polar_a_single_shell_ ...
,R_k_p_azimu_b_single_shell_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% shell_k_p_scatter_from_adaptive_interpolate_n_9: %0.6fs',tmp_t)); end;
end;%if isempty(ba_from_single_shell_baba__);
%%%%%%%%;
% apply interpolant. ;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% Applying interpolant.')); end;
tmp_t = tic();
a_R_k_p_qk_ = reshape(ba_from_single_shell_baba__*reshape(a_k_p_qk_,[n_q_single_shell,n_k_p_r]),[n_qk,1]);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% apply interpolant: %0.6fs',tmp_t)); end;
%%%%%%%%;

if (flag_verbose>0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;
