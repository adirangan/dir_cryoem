%%%%%%%%;
% testing conjugate-gradient like method ;
% for finding smallest eigenvalue of ;
% symmetric-positive-definite matrix. ;
%%%%%%%%;
n_x = 64;
sigma = 0.25*n_x;
S_ = exp(-transpose([0:n_x-1]).^2 / (2*sigma^2));
[U__,~] = qr(rand(n_x,n_x));
H__ = U__*diag(S_)*transpose(U__);
A = @(x_) H__*x_ ; %<-- matrix function. ;
b_ = zeros(n_x,1);
%%%%;
n_iteration = 8;
x_xi__ = zeros(n_x,n_iteration);
r_xi__ = zeros(n_x,n_iteration);
p_xi__ = zeros(n_x,n_iteration);
niteration=0;
x0_ = ones(n_x,1)/max(1,sqrt(n_x));
x_xi__(:,1+niteration) = x0_;
r0_ = b_ - A(x0_);
r_xi__(:,1+niteration) = r0_;
p_xi__(:,1+niteration) = r0_;
alph_i_ = zeros(n_iteration,1);
beta_i_ = zeros(n_iteration,1);
for niteration=0:n_iteration-1;
r0_ = r_xi__(:,1+niteration+0);
p0_ = p_xi__(:,1+niteration+0);
x0_ = x_xi__(:,1+niteration+0);
Ap0_ = A(p0_);
alph0 = transpose(r0_)*r0_ / max(1e-12,transpose(p0_)*Ap0_) ;
x1_ = x0_ + alph0*p0_ ;
r1_ = r0_ - alph0*Ap0_ ;
beta0 = transpose(r1_)*r1_ / max(1e-12,transpose(r0_)*r0_) ;
p1_ = r1_ + beta0*p0_ ;
x_xi__(:,1+niteration+1) = x1_;
r_xi__(:,1+niteration+1) = r1_;
p_xi__(:,1+niteration+1) = p1_;
alph_i_(1+niteration+0) = alph0;
beta_i_(1+niteration+0) = beta0;
end;%for niteration=0:n_iteration-1;
%%%%;
x_norm_xi__ = zeros(n_x,n_iteration);
for niteration=0:n_iteration-1;
x0_ = x_xi__(:,1+niteration);
x_norm_xi__(:,1+niteration) = x0_/max(1e-12,fnorm(x0_));
end;%for niteration=0:n_iteration-1;
Utx__ = ctranspose(U__)*x_norm_xi__;
%%%%;

%%%%%%%%;
% testing lanczos method ;
% for finding extreme eigenvalues of ;
% symmetric-positive-definite matrix. ;
%%%%%%%%;
n_iteration = 8;
v_xi__ = zeros(n_x,n_iteration);
w_xi__ = zeros(n_x,n_iteration);
alph_i_ = zeros(n_iteration,1);
beta_i_ = zeros(n_iteration,1);
niteration=0;
v0_ = ones(n_x,1)/max(1,sqrt(n_x));
v_xi__(:,1+niteration) = v0_;
w0_ = A(v0_);
alph0 = ctranspose(w0_)*v0_;
w0_ = w0_ - alph0*v0_;
w_xi__(:,1+niteration) = w0_;
alph_i_(1+niteration) = alph0;
for niteration=0:n_iteration-1;
v0_ = v_xi__(:,1+niteration+0);
w0_ = w_xi__(:,1+niteration+0);
beta1 = sqrt(ctranspose(w0_)*w0_);
if beta1> 1e-12; v1_ = w0_/beta1; end;
if beta1<=1e-12; disp(sprintf(' %% Warning, small beta1')); end;
w1_ = A(v1_);
alph1 = ctranspose(w1_)*v1_;
w1_ = w1_ - alph1*v1_ - beta1*v0_;
v_xi__(:,1+niteration+1) = v1_;
w_xi__(:,1+niteration+1) = w1_;
alph_i_(1+niteration+1) = alph1;
beta_i_(1+niteration+1) = beta1;
end;%for niteration=0:n_iteration-1;
%%%%;
T__ = spdiags([circshift(beta_i_,-1),alph_i_,beta_i_],[-1,0,+1],1+n_iteration,1+n_iteration);
[UT__,ST__] = eigs(T__,1+n_iteration); ST_ = diag(ST__);
vUT__ = v_xi__*UT__;
UtvUT__ = ctranspose(U__)*vUT__;
%%%%;

%%%%%%%%;
% compare. ;
%%%%%%%%;
figure(1);clf;figmed;
subplot(1,2,1);
plot(Utx__(:,end),UtvUT__(:,end),'o');
xlabel('Utx__(:,end)','Interpreter','none');
ylabel('UtvUT__(:,end)','Interpreter','none');
subplot(1,2,2);
plot(x_xi__(:,end),vUT__(:,end),'o');
xlabel('x_xi__(:,end)','Interpreter','none');
ylabel('vUT__(:,end)','Interpreter','none');

%%%%%%%%;
% Note that the results are very similar. ;
% lanczos has the advantage that the vectors v_xi__ ;
% can easily be restricted to a subspace. ;
%%%%%%%%;
