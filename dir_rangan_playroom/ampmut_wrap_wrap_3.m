function ...
parameter = ...
ampmut_wrap_wrap_3( ...
 parameter ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,weight_2d_k_p_r_ ...
,n_w_ ...
,dat_n_UX_rank ...
,UX__ ...
,X_weight_r_ ...
,n_M ...
,M_k_p__ ...
,n_ctf ...
,n_CTF_rank ...
,CTF_index_ ...
,CTF_k_p__ ...
,l_max_ ...
,a_k_Y_true_ ...
,euler_polar_a_true_ ...
,euler_azimu_b_true_ ...
,euler_gamma_z_true_ ...
,image_delta_x_true_ ...
,image_delta_y_true_ ...
);

verbose=2;
if (verbose); disp(sprintf(' %% [entering ampmut_wrap_wrap_3]')); end;

platform = 'access1';
if (exist('platform.type','file')); fp=fopen('platform.type'); platform = fscanf(fp,'%s'); fclose(fp); end;
if (strcmp(platform,'access1')); setup_access1; string_root = 'data'; end;
if (strcmp(platform,'OptiPlex')); setup_OptiPlex; string_root = 'home'; end;

if isempty(parameter);
parameter = struct('type','parameter');
end;%if isempty(parameter);
%%%%%%%%;
if (~isfield(parameter,'dir_pm')); parameter.dir_pm = pwd; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'rseed')); parameter.rseed = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'delta_r_max')); parameter.delta_r_max = 0.1; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'delta_r_upb')); parameter.delta_r_upb = 0.2; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'cg_lsq_n_order')); parameter.cg_lsq_n_order = 5; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'date_diff_threshold')); parameter.date_diff_threshold = 0.25; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'flag_force_create_mat')); parameter.flag_force_create_mat = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'flag_force_create_tmp')); parameter.flag_force_create_tmp = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'flag_local_exclusion')); parameter.flag_local_exclusion = 0; end; %<-- parameter_bookmark. ;
%%%%%%%%;
flag_local_exclusion = parameter.flag_local_exclusion;
str_le = ''; if (flag_local_exclusion); str_le = sprintf('e1'); end;
dir_pm = rootswitch(parameter.dir_pm,string_root,'rangan');
parameter.dir_pm = dir_pm;

rseed = parameter.rseed;
delta_r_max = parameter.delta_r_max;
delta_r_upb = parameter.delta_r_upb;
cg_lsq_n_order = parameter.cg_lsq_n_order;
date_diff_threshold = parameter.date_diff_threshold;
flag_force_create_mat = parameter.flag_force_create_mat;
flag_force_create_tmp = parameter.flag_force_create_tmp;

n_w_max = max(n_w_);
n_w_sum = sum(n_w_);
n_w_csum_ = cumsum([0;n_w_]);
l_max_max = max(l_max_);
n_lm_ = (l_max_+1).^2;
n_lm_max = max(n_lm_);
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
%%%%%%%%;
n_UX_rank = n_k_p_r-1; %<-- just to check dimensions. ;
CTF_k_p_r__ = zeros(n_k_p_r,n_ctf);
for nctf=0:n_ctf-1;
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_w_csum_(1+nk_p_r) + (0:n_w_(1+nk_p_r)-1);
CTF_k_p_r__(1+nk_p_r,1+nctf) = mean(CTF_k_p__(1+tmp_index_,1+nctf));
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nctf=0:n_ctf-1;
CTF_avg_k_p_ = mean(CTF_k_p__,2);
%imagesc_p(n_k_p_r,k_p_r_,n_w_,sum(n_w_),real(CTF_avg_k_p_(:)),[-1,+1],colormap_beach());
CTF_avg_k_p_r_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_w_csum_(1+nk_p_r) + (0:n_w_(1+nk_p_r)-1);
CTF_avg_k_p_r_(1+nk_p_r) = mean(CTF_avg_k_p_(1+tmp_index_));
end;%for nk_p_r=0:n_k_p_r-1;
CTF_k_p_r_xcor__ = CTF_k_p_r__(:,1+CTF_index_(1+(0:n_M-1))) * transpose(CTF_k_p_r__(:,1+CTF_index_(1+(0:n_M-1)))) / n_M;
%%%%%%%%;

%%%%%%%%;
% First calculate empirical principal-modes. ;
%%%%%%%%;
[ ...
 X_2d_Memp_d1__ ...
,X_2d_Memp_d1_weight_r_ ...
] = ...
principled_marching_empirical_cost_matrix_0( ...
 n_k_p_r ...
,k_p_r_ ...
,weight_2d_k_p_r_ ...
,n_w_ ...
,n_M ...
,M_k_p__ ...
);
%%%%%%%%;
[UX_2d_Memp_d1__,SX_2d_Memp_d1__,VX_2d_Memp_d1__] = svds(X_2d_Memp_d1__,n_UX_rank); SX_2d_Memp_d1_ = diag(SX_2d_Memp_d1__);
if (verbose); disp(sprintf(' %% cumsum(SX_2d_Memp_d1_): ')); disp(sprintf(' %% %0.4f',cumsum(SX_2d_Memp_d1_/sum(SX_2d_Memp_d1_)))); end;
%%%%%%%%;
% Now form a_CTF_avg_UX_2d_Memp_d1_Y_quad__ ;
%%%%%%%%;
a_CTF_avg_UX_2d_Memp_d1_Y_quad__ = zeros(n_lm_max,n_UX_rank);
for nUX_rank=0:n_UX_rank-1;
for nk_p_r=0:n_k_p_r-1;
tmp_l_max = l_max_(1+nk_p_r);
tmp_n_lm = (tmp_l_max+1).^2;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:tmp_n_lm-1);
a_CTF_avg_UX_2d_Memp_d1_Y_quad__(1:tmp_n_lm,1+nUX_rank) = ...
a_CTF_avg_UX_2d_Memp_d1_Y_quad__(1:tmp_n_lm,1+nUX_rank) + ...
UX_2d_Memp_d1__(1+nk_p_r,1+nUX_rank)*X_2d_Memp_d1_weight_r_(1+nk_p_r)*a_k_Y_true_(1+tmp_index_)*CTF_avg_k_p_r_(1+nk_p_r); ...
%<-- use average CTF here, under the assumption that a_CTF_UX_2d_Memp_d1_Y_quad_ will be used alone. ;
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nUX_rank=0:n_UX_rank-1;

%%%%%%%%;
% Now run the basic ampmut using the empirical-principal-modes. ;
%%%%%%%%;
ut_fname_pre = sprintf('%s_mat/u%st%.4dn%.2dr%d',dir_pm,str_le,floor(1000*delta_r_max),dat_n_UX_rank,rseed);
[flag_skip,ut_fname_mat] = open_fname_tmp(ut_fname_pre,date_diff_threshold,flag_force_create_mat,flag_force_create_tmp);
if ~flag_skip;
%try;
disp(sprintf(' %% %s not found, creating',ut_fname_mat));
ut_parameter = struct('type','parameter');
ut_parameter.delta_r_upb = delta_r_upb;
ut_parameter.delta_r_max = delta_r_max;
ut_parameter.rseed = rseed;
ut_parameter.fname_pre = ut_fname_pre;
ut_parameter.flag_local_exclusion = flag_local_exclusion;
ampmut_wrap_3( ...
 ut_parameter ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,n_w_max ...
,dat_n_UX_rank ...
,UX_2d_Memp_d1__ ...
,X_2d_Memp_d1_weight_r_ ...
,n_M ...
,M_k_p__ ...
,n_CTF_rank ...
,CTF_index_ ...
,CTF_k_p_r__ ...
);
%catch; disp(sprintf(' %% WARNING: error generating %s',ut_fname_mat)); end;%try;
close_fname_tmp(ut_fname_pre);
end;%if ~flag_skip;

%%%%%%%%;
if ( exist(ut_fname_mat,'file'));
%%%%%%%%;
% First collect statistics. ;
%%%%%%%%;
disp(sprintf(' %% %s found, aligning',ut_fname_mat));
tmp_ut_ = load(ut_fname_mat);
if (~isfield(tmp_ut_.parameter,'fname_pre')); tmp_ut_.parameter.fname_pre = ut_fname_pre; end; %<-- parameter_bookmark. ;
%%%%%%%%;
tmp_ut_fname_pre = sprintf('%s_align_a_CTF_avg_UX_Y_',tmp_ut_.parameter.fname_pre);
tmp_ut_fname_pre = rootswitch(tmp_ut_fname_pre,string_root,'rangan');
tmp_ut_.parameter.fname_align_a_CTF_avg_UX_Y_pre = tmp_ut_fname_pre;
[tmp_ut_flag_skip,tmp_ut_fname_mat] = open_fname_tmp(tmp_ut_fname_pre,date_diff_threshold,flag_force_create_mat,flag_force_create_tmp);
if ~tmp_ut_flag_skip;
try;
disp(sprintf(' %% %s not found, creating',tmp_ut_fname_mat));
%%%%;
ampmut_align_to_a_CTF_avg_UX_Y_0( ...
 tmp_ut_.parameter ...
,l_max_max ...
,dat_n_UX_rank ...
,reshape(a_CTF_avg_UX_2d_Memp_d1_Y_quad__(:,1:dat_n_UX_rank),[n_lm_max*dat_n_UX_rank,1]) ...
,n_M ...
,euler_polar_a_true_ ...
,euler_azimu_b_true_ ...
,euler_gamma_z_true_ ...
,image_delta_x_true_ ...
,image_delta_y_true_ ...
,[] ...
,tmp_ut_.a_CTF_avg_UX_Y__ ...
,tmp_ut_.euler_polar_a__ ...
,tmp_ut_.euler_azimu_b__ ...
,tmp_ut_.euler_gamma_z__ ...
,tmp_ut_.image_delta_x_acc__ + tmp_ut_.image_delta_x_upd__ ...
,tmp_ut_.image_delta_y_acc__ + tmp_ut_.image_delta_y_upd__ ...
);
catch; disp(sprintf(' %% WARNING: error generating %s',tmp_ut_fname_mat)); end;%try;
close_fname_tmp(tmp_ut_fname_pre);
end;%if ~tmp_ut_flag_skip;
%%%%%%%%;
tmp_ut_fname_pre = sprintf('%s_align_a_k_Y_',tmp_ut_.parameter.fname_pre);
tmp_ut_fname_pre = rootswitch(tmp_ut_fname_pre,string_root,'rangan');
tmp_ut_.parameter.fname_align_a_k_Y_pre = tmp_ut_fname_pre;
[tmp_ut_flag_skip,tmp_ut_fname_mat] = open_fname_tmp(tmp_ut_fname_pre,date_diff_threshold,flag_force_create_mat,flag_force_create_tmp);
if ~tmp_ut_flag_skip;
try;
disp(sprintf(' %% %s not found, creating',tmp_ut_fname_mat));
ampmut_align_to_a_k_Y_0( ...
 tmp_ut_.parameter ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,n_w_ ...
,weight_3d_k_p_r_ ...
,weight_2d_k_p_r_ ...
,n_M ...
,M_k_p__ ...
,CTF_index_ ...
,CTF_k_p__ ...
,l_max_ ...
,a_k_Y_true_ ...
,[] ...
,tmp_ut_.euler_polar_a__ ...
,tmp_ut_.euler_azimu_b__ ...
,tmp_ut_.euler_gamma_z__ ...
,tmp_ut_.image_delta_x_acc__ + tmp_ut_.image_delta_x_upd__ ...
,tmp_ut_.image_delta_y_acc__ + tmp_ut_.image_delta_y_upd__ ...
);
catch; disp(sprintf(' %% WARNING: error generating %s',tmp_ut_fname_mat)); end;%try;
close_fname_tmp(tmp_ut_fname_pre);
end;%if ~tmp_ut_flag_skip;
%%%%%%%%;
% Now use the final step to reconstruct the molecule. ;
%%%%%%%%;
tmp_ut_euler_polar_a_ = tmp_ut_.euler_polar_a__(:,end);
tmp_ut_euler_azimu_b_ = tmp_ut_.euler_azimu_b__(:,end);
tmp_ut_euler_gamma_z_ = tmp_ut_.euler_gamma_z__(:,end);
tmp_ut_image_delta_x_ = tmp_ut_.image_delta_x_acc__(:,end) + tmp_ut_.image_delta_x_upd__(:,end);
tmp_ut_image_delta_y_ = tmp_ut_.image_delta_y_acc__(:,end) + tmp_ut_.image_delta_y_upd__(:,end);
fname_ut_k_Y_mat = sprintf('%s_a_k_Y_.mat',tmp_ut_.parameter.fname_pre);
fname_ut_k_Y_mat = rootswitch(fname_ut_k_Y_mat,string_root,'rangan');
if (~exist(fname_ut_k_Y_mat,'file'));
if (verbose); disp(sprintf(' %% %s not found, creating',fname_ut_k_Y_mat)); end;
a_k_Y_reco_ = ...
cg_lsq_4( ...
 cg_lsq_n_order ...
,n_k_p_r ...
,k_p_r_ ...
,l_max_ ...
,n_w_ ...
,n_M ...
,M_k_p__ ...
,CTF_index_ ...
,CTF_k_p__ ...
,tmp_ut_euler_polar_a_ ...
,tmp_ut_euler_azimu_b_ ...
,tmp_ut_euler_gamma_z_ ...
,tmp_ut_image_delta_x_ ...
,tmp_ut_image_delta_y_ ...
);
save(fname_ut_k_Y_mat,'a_k_Y_reco_');
end;%if (~exist(fname_ut_k_Y_mat,'file'));
load(fname_ut_k_Y_mat);
%%%%%%%%;
% Now use the final step to recalculate the principal-modes. ;
%%%%%%%%;
a_k_Y_reco__ = zeros(n_lm_max,n_k_p_r);
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
a_k_Y_reco__(1:n_lm_(1+nk_p_r),1+nk_p_r) = a_k_Y_reco_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;
[ ...
 X_2d_xcor_d0__ ...
,X_2d_xcor_d0_weight_r_ ...
] = ...
principled_marching_cost_matrix_3( ...
 n_k_p_r ...
,weight_2d_k_p_r_ ...
,l_max_max ...
,a_k_Y_reco__ ...
,CTF_k_p_r_xcor__ ...
);
[UX_2d_xcor_d0__,SX_2d_xcor_d0__,VX_2d_xcor_d0__] = svds(X_2d_xcor_d0__,n_UX_rank); SX_2d_xcor_d0_ = diag(SX_2d_xcor_d0__);
if (verbose); disp(sprintf(' %% cumsum(SX_2d_xcor_d0_): ')); disp(sprintf(' %% %0.4f',cumsum(SX_2d_xcor_d0_/sum(SX_2d_xcor_d0_)))); end;
%%%%%%%%;
% Now form a_CTF_avg_UX_2d_xcor_d0_Y_quad__ ;
%%%%%%%%;
a_CTF_avg_UX_2d_xcor_d0_Y_quad__ = zeros(n_lm_max,n_UX_rank);
for nUX_rank=0:n_UX_rank-1;
for nk_p_r=0:n_k_p_r-1;
tmp_l_max = l_max_(1+nk_p_r);
tmp_n_lm = (tmp_l_max+1).^2;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:tmp_n_lm-1);
a_CTF_avg_UX_2d_xcor_d0_Y_quad__(1:tmp_n_lm,1+nUX_rank) = ...
a_CTF_avg_UX_2d_xcor_d0_Y_quad__(1:tmp_n_lm,1+nUX_rank) + ...
UX_2d_xcor_d0__(1+nk_p_r,1+nUX_rank)*X_2d_xcor_d0_weight_r_(1+nk_p_r)*a_k_Y_true_(1+tmp_index_)*CTF_avg_k_p_r_(1+nk_p_r); ...
%<-- use average CTF here, under the assumption that a_CTF_UX_2d_xcor_d0_Y_quad_ will be used alone. ;
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nUX_rank=0:n_UX_rank-1;
%%%%%%%%;

%%%%%%%%;
% Now run ampmut once again, this time using the updated-principal-modes. ;
%%%%%%%%;
vt_fname_pre = sprintf('%s_mat/v%st%.4dn%.2dr%d',dir_pm,str_le,floor(1000*delta_r_max),dat_n_UX_rank,rseed);
[vt_flag_skip,vt_fname_mat] = open_fname_tmp(vt_fname_pre,date_diff_threshold,flag_force_create_mat,flag_force_create_tmp);
if ~vt_flag_skip;
try;
disp(sprintf(' %% %s not found, creating',vt_fname_mat));
vt_parameter = struct('type','parameter');
vt_parameter.delta_r_upb = delta_r_upb;
vt_parameter.delta_r_max = delta_r_max;
vt_parameter.rseed = rseed;
vt_parameter.fname_pre = vt_fname_pre;
vt_parameter.flag_local_exclusion = flag_local_exclusion;
ampmut_wrap_3( ...
 vt_parameter ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,n_w_max ...
,dat_n_UX_rank ...
,UX_2d_xcor_d0__ ...
,X_2d_xcor_d0_weight_r_ ...
,n_M ...
,M_k_p__ ...
,n_CTF_rank ...
,CTF_index_ ...
,CTF_k_p_r__ ...
,tmp_ut_euler_polar_a_ ...
,tmp_ut_euler_azimu_b_ ...
,tmp_ut_euler_gamma_z_ ...
,tmp_ut_image_delta_x_ ...
,tmp_ut_image_delta_y_ ...
);
catch; disp(sprintf(' %% WARNING: error generating %s',vt_fname_mat)); end;%try;
close_fname_tmp(vt_fname_pre);
end;%if ~vt_flag_skip;

%%%%%%%%;
if ( exist(vt_fname_mat,'file'));
%%%%%%%%;
% First collect statistics. ;
%%%%%%%%;
disp(sprintf(' %% %s found, aligning',vt_fname_mat));
tmp_vt_ = load(vt_fname_mat);
if (~isfield(tmp_vt_.parameter,'fname_pre')); tmp_vt_.parameter.fname_pre = vt_fname_pre; end; %<-- parameter_bookmark. ;
%%%%%%%%;
tmp_vt_fname_pre = sprintf('%s_align_a_CTF_avg_UX_Y_',tmp_vt_.parameter.fname_pre);
tmp_vt_fname_pre = rootswitch(tmp_vt_fname_pre,string_root,'rangan');
tmp_vt_.parameter.fname_align_a_CTF_avg_UX_Y_pre = tmp_vt_fname_pre;
[tmp_vt_flag_skip,tmp_vt_fname_mat] = open_fname_tmp(tmp_vt_fname_pre,date_diff_threshold,flag_force_create_mat,flag_force_create_tmp);
if ~tmp_vt_flag_skip;
try;
disp(sprintf(' %% %s not found, creating',tmp_vt_fname_mat));
ampmut_align_to_a_CTF_avg_UX_Y_0( ...
 tmp_vt_.parameter ...
,l_max_max ...
,dat_n_UX_rank ...
,reshape(a_CTF_avg_UX_2d_xcor_d0_Y_quad__(:,1:dat_n_UX_rank),[n_lm_max*dat_n_UX_rank,1]) ...
,n_M ...
,euler_polar_a_true_ ...
,euler_azimu_b_true_ ...
,euler_gamma_z_true_ ...
,image_delta_x_true_ ...
,image_delta_y_true_ ...
,[] ...
,tmp_vt_.a_CTF_avg_UX_Y__ ...
,tmp_vt_.euler_polar_a__ ...
,tmp_vt_.euler_azimu_b__ ...
,tmp_vt_.euler_gamma_z__ ...
,tmp_vt_.image_delta_x_acc__ + tmp_vt_.image_delta_x_upd__ ...
,tmp_vt_.image_delta_y_acc__ + tmp_vt_.image_delta_y_upd__ ...
);
catch; disp(sprintf(' %% WARNING: error generating %s',tmp_vt_fname_mat)); end;%try;
close_fname_tmp(tmp_vt_fname_pre);
end;%if ~tmp_vt_flag_skip;
%%%%%%%%;
tmp_vt_fname_pre = sprintf('%s_align_a_k_Y_',tmp_vt_.parameter.fname_pre);
tmp_vt_fname_pre = rootswitch(tmp_vt_fname_pre,string_root,'rangan');
tmp_vt_.parameter.fname_align_a_k_Y_pre = tmp_vt_fname_pre;
[tmp_vt_flag_skip,tmp_vt_fname_mat] = open_fname_tmp(tmp_vt_fname_pre,date_diff_threshold,flag_force_create_mat,flag_force_create_tmp);
if ~tmp_vt_flag_skip;
try;
disp(sprintf(' %% %s not found, creating',tmp_vt_fname_mat));
ampmut_align_to_a_k_Y_0( ...
 tmp_vt_.parameter ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,n_w_ ...
,weight_3d_k_p_r_ ...
,weight_2d_k_p_r_ ...
,n_M ...
,M_k_p__ ...
,CTF_index_ ...
,CTF_k_p__ ...
,l_max_ ...
,a_k_Y_true_ ...
,[] ...
,tmp_vt_.euler_polar_a__ ...
,tmp_vt_.euler_azimu_b__ ...
,tmp_vt_.euler_gamma_z__ ...
,tmp_vt_.image_delta_x_acc__ + tmp_vt_.image_delta_x_upd__ ...
,tmp_vt_.image_delta_y_acc__ + tmp_vt_.image_delta_y_upd__ ...
);
catch; disp(sprintf(' %% WARNING: error generating %s',tmp_vt_fname_mat)); end;%try;
close_fname_tmp(tmp_vt_fname_pre);
end;%if ~tmp_vt_flag_skip;
%%%%%%%%;
% Now use the final step to reconstruct the molecule. ;
%%%%%%%%;
tmp_vt_euler_polar_a_ = tmp_vt_.euler_polar_a__(:,end);
tmp_vt_euler_azimu_b_ = tmp_vt_.euler_azimu_b__(:,end);
tmp_vt_euler_gamma_z_ = tmp_vt_.euler_gamma_z__(:,end);
tmp_vt_image_delta_x_ = tmp_vt_.image_delta_x_acc__(:,end) + tmp_vt_.image_delta_x_upd__(:,end);
tmp_vt_image_delta_y_ = tmp_vt_.image_delta_y_acc__(:,end) + tmp_vt_.image_delta_y_upd__(:,end);
fname_vt_k_Y_mat = sprintf('%s_a_k_Y_.mat',tmp_vt_.parameter.fname_pre);
fname_vt_k_Y_mat = rootswitch(fname_vt_k_Y_mat,string_root,'rangan');
if (~exist(fname_vt_k_Y_mat,'file'));
if (verbose); disp(sprintf(' %% %s not found, creating',fname_vt_k_Y_mat)); end;
a_k_Y_reco_ = ...
cg_lsq_4( ...
 cg_lsq_n_order ...
,n_k_p_r ...
,k_p_r_ ...
,l_max_ ...
,n_w_ ...
,n_M ...
,M_k_p__ ...
,CTF_index_ ...
,CTF_k_p__ ...
,tmp_vt_euler_polar_a_ ...
,tmp_vt_euler_azimu_b_ ...
,tmp_vt_euler_gamma_z_ ...
,tmp_vt_image_delta_x_ ...
,tmp_vt_image_delta_y_ ...
);
save(fname_vt_k_Y_mat,'a_k_Y_reco_');
end;%if (~exist(fname_vt_k_Y_mat,'file'));
load(fname_vt_k_Y_mat);
%%%%%%%%;
end;%if ( exist(vt_fname_mat,'file'));
%%%%%%%%;

%%%%%%%%;
end;%if ( exist(ut_fname_mat,'file'));
%%%%%%%%;

if (verbose); disp(sprintf(' %% [finished ampmut_wrap_wrap_3]')); end;
