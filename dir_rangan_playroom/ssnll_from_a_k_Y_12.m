function ...
[ ...
 parameter ...
,ssnll_M_ ...
,ssnll ...
,S_k_p_wkS__ ...
,dvol_ssnll_M_ ...
,dvol_ssnll ...
,dvol_S_k_p_wkS__ ...
,dvol_dvol_ssnll ...
,dtau_ssnll_M3__ ...
,dtau_ssnll ...
,dtau_S_k_p_wkS3___ ...
,dtau_dvol_ssnll_M3__ ...
,dtau_dvol_ssnll ...
,dtau_dvol_S_k_p_wkS3___ ...
,dtau_dtau_ssnll_M33___ ...
,dtau_dtau_ssnll ...
,dtau_dtau_S_k_p_wkS33____ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
] = ...
ssnll_from_a_k_Y_12( ...
 parameter ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_yk__ ...
,dvol_a_k_Y_yk__ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,S_k_p_wkS__ ...
,dvol_S_k_p_wkS__ ...
,dtau_S_k_p_wkS3___ ...
,dtau_dvol_S_k_p_wkS3___ ...
,dtau_dtau_S_k_p_wkS33____ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
);
%%%%%%%%;
% Calculates ssnll (sigma*sigma*log_unlikelihood). ;
% Also calculates derivatives. ;
% Accumulates across all individual shells of a_k_Y_. ;
% Associates CTF_k_p_wkC__(:,1+index_nCTF_from_nM_(1+nM)) with image M_k_p_wkM__(:,1+nM);
% Allows for a nonuniform sigma-squared weighting-term (see eta_k_p_wke__). ;
% ;
% Input: ;
% n_k_p_r: integer number of radii (i.e., rings/shells) in the polar/spherical-grid. ;
% k_p_r_: double array of size n_k_p_r; k_p_r:=k_p_r_(1+nk_p_r) is the radius of ring/shell indexed by nk_p_r. ;
% k_p_r_max: double maximum k_p_r. ;
% l_max_: integer array of size n_k_p_r; l_max:=l_max_(1+nk_p_r) is the l_max used on ring/shell nk_p_r. ;
% a_k_Y_yk_: complex array of size n_lm_sum; spherical-harmonic-coefficients stored in long list. ;
%            we assume a_k_Y_y_: a_k_Y_yk__(1+n_lm_csum_(1+nk_p_r) + [0:n_lm_(1+nk_p_r)-1]) holds the coefficients for shell nk_p_r. ;
% dvol_a_k_Y_yk__: analogous to a_k_Y_yk_, storing the volumetric-perturbation to a_k_Y_yk_. ;
% n_w_: integer array of size n_k_p_r; n_w:=n_w_(1+nk_p_r) is the number of equispaced angular points on the ring/shell nk_p_r. ;
%       Here we assume that n_w_ is uniform. ;
% weight_2d_k_p_r_: double array of size n_k_p_r; weight_2d_k_p:=weight_2d_k_p_r_(1+nk_p_r) is the quadrature-weights in 2d for ring nk_p_r. ;
% weight_2d_wk_: double array of size n_w_sum; all quadrature-weights for 2d integration. ;
% n_S: integer number of templates produced on tensor-grid. ;
% S_k_p_wkS__: complex array of size (n_w_sum,n_S). stack of templates on ring in k_p_ format. ;
% dvol_S_k_p_wkS__: similar to S_k_p_wkS__, storing the volumetric-perturbation associated with dvol_a_k_Y_yk_. ;
% dtau_S_k_p_wkS3___: similar to S_k_p_wkS__; dtau_S_k_p_wkS3___(:,:,1+ntau) stores the gradient of S_k_p_wkS__ with respect to tau_(1+ntau). ;
% dtau_dvol_S_k_p_wkS3___: similar to dvol_S_k_p_wkS__; dtau_dvol_S_k_p_wkS3___(:,:,1+ntau) stores the gradient of dvol_S_k_p_wkS__ with respect to tau_(1+ntau). ;
% dtau_dtau_S_k_p_wkS33____: similar to S_k_p_wkS__; dtau_dtau_S_k_p_wkS33____(:,:,1+ntau0,1+ntau1) stores the hessian of S_k_p_wkS__ with respect to tau_(1+ntau0),tau_(1+ntau1). ;
% viewing_polar_a_S_: real array of size n_S. polar_a used for each template ;
% viewing_azimu_b_S_: real array of size n_S. azimu_b used for each template ;
% viewing_weight_S_: real array of size n_S. azimu_b used for each template ;
% n_viewing_polar_a: integer number of unique polar_a used for viewing-angles. ;
% viewing_polar_a_: real array of size n_viewing_polar_a; polar_a used for viewing-angles on tensor-grid. ;
% n_viewing_azimu_b_: integer array of size n_viewing_polar_a; number of azimu_b for each polar_a on tensor-grid (should be uniform). ;
% n_M: integer number of images. ;
% M_k_p_wkM__: complex array of size (n_w_sum,n_M). stack of images on ring in k_p_ format. ;
% index_nCTF_from_nM_: integer array of size n_M. index_nCTF_from_nM_(1+nM) is the (base 0) CTF_index used for image M_k_p_wkM__(:,1+nM). ;
%             This can be empty or set to 1, in which case the same CTF_k_p_ will be used for each image. ;
% CTF_k_p_wkC__: complex array of size(n_w_sum,n_CTF). stack of ctf-functions in k_p_ format. ;
%            If index_nCTF_from_nM_ is empty or set to 1, then we assume this contains only a single CTF_k_p_, ;
%            which will then be used for all images. ;
% index_neta_from_nM_: integer array of size n_M. index_neta_from_nM_(1+nM) is the (base 0) eta_index used for image M_k_p_wkM__(:,1+nM). ;
%             This can be empty or set to 1, in which case the same eta_k_p_ will be used for each image. ;
% eta_k_p_wke__: complex array of size(n_w_sum,n_eta). stack of eta-functions in k_p_ format. ;
%            If index_neta_from_nM_ is empty or set to 1, then we assume this contains only a single eta_k_p_, ;
%            which will then be used for all images. ;
% euler_polar_a_M_: real array of size n_M. polar_a used for each image, i.e., tau_(1+0). ;
% euler_azimu_b_M_: real array of size n_M. azimu_b used for each image, i.e., tau_(1+1).  ;
% euler_gamma_z_M_: real array of size n_M. gamma_z used for each image, i.e., tau_(1+2).  ;
% dtau_euler_polar_a_M_: real array of size n_M. tau-perturbation of polar_a used for each image ;
% dtau_euler_azimu_b_M_: real array of size n_M. tau-perturbation of azimu_b used for each image ;
% dtau_euler_gamma_z_M_: real array of size n_M. tau-perturbation of gamma_z used for each image ;
% ;
% Output: ;
% ssnll: double (sigma*sigma*log_unlikelihood). ;
% dvol_ssnll: double. derivative of ssnll with respect to volumetric-perturbation. ;
%%%%%%%%;

str_thisfunction = 'ssnll_from_a_k_Y_12';

%%%%%%%%;
if (nargin<1);
%%%%%%%%;
test_ssnll_from_a_k_Y_12;
%%%%%%%%;
disp(sprintf(' %% returning')); return;
%%%%%%%%;
end;%if (nargin<1);
%%%%%%%%;

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;
if (nargin<1+na); n_k_p_r=[]; end; na=na+1;
if (nargin<1+na); k_p_r_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_max=[]; end; na=na+1;
if (nargin<1+na); l_max_=[]; end; na=na+1;
if (nargin<1+na); a_k_Y_yk__=[]; end; na=na+1;
if (nargin<1+na); dvol_a_k_Y_yk__=[]; end; na=na+1;
if (nargin<1+na); n_w_=[]; end; na=na+1;
if (nargin<1+na); weight_2d_k_p_r_=[]; end; na=na+1;
if (nargin<1+na); weight_2d_wk_=[]; end; na=na+1;
if (nargin<1+na); n_S=[]; end; na=na+1;
if (nargin<1+na); S_k_p_wkS__=[]; end; na=na+1;
if (nargin<1+na); dvol_S_k_p_wkS__=[]; end; na=na+1;
if (nargin<1+na); dtau_S_k_p_wkS3___=[]; end; na=na+1;
if (nargin<1+na); dtau_dvol_S_k_p_wkS3___=[]; end; na=na+1;
if (nargin<1+na); dtau_dtau_S_k_p_wkS33____=[]; end; na=na+1;
if (nargin<1+na); viewing_polar_a_S_=[]; end; na=na+1;
if (nargin<1+na); viewing_azimu_b_S_=[]; end; na=na+1;
if (nargin<1+na); viewing_weight_S_=[]; end; na=na+1;
if (nargin<1+na); n_viewing_polar_a=[]; end; na=na+1;
if (nargin<1+na); viewing_polar_a_=[]; end; na=na+1;
if (nargin<1+na); n_viewing_azimu_b_=[]; end; na=na+1;
if (nargin<1+na); n_M=[]; end; na=na+1;
if (nargin<1+na); M_k_p_wkM__=[]; end; na=na+1;
if (nargin<1+na); index_nCTF_from_nM_=[]; end; na=na+1;
if (nargin<1+na); CTF_k_p_wkC__=[]; end; na=na+1;
if (nargin<1+na); index_neta_from_nM_=[]; end; na=na+1;
if (nargin<1+na); eta_k_p_wke__=[]; end; na=na+1;
if (nargin<1+na); euler_polar_a_M_=[]; end; na=na+1;
if (nargin<1+na); euler_azimu_b_M_=[]; end; na=na+1;
if (nargin<1+na); euler_gamma_z_M_=[]; end; na=na+1;
if (nargin<1+na); dtau_euler_polar_a_M_=[]; end; na=na+1;
if (nargin<1+na); dtau_euler_azimu_b_M_=[]; end; na=na+1;
if (nargin<1+na); dtau_euler_gamma_z_M_=[]; end; na=na+1;
if (nargin<1+na); V_lmm___=[]; end; na=na+1;
if (nargin<1+na); L_lm__=[]; end; na=na+1;
if (nargin<1+na); d0W_betazeta_mlma____=[]; end; na=na+1;
if (nargin<1+na); d1W_betazeta_mlma____=[]; end; na=na+1;
if (nargin<1+na); d2W_betazeta_mlma____=[]; end; na=na+1;
 
if isempty(parameter);
parameter = struct('type','parameter');
end;%if isempty(parameter);
%%%%%%%%;
if (~isfield(parameter,'flag_verbose')); parameter.flag_verbose = 0; end; %<-- parameter_bookmark. ;
flag_verbose = parameter.flag_verbose;
if (~isfield(parameter,'tolerance_master')); parameter.tolerance_master = 1e-2; end; %<-- parameter_bookmark. ;
tolerance_master = parameter.tolerance_master;
if (~isfield(parameter,'viewing_k_eq_d')); parameter.viewing_k_eq_d = []; end; %<-- parameter_bookmark. ;
viewing_k_eq_d = parameter.viewing_k_eq_d;
if (~isfield(parameter,'template_k_eq_d')); parameter.template_k_eq_d = -1; end; %<-- parameter_bookmark. ;
template_k_eq_d = parameter.template_k_eq_d;
if (~isfield(parameter,'n_order')); parameter.n_order = 3; end; %<-- parameter_bookmark. ;
n_order = parameter.n_order;
%%%%%%%%;

if (flag_verbose>0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;

flag_ssnll = 1;
flag_dvol_ssnll = 0; if ~isempty(dvol_a_k_Y_yk__); flag_dvol_ssnll = 1; end;
flag_dtau_ssnll = 0; if (nargout>=1+8); flag_dtau_ssnll = 1; end;
flag_dvol_dvol_ssnll = 0; if ~isempty(dvol_a_k_Y_yk__) & (nargout>=1+7); flag_dvol_dvol_ssnll = 1; end;
flag_dtau_dvol_ssnll = 0; if ~isempty(dvol_a_k_Y_yk__) & (nargout>=1+11); flag_dtau_dvol_ssnll = 1; end;
flag_dtau_dtau_ssnll = 0; if (nargout>=1+14); flag_dtau_dtau_ssnll = 1; end;
if (flag_verbose>0); disp(sprintf(' %% flag_ssnll %d flag_dvol_ssnll %d flag_dtau_ssnll %d flag_dvol_dvol_ssnll %d flag_dtau_dvol_ssnll %d flag_dtau_dtau_ssnll %d',flag_ssnll, flag_dvol_ssnll, flag_dtau_ssnll, flag_dvol_dvol_ssnll, flag_dtau_dvol_ssnll, flag_dtau_dtau_ssnll)); end;

ssnll_M_ = [];
ssnll = [];
dvol_ssnll_M_ = [];
dvol_ssnll = [];
dtau_ssnll_M3__ = [];
dtau_ssnll = [];
dvol_dvol_ssnll = [];
dtau_dvol_ssnll_M3__ = [];
dtau_dvol_ssnll = [];
dtau_dtau_ssnll_M33___ = [];
dtau_dtau_ssnll = [];

l_max_max = max(l_max_);
n_lm_ = (1+l_max_).^2;
n_lm_max = max(n_lm_);
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
n_w_max = max(n_w_);
n_w_sum = sum(n_w_);
n_w_csum_ = cumsum([0;n_w_]);
if (n_w_sum~=n_w_max*n_k_p_r); disp(sprintf(' %% Warning, n_w_ nonuniform in %s',str_thisfunction)); end;
if (flag_verbose>0); disp(sprintf(' %% l_max_max %d n_lm_max %d n_lm_sum %d n_w_max %d n_w_sum %d',l_max_max,n_lm_max,n_lm_sum,n_w_max,n_w_sum)); end;

if ~isempty(a_k_Y_yk__);
if ndims(a_k_Y_yk__)==1 | (ndims(a_k_Y_yk__)==2 & size(a_k_Y_yk__,2)==1);
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% forming a_k_Y_yk__')); end;
%%%%%%%%;
tmp_t = tic();
a_k_Y_yk_ = a_k_Y_yk__;
a_k_Y_yk__ = zeros(n_lm_max,n_k_p_r);
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
a_k_Y_yk__(1:n_lm,1+nk_p_r) = a_k_Y_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_Y_yk__: %0.6fs',tmp_t)); end;
end;%if ndims(a_k_Y_yk__)==1 | (ndims(a_k_Y_yk__)==2 & size(a_k_Y_yk__,2)==1);
end;%if ~isempty(a_k_Y_yk__);

if ~isempty(dvol_a_k_Y_yk__);
if ndims(dvol_a_k_Y_yk__)==1 | (ndims(dvol_a_k_Y_yk__)==2 & size(dvol_a_k_Y_yk__,2)==1);
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% forming dvol_a_k_Y_yk__')); end;
%%%%%%%%;
tmp_t = tic();
dvol_a_k_Y_yk_ = dvol_a_k_Y_yk__;
dvol_a_k_Y_yk__ = zeros(n_lm_max,n_k_p_r);
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
dvol_a_k_Y_yk__(1:n_lm,1+nk_p_r) = dvol_a_k_Y_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% dvol_a_k_Y_yk__: %0.6fs',tmp_t)); end;
end;%if ndims(dvol_a_k_Y_yk__)==1 | (ndims(dvol_a_k_Y_yk__)==2 & size(dvol_a_k_Y_yk__,2)==1);
end;%if ~isempty(dvol_a_k_Y_yk__);

%%%%%%%%;
if  isempty(n_S) |  isempty(viewing_azimu_b_S_) |  isempty(viewing_polar_a_S_) |  isempty(viewing_weight_S_) |  isempty(n_viewing_polar_a) |  isempty(viewing_polar_a_) |  isempty(n_viewing_azimu_b_) ;
if (flag_verbose>0); disp(sprintf(' %% forming n_S, viewing_azimu_b_S_, viewing_polar_a_S_, viewing_weight_S_, n_viewing_polar_a, viewing_polar_a_, n_viewing_azimu_b_')); end;
tmp_t = tic();
str_T_vs_L = 'L';
flag_tensor_vs_adap = 1; %<-- tensor grid. ;
[ ...
 n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,~ ...
,~ ...
,~ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
sample_shell_6( ...
 k_p_r_max ...
,template_k_eq_d ...
,str_T_vs_L ...
,flag_tensor_vs_adap ...
) ;
if (flag_verbose>0); disp(sprintf(' %% n_S %d, n_viewing_polar_a %d, n_viewing_azimu_b [%d,..,%d]',n_S,n_viewing_polar_a,n_viewing_azimu_b_(1+0),n_viewing_azimu_b_(end))); end;
end;%if  isempty(n_S) |  isempty(viewing_azimu_b_S_) |  isempty(viewing_polar_a_S_) |  isempty(viewing_weight_S_) |  isempty(n_viewing_polar_a) |  isempty(viewing_polar_a_) |  isempty(n_viewing_azimu_b_) ;
%%%%%%%%;
n_viewing_azimu_b = unique(n_viewing_azimu_b_);
if numel(n_viewing_azimu_b)> 1; disp(sprintf(' %% Warning, require single unique n_viewing_azimu_b_ in %s',str_thisfunction)); end;
%%%%%%%%;

%%%%%%%%;
if  isempty(weight_2d_k_p_r_) |  isempty(weight_2d_wk_) ;
if (flag_verbose>0); disp(sprintf(' %% forming weight_2d_k_p_r_, weight_2d_wk_')); end;
[ ...
 ~ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
] = ...
get_weight_2d_2( ...
 0*flag_verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,-1 ...
,n_w_ ...
);
end;%if  isempty(weight_2d_k_p_r_) |  isempty(weight_2d_wk_) ;
%%%%%%%%;

%%%%%%%%%%%%%%%%;
if  flag_ssnll & ~flag_dtau_ssnll & ~flag_dtau_dtau_ssnll ;
%%%%%%%%%%%%%%%%;
if isempty(S_k_p_wkS__);
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% form S_k_p_wkS__ on tensor-grid.')); end;
%%%%%%%%;
tmp_t = tic();
[ ...
 S_k_p_wkS__ ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
pm_template_2( ...
 0*flag_verbose ...
,l_max_max ...
,n_k_p_r ...
,a_k_Y_yk__ ...
,viewing_k_eq_d ...
,template_k_eq_d ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
);
S_k_p_wkS__ = reshape(S_k_p_wkS__,[n_w_sum,n_S]);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% pm_template_2: %0.6fs',tmp_t)); end;
%%%%%%%%;
end;%if isempty(S_k_p_wkS__);
%%%%%%%%%%%%%%%%;
end;%if  flag_ssnll & ~flag_dtau_ssnll & ~flag_dtau_dtau_ssnll ;
%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%;
if  flag_ssnll &  flag_dtau_ssnll & ~flag_dtau_dtau_ssnll ;
%%%%%%%%%%%%%%%%;
if isempty(S_k_p_wkS__);
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% form S_k_p_wkS__ and dtau_S_k_p_wkS3___ on tensor-grid.')); end;
%%%%%%%%;
tmp_t = tic();
[ ...
 S_k_p_wkS__ ...
,n_w ...
,n_viewing_all ...
,viewing_azimu_b_all_ ...
,viewing_polar_a_all_ ...
,viewing_weight_all_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,dtemplateda_wkS__ ...
,dtemplatedb_wkS__ ...
,dtemplatedc_wkS__ ...
,d1W_betazeta_mlma____ ...
] = ...
sph_template_3( ...
 0*flag_verbose ...
,l_max_max ...
,n_k_p_r ...
,a_k_Y_yk__ ...
,[] ...
,viewing_k_eq_d ...
,template_k_eq_d ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,0.0 ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
);
dtau_S_k_p_wkS3___ = zeros(n_w_sum,n_S,3);
dtau_S_k_p_wkS3___(:,:,1+0) = +dtemplateda_wkS__;
dtau_S_k_p_wkS3___(:,:,1+1) = +dtemplatedb_wkS__;
dtau_S_k_p_wkS3___(:,:,1+2) = -dtemplatedc_wkS__;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% sph_template_3 (first-derivative): %0.6fs',tmp_t)); end;
%%%%%%%%;
end;%if isempty(S_k_p_wkS__);
%%%%%%%%%%%%%%%%;
end;%if  flag_ssnll &  flag_dtau_ssnll & ~flag_dtau_dtau_ssnll ;
%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%;
if  flag_ssnll &  flag_dtau_ssnll &  flag_dtau_dtau_ssnll ;
%%%%%%%%%%%%%%%%;
if isempty(S_k_p_wkS__);
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% form S_k_p_wkS__ and dtau_S_k_p_wkS3___ and dtau_dtau_S_k_p_wkS33____ on tensor-grid.')); end;
%%%%%%%%;
tmp_t = tic();
[ ...
 S_k_p_wkS__ ...
,n_w ...
,n_viewing_all ...
,viewing_azimu_b_all_ ...
,viewing_polar_a_all_ ...
,viewing_weight_all_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,dtemplateda_wkS__ ...
,dtemplatedb_wkS__ ...
,dtemplatedc_wkS__ ...
,d1W_betazeta_mlma____ ...
,ddtemplatedaa_wkS__ ...
,ddtemplatedab_wkS__ ...
,ddtemplatedac_wkS__ ...
,ddtemplatedbb_wkS__ ...
,ddtemplatedbc_wkS__ ...
,ddtemplatedcc_wkS__ ...
,d2W_betazeta_mlma____ ...
] = ...
sph_template_3( ...
 0*flag_verbose ...
,l_max_max ...
,n_k_p_r ...
,a_k_Y_yk__ ...
,[] ...
,viewing_k_eq_d ...
,template_k_eq_d ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,0.0 ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
);
dtau_S_k_p_wkS3___ = zeros(n_w_sum,n_S,3);
dtau_S_k_p_wkS3___(:,:,1+0) = +dtemplateda_wkS__;
dtau_S_k_p_wkS3___(:,:,1+1) = +dtemplatedb_wkS__;
dtau_S_k_p_wkS3___(:,:,1+2) = -dtemplatedc_wkS__;
dtau_dtau_S_k_p_wkS33____ = zeros(n_w_sum,n_S,3,3);
dtau_dtau_S_k_p_wkS33____(:,:,1+0,1+0) = +ddtemplatedaa_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+0,1+1) = +ddtemplatedab_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+0,1+2) = -ddtemplatedac_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+1,1+0) = +ddtemplatedab_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+1,1+1) = +ddtemplatedbb_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+1,1+2) = -ddtemplatedbc_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+2,1+0) = -ddtemplatedac_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+2,1+1) = -ddtemplatedbc_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+2,1+2) = +ddtemplatedcc_wkS__;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% sph_template_3 (second-derivative): %0.6fs',tmp_t)); end;
%%%%%%%%;
end;%if isempty(S_k_p_wkS__);
%%%%%%%%%%%%%%%%;
end;%if  flag_ssnll &  flag_dtau_ssnll &  flag_dtau_dtau_ssnll ;
%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%;
if  flag_dvol_ssnll & ~flag_dtau_dvol_ssnll ;
%%%%%%%%%%%%%%%%;
if isempty(dvol_S_k_p_wkS__);
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% form dvol_S_k_p_wkS__ on tensor-grid.')); end;
%%%%%%%%;
tmp_t = tic();
[ ...
 dvol_S_k_p_wkS__ ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
pm_template_2( ...
 0*flag_verbose ...
,l_max_max ...
,n_k_p_r ...
,dvol_a_k_Y_yk__ ...
,viewing_k_eq_d ...
,template_k_eq_d ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
);
dvol_S_k_p_wkS__ = reshape(dvol_S_k_p_wkS__,[n_w_sum,n_S]);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% pm_template_2: %0.6fs',tmp_t)); end;
%%%%%%%%;
end;%if isempty(dvol_S_k_p_wkS__);
%%%%%%%%%%%%%%%%;
end;%if  flag_dvol_ssnll & ~flag_dtau_dvol_ssnll ;
%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%;
if  flag_dvol_ssnll &  flag_dtau_dvol_ssnll ;
%%%%%%%%%%%%%%%%;
if isempty(dvol_S_k_p_wkS__);
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% form dvol_S_k_p_wkS__ and dtau_dvol_S_k_p_wkS3___ on tensor-grid.')); end;
%%%%%%%%;
tmp_t = tic();
[ ...
 dvol_S_k_p_wkS__ ...
,n_w ...
,n_viewing_all ...
,viewing_azimu_b_all_ ...
,viewing_polar_a_all_ ...
,viewing_weight_all_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,dtemplateda_wkS__ ...
,dtemplatedb_wkS__ ...
,dtemplatedc_wkS__ ...
,d1W_betazeta_mlma____ ...
] = ...
sph_template_3( ...
 0*flag_verbose ...
,l_max_max ...
,n_k_p_r ...
,dvol_a_k_Y_yk__ ...
,[] ...
,viewing_k_eq_d ...
,template_k_eq_d ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,0.0 ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
);
dtau_dvol_S_k_p_wkS3___ = zeros(n_w_sum,n_S,3);
dtau_dvol_S_k_p_wkS3___(:,:,1+0) = +dtemplateda_wkS__;
dtau_dvol_S_k_p_wkS3___(:,:,1+1) = +dtemplatedb_wkS__;
dtau_dvol_S_k_p_wkS3___(:,:,1+2) = -dtemplatedc_wkS__;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% sph_template_3 (first-derivative): %0.6fs',tmp_t)); end;
%%%%%%%%;
end;%if isempty(dvol_S_k_p_wkS__);
%%%%%%%%%%%%%%%%;
end;%if  flag_dvol_ssnll &  flag_dtau_dvol_ssnll ;
%%%%%%%%%%%%%%%%;

if (flag_verbose>0); disp(sprintf(' %% filling in default zeros ')); end;
if isempty(euler_polar_a_M_); euler_polar_a_M_ = zeros(n_M,1); end;
if isempty(euler_azimu_b_M_); euler_azimu_b_M_ = zeros(n_M,1); end;
if isempty(euler_gamma_z_M_); euler_gamma_z_M_ = zeros(n_M,1); end;
if isempty(dtau_euler_polar_a_M_); dtau_euler_polar_a_M_ = zeros(n_M,1); end;
if isempty(dtau_euler_azimu_b_M_); dtau_euler_azimu_b_M_ = zeros(n_M,1); end;
if isempty(dtau_euler_gamma_z_M_); dtau_euler_gamma_z_M_ = zeros(n_M,1); end;
if isempty(index_nCTF_from_nM_); index_nCTF_from_nM_ = zeros(n_M,1); end;
if isempty(CTF_k_p_wkC__); CTF_k_p_wkC__ = ones(n_w_sum,1); end;
if isempty(index_neta_from_nM_); index_neta_from_nM_ = zeros(n_M,1); end;
if isempty(eta_k_p_wke__); eta_k_p_wke__ = ones(n_w_sum,1); end;

%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% Not rotate each of the CTF-functions.')); end;
%%%%%%%%;
tmp_t = tic();
CTF_k_p_wkM__ = zeros(n_w_sum,n_M); %<-- CTF for each image. ;
for nM=0:n_M-1;
euler_gamma_z = euler_gamma_z_M_(1+nM);
nCTF = index_nCTF_from_nM_(1+nM);
CTF_k_p_wk_ = CTF_k_p_wkC__(:,1+nCTF);
%CTF_k_p_wk_ = rotate_p_to_p_fftw(n_k_p_r,n_w_,n_w_sum,CTF_k_p_wk_,+0*euler_gamma_z); %<-- Not rotate the CTF-functions. ;
CTF_k_p_wkM__(:,1+nM) = CTF_k_p_wk_;
end;%for nM=0:n_M-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% CTF_k_p_wkM__: %0.2fs',tmp_t)); end;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% Not rotate each of the eta-functions.')); end;
%%%%%%%%;
tmp_t = tic();
eta_k_p_wkM__ = zeros(n_w_sum,n_M); %<-- eta for each image. ;
for nM=0:n_M-1;
euler_gamma_z = euler_gamma_z_M_(1+nM);
neta = index_neta_from_nM_(1+nM);
eta_k_p_wk_ = eta_k_p_wke__(:,1+neta);
%eta_k_p_wk_ = rotate_p_to_p_fftw(n_k_p_r,n_w_,n_w_sum,eta_k_p_wk_,+0*euler_gamma_z); %<-- Not rotate the eta-functions. ;
eta_k_p_wkM__(:,1+nM) = eta_k_p_wk_;
end;%for nM=0:n_M-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% eta_k_p_wkM__: %0.2fs',tmp_t)); end;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% Yes rotate each of the images.')); end;
%%%%%%%%;
tmp_t = tic();
N_k_p_wkM__ = M_k_p_wkM__;
for nM=0:n_M-1;
euler_gamma_z = euler_gamma_z_M_(1+nM);
if abs(euler_gamma_z>=1e-12);
M_k_p_wk_ = M_k_p_wkM__(:,1+nM);
N_k_p_wk_ = rotate_p_to_p_fftw(n_k_p_r,n_w_,n_w_sum,M_k_p_wk_,-1*euler_gamma_z); %<-- Yes rotate the images. ;
N_k_p_wkM__(:,1+nM) = N_k_p_wk_;
end;%if abs(euler_gamma_z>=1e-12);
end;%for nM=0:n_M-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% N_k_p_wkM__: %0.2fs',tmp_t)); end;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% Construct index_nS_from_nM_, flag_yes_match_M_ and flag_not_match_M_.')); end;
tmp_t = tic();
index_nS_from_nM_ = zeros(n_M,1);
flag_yes_match_M_ = ones(n_M,1);
flag_not_match_M_ = zeros(n_M,1);
for nM=0:n_M-1;
euler_polar_a = euler_polar_a_M_(1+nM);
euler_azimu_b = euler_azimu_b_M_(1+nM);
[tmp_val,tmp_ij] = min(abs(viewing_polar_a_S_ - euler_polar_a) + abs(viewing_azimu_b_S_ - euler_azimu_b)); %<-- assuming a perfect match exists. ;
if (tmp_val>1e-12); flag_not_match_M_(1+nM) = 1; flag_yes_match_M_(1+nM) = 0; end;
nS = tmp_ij-1;
index_nS_from_nM_(1+nM) = nS;
end;%for nM=0:n_M-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% index_nS_from_nM_: %0.2fs',tmp_t)); end;
if (flag_verbose>0); disp(sprintf(' %% sum(flag_yes_match_M_) %d',sum(flag_yes_match_M_))); end;
if (flag_verbose>0); disp(sprintf(' %% sum(flag_not_match_M_) %d',sum(flag_not_match_M_))); end;
%%%%%%%%;
index_yes_match_M_ = efind(flag_yes_match_M_);
index_nS_from_yes_match_nM_ = index_nS_from_nM_(1+index_yes_match_M_);
n_yes_match_M = numel(index_yes_match_M_);
%%%%;
index_not_match_M_ = efind(flag_not_match_M_);
n_scatter = numel(index_not_match_M_);
azimu_b_scatter_ = euler_azimu_b_M_(1+index_not_match_M_);
polar_a_scatter_ = euler_polar_a_M_(1+index_not_match_M_);
if (flag_verbose>0); disp(sprintf(' %% n_scatter %d, flag_polar_a_ascend_vs_descend %d',n_scatter,flag_polar_a_ascend_vs_descend)); end;
scatter_from_tensor_sba__ = zeros(n_scatter,n_viewing_azimu_b*n_viewing_polar_a);
if (n_scatter> 0);
flag_polar_a_ascend_vs_descend = 0; if (viewing_polar_a_(end)> viewing_polar_a_(1+0)); flag_polar_a_ascend_vs_descend = 1; end;
[ ...
 scatter_from_tensor_sba__ ...
] = ...
shell_k_p_scatter_from_tensor_interpolate_n_7( ...
 n_order ...
,n_viewing_azimu_b ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_scatter ...
,azimu_b_scatter_ ...
,polar_a_scatter_ ...
,flag_polar_a_ascend_vs_descend ...
);
end;%if (n_scatter> 0);
if (flag_verbose>0); disp(sprintf(' %% scatter_from_tensor_sba__ (%d,%d)',size(scatter_from_tensor_sba__))); end;
%%%%;
n_sum_index_scatter_from_tensor_ba = 0;
for nscatter=0:n_scatter-1;
nM = index_not_match_M_(1+nscatter);
scatter_from_tensor_ba_ = scatter_from_tensor_sba__(1+nscatter,:);
index_scatter_from_tensor_ba_ = efind(scatter_from_tensor_ba_);
n_index_scatter_from_tensor_ba = numel(index_scatter_from_tensor_ba_);
n_sum_index_scatter_from_tensor_ba = n_sum_index_scatter_from_tensor_ba + n_index_scatter_from_tensor_ba;
end;%for nscatter=0:n_scatter-1;
%%%%;
n_stack = n_yes_match_M + n_sum_index_scatter_from_tensor_ba;
index_nM_from_stack_ = zeros(n_stack,1); index_nM_from_stack_(1:n_yes_match_M) = index_yes_match_M_;
index_nS_from_stack_ = zeros(n_stack,1); index_nS_from_stack_(1:n_yes_match_M) = index_nS_from_yes_match_nM_;
collate_stack_index_nrow_ = zeros(n_stack,1); collate_stack_index_nrow_(1:n_yes_match_M) = index_yes_match_M_;
collate_stack_index_ncol_ = zeros(n_stack,1); collate_stack_index_ncol_(1:n_yes_match_M) = 0:n_yes_match_M-1;
collate_stack_weight_ = zeros(n_stack,1); collate_stack_weight_(1:n_yes_match_M) = 1;
tmp_n_sum_index_scatter_from_tensor_ba=0;
for nscatter=0:n_scatter-1;
nM = index_not_match_M_(1+nscatter);
scatter_from_tensor_ba_ = scatter_from_tensor_sba__(1+nscatter,:);
index_scatter_from_tensor_ba_ = efind(scatter_from_tensor_ba_);
n_index_scatter_from_tensor_ba = numel(index_scatter_from_tensor_ba_);
tmp_index_ = n_yes_match_M + tmp_n_sum_index_scatter_from_tensor_ba + [0:n_index_scatter_from_tensor_ba-1];
collate_stack_weight_(1+tmp_index_) = scatter_from_tensor_ba_(1+index_scatter_from_tensor_ba_);
index_nM_from_stack_(1+tmp_index_) = nM;
index_nS_from_stack_(1+tmp_index_) = index_scatter_from_tensor_ba_; %<-- assumes the templates can be indexed directly from the tensor_ba_ grid. ;
collate_stack_index_nrow_(1+tmp_index_) = nM;
collate_stack_index_ncol_(1+tmp_index_) = tmp_index_;
tmp_n_sum_index_scatter_from_tensor_ba = tmp_n_sum_index_scatter_from_tensor_ba + n_index_scatter_from_tensor_ba;
end;%for nscatter=0:n_scatter-1;
assert(tmp_n_sum_index_scatter_from_tensor_ba==n_sum_index_scatter_from_tensor_ba);
collate_stack_Ms__ = sparse(1+collate_stack_index_nrow_,1+collate_stack_index_ncol_,collate_stack_weight_,n_M,n_stack);
%%%%;
if (flag_verbose>0); disp(sprintf(' %% Process images from flag_yes_match_M_.')); end;
if flag_ssnll; ssnll_M_ = zeros(n_M,1); ssnll = 0.0d0; end;
if flag_dvol_ssnll; dvol_ssnll_M_ = zeros(n_M,1); dvol_ssnll = 0.0d0; end;
if flag_dtau_ssnll; dtau_ssnll_M3__ = zeros(n_M,3); dtau_ssnll = 0.0d0; end;
if flag_dtau_dvol_ssnll; dtau_dvol_ssnll_M3__ = zeros(n_M,3); dtau_dvol_ssnll = 0.0d0; end;
if flag_dtau_dtau_ssnll; dtau_dtau_ssnll_M33___ = zeros(n_M,3,3); dtau_dtau_ssnll = 0.0d0; end;
if flag_dtau_ssnll; dtau_euler_M3__ = [dtau_euler_polar_a_M_,dtau_euler_azimu_b_M_,dtau_euler_gamma_z_M_]; end;
if flag_dtau_dtau_ssnll; dtau_dtau_euler_M33___ = bsxfun(@times,reshape(dtau_euler_M3__,[n_M,3,1]),reshape(dtau_euler_M3__,[n_M,1,3])); end;
tmp_t = tic();
if flag_ssnll;
ssnll_s_ = ...
  + 0.5d0 ...
  * sum( ...
	 bsxfun(@times ...
		,bsxfun(@times ...
			,bsxfun(@times ...
				,conj( ...
				       bsxfun(@minus ...
					      ,bsxfun(@times ...
						      ,S_k_p_wkS__(:,1+index_nS_from_stack_) ...
						      ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
						      ) ...
					      ,N_k_p_wkM__(:,1+index_nM_from_stack_) ...
					      ) ...
				       ) ...
				,bsxfun(@minus ...
					,bsxfun(@times ...
						,S_k_p_wkS__(:,1+index_nS_from_stack_) ...
						,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
						) ...
					,N_k_p_wkM__(:,1+index_nM_from_stack_) ...
					) ...
				) ...
			,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
			) ...
		,weight_2d_wk_ ...
		) ...
	 ,[1] ...
	 ) ...
  * (4*pi^2) ...
  ; %<-- includes both perfect matches and off-grid images. ;
ssnll_M_ = collate_stack_Ms__ * reshape(ssnll_s_,[n_stack,1]);
ssnll = sum(ssnll_M_,'all');
end;%if flag_ssnll;
if flag_dvol_ssnll;
dvol_ssnll_s_ = ...
  + 0.5d0 ...
  * sum( ...
	 bsxfun(@times ...
		,bsxfun(@times ...
			,bsxfun(@times ...
				,conj( ...
				       bsxfun(@times ...
					      ,dvol_S_k_p_wkS__(:,1+index_nS_from_stack_) ...
					      ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
					      ) ...
				       ) ...
				,bsxfun(@minus ...
					,bsxfun(@times ...
						,S_k_p_wkS__(:,1+index_nS_from_stack_) ...
						,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
						) ...
					,N_k_p_wkM__(:,1+index_nM_from_stack_) ...
					) ...
				) ...
			,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
			) ...
		,weight_2d_wk_ ...
		) ...
	 ,[1] ...
	 ) ...
  * (4*pi^2) ...
  + 0.5d0 ...
  * sum( ...
	 bsxfun(@times ...
		,bsxfun(@times ...
			,bsxfun(@times ...
				,conj( ...
				       bsxfun(@minus ...
					      ,bsxfun(@times ...
						      ,S_k_p_wkS__(:,1+index_nS_from_stack_) ...
						      ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
						      ) ...
					      ,N_k_p_wkM__(:,1+index_nM_from_stack_) ...
					      ) ...
				       ) ...
				,bsxfun(@times ...
					,dvol_S_k_p_wkS__(:,1+index_nS_from_stack_) ...
					,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
					) ...
				) ...
			,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
			) ...
		,weight_2d_wk_) ...
	 ,[1] ...
	 ) ...
  * (4*pi^2) ...
  ; %<-- includes both perfect matches and off-grid images. ;
dvol_ssnll_M_ = collate_stack_Ms__ * reshape(dvol_ssnll_s_,[n_stack,1]);
dvol_ssnll = sum(dvol_ssnll_M_,'all');
end;%if flag_dvol_ssnll;
if flag_dvol_dvol_ssnll;
dvol_dvol_ssnll_s_ = ...
  + 1.0d0 ...
  * sum( ...
	 bsxfun(@times ...
		,bsxfun(@times ...
			,bsxfun(@times ...
				,conj( ...
				       bsxfun(@times ...
					      ,dvol_S_k_p_wkS__(:,1+index_nS_from_stack_) ...
					      ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
					      ) ...
				       ) ...
				,bsxfun(@times ...
					,dvol_S_k_p_wkS__(:,1+index_nS_from_stack_) ...
					,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
					) ...
				) ...
			,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
			) ...
		,weight_2d_wk_ ...
		) ...
	 ,[1] ...
	 ) ...
  * (4*pi^2) ...
  ; %<-- includes both perfect matches and off-grid images. ;
dvol_dvol_ssnll_M_ = collate_stack_Ms__ * reshape(dvol_dvol_ssnll_s_,[n_stack,1]);
dvol_dvol_ssnll = sum(dvol_dvol_ssnll_M_,'all');
end;%if flag_dvol_dvol_ssnll;
if flag_dtau_ssnll;
dtau_ssnll_s3__ = ...
  + reshape( ...
	     + 0.5d0 ...
	     * sum( ...
		    bsxfun(@times ...
			   ,bsxfun(@times ...
				   ,bsxfun(@times ...
					   ,conj( ...
						  bsxfun(@times ...
							 ,dtau_S_k_p_wkS3___(:,1+index_nS_from_stack_,:) ...
							 ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
							 ) ...
						  ) ...
					   ,bsxfun(@minus ...
						   ,bsxfun(@times ...
							   ,S_k_p_wkS__(:,1+index_nS_from_stack_) ...
							   ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
							   ) ...
						   ,N_k_p_wkM__(:,1+index_nM_from_stack_) ...
						   )....
					   ) ...
				   ,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
				   ) ...
			   ,weight_2d_wk_) ...
		    ,[1] ...
		    ) ...
	     * (4*pi^2) ...
	     + 0.5d0 ...
	     * sum( ...
		    bsxfun(@times ...
			   ,bsxfun(@times ...
				   ,bsxfun(@times ...
					   ,conj( ...
						  bsxfun(@minus ...
							 ,bsxfun(@times ...
								 ,S_k_p_wkS__(:,1+index_nS_from_stack_) ...
								 ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
								 ) ...
							 ,N_k_p_wkM__(:,1+index_nM_from_stack_) ...
							 ) ...
						  ) ...
					   ,bsxfun(@times ...
						   ,dtau_S_k_p_wkS3___(:,1+index_nS_from_stack_,:) ...
						   ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
						   ) ...
					   ) ...
				   ,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
				   ) ...
			   ,weight_2d_wk_ ...
			   ) ...
		    ,[1] ...
		    ) ...
	     * (4*pi^2) ...
	     ,[n_stack,3] ...
	     ) ...
  ; %<-- includes both perfect matches and off-grid images. ;
dtau_ssnll_M3__ = collate_stack_Ms__ * reshape(dtau_ssnll_s3__,[n_stack,3]) ;
dtau_ssnll = sum(bsxfun(@times,dtau_ssnll_M3__,dtau_euler_M3__),'all');
end;%if flag_dtau_ssnll;
if flag_dtau_dvol_ssnll;
dtau_dvol_ssnll_s3__ = ...
  + reshape( ...
	     + 0.5d0 ...
	     * sum( ...
		    bsxfun(@times ...
			   ,bsxfun(@times ...
				   ,bsxfun(@times ...
					   ,conj( ...
						  bsxfun(@times ...
							 ,dtau_dvol_S_k_p_wkS3___(:,1+index_nS_from_stack_,:) ...
							 ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
							 ) ...
						  ) ...
					   ,bsxfun(@minus ...
						   ,bsxfun(@times ...
							   ,S_k_p_wkS__(:,1+index_nS_from_stack_) ...
							   ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
							   ) ...
						   ,N_k_p_wkM__(:,1+index_nM_from_stack_) ...
						   )....
					   ) ...
				   ,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
				   ) ...
			   ,weight_2d_wk_) ...
		    ,[1] ...
		    ) ...
	     * (4*pi^2) ...
	     + 0.5d0 ...
	     * sum( ...
		    bsxfun(@times ...
			   ,bsxfun(@times ...
				   ,bsxfun(@times ...
					   ,conj( ...
						  bsxfun(@times ...
							 ,dtau_S_k_p_wkS3___(:,1+index_nS_from_stack_,:) ...
							 ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
							 ) ...
						  ) ...
					   ,bsxfun(@times ...
						   ,dvol_S_k_p_wkS__(:,1+index_nS_from_stack_) ...
						   ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
						   ) ...
					   ) ...
				   ,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
				   ) ...
			   ,weight_2d_wk_) ...
		    ,[1] ...
		    ) ...
	     * (4*pi^2) ...
	     + 0.5d0 ...
	     * sum( ...
		    bsxfun(@times ...
			   ,bsxfun(@times ...
				   ,bsxfun(@times ...
					   ,conj( ...
						  bsxfun(@times ...
							 ,dvol_S_k_p_wkS__(:,1+index_nS_from_stack_) ...
							 ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
							 ) ...
						  ) ...
					   ,bsxfun(@times ...
						   ,dtau_S_k_p_wkS3___(:,1+index_nS_from_stack_,:) ...
						   ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
						   ) ...
					   ) ...
				   ,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
				   ) ...
			   ,weight_2d_wk_ ...
			   ) ...
		    ,[1] ...
		    ) ...
	     * (4*pi^2) ...
	     + 0.5d0 ...
	     * sum( ...
		    bsxfun(@times ...
			   ,bsxfun(@times ...
				   ,bsxfun(@times ...
					   ,conj( ...
						  bsxfun(@minus ...
							 ,bsxfun(@times ...
								 ,S_k_p_wkS__(:,1+index_nS_from_stack_) ...
								 ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
								 ) ...
							 ,N_k_p_wkM__(:,1+index_nM_from_stack_) ...
							 ) ...
						  ) ...
					   ,bsxfun(@times ...
						   ,dtau_dvol_S_k_p_wkS3___(:,1+index_nS_from_stack_,:) ...
						   ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
						   ) ...
					   ) ...
				   ,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
				   ) ...
			   ,weight_2d_wk_ ...
			   ) ...
		    ,[1] ...
		    ) ...
	     * (4*pi^2) ...
	     ,[n_stack,3] ...
	     ) ...
  ; %<-- includes both perfect matches and off-grid images. ;
dtau_dvol_ssnll_M3__ = collate_stack_Ms__ * reshape(dtau_dvol_ssnll_s3__,[n_stack,3]) ;
dtau_dvol_ssnll = sum(bsxfun(@times,dtau_dvol_ssnll_M3__,dtau_euler_M3__),'all');
end;%if flag_dtau_dvol_ssnll;
if flag_dtau_dtau_ssnll;
dtau_dtau_ssnll_s33___ = ...
  + reshape( ...
	     + 0.5d0 ...
	     * sum( ...
		    bsxfun(@times ...
			   ,bsxfun(@times ...
				   ,bsxfun(@times ...
					   ,conj( ...
						  bsxfun(@times ...
							 ,dtau_dtau_S_k_p_wkS33____(:,1+index_nS_from_stack_,:,:) ...
							 ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
							 ) ...
						  ) ...
					   ,bsxfun(@minus ...
						   ,bsxfun(@times ...
							   ,S_k_p_wkS__(:,1+index_nS_from_stack_) ...
							   ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
							   ) ...
						   ,N_k_p_wkM__(:,1+index_nM_from_stack_) ...
						   )....
					   ) ...
				   ,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
				   ) ...
			   ,weight_2d_wk_) ...
		    ,[1] ...
		    ) ...
	     * (4*pi^2) ...
	     + 0.5d0 ...
	     * sum( ...
		    bsxfun(@times ...
			   ,bsxfun(@times ...
				   ,bsxfun(@times ...
					   ,conj( ...
						  bsxfun(@times ...
							 ,reshape(dtau_S_k_p_wkS3___(:,1+index_nS_from_stack_,:),[n_w_sum,n_stack,3,1]) ...
							 ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
							 ) ...
						  ) ...
					   ,bsxfun(@times ...
						   ,reshape(dtau_S_k_p_wkS3___(:,1+index_nS_from_stack_,:),[n_w_sum,n_stack,1,3]) ...
						   ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
						   ) ...
					   ) ...
				   ,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
				   ) ...
			   ,weight_2d_wk_) ...
		    ,[1] ...
		    ) ...
	     * (4*pi^2) ...
	     + 0.5d0 ...
	     * sum( ...
		    bsxfun(@times ...
			   ,bsxfun(@times ...
				   ,bsxfun(@times ...
					   ,conj( ...
						  bsxfun(@times ...
							 ,reshape(dtau_S_k_p_wkS3___(:,1+index_nS_from_stack_,:),[n_w_sum,n_stack,3,1]) ...
							 ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
							 ) ...
						  ) ...
					   ,bsxfun(@times ...
						   ,reshape(dtau_S_k_p_wkS3___(:,1+index_nS_from_stack_,:),[n_w_sum,n_stack,1,3]) ...
						   ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
						   ) ...
					   ) ...
				   ,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
				   ) ...
			   ,weight_2d_wk_ ...
			   ) ...
		    ,[1] ...
		    ) ...
	     * (4*pi^2) ...
	     + 0.5d0 ...
	     * sum( ...
		    bsxfun(@times ...
			   ,bsxfun(@times ...
				   ,bsxfun(@times ...
					   ,conj( ...
						  bsxfun(@minus ...
							 ,bsxfun(@times ...
								 ,S_k_p_wkS__(:,1+index_nS_from_stack_) ...
								 ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
								 ) ...
							 ,N_k_p_wkM__(:,1+index_nM_from_stack_) ...
							 ) ...
						  ) ...
					   ,bsxfun(@times ...
						   ,dtau_dtau_S_k_p_wkS33____(:,1+index_nS_from_stack_,:,:) ...
						   ,CTF_k_p_wkM__(:,1+index_nM_from_stack_) ...
						   ) ...
					   ) ...
				   ,eta_k_p_wkM__(:,1+index_nM_from_stack_) ...
				   ) ...
			   ,weight_2d_wk_ ...
			   ) ...
		    ,[1] ...
		    ) ...
	     * (4*pi^2) ...
	     ,[n_stack,3,3] ...
	     ) ...
  ; %<-- includes both perfect matches and off-grid images. ;
dtau_dtau_ssnll_M33___ = reshape(collate_stack_Ms__*reshape(dtau_dtau_ssnll_s33___,[n_stack,3*3]),[n_M,3,3]) ; %<-- sparse multiplication not supported via pagemtimes. ;
dtau_dtau_ssnll = sum(bsxfun(@times,dtau_dtau_ssnll_M33___,dtau_dtau_euler_M33___),'all');
end;%if flag_dtau_ssnll;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% ssnll: %0.2fs',tmp_t)); end;
%%%%%%%%;

if (flag_verbose>0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;
