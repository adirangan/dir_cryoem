function test_spharm_5(n_k,k_,n_l_,a_,b_);
% tests registration between molecule_A and molecule_B, using only a single beta ;
% when no inputs are passed we import two spherical harmonic representations (generated by kspacegrid_to_model): ;
% molecule_A: modsph_A_ori = spiral ;
% molecule_B: modsph_B_ori = spiral with twisted tail ;
% ;
% n_k = integer maximum k ;
% k_ = integer array of length n_k; k_(nk) = k_value for shell nk ;
% n_l_ = integer array of length n_k; n_l_(nk) = spherical harmonic order on shell nk; n_l_(nk) corresponds to n_lm_(nk) = (n_l_(nk)+1)^2 coefficients ;
% a_ = complex array of length \sum_{nk} (n_lm_(nk)+1)^2 ; coefficients are ordered in a row, with m varying quickly and l varying slowly ;
% b_ = complex array of length \sum_{nk} (n_lm_(nk)+1)^2 ; coefficients are ordered in a row, with m varying quickly and l varying slowly ;
% a_ corresponds to molecule_a, b_ to molecule_b ;
% test with: ;
%{
  test_spharm_5();
  %}

verbose=1;

if nargin<5;
isph_start_ = MDA_read_i4('./dir_mda6/isph_start_.mda');
nterms_sph_ = MDA_read_i4('./dir_mda6/nterms_sph_.mda');
modsph_A_ori_ = MDA_read_c16('./dir_mda6/modsph_A_ori_.mda');
modsph_B_ori_ = MDA_read_c16('./dir_mda6/modsph_B_ori_.mda');
n_k = length(isph_start_);
k_ = 1:n_k;
n_l_ = nterms_sph_;
n_lm_ = (n_l_+1).^2;
a_ = modsph_A_ori_;
b_ = modsph_B_ori_;
end;%if nargin<4;

% testing single beta fast;
beta = 3*pi/5;
k_max = k_(end);
n_l_max = n_l_(end);
W_ = wignerd_b(n_l_max,beta);
m_max_ = -n_l_max : +n_l_max;
n_m_max = length(m_max_);
C_ = zeros(n_m_max,n_m_max);
for nmn = 1:n_m_max;
mn = m_max_(nmn);
for nmp = 1:n_m_max;
mp = m_max_(nmp);
C_tmp = 0;
for nk = 1:n_k;
k_val = nk;
n_l = n_l_(nk); n_lm = n_lm_(nk); ix_base = sum(n_lm_(1:nk-1));
a_k_ = a_(ix_base + (1:n_lm)); b_k_ = b_(ix_base + (1:n_lm));
if (abs(mn)<=n_l & abs(mp)<=n_l);
for nl = 0:n_l;
mn_flag=0; if (abs(mn)<=nl); mn_flag=1; ix_mn = 1+nl*(nl+1)+mn; end;
mp_flag=0; if (abs(mp)<=nl); mp_flag=1; ix_mp = 1+nl*(nl+1)+mp; end;
if (mn_flag & mp_flag);
C_tmp = C_tmp + k_val^2 * conj(a_k_(ix_mn))*W_{1+nl}(1+nl+mn,1+nl+mp)*b_k_(ix_mp);
end;%if (mn_flag & mp_flag);
end;%for nl = 0:n_l;
end;%if (abs(mn)<=n_l & abs(mp)<=n_l);
end;%for nk = 1:n_k;
C_(nmn,nmp) = C_tmp;
end;%for nmp = 1:n_m_max;
end;%for nmn = 1:n_m_max;
X_fast_ = recenter2(fft2(recenter2(C_)));

% testing single beta slow;
beta = 3*pi/5;
k_max = k_(end);
n_l_max = n_l_(end);
W_ = wignerd_b(n_l_max,beta);
m_max_ = -n_l_max : +n_l_max;
n_m_max = length(m_max_);
alpha_ = linspace(0,2*pi,n_m_max+1); alpha_ = alpha_(1:end-1);
gamma_ = linspace(0,2*pi,n_m_max+1); gamma_ = gamma_(1:end-1);
X_slow_ = zeros(n_m_max,n_m_max);
for nalpha = 1:n_m_max;
alpha = alpha_(nalpha);
for ngamma = 1:n_m_max;
gamma = gamma_(ngamma);
X_tmp=0;
for nk = 1:n_k;
k_val = nk;
n_l = n_l_(nk); n_lm = n_lm_(nk); ix_base = sum(n_lm_(1:nk-1));
a_k_ = a_(ix_base + (1:n_lm)); b_k_ = b_(ix_base + (1:n_lm));
for nl = 0:n_l;
m_ = [-nl:+nl];
W_alpha = diag(exp(+i*m_*alpha));
W_gamma = diag(exp(+i*m_*gamma));
a_tmp = a_k_(1+nl*(nl+1) + (-nl:+nl));
a_tmp = reshape(a_tmp,2*nl+1,1);
b_tmp = b_k_(1+nl*(nl+1) + (-nl:+nl));
b_tmp = reshape(b_tmp,2*nl+1,1);
X_tmp = X_tmp + k_val^2 * (ctranspose(a_tmp)*W_gamma*W_{1+nl}*W_alpha*b_tmp);
end;%for nl = 0:n_l;
end;%for nk = 1:n_k;
X_slow_(nalpha,ngamma) = X_tmp;
end;%for ngamma = 1:n_m_max;
end;%for nalpha = 1:n_m_max;

subplot(2,2,1); imagesc(real(X_fast_)); colorbar; title('R(X_f)');
subplot(2,2,2); imagesc(imag(X_fast_)); colorbar; title('I(X_f)');
subplot(2,2,3); imagesc(real(X_slow_)); colorbar; title('R(X_s)');
subplot(2,2,4); imagesc(imag(X_slow_)); colorbar; title('I(X_s)');


