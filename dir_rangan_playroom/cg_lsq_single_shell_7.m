function ...
[ ...
 parameter ...
,a_k_Y_lm_ ...
,pcg_flag ...
,pcg_relres ...
,pcg_iter ...
] = ...
cg_lsq_single_shell_7( ...
 parameter ...
,l_max ...
,n_w ...
,n_M ...
,M_k_p_wM__ ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wC__ ...
,euler_polar_a_ ...
,euler_azimu_b_ ...
,euler_gamma_z_ ...
,pcg_X0_ ...
);
%%%%%%%%;
% simply applies conjugate-gradient to the least-squares problem to solve for a_k_Y_. ;
% Associates CTF_k_p_wC__(:,1+CTF_index_(1+nM)) with image M_k_p_wM__(:,1+nM);
% ;
% Input: ;
% l_max: integer order used for a_k_Y_ on shell. ;
% n_w: integer number of inplane_gamma_z values recorded at that ring. ;
% n_M: integer number of images. ;
% M_k_p_wM__: complex array of size (n_w,n_M). stack of images on ring in k_p_ format. ;
% index_nCTF_from_nM_: integer array of size n_M. index_nCTF_from_nM_(1+nM) is the (base 0) CTF_index used for image M_k_p_wM__(:,1+nM). ;
%             This can be empty or set to 1, in which case the same CTF_k_p_ will be used for each image. ;
% CTF_k_p_wC__: complex array of size(n_w,n_CTF). stack of ctf-functions in k_p_ format. ;
%            If index_nCTF_from_nM_ is empty or set to 1, then we assume this contains only a single CTF_k_p_, ;
%            which will then be used for all images. ;
% euler_polar_a_: real array of size n_M. polar_a used for each image ;
% euler_azimu_b_: real array of size n_M. azimu_b used for each image ;
% euler_gamma_z_: real array of size n_M. gamma_z used for each image ;
% ;
% Output: ;
% a_k_Y_lm_: complex array of size n_lm. output functions in k_Y_ format. ;
%%%%%%%%;

str_thisfunction = 'cg_lsq_single_shell_7';

%%%%%%%%;
if (nargin<1);
%%%%%%%%;
flag_verbose=1; nf=0;
if (flag_verbose); disp(sprintf(' %% testing %s',str_thisfunction)); end;
k_p_r_max = 48.0/(2*pi); k_eq_d = 1.0/(2*pi);
n_k_p_r = 1; k_p_r_1 = 1.0; k_p_r_ = k_p_r_1;
[ ...
 n_shell ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_shell_ ...
,k_c_0_shell_ ...
,k_c_1_shell_ ...
,k_c_2_shell_ ...
] = ...
sample_shell_6( ...
 k_p_r_1 ...
,k_eq_d/k_p_r_max ...
) ;
k_p_r_shell_ = k_p_r_(1+0)*ones(n_shell,1);
%%%%;
l_max_upb = 96;
l_max = max(0,min(l_max_upb,1+ceil(2*pi*k_p_r_max)));
n_lm = (l_max+1).^2;
m_max_ = -l_max : +l_max;
n_m_max = length(m_max_);
Y_l_val_ = zeros(n_lm,1);
Y_m_val_ = zeros(n_lm,1);
tmp_l_val_ = zeros(n_lm,1);
tmp_m_val_ = zeros(n_lm,1);
na=0; 
for l_val=0:l_max;
for m_val=-l_val:+l_val;
tmp_l_val_(1+na) = l_val;
tmp_m_val_(1+na) = m_val;
na=na+1;
end;%for m_val=-l_val:+l_val;
end;%for l_val=0:l_max;
tmp_index_ = 0:n_lm-1;
Y_l_val_(1+tmp_index_) = tmp_l_val_;
Y_m_val_(1+tmp_index_) = tmp_m_val_;
weight_Y_ = ones(n_lm,1);
weight_3d_k_p_r_ = 4*pi;
%%%%;
a_k_Y_form_ = zeros(n_lm,1);
Y_l_use = +48; Y_m_use = +29;
a_k_Y_form_ = +1.0.*(Y_l_val_==Y_l_use).*(Y_m_val_==Y_m_use);
if ~exist('Ylm_uklma___','var'); Ylm_uklma___=[]; end;
if ~exist('k_p_azimu_b_sub_uka__','var'); k_p_azimu_b_sub_uka__ = []; end;
if ~exist('k_p_polar_a_sub_uka__','var'); k_p_polar_a_sub_uka__ = []; end;
if ~exist('l_max_uk_','var'); l_max_uk_ = []; end;
if ~exist('index_nu_n_k_per_shell_from_nk_p_r_','var'); index_nu_n_k_per_shell_from_nk_p_r_ = []; end;
if ~exist('index_k_per_shell_uka__','var'); index_k_per_shell_uka__ = []; end;
[ ...
 a_k_p_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,a_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%;
[ ...
 a_k_Y_quad_ ...
] = ...
convert_k_p_to_spharm_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,a_k_p_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
if (flag_verbose); disp(sprintf(' %% a_k_Y_form_ vs a_k_Y_quad_: %0.16f',fnorm(a_k_Y_form_-a_k_Y_quad_)/fnorm(a_k_Y_form_))); end;
%%%%;
n_w = 2*2*l_max;
viewing_k_eq_d = 0.5*1.0/k_p_r_max;
[ ...
 S_k_p_wS__ ...
,~ ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
] = ...
pm_template_2( ...
 flag_verbose ...
,l_max ...
,n_k_p_r ...
,a_k_Y_form_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w ...
);
n_S = n_viewing_S;
if (flag_verbose); disp(sprintf(' %% n_w %d, viewing_k_eq_d %0.6f, n_S %d',n_w,viewing_k_eq_d,n_S)); end;
S_k_p_wS__ = reshape(S_k_p_wS__,[n_w,n_S]);
%%%%;
parameter_lsq = struct('type','parameter');
parameter_lsq.flag_verbose = flag_verbose;
parameter_lsq.pcg_tolerance = 1e-6;
parameter_lsq.pcg_maxiter = 1e3;
[ ...
 parameter_lsq ...
,a_k_Y_0lsq_ ...
,pcg_0lsq_flag ...
,pcg_0lsq_relres ...
,pcg_0lsq_iter ...
] = ...
cg_lsq_single_shell_7( ...
 parameter_lsq ...
,l_max ...
,n_w ...
,n_S ...
,S_k_p_wS__ ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
);
%%%%;
parameter_qbp = struct('type','parameter');
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,a_k_Y_0qbp_ ...
] = ...
qbp_single_shell_7( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_S ...
,S_k_p_wS__ ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
);
%%%%;
parameter_lsq = struct('type','parameter');
parameter_lsq.flag_verbose = flag_verbose;
parameter_lsq.pcg_tolerance = 1e-6;
parameter_lsq.pcg_maxiter = 1e3;
[ ...
 parameter_lsq ...
,a_k_Y_1lsq_ ...
,pcg_1lsq_flag ...
,pcg_1lsq_relres ...
,pcg_1lsq_iter ...
] = ...
cg_lsq_single_shell_7( ...
 parameter_lsq ...
,l_max ...
,n_w ...
,n_S ...
,S_k_p_wS__ ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,[] ...
,a_k_Y_0qbp_ ...
);
%%%%;
[ ...
 a_k_p_0lsq_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,a_k_Y_0lsq_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%;
[ ...
 a_k_p_0qbp_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,a_k_Y_0qbp_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%;
[ ...
 a_k_p_1lsq_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,a_k_Y_1lsq_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%;
flag_2d_vs_3d = 0; %<-- 3d;
alim_ = prctile(real(a_k_p_quad_),[5,95]); alim_ = mean(alim_) + 0.5*1.25*diff(alim_)*[-1,+1];
figure(1+nf);nf=nf+1;clf;figbig;
p_row = 2; p_col = 2; np=0;
subplot(p_row,p_col,1+np);np=np+1;
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,real(a_k_p_quad_) ... 
,alim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_1 ...
);
title('real(a_k_p_quad_)','Interpreter','none');
subplot(p_row,p_col,1+np);np=np+1;
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,real(a_k_p_0lsq_) ... 
,alim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_1 ...
);
title('real(a_k_p_0lsq_)','Interpreter','none');
subplot(p_row,p_col,1+np);np=np+1;
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,real(a_k_p_0qbp_) ... 
,alim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_1 ...
);
title('real(a_k_p_0qbp_)','Interpreter','none');
subplot(p_row,p_col,1+np);np=np+1;
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,real(a_k_p_1lsq_) ... 
,alim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_1 ...
);
title('real(a_k_p_1lsq_)','Interpreter','none');
%%%%;
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,3,1); plot(Y_l_val_,abs(a_k_Y_form_-a_k_Y_0lsq_),'ko',Y_l_val_,abs(a_k_Y_form_-a_k_Y_1lsq_),'rx');
xlabel('Y_l_val_','Interpreter','none'); ylabel('abs(a_k_Y_form_-a_k_Y_?lsq_)','Interpreter','none'); grid on;
subplot(1,3,2); plot(Y_m_val_,abs(a_k_Y_form_-a_k_Y_0lsq_),'ko',Y_m_val_,abs(a_k_Y_form_-a_k_Y_1lsq_),'rx');
xlabel('Y_m_val_','Interpreter','none'); ylabel('abs(a_k_Y_form_-a_k_Y_?lsq_)','Interpreter','none'); grid on;
disp(sprintf(' %% a_k_Y_form_ vs a_k_Y_0lsq_: %0.16f',fnorm(a_k_Y_form_-a_k_Y_0lsq_)/fnorm(a_k_Y_form_)));
disp(sprintf(' %% a_k_Y_form_ vs a_k_Y_0qbp_: %0.16f',fnorm(a_k_Y_form_-a_k_Y_0qbp_)/fnorm(a_k_Y_form_)));
disp(sprintf(' %% a_k_Y_form_ vs a_k_Y_1lsq_: %0.16f',fnorm(a_k_Y_form_-a_k_Y_1lsq_)/fnorm(a_k_Y_form_)));
disp(sprintf(' %% a_k_Y_1lsq_ vs a_k_Y_0lsq_: %0.16f',fnorm(a_k_Y_1lsq_-a_k_Y_0lsq_)/fnorm(a_k_Y_1lsq_)));
subplot(1,3,3); plot(abs(a_k_Y_form_),abs(a_k_Y_1lsq_),'o');
%%%%;
disp(sprintf(' %% returning')); return;
%%%%%%%%;
end;%if (nargin<1);
%%%%%%%%;

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;
if (nargin<1+na); l_max=[]; end; na=na+1;
if (nargin<1+na); n_w=[]; end; na=na+1;
if (nargin<1+na); n_M=[]; end; na=na+1;
if (nargin<1+na); M_k_p_wM__=[]; end; na=na+1;
if (nargin<1+na); index_nCTF_from_nM_=[]; end; na=na+1;
if (nargin<1+na); CTF_k_p_wC__=[]; end; na=na+1;
if (nargin<1+na); euler_polar_a_=[]; end; na=na+1;
if (nargin<1+na); euler_azimu_b_=[]; end; na=na+1;
if (nargin<1+na); euler_gamma_z_=[]; end; na=na+1;
if (nargin<1+na); pcg_X0_=[]; end; na=na+1;

if isempty(parameter);
parameter = struct('type','parameter');
end;%if isempty(parameter);
%%%%%%%%;
if (~isfield(parameter,'flag_verbose')); parameter.flag_verbose = 0; end; %<-- parameter_bookmark. ;
flag_verbose = parameter.flag_verbose;
if (~isfield(parameter,'tolerance_master')); parameter.tolerance_master = 1e-2; end; %<-- parameter_bookmark. ;
tolerance_master = parameter.tolerance_master;
if (~isfield(parameter,'n_order')); parameter.n_order = 5; end; %<-- parameter_bookmark. ;
n_order = parameter.n_order;
if (~isfield(parameter,'pcg_tolerance')); parameter.pcg_tolerance = []; end; %<-- parameter_bookmark. ;
pcg_tolerance = parameter.pcg_tolerance;
if (~isfield(parameter,'pcg_maxiter')); parameter.pcg_maxiter = []; end; %<-- parameter_bookmark. ;
pcg_maxiter = parameter.pcg_maxiter;
%%%%%%%%;

if isempty(euler_polar_a_); euler_polar_a_ = zeros(n_M,1); end;
if isempty(euler_azimu_b_); euler_azimu_b_ = zeros(n_M,1); end;
if isempty(euler_gamma_z_); euler_gamma_z_ = zeros(n_M,1); end;
if isempty(index_nCTF_from_nM_); index_nCTF_from_nM_ = zeros(n_M,1); end;
if isempty(CTF_k_p_wC__); CTF_k_p_wC__ = ones(n_w,1); end;

if (flag_verbose>0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;

%%%%%%%%;
n_lm = (1+l_max).^2; %<-- total number of spherical-harmonic coefficients. ;
CTF_k_p_wM__ = CTF_k_p_wC__(:,1+index_nCTF_from_nM_); %<-- CTF for each image. ;
CTF_k_p_wM_ = CTF_k_p_wM__(:);
%%%%;
tmp_t = tic();
[k_p_polar_a__,k_p_azimu_b__] = cg_rhs_1(n_M,n_w,euler_polar_a_,euler_azimu_b_,+euler_gamma_z_);
tmp_t = toc(tmp_t); if (flag_verbose); disp(sprintf(' %% cg_rhs_1: %0.2fs',tmp_t)); end;
%%%%;
tmp_t = tic();
%n_polar_a = ceil(n_w/2); %<-- previously used in cg_lsq_3. ;
n_polar_a = ceil(n_w/1);
n_azimu_b = max(1+2*l_max,2*n_polar_a);
[legendre_evaluate_ljm___,legendre_evaluate_mlj___,expil__,expi__] = legendre_evaluate_ljm___0(l_max,cos(linspace(0,pi,n_polar_a)),n_azimu_b);
tmp_t = toc(tmp_t); if (flag_verbose); disp(sprintf(' %% legendre_evaluate_ljm___0 (should be a precomputation): %0.2fs',tmp_t)); end;
tmp_t = tic();
tensor_to_scatter__ = cg_interpolate_n_1(n_order,n_polar_a,n_azimu_b,n_w*n_M,k_p_polar_a__(:),k_p_azimu_b__(:));
scatter_to_tensor__ = ctranspose(tensor_to_scatter__); %<-- this conjugation is not necessary, since the matrix should be real. ;
tmp_t = toc(tmp_t); if (flag_verbose); disp(sprintf(' %% tensor_to_scatter__ (should be a precomputation): %0.2fs',tmp_t)); end;
%%%%;
tmp_t = tic();
An__ = @(a_k_Y_) CTF_k_p_wM_.*(tensor_to_scatter__*reshape(cg_evaluate_n_1(l_max,convert_spharm_to_spharm__0(l_max,a_k_Y_),n_polar_a,n_azimu_b,legendre_evaluate_ljm___),[n_polar_a*n_azimu_b,1]));
At__ = @(a_k_X_) convert_spharm__to_spharm_0(l_max,cg_evaluate_t_1(n_polar_a,n_azimu_b,reshape(scatter_to_tensor__*(conj(CTF_k_p_wM_).*a_k_X_),[n_polar_a,n_azimu_b]),l_max,legendre_evaluate_mlj___,expil__,expi__));
AtAn__ = @(a_k_Y_) At__(An__(a_k_Y_));
tmp_t = toc(tmp_t); if (flag_verbose); disp(sprintf(' %% AtAn__ (should be a precomputation): %0.2fs',tmp_t)); end;
%%%%;
tmp_t = tic();
a_k_Y_lm_ = zeros(n_lm,1);
[a_k_Y_lm_,pcg_flag,pcg_relres,pcg_iter] = pcg(AtAn__,At__(reshape(M_k_p_wM__,[n_w*n_M,1])),pcg_tolerance,pcg_maxiter,[],[],pcg_X0_);
tmp_t = toc(tmp_t); if (flag_verbose); disp(sprintf(' %% pcg: %0.2fs',tmp_t)); end;

if (flag_verbose>0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;

