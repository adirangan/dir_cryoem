%{
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('R_use__','var'); R_use__ = []; end;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
if ~exist('a_R_k_p_qk_','var'); a_R_k_p_qk_=[]; end;
if ~exist('dvol_a_R_k_p_qk_','var'); dvol_a_R_k_p_qk_=[]; end;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
if ~exist('wS_from_R_single_shell_sba__','var'); wS_from_R_single_shell_sba__=[]; end;
if ~exist('dwSda_from_R_single_shell_sba__','var'); dwSda_from_R_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_R_single_shell_sba__','var'); dwSdb_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_sba__','var'); ddwSdaa_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_R_single_shell_sba__','var'); ddwSdab_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_sba__','var'); ddwSdbb_from_R_single_shell_sba__=[]; end;
%}
function ...
[ ...
 parameter ...
,ssnll_M_ ...
,ssnll ...
,S_k_p_wkS__ ...
,dvol_ssnll_M_ ...
,dvol_ssnll ...
,dvol_S_k_p_wkS__ ...
,dvol_dvol_ssnll ...
,dtau_ssnll_M3__ ...
,dtau_ssnll ...
,dtau_S_k_p_wkS3___ ...
,dtau_dvol_ssnll_M3__ ...
,dtau_dvol_ssnll ...
,dtau_dvol_S_k_p_wkS3___ ...
,dtau_dtau_ssnll_M33___ ...
,dtau_dtau_ssnll ...
,dtau_dtau_S_k_p_wkS33____ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,R_use__ ...
,a_R_k_p_qk_ ...
,dvol_a_R_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,wS_from_R_single_shell_sba__ ...
,dwSda_from_R_single_shell_sba__ ...
,dwSdb_from_R_single_shell_sba__ ...
,ddwSdaa_from_R_single_shell_sba__ ...
,ddwSdab_from_R_single_shell_sba__ ...
,ddwSdbb_from_R_single_shell_sba__ ...
] = ...
ssnll_from_a_k_p_14( ...
 parameter ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
,dvol_a_k_p_qk_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_viewing_S ...
,S_k_p_wkS__ ...
,dvol_S_k_p_wkS__ ...
,dtau_S_k_p_wkS3___ ...
,dtau_dvol_S_k_p_wkS3___ ...
,dtau_dtau_S_k_p_wkS33____ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,n_M ...
,weight_imagecount_M_ ...
,M_k_p_wkM__ ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,R_use__ ...
,a_R_k_p_qk_ ...
,dvol_a_R_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,wS_from_R_single_shell_sba__ ...
,dwSda_from_R_single_shell_sba__ ...
,dwSdb_from_R_single_shell_sba__ ...
,ddwSdaa_from_R_single_shell_sba__ ...
,ddwSdab_from_R_single_shell_sba__ ...
,ddwSdbb_from_R_single_shell_sba__ ...
);
%%%%%%%%;
% Calculates ssnll (sigma*sigma*log_unlikelihood). ;
% Also calculates derivatives. ;
% Accumulates across all individual shells of a_k_Y_. ;
% Associates CTF_k_p_wkC__(:,1+index_nCTF_from_nM_(1+nM)) with image M_k_p_wkM__(:,1+nM);
% Allows for a nonuniform sigma-squared weighting-term (see eta_k_p_wke__). ;
% Strongly assumes that viewing_gamma_z_S_ := zeros(n_S,1) ;
% ;
% Input: ;
% n_qk = integer total number of points in spherical discretization. ;
% n_qk_csum_ = integer array of size (n_k_p_r). n_qk_csum_(1+nk_p_r) is the number of points prior to shell nk_p_r. ;
% k_p_r_qk_ = double array of size (n_qk). k_p_r_qk_(1+na) = radius of point na. ;
% k_p_azimu_b_qk_ = double array of size (n_qk). k_p_azimu_b_qk_(1+na) = azimu_b of point na. ;
% k_p_polar_a_qk_ = double array of size (n_qk). k_p_polar_a_qk_(1+na) = azimu_b of point na. ;
% weight_3d_k_p_qk_ = double array of size (n_qk). weight_3d_k_p_qk_(1+na) = quadrature-weight (3d) for point na. ;
% weight_shell_qk_ = double array of size (n_qk). weight_shell_qk_(1+na) = quadrature-weight (shell) for point na. ;
% n_k_p_r = integer number of shells. ;
% k_p_r_ = double array of size (n_k_p_r). k_p_r_(1+nk_p_r) = radius of shell nk_p_r.
% k_p_r_max = double maximum k_value intended for radial integration. ;
% weight_3d_k_p_r_ = double array of size (n_k_p_r). weight_3d_k_p_r_(1+nk_p_r) = quadrature-weight for shell nk_p_r. ;
% k_c_0_qk_ = double array of size (n_qk). k_c_0_qk_(1+na) = k_c_0 of point na. ;
% k_c_1_qk_ = double array of size (n_qk). k_c_1_qk_(1+na) = k_c_1 of point na. ;
% k_c_2_qk_ = double array of size (n_qk). k_c_2_qk_(1+na) = k_c_2 of point na. ;
% n_polar_a_k_ = integer array of size (n_k_p_r). n_polar_a_k_(1+nk_p_r) = number of latitudinal-lines for shell nk_p_r. ;
% polar_a_ka__ = cell-array of size (n_k_p_r). polar_a_ka__{1+nk_p_r} = double array of size n_polar_a_k_(1+nk_p_r) storing latitudes. ;
% n_azimu_b_ka__ = cell-array of size (n_k_p_r). n_azimu_b_ka__{1+nk_p_r} = integer array of size n_polar_a_k_(1+nk_p_r) storing n_azimu_b per latitude. ;
% a_k_p_qk_ = complex array of size (n_qk). a_k_p_qk_(1+na) = function-value a for point na. ;
% dvol_a_k_p_qk_ = complex array of size (n_qk). dvol_a_k_p_qk_(1+na) = perturbation to function-value a for point na. ;
% n_w_: integer array of size n_k_p_r; n_w:=n_w_(1+nk_p_r) is the number of equispaced angular points on the ring/shell nk_p_r. ;
%       Here we assume that n_w_ is uniform. ;
% weight_2d_k_p_r_: double array of size n_k_p_r; weight_2d_k_p:=weight_2d_k_p_r_(1+nk_p_r) is the quadrature-weights in 2d for ring nk_p_r. ;
% weight_2d_wk_: double array of size n_w_sum; all quadrature-weights for 2d integration. ;
% n_viewing_S: integer number of templates produced on tensor-grid. denoted by n_S. ;
% S_k_p_wkS__: complex array of size (n_w_sum,n_S). stack of templates on ring in k_p_ format. ;
% dvol_S_k_p_wkS__: similar to S_k_p_wkS__, storing the volumetric-perturbation associated with dvol_a_k_Y_yk_. ;
% dtau_S_k_p_wkS3___: similar to S_k_p_wkS__; dtau_S_k_p_wkS3___(:,:,1+ntau) stores the gradient of S_k_p_wkS__ with respect to tau_(1+ntau). ;
% dtau_dvol_S_k_p_wkS3___: similar to dvol_S_k_p_wkS__; dtau_dvol_S_k_p_wkS3___(:,:,1+ntau) stores the gradient of dvol_S_k_p_wkS__ with respect to tau_(1+ntau). ;
% dtau_dtau_S_k_p_wkS33____: similar to S_k_p_wkS__; dtau_dtau_S_k_p_wkS33____(:,:,1+ntau0,1+ntau1) stores the hessian of S_k_p_wkS__ with respect to tau_(1+ntau0),tau_(1+ntau1). ;
% viewing_polar_a_S_: real array of size n_S. polar_a used for each template ;
% viewing_azimu_b_S_: real array of size n_S. azimu_b used for each template ;
% viewing_weight_S_: real array of size n_S. azimu_b used for each template ;
% n_viewing_polar_a: integer number of unique polar_a used for viewing-angles. ;
% viewing_polar_a_: real array of size n_viewing_polar_a; polar_a used for viewing-angles on tensor-grid. ;
% n_viewing_azimu_b_: integer array of size n_viewing_polar_a; number of azimu_b for each polar_a on tensor-grid (should be uniform). ;
% viewing_gamma_z_S_: real array of size n_S. gamma_z used for each template. typically all zeros. ;
% n_M: integer number of images. ;
% weight_imagecount_M_: double array of size n_M. weight (i.e., number) for each image. ;
% M_k_p_wkM__: complex array of size (n_w_sum,n_M). stack of images on ring in k_p_ format. ;
% index_nCTF_from_nM_: integer array of size n_M. index_nCTF_from_nM_(1+nM) is the (base 0) CTF_index used for image M_k_p_wkM__(:,1+nM). ;
%             This can be empty or set to 1, in which case the same CTF_k_p_ will be used for each image. ;
% CTF_k_p_wkC__: complex array of size(n_w_sum,n_CTF). stack of ctf-functions in k_p_ format. ;
%            If index_nCTF_from_nM_ is empty or set to 1, then we assume this contains only a single CTF_k_p_, ;
%            which will then be used for all images. ;
% index_neta_from_nM_: integer array of size n_M. index_neta_from_nM_(1+nM) is the (base 0) eta_index used for image M_k_p_wkM__(:,1+nM). ;
%             This can be empty or set to 1, in which case the same eta_k_p_ will be used for each image. ;
% eta_k_p_wke__: complex array of size(n_w_sum,n_eta). stack of eta-functions in k_p_ format. ;
%            If index_neta_from_nM_ is empty or set to 1, then we assume this contains only a single eta_k_p_, ;
%            which will then be used for all images. ;
% euler_polar_a_M_: real array of size n_M. polar_a used for each image, i.e., tau_(1+0). ;
% euler_azimu_b_M_: real array of size n_M. azimu_b used for each image, i.e., tau_(1+1).  ;
% euler_gamma_z_M_: real array of size n_M. gamma_z used for each image, i.e., tau_(1+2).  ;
% dtau_euler_polar_a_M_: real array of size n_M. tau-perturbation of polar_a used for each image ;
% dtau_euler_azimu_b_M_: real array of size n_M. tau-perturbation of azimu_b used for each image ;
% dtau_euler_gamma_z_M_: real array of size n_M. tau-perturbation of gamma_z used for each image ;
% ;
% Output: ;
% ssnll: double (sigma*sigma*log_unlikelihood). ;
% dvol_ssnll: double. derivative of ssnll with respect to volumetric-perturbation. ;
% dtau_ssnll: double. derivative of ssnll with respect to alignment-perturbation. ;
%%%%%%%%;

str_thisfunction = 'ssnll_from_a_k_p_14';

%%%%%%%%;
if (nargin<1);
%%%%%%%%;
test_ssnll_from_a_k_p_14;
%%%%%%%%;
disp(sprintf(' %% returning')); return;
%%%%%%%%;
end;%if (nargin<1);
%%%%%%%%;

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;
if (nargin<1+na); n_qk=[]; end; na=na+1;
if (nargin<1+na); n_qk_csum_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_qk_=[]; end; na=na+1;
if (nargin<1+na); k_p_azimu_b_qk_=[]; end; na=na+1;
if (nargin<1+na); k_p_polar_a_qk_=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_p_qk_=[]; end; na=na+1;
if (nargin<1+na); weight_shell_qk_=[]; end; na=na+1;
if (nargin<1+na); n_k_p_r=[]; end; na=na+1;
if (nargin<1+na); k_p_r_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_max=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_p_r_=[]; end; na=na+1;
if (nargin<1+na); k_c_0_qk_=[]; end; na=na+1;
if (nargin<1+na); k_c_1_qk_=[]; end; na=na+1;
if (nargin<1+na); k_c_2_qk_=[]; end; na=na+1;
if (nargin<1+na); n_polar_a_k_=[]; end; na=na+1;
if (nargin<1+na); polar_a_ka__=[]; end; na=na+1;
if (nargin<1+na); n_azimu_b_ka__=[]; end; na=na+1;
if (nargin<1+na); a_k_p_qk_=[]; end; na=na+1;
if (nargin<1+na); dvol_a_k_p_qk_=[]; end; na=na+1;
if (nargin<1+na); n_w_=[]; end; na=na+1;
if (nargin<1+na); weight_2d_k_p_r_=[]; end; na=na+1;
if (nargin<1+na); weight_2d_wk_=[]; end; na=na+1;
if (nargin<1+na); n_viewing_S=[]; end; na=na+1;
if (nargin<1+na); S_k_p_wkS__=[]; end; na=na+1;
if (nargin<1+na); dvol_S_k_p_wkS__=[]; end; na=na+1;
if (nargin<1+na); dtau_S_k_p_wkS3___=[]; end; na=na+1;
if (nargin<1+na); dtau_dvol_S_k_p_wkS3___=[]; end; na=na+1;
if (nargin<1+na); dtau_dtau_S_k_p_wkS33____=[]; end; na=na+1;
if (nargin<1+na); viewing_polar_a_S_=[]; end; na=na+1;
if (nargin<1+na); viewing_azimu_b_S_=[]; end; na=na+1;
if (nargin<1+na); viewing_weight_S_=[]; end; na=na+1;
if (nargin<1+na); n_viewing_polar_a=[]; end; na=na+1;
if (nargin<1+na); viewing_polar_a_=[]; end; na=na+1;
if (nargin<1+na); n_viewing_azimu_b_=[]; end; na=na+1;
if (nargin<1+na); viewing_gamma_z_S_=[]; end; na=na+1;
if (nargin<1+na); n_M=[]; end; na=na+1;
if (nargin<1+na); weight_imagecount_M_=[]; end; na=na+1;
if (nargin<1+na); M_k_p_wkM__=[]; end; na=na+1;
if (nargin<1+na); index_nCTF_from_nM_=[]; end; na=na+1;
if (nargin<1+na); CTF_k_p_wkC__=[]; end; na=na+1;
if (nargin<1+na); index_neta_from_nM_=[]; end; na=na+1;
if (nargin<1+na); eta_k_p_wke__=[]; end; na=na+1;
if (nargin<1+na); euler_polar_a_M_=[]; end; na=na+1;
if (nargin<1+na); euler_azimu_b_M_=[]; end; na=na+1;
if (nargin<1+na); euler_gamma_z_M_=[]; end; na=na+1;
if (nargin<1+na); dtau_euler_polar_a_M_=[]; end; na=na+1;
if (nargin<1+na); dtau_euler_azimu_b_M_=[]; end; na=na+1;
if (nargin<1+na); dtau_euler_gamma_z_M_=[]; end; na=na+1;
if (nargin<1+na); wS_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); dwSda_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); dwSdb_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdaa_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdab_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdbb_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); R_use__=[]; end; na=na+1;
if (nargin<1+na); a_R_k_p_qk_=[]; end; na=na+1;
if (nargin<1+na); dvol_a_R_k_p_qk_=[]; end; na=na+1;
if (nargin<1+na); ba_from_single_shell_baba__=[]; end; na=na+1;
if (nargin<1+na); wS_from_R_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); dwSda_from_R_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); dwSdb_from_R_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdaa_from_R_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdab_from_R_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdbb_from_R_single_shell_sba__=[]; end; na=na+1;
 
if isempty(parameter);
parameter = struct('type','parameter');
end;%if isempty(parameter);
%%%%%%%%;
if (~isfield(parameter,'flag_verbose')); parameter.flag_verbose = 0; end; %<-- parameter_bookmark. ;
flag_verbose = parameter.flag_verbose;
if (~isfield(parameter,'tolerance_master')); parameter.tolerance_master = 1e-2; end; %<-- parameter_bookmark. ;
tolerance_master = parameter.tolerance_master;
if (~isfield(parameter,'tolerance_pinv')); parameter.tolerance_pinv = 1e-6; end; %<-- parameter_bookmark. ;
tolerance_pinv = parameter.tolerance_pinv;
if (~isfield(parameter,'viewing_k_eq_d')); parameter.viewing_k_eq_d = []; end; %<-- parameter_bookmark. ;
viewing_k_eq_d = parameter.viewing_k_eq_d;
if (~isfield(parameter,'template_k_eq_d')); parameter.template_k_eq_d = -1; end; %<-- parameter_bookmark. ;
template_k_eq_d = parameter.template_k_eq_d;
if (~isfield(parameter,'n_order')); parameter.n_order = 5; end; %<-- parameter_bookmark. ;
n_order = parameter.n_order;
%%%%%%%%;

if (flag_verbose>0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;

flag_ssnll = 1;
flag_dvol_ssnll = 0; if ~isempty(dvol_a_k_p_qk_); flag_dvol_ssnll = 1; end;
flag_dtau_ssnll = 0; if (nargout>=1+8); flag_dtau_ssnll = 1; end;
flag_dvol_dvol_ssnll = 0; if ~isempty(dvol_a_k_p_qk_) & (nargout>=1+7); flag_dvol_dvol_ssnll = 1; end;
flag_dtau_dvol_ssnll = 0; if ~isempty(dvol_a_k_p_qk_) & (nargout>=1+11); flag_dtau_dvol_ssnll = 1; end;
flag_dtau_dtau_ssnll = 0; if (nargout>=1+14); flag_dtau_dtau_ssnll = 1; end;
if (flag_verbose>0); disp(sprintf(' %% flag_ssnll %d flag_dvol_ssnll %d flag_dtau_ssnll %d flag_dvol_dvol_ssnll %d flag_dtau_dvol_ssnll %d flag_dtau_dtau_ssnll %d',flag_ssnll, flag_dvol_ssnll, flag_dtau_ssnll, flag_dvol_dvol_ssnll, flag_dtau_dvol_ssnll, flag_dtau_dtau_ssnll)); end;

ssnll_M_ = [];
ssnll = [];
dvol_ssnll_M_ = [];
dvol_ssnll = [];
dtau_ssnll_M3__ = [];
dtau_ssnll = [];
dvol_dvol_ssnll = [];
dtau_dvol_ssnll_M3__ = [];
dtau_dvol_ssnll = [];
dtau_dtau_ssnll_M33___ = [];
dtau_dtau_ssnll = [];

n_S = n_viewing_S;
n_w_max = max(n_w_);
n_w_sum = sum(n_w_);
n_w_csum_ = cumsum([0;n_w_]);
if (n_w_sum~=n_w_max*n_k_p_r); disp(sprintf(' %% Warning, n_w_ nonuniform in %s',str_thisfunction)); end;
if (flag_verbose>0); disp(sprintf(' %% n_w_max %d n_w_sum %d',n_w_max,n_w_sum)); end;
n_w_0in = n_w_max; n_w_0in_ = n_w_max*ones(n_k_p_r,1);

%%%%%%%%;
% Here we form the viewing grid. ;
% In this implementation we assume the viewing-grid is a tensor-grid, ;
% however, we can also work with an adaptive-grid if needed. ;
%%%%%%%%;
if  isempty(n_S) |  isempty(viewing_azimu_b_S_) |  isempty(viewing_polar_a_S_) |  isempty(viewing_weight_S_) |  isempty(n_viewing_polar_a) |  isempty(viewing_polar_a_) |  isempty(n_viewing_azimu_b_) ;
if (flag_verbose>0); disp(sprintf(' %% forming n_S, viewing_azimu_b_S_, viewing_polar_a_S_, viewing_weight_S_, n_viewing_polar_a, viewing_polar_a_, n_viewing_azimu_b_')); end;
tmp_t = tic();
str_T_vs_L = 'C2';
flag_tensor_vs_adap = 0; %<-- adaptive-grid. ;
[ ...
 n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,~ ...
,~ ...
,~ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
sample_shell_6( ...
 k_p_r_max ...
,template_k_eq_d ...
,str_T_vs_L ...
,flag_tensor_vs_adap ...
) ;
if (flag_verbose>0); disp(sprintf(' %% n_S %d, n_viewing_polar_a %d, n_viewing_azimu_b [%d,..,%d]',n_S,n_viewing_polar_a,n_viewing_azimu_b_(1+0),n_viewing_azimu_b_(end))); end;
end;%if  isempty(n_S) |  isempty(viewing_azimu_b_S_) |  isempty(viewing_polar_a_S_) |  isempty(viewing_weight_S_) |  isempty(n_viewing_polar_a) |  isempty(viewing_polar_a_) |  isempty(n_viewing_azimu_b_) ;
%%%%%%%%;
if isempty(viewing_gamma_z_S_); viewing_gamma_z_S_ = zeros(n_S,1); end;

%%%%%%%%;
if  isempty(weight_2d_k_p_r_) |  isempty(weight_2d_wk_) ;
if (flag_verbose>0); disp(sprintf(' %% forming weight_2d_k_p_r_, weight_2d_wk_')); end;
[ ...
 ~ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
] = ...
get_weight_2d_2( ...
 0*flag_verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,-1 ...
,n_w_ ...
);
end;%if  isempty(weight_2d_k_p_r_) |  isempty(weight_2d_wk_) ;
%%%%%%%%;

if ~exist('S_k_p_wkS__','var'); S_k_p_wkS__=[]; end;
if ~exist('dtau_S_k_p_wkS3___','var'); dtau_S_k_p_wkS3___=[]; end;
if ~exist('dtau_dtau_S_k_p_wkS33____','var'); dtau_dtau_S_k_p_wkS33____=[]; end;
if ~exist('dvol_S_k_p_wkS__','var'); dvol_S_k_p_wkS__=[]; end;
if ~exist('dtau_dvol_S_k_p_wkS3___','var'); dtau_dvol_S_k_p_wkS3___=[]; end;

%%%%%%%%%%%%%%%%;
if  flag_ssnll & ~flag_dtau_ssnll & ~flag_dtau_dtau_ssnll ;
%%%%%%%%%%%%%%%%;
if isempty(S_k_p_wkS__);
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% form S_k_p_wkS__ on tensor-grid.')); end;
%%%%%%%%;
tmp_t = tic();
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('R_use__','var'); R_use__ = []; end;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
if ~exist('a_R_k_p_qk_','var'); a_R_k_p_qk_=[]; end;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
if ~exist('wS_from_R_single_shell_sba__','var'); wS_from_R_single_shell_sba__=[]; end;
if ~exist('dwSda_from_R_single_shell_sba__','var'); dwSda_from_R_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_R_single_shell_sba__','var'); dwSdb_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_sba__','var'); ddwSdaa_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_R_single_shell_sba__','var'); ddwSdab_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_sba__','var'); ddwSdbb_from_R_single_shell_sba__=[]; end;
parameter_interpolate = parameter;
parameter_interpolate.flag_verbose = max(0,flag_verbose-1);
parameter_interpolate.tolerance_pinv = tolerance_pinv;
parameter_interpolate.flag_check = 0;
parameter_interpolate.flag_parsimonious = 1;
[ ...
 parameter_interpolate ...
,template_ori_wkS__ ...
,n_w ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
] = ...
interpolate_template_6( ...
 parameter_interpolate ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w_0in ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,R_use__ ...
,a_R_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,wS_from_R_single_shell_sba__ ...
,dwSda_from_R_single_shell_sba__ ...
,dwSdb_from_R_single_shell_sba__ ...
,ddwSdaa_from_R_single_shell_sba__ ...
,ddwSdab_from_R_single_shell_sba__ ...
,ddwSdbb_from_R_single_shell_sba__ ...
);
S_k_p_wkS__ = template_ori_wkS__;
S_k_p_wkS__ = reshape(S_k_p_wkS__,[n_w_sum,n_S]);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% interpolate_template_6 (flag_ssnll): %0.6fs',tmp_t)); end;
%%%%%%%%;
end;%if isempty(S_k_p_wkS__);
%%%%%%%%%%%%%%%%;
end;%if  flag_ssnll & ~flag_dtau_ssnll & ~flag_dtau_dtau_ssnll ;
%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%;
if  flag_ssnll &  flag_dtau_ssnll & ~flag_dtau_dtau_ssnll ;
%%%%%%%%%%%%%%%%;
if isempty(S_k_p_wkS__) | isempty(dtau_S_k_p_wkS3___);
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% form S_k_p_wkS__ and dtau_S_k_p_wkS3___ on tensor-grid.')); end;
%%%%%%%%;
tmp_t = tic();
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('R_use__','var'); R_use__ = []; end;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
if ~exist('a_R_k_p_qk_','var'); a_R_k_p_qk_=[]; end;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
if ~exist('wS_from_R_single_shell_sba__','var'); wS_from_R_single_shell_sba__=[]; end;
if ~exist('dwSda_from_R_single_shell_sba__','var'); dwSda_from_R_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_R_single_shell_sba__','var'); dwSdb_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_sba__','var'); ddwSdaa_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_R_single_shell_sba__','var'); ddwSdab_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_sba__','var'); ddwSdbb_from_R_single_shell_sba__=[]; end;
parameter_interpolate = parameter;
parameter_interpolate.flag_verbose = max(0,flag_verbose-1);
parameter_interpolate.tolerance_pinv = tolerance_pinv;
parameter_interpolate.flag_check = 0;
parameter_interpolate.flag_parsimonious = 1;
[ ...
 parameter_interpolate ...
,template_ori_wkS__ ...
,n_w ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
,R_use__ ...
,a_R_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,wS_from_R_single_shell_sba__ ...
,dtemplateda_ori_wkS__ ...
,dtemplatedb_ori_wkS__ ...
,dtemplatedc_ori_wkS__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,dtemplateda_rec_wkS__ ...
,dtemplatedb_rec_wkS__ ...
,dtemplatedc_rec_wkS__ ...
,dwSda_from_R_single_shell_sba__ ...
,dwSdb_from_R_single_shell_sba__ ...
] = ...
interpolate_template_6( ...
 parameter_interpolate ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w_0in ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,R_use__ ...
,a_R_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,wS_from_R_single_shell_sba__ ...
,dwSda_from_R_single_shell_sba__ ...
,dwSdb_from_R_single_shell_sba__ ...
,ddwSdaa_from_R_single_shell_sba__ ...
,ddwSdab_from_R_single_shell_sba__ ...
,ddwSdbb_from_R_single_shell_sba__ ...
);
S_k_p_wkS__ = template_ori_wkS__;
S_k_p_wkS__ = reshape(S_k_p_wkS__,[n_w_sum,n_S]);
dtau_S_k_p_wkS3___ = zeros(n_w_sum,n_S,3);
dtau_S_k_p_wkS3___(:,:,1+0) = +dtemplateda_ori_wkS__;
dtau_S_k_p_wkS3___(:,:,1+1) = +dtemplatedb_ori_wkS__;
dtau_S_k_p_wkS3___(:,:,1+2) = +dtemplatedc_ori_wkS__;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% interpolate_template_6 (flag_dtau_ssnll): %0.6fs',tmp_t)); end;
%%%%%%%%;
end;%if isempty(S_k_p_wkS__);
%%%%%%%%%%%%%%%%;
end;%if  flag_ssnll &  flag_dtau_ssnll & ~flag_dtau_dtau_ssnll ;
%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%;
if  flag_ssnll &  flag_dtau_ssnll &  flag_dtau_dtau_ssnll ;
%%%%%%%%%%%%%%%%;
if isempty(S_k_p_wkS__) | isempty(dtau_S_k_p_wkS3___) | isempty(dtau_dtau_S_k_p_wkS33____);
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% form S_k_p_wkS__ and dtau_S_k_p_wkS3___ and dtau_dtau_S_k_p_wkS33____ on tensor-grid.')); end;
%%%%%%%%;
tmp_t = tic();
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('R_use__','var'); R_use__ = []; end;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
if ~exist('a_R_k_p_qk_','var'); a_R_k_p_qk_=[]; end;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
if ~exist('wS_from_R_single_shell_sba__','var'); wS_from_R_single_shell_sba__=[]; end;
if ~exist('dwSda_from_R_single_shell_sba__','var'); dwSda_from_R_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_R_single_shell_sba__','var'); dwSdb_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_sba__','var'); ddwSdaa_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_R_single_shell_sba__','var'); ddwSdab_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_sba__','var'); ddwSdbb_from_R_single_shell_sba__=[]; end;
parameter_interpolate = parameter;
parameter_interpolate.flag_verbose = max(0,flag_verbose-1);
parameter_interpolate.tolerance_pinv = tolerance_pinv;
parameter_interpolate.flag_check = 0;
parameter_interpolate.flag_parsimonious = 1;
[ ...
 parameter_interpolate ...
,template_ori_wkS__ ...
,n_w ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
,R_use__ ...
,a_R_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,wS_from_R_single_shell_sba__ ...
,dtemplateda_ori_wkS__ ...
,dtemplatedb_ori_wkS__ ...
,dtemplatedc_ori_wkS__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,dtemplateda_rec_wkS__ ...
,dtemplatedb_rec_wkS__ ...
,dtemplatedc_rec_wkS__ ...
,dwSda_from_R_single_shell_sba__ ...
,dwSdb_from_R_single_shell_sba__ ...
,ddtemplatedaa_ori_wkS__ ...
,ddtemplatedab_ori_wkS__ ...
,ddtemplatedac_ori_wkS__ ...
,ddtemplatedbb_ori_wkS__ ...
,ddtemplatedbc_ori_wkS__ ...
,ddtemplatedcc_ori_wkS__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,ddtemplatedaa_rec_wkS__ ...
,ddtemplatedab_rec_wkS__ ...
,ddtemplatedac_rec_wkS__ ...
,ddtemplatedbb_rec_wkS__ ...
,ddtemplatedbc_rec_wkS__ ...
,ddtemplatedcc_rec_wkS__ ...
,ddwSdaa_from_R_single_shell_sba__ ...
,ddwSdab_from_R_single_shell_sba__ ...
,ddwSdbb_from_R_single_shell_sba__ ...
] = ...
interpolate_template_6( ...
 parameter_interpolate ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w_0in ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,R_use__ ...
,a_R_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,wS_from_R_single_shell_sba__ ...
,dwSda_from_R_single_shell_sba__ ...
,dwSdb_from_R_single_shell_sba__ ...
,ddwSdaa_from_R_single_shell_sba__ ...
,ddwSdab_from_R_single_shell_sba__ ...
,ddwSdbb_from_R_single_shell_sba__ ...
);
S_k_p_wkS__ = template_ori_wkS__;
S_k_p_wkS__ = reshape(S_k_p_wkS__,[n_w_sum,n_S]);
dtau_S_k_p_wkS3___ = zeros(n_w_sum,n_S,3);
dtau_S_k_p_wkS3___(:,:,1+0) = +dtemplateda_ori_wkS__;
dtau_S_k_p_wkS3___(:,:,1+1) = +dtemplatedb_ori_wkS__;
dtau_S_k_p_wkS3___(:,:,1+2) = +dtemplatedc_ori_wkS__;
dtau_dtau_S_k_p_wkS33____ = zeros(n_w_sum,n_S,3,3);
dtau_dtau_S_k_p_wkS33____(:,:,1+0,1+0) = +ddtemplatedaa_ori_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+0,1+1) = +ddtemplatedab_ori_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+0,1+2) = +ddtemplatedac_ori_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+1,1+0) = +ddtemplatedab_ori_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+1,1+1) = +ddtemplatedbb_ori_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+1,1+2) = +ddtemplatedbc_ori_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+2,1+0) = +ddtemplatedac_ori_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+2,1+1) = +ddtemplatedbc_ori_wkS__;
dtau_dtau_S_k_p_wkS33____(:,:,1+2,1+2) = +ddtemplatedcc_ori_wkS__;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% interpolate_template_6 (flag_dtau_dtau_ssnll): %0.6fs',tmp_t)); end;
%%%%%%%%;
end;%if isempty(S_k_p_wkS__);
%%%%%%%%%%%%%%%%;
end;%if  flag_ssnll &  flag_dtau_ssnll &  flag_dtau_dtau_ssnll ;
%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%;
if  flag_dvol_ssnll & ~flag_dtau_dvol_ssnll ;
%%%%%%%%%%%%%%%%;
if isempty(dvol_S_k_p_wkS__);
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% form dvol_S_k_p_wkS__ on tensor-grid.')); end;
%%%%%%%%;
tmp_t = tic();
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('R_use__','var'); R_use__ = []; end;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
if ~exist('dvol_a_R_k_p_qk_','var'); dvol_a_R_k_p_qk_=[]; end;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
if ~exist('wS_from_R_single_shell_sba__','var'); wS_from_R_single_shell_sba__=[]; end;
if ~exist('dwSda_from_R_single_shell_sba__','var'); dwSda_from_R_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_R_single_shell_sba__','var'); dwSdb_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_sba__','var'); ddwSdaa_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_R_single_shell_sba__','var'); ddwSdab_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_sba__','var'); ddwSdbb_from_R_single_shell_sba__=[]; end;
parameter_interpolate = parameter;
parameter_interpolate.flag_verbose = max(0,flag_verbose-1);
parameter_interpolate.tolerance_pinv = tolerance_pinv;
parameter_interpolate.flag_check = 0;
parameter_interpolate.flag_parsimonious = 1;
[ ...
 parameter_interpolate ...
,template_ori_wkS__ ...
,n_w ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
] = ...
interpolate_template_6( ...
 parameter_interpolate ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,dvol_a_k_p_qk_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w_0in ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,R_use__ ...
,dvol_a_R_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,wS_from_R_single_shell_sba__ ...
,dwSda_from_R_single_shell_sba__ ...
,dwSdb_from_R_single_shell_sba__ ...
,ddwSdaa_from_R_single_shell_sba__ ...
,ddwSdab_from_R_single_shell_sba__ ...
,ddwSdbb_from_R_single_shell_sba__ ...
);
dvol_S_k_p_wkS__ = template_ori_wkS__;
dvol_S_k_p_wkS__ = reshape(dvol_S_k_p_wkS__,[n_w_sum,n_S]);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% interpolate_template_6 (flag_ssnll): %0.6fs',tmp_t)); end;
%%%%%%%%;
end;%if isempty(dvol_S_k_p_wkS__);
%%%%%%%%%%%%%%%%;
end;%if  flag_dvol_ssnll & ~flag_dtau_dvol_ssnll ;
%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%;
if  flag_dvol_ssnll &  flag_dtau_dvol_ssnll ;
%%%%%%%%%%%%%%%%;
if isempty(dvol_S_k_p_wkS__) | isempty(dtau_dvol_S_k_p_wkS3___);
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% form dvol_S_k_p_wkS__ and dtau_dvol_S_k_p_wkS3___ on tensor-grid.')); end;
%%%%%%%%;
tmp_t = tic();
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('R_use__','var'); R_use__ = []; end;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
if ~exist('dvol_a_R_k_p_qk_','var'); dvol_a_R_k_p_qk_=[]; end;
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
if ~exist('wS_from_R_single_shell_sba__','var'); wS_from_R_single_shell_sba__=[]; end;
if ~exist('dwSda_from_R_single_shell_sba__','var'); dwSda_from_R_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_R_single_shell_sba__','var'); dwSdb_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_sba__','var'); ddwSdaa_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_R_single_shell_sba__','var'); ddwSdab_from_R_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_sba__','var'); ddwSdbb_from_R_single_shell_sba__=[]; end;
parameter_interpolate = parameter;
parameter_interpolate.flag_verbose = max(0,flag_verbose-1);
parameter_interpolate.tolerance_pinv = tolerance_pinv;
parameter_interpolate.flag_check = 0;
parameter_interpolate.flag_parsimonious = 1;
[ ...
 parameter_interpolate ...
,template_ori_wkS__ ...
,n_w ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
,R_use__ ...
,a_R_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,wS_from_R_single_shell_sba__ ...
,dtemplateda_ori_wkS__ ...
,dtemplatedb_ori_wkS__ ...
,dtemplatedc_ori_wkS__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,dtemplateda_rec_wkS__ ...
,dtemplatedb_rec_wkS__ ...
,dtemplatedc_rec_wkS__ ...
,dwSda_from_R_single_shell_sba__ ...
,dwSdb_from_R_single_shell_sba__ ...
] = ...
interpolate_template_6( ...
 parameter_interpolate ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,dvol_a_k_p_qk_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w_0in ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,R_use__ ...
,dvol_a_R_k_p_qk_ ...
,ba_from_single_shell_baba__ ...
,wS_from_R_single_shell_sba__ ...
,dwSda_from_R_single_shell_sba__ ...
,dwSdb_from_R_single_shell_sba__ ...
,ddwSdaa_from_R_single_shell_sba__ ...
,ddwSdab_from_R_single_shell_sba__ ...
,ddwSdbb_from_R_single_shell_sba__ ...
);
dvol_S_k_p_wkS__ = template_ori_wkS__;
dvol_S_k_p_wkS__ = reshape(dvol_S_k_p_wkS__,[n_w_sum,n_S]);
dtau_dvol_S_k_p_wkS3___ = zeros(n_w_sum,n_S,3);
dtau_dvol_S_k_p_wkS3___(:,:,1+0) = +dtemplateda_ori_wkS__;
dtau_dvol_S_k_p_wkS3___(:,:,1+1) = +dtemplatedb_ori_wkS__;
dtau_dvol_S_k_p_wkS3___(:,:,1+2) = +dtemplatedc_ori_wkS__;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% interpolate_template_6 (flag_dtau_ssnll): %0.6fs',tmp_t)); end;
%%%%%%%%;
end;%if isempty(dvol_S_k_p_wkS__) | isempty(dtau_dvol_S_k_p_wkS3___);
%%%%%%%%%%%%%%%%;
end;%if  flag_dvol_ssnll &  flag_dtau_dvol_ssnll ;
%%%%%%%%%%%%%%%%;

%%%%%%%%;
% Now call ssnll_from_template_wkS_14;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% calling ssnll_from_template_wkS_14')); end;
tmp_t = tic();
[ ...
 parameter ...
,ssnll_M_ ...
,ssnll ...
,S_k_p_wkS__ ...
,dvol_ssnll_M_ ...
,dvol_ssnll ...
,dvol_S_k_p_wkS__ ...
,dvol_dvol_ssnll ...
,dtau_ssnll_M3__ ...
,dtau_ssnll ...
,dtau_S_k_p_wkS3___ ...
,dtau_dvol_ssnll_M3__ ...
,dtau_dvol_ssnll ...
,dtau_dvol_S_k_p_wkS3___ ...
,dtau_dtau_ssnll_M33___ ...
,dtau_dtau_ssnll ...
,dtau_dtau_S_k_p_wkS33____ ...
] = ...
ssnll_from_template_wkS_14( ...
 parameter ...
,n_k_p_r ...
,k_p_r_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_viewing_S ...
,S_k_p_wkS__ ...
,dvol_S_k_p_wkS__ ...
,dtau_S_k_p_wkS3___ ...
,dtau_dvol_S_k_p_wkS3___ ...
,dtau_dtau_S_k_p_wkS33____ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,n_M ...
,weight_imagecount_M_ ...
,M_k_p_wkM__ ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% ssnll_from_template_wkS_14: %0.6fs',tmp_t)); end;
%%%%%%%%;

%%%%%%%%;
if sum(~isfinite(ssnll_M_),'all')> 0; disp(sprintf(' %% Warning, ssnll_M_ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ssnll),'all')> 0; disp(sprintf(' %% Warning, ssnll not finite in %s',str_thisfunction)); end;
if sum(~isfinite(S_k_p_wkS__),'all')> 0; disp(sprintf(' %% Warning, S_k_p_wkS__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dvol_ssnll_M_),'all')> 0; disp(sprintf(' %% Warning, dvol_ssnll_M_ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dvol_ssnll),'all')> 0; disp(sprintf(' %% Warning, dvol_ssnll not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dvol_S_k_p_wkS__),'all')> 0; disp(sprintf(' %% Warning, dvol_S_k_p_wkS__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dvol_dvol_ssnll),'all')> 0; disp(sprintf(' %% Warning, dvol_dvol_ssnll not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dtau_ssnll_M3__),'all')> 0; disp(sprintf(' %% Warning, dtau_ssnll_M3__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dtau_ssnll),'all')> 0; disp(sprintf(' %% Warning, dtau_ssnll not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dtau_S_k_p_wkS3___),'all')> 0; disp(sprintf(' %% Warning, dtau_S_k_p_wkS3___ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dtau_dvol_ssnll_M3__),'all')> 0; disp(sprintf(' %% Warning, dtau_dvol_ssnll_M3__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dtau_dvol_ssnll),'all')> 0; disp(sprintf(' %% Warning, dtau_dvol_ssnll not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dtau_dvol_S_k_p_wkS3___),'all')> 0; disp(sprintf(' %% Warning, dtau_dvol_S_k_p_wkS3___ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dtau_dtau_ssnll_M33___),'all')> 0; disp(sprintf(' %% Warning, dtau_dtau_ssnll_M33___ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dtau_dtau_ssnll),'all')> 0; disp(sprintf(' %% Warning, dtau_dtau_ssnll not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dtau_dtau_S_k_p_wkS33____),'all')> 0; disp(sprintf(' %% Warning, dtau_dtau_S_k_p_wkS33____ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(wS_from_single_shell_sba__),'all')> 0; disp(sprintf(' %% Warning, wS_from_single_shell_sba__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dwSda_from_single_shell_sba__),'all')> 0; disp(sprintf(' %% Warning, dwSda_from_single_shell_sba__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(dwSdb_from_single_shell_sba__),'all')> 0; disp(sprintf(' %% Warning, dwSdb_from_single_shell_sba__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddwSdaa_from_single_shell_sba__),'all')> 0; disp(sprintf(' %% Warning, ddwSdaa_from_single_shell_sba__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddwSdab_from_single_shell_sba__),'all')> 0; disp(sprintf(' %% Warning, ddwSdab_from_single_shell_sba__ not finite in %s',str_thisfunction)); end;
if sum(~isfinite(ddwSdbb_from_single_shell_sba__),'all')> 0; disp(sprintf(' %% Warning, ddwSdbb_from_single_shell_sba__ not finite in %s',str_thisfunction)); end;
%%%%%%%%;

if (flag_verbose>0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;
