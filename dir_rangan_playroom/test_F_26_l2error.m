function l2error = test_F_26_l2error(t,y_,svd_tolerance,max_k_p,D_target,n_A,delta_sample_,quad_weight_sample_);
%%%%%%%%%%%%%%%%;
h_ = @(kd) 4*pi*( sin(kd) - (kd).*cos(kd) ) ./ kd.^3 ; % calculates <f_j,f_k>, normalized so that <f,f> = 4*pi/3, rather than 4*pi/3*R_max^3 ;
dh_ = @(kd) 12*pi*( (kd.^2/3 - 1) .* sin(kd) + (kd).*cos(kd) ) ./ kd.^4 ;
n_node = size(y_,1)/3;
delta_node_ = reshape(y_,3,n_node);
%%%%%%%%%%%%%%%%;
H_ = zeros(n_node,n_node);
for nnodeA=1:n_node; for nnodeB=1:n_node;
d = (delta_node_(:,nnodeB) - delta_node_(:,nnodeA));
if (nnodeA~=nnodeB); H_(nnodeA,nnodeB) = h_(norm(d)*max_k_p); end;
if (nnodeA==nnodeB); H_(nnodeA,nnodeB) = (4*pi/3); end;
end;end;%for nnodeA=1:n_node; for nnodeB=1:n_node;
[HU_,HS_,HV_] = svd(H_); HS_ = diag(HS_); H_ij_ = find(HS_./HS_(1) < svd_tolerance);
GS_ = 1./HS_; GS_(H_ij_)=0; GS_ = diag(GS_); G_ = HV_*GS_*transpose(HU_);
dhx__ = zeros(n_node,n_node); dhy__ = zeros(n_node,n_node); dhz__ = zeros(n_node,n_node);
ddx_ = repmat(delta_node_(1,:),n_node,1) - repmat(transpose(delta_node_(1,:)),1,n_node);
ddy_ = repmat(delta_node_(2,:),n_node,1) - repmat(transpose(delta_node_(2,:)),1,n_node);
ddz_ = repmat(delta_node_(3,:),n_node,1) - repmat(transpose(delta_node_(3,:)),1,n_node);
hypot_dd_ = sqrt(ddx_.^2+ddy_.^2+ddz_.^2);
tmp_ = dh_(hypot_dd_*max_k_p)*max_k_p./hypot_dd_; tmp_(find(hypot_dd_==0)) = 0;
dhx__ = - tmp_ .* ddx_; dhy__ = - tmp_ .* ddy_; dhz__ = - tmp_ .* ddz_;
%%%%%%%%%%%%%%%%;
dE3k_sample___ = zeros(n_A,2,n_node);
ddx_ = repmat(delta_sample_(:,1)',n_node,1) - repmat(delta_node_(1,:)',1,n_A);
ddy_ = repmat(delta_sample_(:,2)',n_node,1) - repmat(delta_node_(2,:)',1,n_A);
ddz_ = repmat(delta_sample_(:,3)',n_node,1) - repmat(delta_node_(3,:)',1,n_A);
hypot_dd_ = sqrt(ddx_.^2+ddy_.^2+ddz_.^2);
ij_=find(hypot_dd_==0);
ft_ = h_(hypot_dd_*max_k_p); ft_(ij_) = (4*pi/3);
alpha_= G_*ft_;
E3_sample_ = ( (4*pi/3) - sum(alpha_.*ft_,1) ) / (4*pi/3); % Sampled relative error. ;
E3_quad = abs(E3_sample_)*quad_weight_sample_;
tmp_ = dh_(hypot_dd_*max_k_p)*max_k_p./hypot_dd_; tmp_(ij_) = 0;
dftx_ = - tmp_.*ddx_; dfty_ = - tmp_.*ddy_; dftz_ = - tmp_.*ddz_;
dE3x_sample_ = 2*alpha_.*(dhx__*alpha_) - 2*alpha_.*dftx_;
dE3y_sample_ = 2*alpha_.*(dhy__*alpha_) - 2*alpha_.*dfty_;
dE3z_sample_ = 2*alpha_.*(dhz__*alpha_) - 2*alpha_.*dftz_;
dE3x_quad_ = dE3x_sample_*quad_weight_sample_;
dE3y_quad_ = dE3y_sample_*quad_weight_sample_;
dE3z_quad_ = dE3z_sample_*quad_weight_sample_;
%%%%%%%%%%%%%%%%;
gradient_ = -transpose([ dE3x_quad_ , dE3y_quad_ , dE3z_quad_ ]);
for nnode=1:n_node;
tmp = sqrt( delta_node_(1,nnode).^2 + delta_node_(2,nnode).^2 + delta_node_(3,nnode).^2 );
if (tmp>1.25*D_target); gradient_(:,nnode) = -delta_node_(:,nnode); end;
end;%for nnode=1:n_node;
gradient_ = reshape(gradient_,3*n_node,1);
l2error = E3_quad;
