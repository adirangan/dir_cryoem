function [a_x_all_] = convert_spharm_to_x_p_2(verbose,n_k_p_r,k_p_r_,weight_k_p_r_,l_val_,a_k_Y_,n_x_all,x_p_r_all_,x_p_azimu_b_all_,x_p_polar_a_all_);
% evaluates spherical-harmonic-expansion a_k_Y_ (in fourier-space) on a collection of points in real-space. ;
% ;
% inputs: ;
% ;
% verbose = integer verbosity_level. ;
% n_k_p_r = integer maximum k_p_r. ;
% k_p_r_ = real array of length n_k_p_r; k_p_r_(nk_p_r) = k_value for shell nk_p_r. ;
% weight_k_p_r_ = real array of radial quadrature weights. ;
% l_val_ = integer array of length n_k_p_r; l_val_(nk_p_r) = spherical harmonic order on shell nk_p_r; l_val_(nk_p_r) corresponds to n_lm_(nk_p_r) = (l_val_(nk_p_r)+1)^2 coefficients. ;
% a_k_Y_ = complex array of length \sum_{nk_p_r} (n_lm_(nk_p_r)+1)^2 ; coefficients are ordered linearly, with m varying quickly and l varying slowly and k varying most slowly. ;
% n_x_all_ = integer number of points in x_p. ;
% x_p_r_all_ = real array of length n_x_all ; x_p_r value to evaluate. ;
% x_p_azimu_b_all_ = real array of length n_x_all ; x_p_azimu_b value to evaluate. ;
% x_p_polar_a_all_ = real array of length n_x_all ; x_p_polar_a value to evaluate. ;
% ;
% outputs: ;
% ;
% a_x_all_ = complex array of length n_x_all ; evaluation of function in real-space. ;

n_lm_ = (l_val_+1).^2;
l_val_max = max(l_val_);
m_max_ = -l_val_max : +l_val_max;
n_m_max = length(m_max_);
a_x_all_ = zeros(n_x_all,1);
Ylm__ = get_Ylm__(l_val_max+1,0:l_val_max,n_x_all,x_p_azimu_b_all_(:),x_p_polar_a_all_(:));
ix=0;
for nk_p_r=0:n_k_p_r-1;
k_p_r = k_p_r_(1+nk_p_r);
l_val_max = l_val_(1+nk_p_r);
for nl=0:l_val_max;
l_val = nl;
t_ = 2*pi*k_p_r*x_p_r_all_; t_ = reshape(t_,n_x_all,1);
jl_ = besselj(l_val+0.5,t_).*sqrt(pi./(2*t_));
n_m = (2*l_val+1);
for nm=0:n_m-1;
m_val = -l_val + nm;
Ylm_ = Ylm__{1+l_val}(1+nm,:); Ylm_ = reshape(Ylm_,n_x_all,1);
a_x_all_ = a_x_all_ + i^l_val * (jl_ .* Ylm_) * weight_k_p_r_(1+nk_p_r) * a_k_Y_(1+ix);
ix = ix+1;
end;%for nm=0:n_m-1;
end;%for nl=0:l_val_max;
end;%for nk_p_r=0:n_k_p_r-1;
assert(ix==sum(n_lm_));
a_x_all_ = (4*pi) * reshape(a_x_all_,size(x_p_r_all_));
