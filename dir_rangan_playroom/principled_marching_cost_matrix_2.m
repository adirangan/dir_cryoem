function [X_,X_weight_r_,X_ori_,X_tau_,weight_so3,n_m_max,polar_a_,azimu_b_,gamma_z_] = principled_marching_cost_matrix_2(n_k_p_r,weight_k_p_r_,l_max,a_k_Y__);
% more efficient calculation of volumetric cost. ;
% scales by inverse-standard-deviations. ;

if (nargin<4);
%%%%%%%%;
% First assert that \int_{beta} sin(\beta)d\beta * d_{l}^{0,0}(\cos(\beta)) = 2\delta_{l,0}. ;
%%%%%%%%;
n_polar_a = 129;
polar_a_ = transpose(linspace(0,pi,n_polar_a)); 
weight_polar_a_ = sin(polar_a_)*pi/(n_polar_a-1); 
weight_polar_a_(2:2:end) = weight_polar_a_(2:2:end)*4/3; %<-- simpson rule. ;
weight_polar_a_(1:2:end) = weight_polar_a_(1:2:end)*2/3; %<-- simpson rule. ;
l_max = 11;
W__ = zeros(1+l_max,n_polar_a);
W___ = cell(1+l_max,1); for l_val=0:l_max; W___{1+l_val} = zeros(1+2*l_val,1+2*l_val); end;
for npolar_a=0:n_polar_a-1;
polar_a = polar_a_(1+npolar_a);
tmp_W_ = wignerd_b(l_max,polar_a);
for l_val=0:l_max;
W___{1+l_val} = W___{1+l_val} + tmp_W_{1+l_val}*weight_polar_a_(1+npolar_a);
W__(1+l_val,1+npolar_a) = tmp_W_{1+l_val}(1+l_val+0,1+l_val+0);
end;%for l_val=0:l_max;
end;%for npolar_a=0:n_polar_a-1;
I_form_ = zeros(1+l_max,1); I_form_(1+0)=2;
I_quad_ = W__*weight_polar_a_;
disp(sprintf(' %% I_form_ vs I_quad_: %0.16f',fnorm(I_form_-I_quad_)/fnorm(I_form_)));
flag_plot=0;
if flag_plot;
for l_val=0:l_max;
subplot(3,4,1+l_val); imagesc(W___{1+l_val}); axis image; title(sprintf('%d',l_val));
end;%for l_val=0:l_max;
figbig;
end;%if flag_plot;
%%%%%%%%;
% Now assert that summing \int conj(a_k_)*rotation(b_k_) over all euler angles ;
% yields the same as conj(a_k_Y_(1+0))*b_k_Y_(1+0). ;
%%%%%%%%;
l_max = 10;
n_lm_max = (1+l_max)^2;
n_m_max = 1+2*l_max;
a_k_Y_ = randn(n_lm_max,1) + i*randn(n_lm_max,1);
b_k_Y_ = randn(n_lm_max,1) + i*randn(n_lm_max,1);
n_polar_a = 16*n_m_max; polar_a_ = linspace(-pi,pi,n_polar_a+1); polar_a_ = polar_a_(1:end-1);
weight_so3 = (2*pi)*(2*pi)*4; %<-- total volume of so3. ;
weight_sub = (2*pi)^3 / (n_polar_a*n_m_max*n_m_max); %<-- abs(sin(polar_a))*weight_sub is used for each summand on so3. ;
%%%%%%%%;
tmp_sum = 0;
for npolar_a=1:n_polar_a;
polar_a = polar_a_(npolar_a);
[tmp_X_tau__] = register_spharm_to_spharm_single_beta_2(0,1,1,1,l_max,a_k_Y_,b_k_Y_,polar_a,0,[],0,[],[],[],[],[]);
tmp_sum = tmp_sum + sum(tmp_X_tau__,'all')*abs(sin(polar_a))*weight_sub; %<-- need quadrature weight to ensure uniform measure over SO3. ;
end;%for npolar_a=1:n_polar_a;
I_quad = tmp_sum;
I_form = (4*pi)^2 * conj(a_k_Y_(1+0)) * b_k_Y_(1+0);
disp(sprintf(' %% I_form vs I_quad: %0.16f',fnorm(I_form-I_quad)/fnorm(I_form)));
%%%%%%%%;
disp('returning'); return;
end;%if (nargin<4);

verbose=1;
%%%%%%%%;
n_lm_max = (1+l_max)^2;
n_m_max = 1+2*l_max;
n_polar_a = n_m_max; polar_a_ = linspace(-pi,pi,n_polar_a+1); polar_a_ = polar_a_(1:end-1);
weight_so3 = (2*pi)*(2*pi)*4; %<-- total volume of so3. ;
%%%%%%%%;
X_weight_r_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
X_weight_r_(1+nk_p_r) = sqrt(weight_k_p_r_(1+nk_p_r));
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;
X_ori_ = zeros(n_k_p_r,n_k_p_r);
for nk_p_r_0=0:n_k_p_r-1;
X_weight_r_0 = X_weight_r_(1+nk_p_r_0); %<-- volume element = inverse-variance associated with nk_p_r_0. ;
for nk_p_r_1=nk_p_r_0:n_k_p_r-1;
X_weight_r_1 = X_weight_r_(1+nk_p_r_1); %<-- volume element = inverse-variance associated with nk_p_r_1. ;
X_weight_r_01 = X_weight_r_0*X_weight_r_1; %<-- product of inverse-standard-deviations associated with nk_p_r_0 and nk_p_r_1. ;
X_ori_(1+nk_p_r_0,1+nk_p_r_1) = register_spharm_to_spharm_2(verbose,1,1,1,l_max,a_k_Y__(:,1+nk_p_r_0),a_k_Y__(:,1+nk_p_r_1)) * X_weight_r_01;
X_ori_(1+nk_p_r_1,1+nk_p_r_0) = conj(X_ori_(1+nk_p_r_0,1+nk_p_r_1));
X_tau_(1+nk_p_r_0,1+nk_p_r_1) = (4*pi)^2 * conj(a_k_Y__(1+0,1+nk_p_r_0))*a_k_Y__(1+0,1+nk_p_r_1) * X_weight_r_01;
X_tau_(1+nk_p_r_1,1+nk_p_r_0) = conj(X_tau_(1+nk_p_r_0,1+nk_p_r_1));
end;%for nk_p_r_1=nk_p_r_0:n_k_p_r-1;
end;%for nk_p_r_0=0:n_k_p_r-1;
%%%%%%%%;
X_ = real(X_ori_)*weight_so3 - real(X_tau_);
%%%%%%%%;
