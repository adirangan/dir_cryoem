function wigners_3(n_l,kdelta_max,eps__in);
% constructs approximate factorization of wigner-s matrix, defined as: ;
% Ws = Wd(-omega) * Wt(k*delta) * Wd(+omega), where: ; 
% Wd = wigner-d matrix for angle omega ;
% Wt = wigner-t matrix for z-translation delta on shell-k ;

n_l = 25; kdelta_max = 2.0; eps__in = 1e-3; verbose=1;

if (nargin<na); n_l = 10; end; na = na+1;
if (nargin<na); kdelta_max = 2.0; end; na = na+1;
if (nargin<na); eps__in = 1e-3; end; na = na+1;

k_val_max = n_l;
n_tmp = max(20,2*n_l);
k_val_ = linspace(1,k_val_max,n_tmp); n_k_val = length(k_val_);
delta_ = linspace(0,kdelta_max/k_val_max,n_tmp+1); n_delta = length(delta_); 
kdelta_ = reshape(k_val_,length(k_val_),1)*reshape(delta_,1,length(delta_)); 
kdelta_ = reshape(kdelta_,length(k_val_)*length(delta_),1);
n_kdelta = length(kdelta_);
omega_ = linspace(0,pi,n_tmp+2); n_omega = length(omega_);
n_all = n_k_val*n_delta*n_omega;

n_sample = 0.5;
n_lm = (1+n_l).^2;
n_m = 1+2*n_l;

[m1_,l1_,m2_,l2_,pp_,qq_] = permute_ml_to_lm(n_l);
m3_ = unique(m2_,'stable');

if verbose; disp(sprintf(' %% calculating Wd_')); tic; end;
Wdf__ = cell(n_omega,1);
Wdf_ = cell(n_omega,1);
Sdf_ = cell(n_omega,1);
Wdb__ = cell(n_omega,1);
Wdb_ = cell(n_omega,1);
Sdb_ = cell(n_omega,1);
for nomega = 1:n_omega;
omega = omega_(nomega);
Wdf__{nomega} = wignerd_b(n_l,+omega);
Wdb__{nomega} = wignerd_b(n_l,-omega);
Wdf_{nomega} = zeros(n_lm,n_lm);
Wdb_{nomega} = zeros(n_lm,n_lm);
nlm=0;
for nl=0:n_l;
l_val = nl;
nm = 1 + 2*l_val;
Wdf_{nomega}(nlm + (1:nm),nlm + (1:nm)) = Wdf__{nomega}{1+nl};
Wdb_{nomega}(nlm + (1:nm),nlm + (1:nm)) = Wdb__{nomega}{1+nl};
nlm = nlm + nm;
end;%for nl=0:n_l;
assert(nlm==n_lm);
Sdf_{nomega} = sparse(Wdf_{nomega});
Sdb_{nomega} = sparse(Wdb_{nomega});
end;%for nomega = 1:n_omega;
if verbose; disp(sprintf(' %% finished Wd_, total time %0.2f',toc)); end;
clear Wdf__ Wdf_ Wdb__ Wdb_ ;

if verbose; disp(sprintf(' %% calculating Wt_')); tic; end;
Wz__ = wignerz_leg(n_l,kdelta_,n_sample);
n_s_max = 9;
Uz_ = cell(n_m,n_s_max);
Sz_ = cell(n_m,n_s_max);
Vz_ = cell(n_m,n_s_max);
for nm=1:n_m;
%if nm==1; m_val=0; end; if nm>1; m_val = (1+floor((nm-2)/2))*((-1)^(mod(nm-1,2))); end; 
m_val = m3_(nm); m_abs = abs(m_val); nl = 1+n_l-m_abs;
W_tmp_ = zeros(nl,nl,n_k_val,n_delta);
for ndelta = 1:n_delta; for nk_val = 1:n_k_val;
nkd = 1 + (nk_val-1) + (ndelta-1)*n_k_val;
W_tmp_(:,:,nk_val,ndelta) = Wz__{nm,nkd};
end;end;%for ndelta = 1:n_delta; for nk_val = 1:n_k_val;
W_tmp_ = reshape(W_tmp_,[nl*nl*n_k_val,n_delta]);
[U_tmp_,S_tmp_,V_tmp_] = svds(W_tmp_,n_s_max);
for ns=1:n_s_max;
Uz_{nm,ns} = reshape(U_tmp_(:,ns),[nl,nl,n_k_val]);
Sz_{nm,ns} = S_tmp_(ns,ns);
Vz_{nm,ns} = V_tmp_(:,ns)*S_tmp_(ns,ns);
end;%for ns=1:n_s_max;
clear W_tmp_ U_tmp_ S_tmp_ V_tmp_ ;
end;%for nm=1:n_m;
if verbose; disp(sprintf(' %% finished Wt_, total time %0.2f',toc)); end;
clear Wz__ ;

% look at Sz_ to see how many terms we need for each nm. ;
% Looks as though 3 terms suffices for 1e-2 accuracy. ;
Sz = cell2mat(Sz_);
cra = colormap('jet'); ncra = size(cra,1);
for nm=1:n_m;
%if nm==1; m_val=0; end; if nm>1; m_val = (1+floor((nm-2)/2))*((-1)^(mod(nm-1,2))); end; 
m_val = m3_(nm); m_abs = abs(m_val); nl = 1+n_l-m_abs;
cbin = max(1,min(ncra,floor(ncra*nm/(n_m))));
subplot(1,2,1); hold on;
plot(1:n_s_max,Sz(nm,:),'.-','MarkerSize',35,'Color',cra(cbin,:));
xlabel('ns'); ylabel('S'); title(sprintf(' %% S^m for various m'));
hold off;
subplot(1,2,2); hold on;
plot(1:n_s_max,log10(Sz(nm,:)),'.-','MarkerSize',35,'Color',cra(cbin,:));
xlabel('ns'); ylabel('log10(S)'); title(sprintf(' %% S^m for various m'));
hold off;
end;%for nm=1:n_m;

% Using Sz(1,:) we can set Termlimit_T to, say, 5. ;
Termlimit_T = min(find( Sz(1,:)/Sz(1,1) < eps__in ));

% look at Vz_ to see how it depends on delta, nm and ns. ;
% looks as though Vz_ scales with nm. ;
cra = colormap('jet'); ncra = size(cra,1);
prows = ceil(sqrt(n_s_max)); pcols = ceil(sqrt(n_s_max));
for ns=1:n_s_max;
subplot(prows,pcols,ns); hold on;
for nm=1:n_m;
%if nm==1; m_val=0; end; if nm>1; m_val = (1+floor((nm-2)/2))*((-1)^(mod(nm-1,2))); end; 
m_val = m3_(nm); m_abs = abs(m_val); nl = 1+n_l-m_abs;
cbin = max(1,min(ncra,floor(ncra*nm/(n_m))));
plot(delta_,real(Vz_{nm,ns}),'-','Color',cra(cbin,:));
end;%for nm=1:n_m;
hold off;
xlabel('delta'); ylabel('V'); title(sprintf(' %% V^m for ns=%d',ns));
end;%for ns=1:n_s_max;

% look at Vz_ to see if we can factor out nm dependence. ;
% Only first 2 or 1 terms are relevant for each ns. ;
Vz = zeros(n_delta,n_m,n_s_max);
for ns=1:n_s_max;
for nm=1:n_m;
Vz(:,nm,ns) = real(Vz_{nm,ns});
end;%for nm=1:n_m;
end;%for ns=1:n_s_max;
figure;
prows = ceil(sqrt(n_s_max)); pcols = ceil(sqrt(n_s_max));
for ns=1:n_s_max;
subplot(prows,pcols,ns); 
imagesc(squeeze(Vz(:,:,ns))); colorbar; 
xlabel('nm'); ylabel('delta'); title(sprintf(' ns %d',ns));
end;%for ns=1:n_s_max;
figure;
for ns=1:n_s_max;
subplot(prows,pcols,ns); 
tmp_s = svds(squeeze(Vz(:,:,ns)),9);
plot(log10(tmp_s),'.-','MarkerSize',25);
xlabel('svd'); ylabel('log10(sv)'); title(sprintf(' svs for ns %d',ns));
end;%for ns=1:n_s_max;

% Now look at Uz_{nm==1,ns==1:3}(:,:,nk) to see how it depends on k_val. ;
% Note that we expect Uz_{nm,ns}(:,:,nk) to be banded. ;
% This means we can look at the various diagonals of Uz_. ;
% These certainly look like they scale with k_val. ;
cra = colormap('jet'); ncra = size(cra,1);
n_s_sub = 3;
n_band = 7;
nm = 1;
%if nm==1; m_val=0; end; if nm>1; m_val = (1+floor((nm-2)/2))*((-1)^(mod(nm-1,2))); end; 
m_val = m3_(nm); m_abs = abs(m_val); nl = 1+n_l-m_abs;
for ns=1:n_s_sub;
for nband=1:n_band;
subplot(n_s_sub,n_band,nband + (ns-1)*n_band); hold on;
for nk_val = 1:n_k_val;
U_tmp = diag(squeeze(Uz_{1,ns}(:,:,nk_val)),nband-1); 
cbin = max(1,min(ncra,floor(ncra*nk_val/n_k_val)));
plot(1:nl-(nband-1),abs(U_tmp),'.-','MarkerSize',25,'Color',cra(cbin,:));
end;%for nk_val = 1:n_k_val;
hold off;
xlabel(sprintf('diag %d',nband-1)); ylabel('abs(U)'); title(sprintf('m %d diag %d ns %d',m_val,nband-1,ns));
end;%for nband=1:n_band;
end;%for ns=1:n_s_sub;

% Now look at Uz_{nm=1:6,ns=1:3}(:,:,nk) in a different way. ;
% Here we construct a U_tmp which has several diagonals of Uz_ as rows, and nk as columns. ;
% We can see that U_tmp is nearly separable in terms of the diagonals vs k_val_. ;
n_s_sub = 3;
n_m_sub = 6;
n_band = 12;
figure;
for ns=1:n_s_sub;
for nm=1:n_m_sub;
%if nm==1; m_val=0; end; if nm>1; m_val = (1+floor((nm-2)/2))*((-1)^(mod(nm-1,2))); end; 
m_val = m3_(nm); m_abs = abs(m_val); nl = 1+n_l-m_abs;
len_tmp = 0; for nband=1:n_band; len_tmp = len_tmp + (nl-(nband-1)); end; len_sum = len_tmp;
U_tmp = zeros(len_sum,n_k_val);
for nk_val = 1:n_k_val;
len_tmp = 0;
for nband=1:n_band;
U_tmp(len_tmp + (1:nl-(nband-1)),nk_val) = diag(Uz_{nm,ns}(:,:,nk_val),nband-1);
len_tmp = len_tmp + (nl-(nband-1));
end;%for nband=1:n_band;
assert(len_tmp==len_sum);
end;%for nk_val = 1:n_k_val;
subplot(n_s_sub,2*n_m_sub,1+0+2*(nm-1) + (ns-1)*2*n_m_sub);
imagesc(abs(U_tmp));
title(sprintf('U m %d s %d',nm,ns));
tmp_s = svds(U_tmp,15);
subplot(n_s_sub,2*n_m_sub,1+1+2*(nm-1) + (ns-1)*2*n_m_sub);
plot(log10(tmp_s),'.-','Markersize',35);
title(sprintf('sv m %d s %d',nm,ns));
end;%for nm=1:n_m_sub;
end;%for ns=1:n_s_sub;

% Now determine bandlimits for the various Uz_ (only looking at upper diagonals). ;
% Note that Uz_{nm,:}(:,:,nk) is of size nl-by-nl, with nl=1+n_l-m_abs, where m_abs = m3_(nm);
n_band = 12;
Ub = zeros(n_band,n_m,n_s_max,n_k_val);
for nm=1:n_m; for ns=1:n_s_max; for nk_val = 1:n_k_val;
for nband=1:n_band;
if numel(squeeze(Uz_{nm,ns}(:,:,nk_val)))>1;
Ub(nband,nm,ns,nk_val) = norm(diag(squeeze(Uz_{nm,ns}(:,:,nk_val)),nband-1));
end;%if numel(squeeze(Uz_{nm,ns}(:,:,nk_val)))>1;
if numel(squeeze(Uz_{nm,ns}(:,:,nk_val)))==1;
if (nband-1)==0; Ub(nband,nm,ns,nk_val) = norm(squeeze(Uz_{nm,ns}(:,:,nk_val))); 
else Ub(nband,nm,ns,nk_val)=0; end;
end;%if numel(squeeze(Uz_{nm,ns}(:,:,nk_val)))==1;
end;%for nband=1:n_band;
end;end;end;%for nm=1:n_m; for ns=1:n_s_max; for nk_val = 1:n_k_val;
n_s_sub = 4;
n_k_sub = 6;
k_val_sub_ = round(linspace(1,n_k_val,n_k_sub));
for nk_sub = 1:n_k_sub;
k_sub = k_val_sub_(nk_sub);
for ns=1:n_s_sub;
subplot(n_s_sub,n_k_sub,nk_sub + (ns-1)*n_k_sub);
imagesc(log10(squeeze(Ub(:,:,ns,k_sub))),[-5,0]);
xlabel('nm'); ylabel('1+nband');
title(sprintf(' %% ns %d k_sub %d k %0.2f',ns,k_sub,k_val_(k_sub)));
end;%for ns=1:n_s_sub;
end;%for nk_sub = 1:n_k_sub;

% Now look at bandlimits for the various Uz_ in a different way. ;
% Note that Uz_{nm,:}(:,:,nk) is of size nl-by-nl, with nl=1+n_l-m_abs, where m_abs = m3_(nm);
n_s_sub = 6;
n_m_sub = 10;
nm_val_sub_ = round(linspace(1,n_m,n_m_sub));
for nm_sub = 1:n_m_sub;
nm = nm_val_sub_(nm_sub);
for ns=1:n_s_sub;
subplot(n_s_sub,n_m_sub,nm_sub + (ns-1)*n_m_sub);
imagesc(log10(squeeze(Ub(:,nm,ns,:))),[-5,0]);
xlabel('nk'); ylabel('1+nband');
title(sprintf(' %% ns %d nm %d',ns,nm));
end;%for ns=1:n_s_sub;
end;%for nm_sub = 1:n_m_sub;

% Note that we can use Uz_{1,1}(:,:,n_k_val) to estimate n-bandlimits. ;
% The bandlimit when nm==1 and k_val is large will be an upper bound for the other bandlimits. ;
% We also do not need to worry too much about the bandlimit increasing for higher-order-terms ns>1, ;
% since these higher-order-terms contribute much less to the overall wigner-t operator. ;
imagesc(log10(squeeze(Ub(:,1,1,:))),[-5,0]);
xlabel('k_val'); set(gca,'XTick',1:n_k_val,'XTickLabel',k_val_); xtickangle(90);
ylabel('nband'); set(gca,'YTick',1:n_band,'YTickLabel',[0:n_band-1]);
colorbar;

% Use Uz_{1,1}(:,:,n_k_val) to estimate Bandlimit_L. ;
U_tmp = squeeze(Uz_{1,1}(:,:,n_k_val));
E_0 = norm(U_tmp);
E_ = zeros(1+n_l,1);
for nband=1:1+n_l;
E_(nband) = norm(U_tmp - diag_to_square_0(square_to_diag_0(U_tmp,nband-1),1+n_l))/E_0;
end;%for nband=1:1+n_l;
plot(0:n_l,log10(E_),'.-','MarkerSize',25);
xlabel('nband'); ylabel('log10(E)'); title('Uz{1,1}(:,:,end) relative error per band');
% Now we can justify retaining, say, bands [-5:+5]. ;
disp(norm(U_tmp - diag_to_square_0(square_to_diag_0(U_tmp,5),1+n_l))/norm(U_tmp));
Bandlimit_L = min(find(E_<eps__in)) - 1;

% Now factorize out the k_val dependence from each of the Uz_{nm,ns}(:,:,nk_val) for each nm. ;
% We will construct this factorization for ns<=Termlimit_T and matrix-entries within Bandlimit_L. ;
n_s_Uz = min(6,n_s_max);
UzU_ = cell(n_m,Termlimit_T,n_s_Uz);
UzS_ = cell(n_m,Termlimit_T,n_s_Uz);
UzV_ = cell(n_m,Termlimit_T,n_s_Uz);
for nm=1:n_m;
m_val = m3_(nm); m_abs = abs(m_val); nl = 1+n_l-m_abs;
for nT=1:Termlimit_T;
U_tmp = zeros(length(square_to_diag_0(Uz_{nm,nT}(:,:,1),Bandlimit_L)),n_k_val);
for nk_val=1:n_k_val;
U_tmp(:,nk_val) = square_to_diag_0(Uz_{nm,nT}(:,:,nk_val),Bandlimit_L);
end;%for nk_val=1:n_k_val;
[U_tmp,S_tmp,V_tmp] = svds(U_tmp,n_s_Uz);
for ns_Uz=1:n_s_Uz;
if (ns_Uz<=min(size(S_tmp)));
UzU_{nm,nT,ns_Uz} = diag_to_square_0(U_tmp(:,ns_Uz),nl);
UzS_{nm,nT,ns_Uz} = S_tmp(ns_Uz,ns_Uz);
UzV_{nm,nT,ns_Uz} = V_tmp(:,ns_Uz).*S_tmp(ns_Uz,ns_Uz);
end;%if (ns_Uz<=min(size(S_tmp)));
if (ns_Uz>min(size(S_tmp)));
UzU_{nm,nT,ns_Uz} = zeros(nl,nl);
UzS_{nm,nT,ns_Uz} = 0;
UzV_{nm,nT,ns_Uz} = zeros(n_k_val,1);
end;%if (ns_Uz>min(size(S_tmp)));
end;%for ns_Uz=1:n_s_Uz;
end;%for ns=1:Termlimit_T;
end;%for nm=1:n_m;

% Look at the weight associated with each UzS_. ;
UzS = cell2mat(UzS_);
for nT=1:Termlimit_T;
subplot(1,Termlimit_T,nT); imagesc(log10(squeeze(UzS(:,nT,:))),[-5,0]); colorbar;
title(sprintf(' %% nT %d',nT));
end;%for nT=1:Termlimit_T;
set(gcf,'Position',1+[0,0,1024,256]);

% Now test by reconstructing Uz_ for a particular nm and nk_val. ;
nm = 1; nk_val = round(n_k_val/1);
m_val = m3_(nm); m_abs = abs(m_val); nl = 1+n_l-m_abs;
UX_tmp = zeros(nl,nl);
nT=1;%for nT=1:Termlimit_T; 
for ns_Uz=1:n_s_Uz;
UX_tmp = UX_tmp + UzU_{nm,nT,ns_Uz}*UzV_{nm,nT,ns_Uz}(nk_val);
end;%for ns_Uz=1:n_s_Uz;
%end;%for nT=1:Termlimit_T; 
E = norm(UX_tmp - squeeze(Uz_{nm,nT}(:,:,nk_val)))/norm(squeeze(Uz_{nm,nT}(:,:,nk_val)));
disp(sprintf(' %% nm %d nk_val %d k_val %0.2f log10(E) %0.2f',nm,nk_val,k_val_(nk_val),log10(E)));

% Now test by reconstructing Wz_ for a particular nm and nk_val and ndelta ;
nm = 1; nk_val = round(n_k_val*8/9); ndelta = round(n_delta*3/4); 
kdelta = k_val_(nk_val)*delta_(ndelta);
W_tmp = wignerz_leg(n_l,kdelta,n_sample);
m_val = m3_(nm); m_abs = abs(m_val); nl = 1+n_l-m_abs;
X_tmp = zeros(nl,nl);
for nT=1:Termlimit_T; 
UX_tmp = zeros(nl,nl);
for ns_Uz=1:n_s_Uz;
UX_tmp = UX_tmp + UzU_{nm,nT,ns_Uz}*UzV_{nm,nT,ns_Uz}(nk_val);
end;%for ns_Uz=1:n_s_Uz;
X_tmp = X_tmp + UX_tmp*Vz_{nm,nT}(ndelta);
end;%for nT=1:Termlimit_T; 
E = norm(X_tmp - W_tmp{nm,1})/norm(W_tmp{nm,1});
disp(sprintf(' %% nm %d nk_val %d k_val %0.2f ndelta %d delta %0.2f --> kdelta %0.2f: log10(E) %0.2f',nm,nk_val,k_val_(nk_val),ndelta,delta_(ndelta),kdelta,log10(E)));

