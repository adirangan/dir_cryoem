clear;
verbose=0;
%%%%%%%%;
% Define functional form for integral. ;
%%%%%%%%;
h_ = @(kd) 4*pi*( sin(kd) - (kd).*cos(kd) ) ./ kd.^3 ; % taken from test_F_26.m: calculates <f_j,f_k>, normalized so that <f,f> = 4*pi/3, rather than 4*pi/3*R_max^3 ;
%%%%%%%%;
% Define grids. ;
%%%%%%%%;
eps_nufft = 1e-6;
k_p_r_max = 9.0d0; k_eq_d = (1/32)*k_p_r_max*0.95;
tmp_t = tic;
[n_k_all,n_k_all_csum_,k_p_r_all_,k_p_azimu_b_all_,k_p_polar_a_all_,weight_k_all_,weight_shell_k_,n_k_p_r,k_p_r_,weight_k_p_r_,k_c_0_all_,k_c_1_all_,k_c_2_all_] = sample_sphere_6(verbose,k_p_r_max,k_eq_d,'L') ;
x_p_r_max = 1.00d0; x_eq_d = (1/32)*x_p_r_max*1.00;
[n_x_all,n_x_all_csum_,x_p_r_all_,x_p_azimu_b_all_,x_p_polar_a_all_,weight_x_all_,weight_x_shell_,n_x_p_r,x_p_r_,weight_x_p_r_,x_c_0_all_,x_c_1_all_,x_c_2_all_] = sample_sphere_6(verbose,x_p_r_max,x_eq_d,'L') ;
tmp_t = toc(tmp_t); tmp_g = (n_x_all+n_k_all)/tmp_t/1e6;
disp(sprintf(' %% generating grids... time %0.6fs (%0.6f Mnumps)',tmp_t,tmp_g));
%%%%%%%%;
% Define function a. ;
%%%%%%%%;
delta_a_c_ = [+0.15;-0.25;+0.35];
delta_a_p_r = sqrt(delta_a_c_(1+0)^2 + delta_a_c_(1+1)^2 + delta_a_c_(1+2)^2);
disp(sprintf(' %% 2*pi*k_p_r_max*delta_a_p_r = %0.2f',2*pi*k_p_r_max*delta_a_p_r));
a_k_all_form_ = exp(+i*2*pi*(k_c_0_all_*delta_a_c_(1+0) + k_c_1_all_*delta_a_c_(1+1) + k_c_2_all_*delta_a_c_(1+2)));
disp(sprintf(' %% at this point one should ensure that a_k_all_ on the outer shells (i.e., near k_p_r_max) has decayed to the desired precision.'));
disp(sprintf(' %% Setting l_max_ = 1+ceil(2*pi*k_p_r_). Note that this should be limited by the sampling density at each k_p_r!'));
l_max_ = 1+ceil(2*pi*k_p_r_); n_lm_ = (l_max_+1).^2; n_lm_sum = sum(n_lm_); a_k_Y_quad_ = zeros(n_lm_sum,1);
tmp_t = tic;
[a_k_Y_quad_] = convert_k_p_to_spharm_1(verbose,n_k_all,n_k_all_csum_,k_p_r_all_,k_p_azimu_b_all_,k_p_polar_a_all_,weight_k_all_,weight_shell_k_,n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,a_k_all_form_);
tmp_t = toc(tmp_t); tmp_g = n_lm_sum/tmp_t/1e6;
disp(sprintf(' %% use convert_k_p_to_spharm_1 to form a_k_Y_quad_... time %0.6fs (%0.6f Mnumps)',tmp_t,tmp_g));
disp(sprintf(' %% Again, here we should ensure that a_k_Y_ on the outer shells has decayed to the desired precision.'));
disp(sprintf(' %% Moreover, we should ensure that a_k_Y_(l,m) has decayed for large l,m at each shell.'));
%%%%%%%%
flag_plot=0;
if flag_plot;
imagesc_Y(k_p_r_max,n_k_p_r,k_p_r_,l_max_,real(a_k_Y_quad_),[-1,1],colormap_beach());
end;%if flag_plot;
%%%%%%%%;
a_I_form = h_(2*pi*k_p_r_max*delta_a_p_r)*k_p_r_max^3;
a_I_quad = sum(a_k_all_form_.*weight_k_all_);
disp(sprintf(' %% a_I_form vs a_I_quad: %0.16f',fnorm(a_I_form-a_I_quad)));
%%%%%%%%;
% Define function b. ;
%%%%%%%%;
delta_b_c_ = [-0.15;+0.35;-0.0625];
delta_b_p_r = sqrt(delta_b_c_(1+0)^2 + delta_b_c_(1+1)^2 + delta_b_c_(1+2)^2);
disp(sprintf(' %% 2*pi*k_p_r_max*delta_b_p_r = %0.2f',2*pi*k_p_r_max*delta_b_p_r));
b_k_all_form_ = exp(+i*2*pi*(k_c_0_all_*delta_b_c_(1+0) + k_c_1_all_*delta_b_c_(1+1) + k_c_2_all_*delta_b_c_(1+2)));
b_k_Y_quad_ = zeros(n_lm_sum,1);
tmp_t = tic;
[b_k_Y_quad_] = convert_k_p_to_spharm_1(verbose,n_k_all,n_k_all_csum_,k_p_r_all_,k_p_azimu_b_all_,k_p_polar_a_all_,weight_k_all_,weight_shell_k_,n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,b_k_all_form_);
tmp_t = toc(tmp_t); tmp_g = n_lm_sum/tmp_t/1e6;
%%%%%%%%;
b_I_form = h_(2*pi*k_p_r_max*delta_b_p_r)*k_p_r_max^3;
b_I_quad = sum(b_k_all_form_.*weight_k_all_);
disp(sprintf(' %% b_I_form vs b_I_quad: %0.16f',fnorm(b_I_form-b_I_quad)));
%%%%%%%%;
% Calculate inner product. ;
%%%%%%%%;
delta_d_c_ = delta_a_c_-delta_b_c_;
delta_d_p_r = sqrt(delta_d_c_(1+0)^2 + delta_d_c_(1+1)^2 + delta_d_c_(1+2)^2);
d_I_form = h_(2*pi*k_p_r_max*delta_d_p_r)*k_p_r_max^3;
d_I_quad = sum(conj(b_k_all_form_).*a_k_all_form_.*weight_k_all_);
disp(sprintf(' %% d_I_form vs d_I_quad: %0.16f',fnorm(d_I_form-d_I_quad)));
%%%%%%%%;
% Test single rotation. ;
%%%%%%%%;
%azimu_b = rand*2*pi; polar_a = rand*pi; gamma_z = rand*2*pi;
azimu_b = 15*pi/12; polar_a = 2*pi/6; gamma_z = 11*pi/12;
ew_ = [-gamma_z;-polar_a;-azimu_b]; %<-- vector of euler angles: [azimu_b, polar_a, gamma_z];
ef_ = [-gamma_z;-polar_a;-azimu_b]; %<-- vector of euler angles: [azimu_b, polar_a, gamma_z];
[c_k_Y_wign_] = rotate_spharm_to_spharm_1(0,n_k_p_r,k_p_r_,l_max_,b_k_Y_quad_,+ew_);
[c_k_all_wign_] = convert_spharm_to_k_p_1(verbose,n_k_all,n_k_all_csum_,k_p_r_all_,k_p_azimu_b_all_,k_p_polar_a_all_,weight_k_all_,weight_shell_k_,n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,c_k_Y_wign_);
R_ = euler_to_R(+ef_);
delta_c_c_ = R_*delta_b_c_;
delta_e_c_ = delta_a_c_ - delta_c_c_;
delta_e_p_r = sqrt(delta_e_c_(1+0)^2 + delta_e_c_(1+1)^2 + delta_e_c_(1+2)^2);
e_I_form = h_(2*pi*k_p_r_max*delta_e_p_r)*k_p_r_max^3;
delta_c_p_r = sqrt(delta_c_c_(1+0)^2 + delta_c_c_(1+1)^2 + delta_c_c_(1+2)^2);
disp(sprintf(' %% 2*pi*k_p_r_max*delta_c_p_r = %0.2f',2*pi*k_p_r_max*delta_c_p_r));
c_k_all_form_ = exp(+i*2*pi*(k_c_0_all_*delta_c_c_(1+0) + k_c_1_all_*delta_c_c_(1+1) + k_c_2_all_*delta_c_c_(1+2)));
disp(sprintf(' %% c_k_all_form_ vs c_k_all_wign_: %0.16f',fnorm(c_k_all_form_ - c_k_all_wign_)/fnorm(c_k_all_form_)));
%%%%%%%%;
c_k_Y_quad_ = zeros(n_lm_sum,1);
tmp_t = tic;
[c_k_Y_quad_] = convert_k_p_to_spharm_1(verbose,n_k_all,n_k_all_csum_,k_p_r_all_,k_p_azimu_b_all_,k_p_polar_a_all_,weight_k_all_,weight_shell_k_,n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,c_k_all_form_);
tmp_t = toc(tmp_t); tmp_g = n_lm_sum/tmp_t/1e6;
%%%%%%%%;
disp(sprintf(' %% <a,c> = quad: %0.6f vs wign: %0.6f vs form: %0.6f',sum(conj(c_k_all_form_).*a_k_all_form_.*weight_k_all_),sum(conj(c_k_all_wign_).*a_k_all_form_.*weight_k_all_),e_I_form));
%%%%%%%%;
% Test multiple rotations across a single polar_a for uniform azimu_b and gamma_z. ;
%%%%%%%%;
polar_a = -1*pi/3;
[X_quad_,n_op,n_mult] = register_spharm_to_spharm_single_beta_2(verbose,n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,a_k_Y_quad_,b_k_Y_quad_,polar_a,0,[],0,[],[],[],[],[]);
l_max_max = l_max_(1+n_k_p_r-1);
n_m_max = 2*l_max_max+1;
X_form_ = zeros(n_m_max,n_m_max);
for nazimu_b=0:n_m_max-1;
for ngamma_z=0:n_m_max-1;
azimu_b = 2*pi*nazimu_b/n_m_max;
gamma_z = 2*pi*ngamma_z/n_m_max;
ef_ = [-gamma_z;-polar_a;-azimu_b]; %<-- vector of euler angles: [azimu_b, polar_a, gamma_z];
R_ = euler_to_R(+ef_);
delta_c_c_ = R_*delta_b_c_;
delta_e_c_ = delta_a_c_ - delta_c_c_;
delta_e_p_r = sqrt(delta_e_c_(1+0)^2 + delta_e_c_(1+1)^2 + delta_e_c_(1+2)^2);
e_I_form = h_(2*pi*k_p_r_max*delta_e_p_r)*k_p_r_max^3;
X_form_(1+nazimu_b,1+ngamma_z) = e_I_form;
end;%for ngamma_z=0:n_m_max-1;
end;%for nazimu_b=0:n_m_max-1;
flag_plot=1;
if flag_plot;
colormap(colormap_beach());
subplot(2,2,1); imagesc(real(X_form_)); title('real X form'); %colorbar;
subplot(2,2,2); imagesc(imag(X_form_)); title('imag X form'); %colorbar;
subplot(2,2,3); imagesc(real(X_quad_)); title('real X quad'); %colorbar;
subplot(2,2,4); imagesc(imag(X_quad_)); title('imag X quad'); %colorbar;
end;%if flag_plot;
disp(sprintf(' %% X_form_ vs X_quad_: %0.16f',fnorm(X_form_-X_quad_)/fnorm(X_form_)));
%%%%%%%%;
% Test multiple rotations across a single polar_a for nonuniform azimu_b and gamma_z. ;
%%%%%%%%;
polar_a = -1*pi/3;
n_azimu_b = 173; azimu_b_ = sort(rand(n_azimu_b,1)*2*pi);
n_gamma_z = 137; gamma_z_ = sort(rand(n_gamma_z,1)*2*pi);
[X_quad_,n_op,n_mult] = register_spharm_to_spharm_single_beta_2(verbose,n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,a_k_Y_quad_,b_k_Y_quad_,polar_a,n_azimu_b,azimu_b_,n_gamma_z,gamma_z_,[],[],[],[]);
X_form_ = zeros(n_azimu_b,n_gamma_z);
for nazimu_b=0:n_azimu_b-1;
for ngamma_z=0:n_gamma_z-1;
azimu_b = azimu_b_(1+nazimu_b);
gamma_z = gamma_z_(1+ngamma_z);
ef_ = [-gamma_z;-polar_a;-azimu_b]; %<-- vector of euler angles: [azimu_b, polar_a, gamma_z];
R_ = euler_to_R(+ef_);
delta_c_c_ = R_*delta_b_c_;
delta_e_c_ = delta_a_c_ - delta_c_c_;
delta_e_p_r = sqrt(delta_e_c_(1+0)^2 + delta_e_c_(1+1)^2 + delta_e_c_(1+2)^2);
e_I_form = h_(2*pi*k_p_r_max*delta_e_p_r)*k_p_r_max^3;
X_form_(1+nazimu_b,1+ngamma_z) = e_I_form;
end;%for ngamma_z=0:n_gamma_z-1;
end;%for nazimu_b=0:n_azimu_b-1;
flag_plot=1;
if flag_plot;
colormap(colormap_beach());
subplot(2,2,1); imagesc(real(X_form_)); title('real X form'); %colorbar;
subplot(2,2,2); imagesc(imag(X_form_)); title('imag X form'); %colorbar;
subplot(2,2,3); imagesc(real(X_quad_)); title('real X quad'); %colorbar;
subplot(2,2,4); imagesc(imag(X_quad_)); title('imag X quad'); %colorbar;
end;%if flag_plot;
disp(sprintf(' %% X_form_ vs X_quad_: %0.16f',fnorm(X_form_-X_quad_)/fnorm(X_form_)));
%%%%%%%%;
% Now test displacements ;
%%%%%%%%;
delta_upd_c_ = 0.2*(2*rand(3,1)-1);
delta_c_c_ = delta_b_c_ - delta_upd_c_;
delta_e_c_ = delta_a_c_ - delta_c_c_;
delta_e_p_r = sqrt(delta_e_c_(1+0)^2 + delta_e_c_(1+1)^2 + delta_e_c_(1+2)^2);
e_I_form = h_(2*pi*k_p_r_max*delta_e_p_r)*k_p_r_max^3;
X_form = e_I_form;
n_delta = 1; delta__ = transpose(delta_upd_c_);
X_quad = register_spharm_to_spharm_delta_slow_1(verbose,n_k_all,n_k_all_csum_,k_p_r_all_,k_p_azimu_b_all_,k_p_polar_a_all_,weight_k_all_,weight_shell_k_,n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,a_k_Y_quad_,b_k_Y_quad_,n_delta,delta__);
disp(sprintf(' %% X_form vs X_quad: %0.16f',fnorm(X_form-X_quad)/fnorm(X_form)));


