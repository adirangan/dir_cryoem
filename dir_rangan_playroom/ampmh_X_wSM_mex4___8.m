%%%%%%%%;
% upgrading ampmh_X_wSM_mex___8.m to use an example more similar to trpv1 data. ;
% runs mex_ampmh_X_wSM___14.m. ;
%%%%%%%%;
function ...
[ ...
 parameter ...
,X_wSM___ ...
,delta_x_wSM___ ...
,delta_y_wSM___ ...
,gamma_z_wSM___ ...
,I_value_wSM___ ...
,mex_X_wSM___ ...
,mex_delta_x_wSM___ ...
,mex_delta_y_wSM___ ...
,mex_gamma_z_wSM___ ...
,mex_I_value_wSM___ ...
] = ...
ampmh_X_wSM_mex4___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_ ...
,n_M ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
);
%%%%%%%%;
% Uses the templates provided in CTF_UX_S_k_q_wnS__. ;
% Calculates correlations between principal-templates and principal-images across translations. ;
% Generally speaking, the output X_wSM___(1+nw,1+nS,1+nM) calculates the correlation between: ;
% Rz(+gamma_z) * S_k_p__(:,1+nS) = S_k_p__(Rz(-gamma_z)*k_p_ , 1+nS), ;
% and ;
% exp(-2*pi*i*dot(k_,delta_)) .* M_k_p__(:,1+nM), ;
% where gamma_z = 2*pi*nw/n_w, ;
% and delta_ = [ delta_x ; delta_y ], ;
% where delta_? = delta_?_wSM___(1+nw,1+nS,1+nM). ;
% Put more succinctly: ;
% X_wSM___(1+nw,1+nS,1+nM) = dot( rotate(S,+gamma_z) , transf(M,+delta_) );
%                          = sum( conj(rotate(S,+gamma_z)) .* transf(M,+delta_) .* weight_2d_ );
% Note that we project X_wSM___ onto its real component. ;
%%%%%%%%
% If requested, the I_value is calculated as follows: ;
% I_value = <M,S> / <M,M> ;
% X = -<IM-S,IM-S> ;
%   = -I*I*<M,M> + 2*I*<M,S> - <S,S> ;
%   = -<M,S><M,S>/<M,M> + 2*<M,S><M,S>/<M,M> - <S,S> ;
%   = <M,S><M,S>/<M,M> - <S,S> ;
%   = <S,S>*(<M,S><M,S>/<M,M>/<S,S> - 1) ;
%   = <S,S>*(correlation^2 - 1) ;
%%%%%%%%;
% Batches images and templates. ;
% Batch sizes are given by: ;
% parameter.n_M_per_Mbatch and parameter.n_S_per_Sbatch. ;
% Default values are 24 and 24. ;
%%%%%%%%;
% Note that the formulae above allow for negative intensities (i.e., I_value can be < 0). ;
% Consequently, image-template pairs exhibiting a negative correlation can actually be quite likely matches, ;
% since the corresponding (negative) intensity produces a large log-likelihood. ;
% Therefore, these formulae should only be used as long as this 'feature' is acceptable. ;
% In this particular function we threshold I_value to be nonnegative. ;
%%%%%%%%;
% extra fields in the 'parameter' structure can be passed in: ;
%%%%%%%%;
% The user can limit the number of principal-modes by setting pm_n_UX_rank_use>0. ;
% by default, the principal-modes used are those with the largest singular-values (i.e., principal-modes 0:pm_n_UX_rank_use-1). ;
%%%%%%%%;
% The user can limit the number of svd-modes by setting either svd_eps_use>0 or n_svd_l_use>0. ;
% by default, the svd-modes used are those with the largest singular-values (i.e., largest FTK.svd_s_). ;
%%%%%%%%;
% The user can limit the number of delta_v values by setting n_delta_v_use>0. ;
% by default, the delta_x and delta_y used are generated by ampmh_FTK_subselect_1.m (guaranteed to include the zero-point). ;
%%%%%%%%;
% The user can limit the output to maximize over gamma_z as well as delta_v by setting flag_optimize_over_gamma_z. ;
% In this case the output arrays are of the form X_SM__, delta_x_SM__, delta_y_SM__, etc. ;
%%%%%%%%;

if nargin<1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
verbose=1;
platform = 'rusty';%platform = 'access1';
if (exist('platform.type','file')); fp=fopen('platform.type'); platform = fscanf(fp,'%s'); fclose(fp); end;
if (strcmp(platform,'access1')); setup_access1; string_root = 'data'; end;
if (strcmp(platform,'eval1')); setup_eval1; string_root = 'home'; end;
if (strcmp(platform,'OptiPlex')); setup_OptiPlex; string_root = 'home'; end;
if (strcmp(platform,'rusty')); setup_rusty; string_root = 'mnt/home'; end;
%%%%%%%%;
flag_recalc = 0;
flag_replot = 0;
flag_center = 0;
tolerance_master = 1e-2;
nf=0;
%%%%%%%%;
dir_pm = sprintf('/%s/rangan/dir_cryoem/dir_trpv1c/dir_pm',string_root);
if (~exist(sprintf('%s_mat',dir_pm),'dir')); disp(sprintf(' %% mkdir %s_mat',dir_pm)); mkdir(sprintf('%s_mat',dir_pm)); end;
if (~exist(sprintf('%s_jpg',dir_pm),'dir')); disp(sprintf(' %% mkdir %s_jpg',dir_pm)); mkdir(sprintf('%s_jpg',dir_pm)); end;
dir_relion = sprintf('/%s/rangan/dir_cryoem/dir_trpv1c/dir_relion',string_root);
if (~exist(sprintf('%s_mat',dir_relion),'dir')); disp(sprintf(' %% mkdir %s_mat',dir_relion)); mkdir(sprintf('%s_mat',dir_relion)); end;
if (~exist(sprintf('%s_jpg',dir_relion),'dir')); disp(sprintf(' %% mkdir %s_jpg',dir_relion)); mkdir(sprintf('%s_jpg',dir_relion)); end;
string_rusty_root = 'mnt/home';
dir_data_star = sprintf('/%s/rangan/dir_cryoem/dir_trpv1',string_root);
Pixel_Spacing = 1.2156; %<-- in angstroms, from https://www.ebi.ac.uk/pdbe/emdb/empiar/entry/10005/ ;
fname_nopath_volume = 'emd_5778.mrc';
fname_nopath_star = 'tv1_relion_data.star';
fname_nopath_volume_ = ...
{ ...
 'emd_5778.map'...
};
n_volume = numel(fname_nopath_volume_);
flag_het=0; if (n_volume> 1); flag_het = 1; end;
%%%%%%%%;
fname_mat = sprintf('%s_mat/a_x_u_pack_.mat',dir_pm);
load(fname_mat);
fname_mat = sprintf('%s_mat/a_k_p_quad_.mat',dir_pm);
load(fname_mat);
fname_mat = sprintf('%s_mat/a_k_Y_quad_.mat',dir_pm);
load(fname_mat);
fname_mat = sprintf('%s_mat/S_k_p__.mat',dir_pm);
load(fname_mat);
%%%%;
S_k_q__ = zeros(n_w_sum,n_S);
for nS=0:n_S-1;
S_k_q__(:,1+nS) = interp_p_to_q(n_k_p_r,n_w_,n_w_sum,S_k_p__(:,1+nS));
end;%for nS=0:n_S-1;
%%%%;
fname_mat = sprintf('%s_mat/M_k_p__.mat',dir_pm);
load(fname_mat);
M_k_q__ = zeros(n_w_sum,n_M);
for nM=0:n_M-1;
M_k_q__(:,1+nM) = interp_p_to_q(n_k_p_r,n_w_,n_w_sum,M_k_p__(:,1+nM));
end;%for nM=0:n_M-1;
%%%%;
fname_mat = sprintf('%s_mat/CTF_k_p__.mat',dir_pm);
load(fname_mat);
fname_mat = sprintf('%s_mat/a_CTF_avg_UX_Y_reco__.mat',dir_pm);
tmp_ = load(fname_mat);
euler_polar_a_true_ = tmp_.euler_polar_a__(:,end);
euler_azimu_b_true_ = tmp_.euler_azimu_b__(:,end);
euler_gamma_z_true_ = tmp_.euler_gamma_z__(:,end);
image_delta_x_true_ = tmp_.image_delta_x_acc__(:,end) + tmp_.image_delta_x_upd__(:,end);
image_delta_y_true_ = tmp_.image_delta_y_acc__(:,end) + tmp_.image_delta_y_upd__(:,end);
corr_a_CTF_avg_UX_Y_true = tmp_.corr_a_CTF_avg_UX_Y_(end);
a_k_Y_true_ = a_k_Y_quad_;
clear tmp_;
%%%%;
parameter = struct('type','parameter');
parameter.n_iteration = 8;
parameter.delta_r_max = 0.03;
parameter.n_delta_v_requested = 24;
parameter.delta_r_upb = 0.25;
if (numel(unique(CTF_index_))>=n_M/8);
disp(sprintf(' %% Warning, setting flag_CTF_index_unused==1'));
parameter.flag_CTF_index_unused = 1;
end;%if (numel(unique(CTF_index_))>=n_M/8);
%%%%;
if (verbose); disp(sprintf(' %% [entering pm_align_M_k_p_to_a_k_Y_0]')); end;
if isempty(parameter);
parameter = struct('type','parameter');
end;%if isempty(parameter);
%%%%%%%%;
if (~isfield(parameter,'tolerance_master')); parameter.tolerance_master = 1e-2; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'rseed')); parameter.rseed = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'n_iteration')); parameter.n_iteration = 1; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'delta_r_max')); parameter.delta_r_max = 0.1; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'delta_r_upb')); parameter.delta_r_upb = 2*delta_r_max; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'n_delta_v_requested')); parameter.n_delta_v_requested = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'flag_MS_vs_SM')); parameter.flag_MS_vs_SM = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'template_viewing_k_eq_d')); parameter.template_viewing_k_eq_d = 1.0/max(1e-12,k_p_r_max); end; %<-- parameter_bookmark. ;
%%%%%%%%;
tolerance_master = parameter.tolerance_master;
rseed = parameter.rseed;
n_iteration = parameter.n_iteration;
delta_r_max = parameter.delta_r_max;
delta_r_upb = parameter.delta_r_upb;
n_delta_v_requested = parameter.n_delta_v_requested;
flag_MS_vs_SM = parameter.flag_MS_vs_SM;
svd_eps = tolerance_master;
%%%%%%%%;
verbose=2;
%%%%%%%%;
n_w_max = max(n_w_);
n_w_sum = sum(n_w_);
n_w_csum_ = cumsum([0;n_w_]);
l_max_max = max(l_max_);
n_lm_ = (l_max_+1).^2;
n_lm_max = max(n_lm_);
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
%%%%%%%%;
CTF_k_p_r__ = zeros(n_k_p_r,n_CTF);
for nctf=0:n_CTF-1;
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_w_csum_(1+nk_p_r) + (0:n_w_(1+nk_p_r)-1);
CTF_k_p_r__(1+nk_p_r,1+nctf) = mean(CTF_k_p__(1+tmp_index_,1+nctf));
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nctf=0:n_CTF-1;
CTF_avg_k_p_ = mean(CTF_k_p__,2);
%imagesc_p(n_k_p_r,k_p_r_,n_w_,sum(n_w_),real(CTF_avg_k_p_(:)),[-1,+1],colormap_beach());
CTF_avg_k_p_r_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_w_csum_(1+nk_p_r) + (0:n_w_(1+nk_p_r)-1);
CTF_avg_k_p_r_(1+nk_p_r) = mean(CTF_avg_k_p_(1+tmp_index_));
end;%for nk_p_r=0:n_k_p_r-1;
CTF_k_p_r_xcor__ = CTF_k_p_r__(:,1+CTF_index_(1+(0:n_M-1))) * transpose(CTF_k_p_r__(:,1+CTF_index_(1+(0:n_M-1)))) / n_M;
%%%%%%%%;
SCTF_ = svd(CTF_k_p_r__(:,1+CTF_index_(1:n_M)));
n_CTF_rank = max(find(SCTF_/max(SCTF_)>tolerance_master));
[UCTF_kc__,SCTF_c__,VCTF_Mc__] = svds(CTF_k_p_r__(:,1+CTF_index_(1:n_M)),n_CTF_rank);
VSCTF_Mc__ = VCTF_Mc__*SCTF_c__;
%%%%%%%%;
% First calculate idealized principal-modes. ;
%%%%%%%%;
n_UX_rank = n_k_p_r-1; %<-- just to check dimensions. ;
a_k_Y_true__ = zeros(n_lm_max,n_k_p_r);
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
a_k_Y_true__(1:n_lm_(1+nk_p_r),1+nk_p_r) = a_k_Y_true_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
tmp_t = tic();
[ ...
 X__ ...
,X_weight_r_ ...
] = ...
principled_marching_cost_matrix_3( ...
 n_k_p_r ...
,weight_2d_k_p_r_ ...
,l_max_max ...
,a_k_Y_true__ ...
,CTF_k_p_r_xcor__ ...
);
[UX__,SX__,VX__] = svds(X__,n_UX_rank); SX_ = diag(SX__);
pm_n_UX_rank_0in = max(find(SX_/max(SX_)> tolerance_master));
if (verbose); disp(sprintf(' %% pm_n_UX_rank_0in %d/%d',pm_n_UX_rank_0in,numel(SX_))); end;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UX__: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'X__',tmp_t);
%%%%%%%%;
FTK = [];
pm_n_UX_rank = max(18,min(n_UX_rank,pm_n_UX_rank_0in));
M_k_q__ = [];
svd_VUXM_lwnM____ = [];
UX_M_l2_dM__ = [];
VSCTF_Mc__ = [];
%%%%%%%%;
pm_n_k_p_r = pm_n_UX_rank;
pm_k_p_r_ = ones(pm_n_k_p_r,1);
pm_k_p_r_max = 1;
pm_n_w_ = n_w_max*ones(pm_n_k_p_r,1);
pm_n_w_max = n_w_max;
pm_n_w_sum = sum(pm_n_w_);
pm_n_w_csum_ = cumsum([0;pm_n_w_]);
pm_l_max_ = l_max_max*ones(pm_n_k_p_r,1);
pm_n_lm_ = (1+pm_l_max_).^2; pm_n_lm_sum = sum(pm_n_lm_); pm_n_lm_max = max(pm_n_lm_);
pm_weight_k_p_r_ = ones(pm_n_k_p_r,1);
pm_weight_2d_k_p_r_ = ones(pm_n_k_p_r,1);
%%%%%%%%;
if isempty(FTK);
tmp_t = tic();
FTK = ampmh_FTK_1(n_k_p_r,k_p_r_,k_p_r_max,delta_r_max,svd_eps,n_delta_v_requested);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% FTK: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_FTK_1',tmp_t);
end;%if isempty(FTK);
assert(FTK.svd_d_max>=delta_r_max);
assert(FTK.n_delta_v>=n_delta_v_requested);
%%%%%%%%;
% Form VSCTF_Mc__. ;
%%%%%%%%;
if isempty(VSCTF_Mc__);
if (n_CTF_rank<=0 | isempty(CTF_index_));
n_CTF_rank = 1;
USCTF_kc__ = ones(n_k_p_r,1); SCTF_C__ = 1; VCTF_Mc__ = ones(n_M,1);
else;
[UCTF_kc__,SCTF_c__,VCTF_Mc__] = svds(CTF_k_p_r__(:,1+CTF_index_(1:n_M)),n_CTF_rank);
end;%if (n_CTF_rank<=0 | isempty(CTF_index_));
VSCTF_Mc__ = VCTF_Mc__*SCTF_c__;
end;%if isempty(VSCTF_Mc__);
%%%%%%%%;
% Form a_UCTF_UX_Y_true_ync__. ;
%%%%%%%%;
a_UCTF_UX_Y_true_ync__ = zeros(pm_n_lm_sum,n_CTF_rank);
for nCTF_rank=0:n_CTF_rank-1;
a_UCTF_UX_Y_true_yn__ = zeros(pm_n_lm_max,pm_n_UX_rank);
for pm_nUX_rank=0:pm_n_UX_rank-1;
a_UCTF_UX_Y_true_y_ = zeros(pm_n_lm_max,1);
for nk_p_r=0:n_k_p_r-1;
a_UCTF_UX_Y_true_y_ = a_UCTF_UX_Y_true_y_ + a_k_Y_true__(:,1+nk_p_r) * UX__(1+nk_p_r,1+pm_nUX_rank) * UCTF_kc__(1+nk_p_r,1+nCTF_rank);
end;%for nk_p_r=0:n_k_p_r-1;
a_UCTF_UX_Y_true_yn__(:,1+pm_nUX_rank) = a_UCTF_UX_Y_true_y_;
end;%for pm_nUX_rank=0:pm_n_UX_rank-1;
a_UCTF_UX_Y_true_ync__(:,1+nCTF_rank) = a_UCTF_UX_Y_true_yn__(:);
end;%for nCTF_rank=0:n_CTF_rank-1;
%%%%%%%%;
% Now normalize a_UCTF_UX_Y_true_ync__. ;
% This step is necessary to prevent the intensity from diverging over successive iterations. ;
%%%%%%%%;
a_UCTF_UX_Y_true_ync__ = spharm__normalize_1(pm_n_k_p_r,pm_k_p_r_,pm_weight_k_p_r_,pm_l_max_,a_UCTF_UX_Y_true_ync__);
%%%%%%%%;
% Use a_UCTF_UX_Y_true_ync__ as well VSCTF_Mc__ to approximate the image-averaged a_CTF_avg_UX_Y_. ;
% This is not actually used in the calculation, but can be useful for postprocessing. ;
%%%%%%%%;
a_CTF_avg_UX_Y_true_ = spharm_normalize_1(pm_n_k_p_r,pm_k_p_r_,pm_weight_k_p_r_,pm_l_max_,mean(a_UCTF_UX_Y_true_ync__*transpose(VSCTF_Mc__),2));
%%%%%%%%;
rng(rseed);
euler_polar_a_ = 1*pi*rand(n_M,1);
euler_azimu_b_ = 2*pi*rand(n_M,1);
euler_gamma_z_ = 2*pi*rand(n_M,1);
image_delta_x_acc_ = zeros(n_M,1); %<-- accumulated displacement (i.e., current image center). ;
image_delta_y_acc_ = zeros(n_M,1); %<-- accumulated displacement (i.e., current image center). ;
image_delta_x_upd_ = zeros(n_M,1); %<-- update to displacement (i.e., current image shift). ;
image_delta_y_upd_ = zeros(n_M,1); %<-- update to displacement (i.e., current image shift). ;
image_delta_x_bit_ = zeros(n_M,1); %<-- increment to displacement update (calculated each iteration). ;
image_delta_y_bit_ = zeros(n_M,1); %<-- increment to displacement update (calculated each iteration). ;
flag_image_delta_upd_ = ones(n_M,1); %<-- flag identifying principal-images that need to be recalculated. ;
image_I_value_ = ones(n_M,1);
M_k_q__ = zeros(n_w_sum,n_M);
svd_VUXM_lwnM____ = zeros(FTK.n_svd_l,n_w_max,pm_n_UX_rank,n_M);
UX_M_l2_dM__ = zeros(FTK.n_delta_v,n_M);
%%%%%%%%;
tmp_M_index_ = efind(flag_image_delta_upd_); tmp_n_M = numel(tmp_M_index_);
if (verbose>0); disp(sprintf(' %% updating M_k_q__ for tmp_n_M %d/%d images',tmp_n_M,n_M)); end;
tmp_t = tic();
M_k_q__(:,1+tmp_M_index_) = zeros(n_w_sum,tmp_n_M);
for tmp_nM=0:tmp_n_M-1;
nM = tmp_M_index_(1+tmp_nM);
M_k_p_ = ...
transf_p_to_p( ...
 n_k_p_r ...
,k_p_r_ ...
,n_w_ ...
,n_w_sum ...
,M_k_p__(:,1+nM) ...
,+image_delta_x_acc_(1+nM) ...
,+image_delta_y_acc_(1+nM) ...
);
M_k_q__(:,1+nM) = ...
interp_p_to_q( ...
 n_k_p_r ...
,n_w_ ...
,n_w_sum ...
,M_k_p_ ...
);
end;%for tmp_nM=0:tmp_n_M-1;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% M_k_q__: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'M_k_q__',tmp_t);
%%%%%%%%;
% Now form svd_VUXM_lwnM____ using these translated images. ;
%%%%%%%%;
tmp_t = tic();
svd_VUXM_lwnM____(:,:,:,1+tmp_M_index_) = tpmh_VUXM_lwnM____3(FTK,n_k_p_r,n_w_,tmp_n_M,M_k_q__(:,1+tmp_M_index_),pm_n_UX_rank,UX__,X_weight_r_);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_VUXM_lwnM____: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'svd_VUXM_lwnM____',tmp_t);
%%%%%%%%;
% Now calculate norms of the translated images. ;
%%%%%%%%;
tmp_t = tic();
UX_M_l2_dM__(:,1+tmp_M_index_) = ampmh_UX_M_l2_dM__1(FTK,n_w_,tmp_n_M,pm_n_UX_rank,svd_VUXM_lwnM____(:,:,:,1+tmp_M_index_));
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UX_M_l2_dM__: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_UX_M_l2_dM__1',tmp_t);
%%%%%%%%;
% Now, form principal-images (using the displacement-updates). ;
% If we had not included the accumulated-displacements +image_delta_x_acc_ and +image_delta_y_acc_ above, ;
% we would add them to the displacement-updates below (also with a positive-sign). ;
%%%%%%%%;
tmp_t = tic();
[UX_M_k_q_wnM___,UX_M_k_p_wnM___] = ampmh_UX_M_k_p_wnM___0(FTK,n_w_,pm_n_UX_rank,n_M,svd_VUXM_lwnM____,+image_delta_x_upd_,+image_delta_y_upd_);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UX_M_k_q_wnM___: %0.6fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_UX_M_k_p_wnM___0',tmp_t);
%%%%%%%%;
tmp_t = tic();
[ ...
 CTF_UX_S_k_p_wnS__ ...
,~ ...
,n_S ...
,~ ...
,~ ...
] = ...
pm_template_2( ...
 verbose ...
,l_max_max ...
,pm_n_k_p_r ...
,reshape(a_CTF_avg_UX_Y_true_,[pm_n_lm_max,pm_n_k_p_r]) ...
,viewing_k_eq_d/k_p_r_max ...
,template_k_eq_d ...
,n_w_max ...
);
CTF_UX_S_k_p_wnS__ = reshape(CTF_UX_S_k_p_wnS__,[n_w_max*pm_n_k_p_r,n_S]);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% CTF_UX_S_k_p_wnS__: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'pm_template_2',tmp_t);
%%%%%%%%;
tmp_t = tic();
CTF_UX_S_l2_ = zeros(n_S,1);
for nS=0:n_S-1;
CTF_UX_S_l2_(1+nS) = ...
innerproduct_p_quad( ...
 pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_weight_2d_k_p_r_/(2*pi) ...
,pm_n_w_ ...
,pm_n_w_sum ...
,CTF_UX_S_k_p_wnS__(:,1+nS) ...
,CTF_UX_S_k_p_wnS__(:,1+nS) ...
);
end;%for nS=0:n_S-1;
CTF_UX_S_k_q_wnS__ = zeros(pm_n_w_sum,n_S);
for nS=0:n_S-1;
CTF_UX_S_k_q_wnS__(:,1+nS) = ...
interp_p_to_q( ...
 pm_n_k_p_r ...
,pm_n_w_ ...
,pm_n_w_sum ...
,CTF_UX_S_k_p_wnS__(:,1+nS) ...
); 
end;%for nS=0:n_S-1; 
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% CTF_UX_S_k_q_wnS__: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'CTF_UX_S_k_q_wnS__',tmp_t);
%%%%%%%%;

% mex CFLAGS='$CFLAGS -fPIC -w -O2 -D_AVX -mavx -D_CBLAS -D_FMA -mfma' mex_ampmh_X_wSM___14.c -lm -lfftw3 -lfftw3f -lgslcblas -output /data/rangan/dir_cryoem/dir_rangan_playroom/mex_ampmh_X_wSM___14 ;
pm_n_UX_rank_use = pm_n_UX_rank;
n_M_use = n_M;
n_S_use = n_S;
%%%%;
n_M_use = n_M;
n_S_use = n_S;
pm_n_UX_rank_use = pm_n_UX_rank;
CTF_UX_S_k_q_wnS___ = reshape(CTF_UX_S_k_q_wnS__,[n_w_max,pm_n_UX_rank,n_S]);
CTF_UX_S_k_q_wnS_use__ = reshape(CTF_UX_S_k_q_wnS___(:,1:pm_n_UX_rank_use,1:n_S_use),[n_w_max*pm_n_UX_rank_use,n_S_use]);
CTF_UX_S_l2_use_ = CTF_UX_S_l2_(1:n_S_use);
svd_VUXM_lwnM_use____ = svd_VUXM_lwnM____(:,:,1:pm_n_UX_rank_use,1:n_M_use);
UX_M_l2_dM_use__ = UX_M_l2_dM__(:,1:n_M_use);
tmp_t = tic();
[ ...
 parameter ...
,ori_X_wSM___ ...
,ori_delta_x_wSM___ ...
,ori_delta_y_wSM___ ...
,ori_gamma_z_wSM___ ...
,ori_I_value_wSM___ ...
,mex_X_wSM___ ...
,mex_delta_x_wSM___ ...
,mex_delta_y_wSM___ ...
,mex_gamma_z_wSM___ ...
,mex_I_value_wSM___ ...
] = ...
ampmh_X_wSM_mex4___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,pm_n_UX_rank_use ...
,n_S_use ...
,CTF_UX_S_k_q_wnS_use__ ...
,CTF_UX_S_l2_use_ ...
,n_M_use ...
,svd_VUXM_lwnM_use____ ...
,UX_M_l2_dM_use__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% ampmh_X_wSM_mex4___8: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM_mex4___8',tmp_t);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
disp('returning'); return;
end;%if nargin<1;

verbose = 1;
if (verbose>0); disp(sprintf(' %% [entering ampmh_X_wSM_mex4___8]')); end;

if isempty(parameter);
parameter = struct('type','parameter');
end;%if isempty(parameter);
%%%%%%%%;
if (~isfield(parameter,'n_M_per_Mbatch')); parameter.n_M_per_Mbatch = 24; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'n_S_per_Sbatch')); parameter.n_S_per_Sbatch = 24; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'flag_optimize_over_gamma_z')); parameter.flag_optimize_over_gamma_z = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'flag_compute_I_value')); parameter.flag_compute_I_value = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'flag_compress_S')); parameter.flag_compress_S = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'tolerance_master')); parameter.tolerance_master = 1e-2; end; %<-- parameter_bookmark. ;
%%%%%%%%;
n_M_per_Mbatch = parameter.n_M_per_Mbatch;
n_S_per_Sbatch = parameter.n_S_per_Sbatch;
flag_optimize_over_gamma_z = parameter.flag_optimize_over_gamma_z;
flag_compute_I_value = parameter.flag_compute_I_value;
flag_compress_S = parameter.flag_compress_S;
tolerance_master = parameter.tolerance_master;

elrt_sum_mex_ampmh_X_wSM___14=0;
elrt_sum_CTF_UX_S_k_q_nSw___=0;
elrt_sum_svd_VUXM_nMwl____=0;
elrt_sum_svd_SVUXM_SMwl____=0;
elrt_sum_svd_SVUXM_lwSM____=0;
elrt_sum_svd_SVUXM_lwsM____=0;
elrt_sum_svd_USESVUXM_dwSM____=0;
elrt_sum_l2_dSM___=0;
elrt_sum_X_sub_dwSM____=0;
elrt_sum_I_value_use_dwSM____=0;
elrt_sum_X_wSM___=0;

tmp_t = tic(); nop=0;
[ ...
 parameter ...
,FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_use_ ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM_use__ ...
] = ...
ampmh_X_wSM_reduce_1( ...
 parameter ...
,FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_ ...
,n_M ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
);
nop = nop + numel(svd_VUXM_lwnM____);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% reduce: %0.6f',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM___8: reduce',tmp_t,1,nop);

%%%%;
tmp_t = tic();
[ ...
 mex_X_wSM___ ...
,mex_delta_x_wSM___...
,mex_delta_y_wSM___...
,mex_gamma_z_wSM___...
,mex_I_value_wSM___...
] = ...
mex_ampmh_X_wSM___14( ...
 n_M_per_Mbatch ...
,n_S_per_Sbatch ...
,flag_optimize_over_gamma_z ...
,flag_compute_I_value ...
,tolerance_master ...
,FTK.n_svd_l ...
,FTK.n_delta_v ...
,FTK.svd_U_d_expiw_s__ ...
,FTK.delta_x_ ...
,FTK.delta_y_ ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_ ...
,n_M ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% mex_ampmh_X_wSM___14: %0.6f',tmp_t)); end; elrt_sum_mex_ampmh_X_wSM___14 = elrt_sum_mex_ampmh_X_wSM___14 + tmp_t;
%%%%;

I_value_wSM___ = [];
if (flag_optimize_over_gamma_z == 0);
X_wSM___ = zeros(n_w_max,n_S,n_M);
delta_x_wSM___ = zeros(n_w_max,n_S,n_M);
delta_y_wSM___ = zeros(n_w_max,n_S,n_M);
gamma_z_wSM___ = zeros(n_w_max,n_S,n_M);
I_value_wSM___ = [];
if (flag_compute_I_value); I_value_wSM___ = zeros(n_w_max,n_S,n_M); end;
end;%if (flag_optimize_over_gamma_z == 0);
if (flag_optimize_over_gamma_z == 1);
X_SM__ = zeros(n_S,n_M);
delta_x_SM__ = zeros(n_S,n_M);
delta_y_SM__ = zeros(n_S,n_M);
gamma_z_SM__ = zeros(n_S,n_M);
I_value_SM__ = [];
if (flag_compute_I_value); I_value_SM__ = zeros(n_S,n_M); end;
end;%if (flag_optimize_over_gamma_z == 1);

if (flag_compress_S==0);
tmp_t = tic();
CTF_UX_S_k_q_wnS___ = reshape(CTF_UX_S_k_q_wnS__(:,1:n_S),[n_w_max,pm_n_UX_rank,n_S]); %<-- used later. ;
CTF_UX_S_k_q_nSw___ = permute(CTF_UX_S_k_q_wnS___,[2,3,1]);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% CTF_UX_S_k_q_nSw___: %0.6f',tmp_t)); end; elrt_sum_CTF_UX_S_k_q_nSw___ = elrt_sum_CTF_UX_S_k_q_nSw___ + tmp_t;
if (verbose>1);
tmp_str = 'CTF_UX_S_k_q_nSw___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
end;%if (verbose>1);
end;%if (flag_compress_S==0);
if (flag_compress_S==1);
SS_k_q_ = svds(CTF_UX_S_k_q_wnS__,min(n_w_max*pm_n_UX_rank,n_S));
n_S_rank = min(efind(cumsum(SS_k_q_)/sum(SS_k_q_)>1-tolerance_master));
if (verbose>1); disp(sprintf(' %% n_S_rank %d/%d',n_S_rank,min(n_w_max*pm_n_UX_rank,n_S))); end;
[US_k_q__,SS_k_q__,VS_k_q__] = svds(CTF_UX_S_k_q_wnS__,n_S_rank);
US_CTF_UX_S_k_q_nSw___ = permute(reshape(US_k_q__,[n_w_max,pm_n_UX_rank,n_S_rank]),[2,3,1]);
end;%if (flag_compress_S==1);

if (verbose>1); 
if (flag_optimize_over_gamma_z == 0);
tmp_str = 'X_wSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'delta_x_wSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'delta_y_wSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'gamma_z_wSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
if (flag_compute_I_value); tmp_str = 'I_value_wSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9)); end;
end;%if (flag_optimize_over_gamma_z == 0);
if (flag_optimize_over_gamma_z == 1);
tmp_str = 'X_SM__'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'delta_x_SM__'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'delta_y_SM__'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'gamma_z_SM__'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
if (flag_compute_I_value); tmp_str = 'I_value_SM__'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9)); end;
end;%if (flag_optimize_over_gamma_z == 1);
end;%if (verbose>1); 
n_Mbatch = ceil(n_M/n_M_per_Mbatch);
if (verbose>1); disp(sprintf(' %% n_Mbatch %d',n_Mbatch)); end;
n_Sbatch = ceil(n_S/n_S_per_Sbatch);
if (verbose>1); disp(sprintf(' %% n_Sbatch %d',n_Sbatch)); end;
for nMbatch=0:n_Mbatch-1;
index_M_in_Mbatch_ = nMbatch*n_M_per_Mbatch + (0:n_M_per_Mbatch-1);
index_M_in_Mbatch_ = index_M_in_Mbatch_(find(index_M_in_Mbatch_<n_M)); n_M_sub = numel(index_M_in_Mbatch_);
if (verbose>1); disp(sprintf(' %% nMbatch %d/%d index_M_in_Mbatch_ %d-->%d',nMbatch,n_Mbatch,index_M_in_Mbatch_(1+0),index_M_in_Mbatch_(1+n_M_sub-1))); end;
if (verbose>0 & mod(nMbatch,1)==0); disp(sprintf(' %% nMbatch %d/%d index_M_in_Mbatch_ %d-->%d',nMbatch,n_Mbatch,index_M_in_Mbatch_(1+0),index_M_in_Mbatch_(1+n_M_sub-1))); end;
if (n_M_sub>0);
tmp_t = tic(); nop=0;
svd_VUXM_nMwl____ = zeros(pm_n_UX_rank,n_M_sub,n_w_max,FTK.n_svd_l);
svd_VUXM_nMwl____ = permute(svd_VUXM_lwnM____(:,:,:,1+index_M_in_Mbatch_),[3,4,2,1]);
nop = nop + numel(svd_VUXM_nMwl____);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_VUXM_nMwl____: %0.6f',tmp_t)); end; elrt_sum_svd_VUXM_nMwl____ = elrt_sum_svd_VUXM_nMwl____ + tmp_t;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM_mex4___8: svd_VUXM_nMwl____',tmp_t,1,nop);
%%%%%%%%;
if (flag_compress_S==0);
tmp_t = tic(); nop=0;
svd_SVUXM_SMwl____ = zeros(n_S,n_M_sub,n_w_max,FTK.n_svd_l);
for nl=0:FTK.n_svd_l-1;
for nw=0:n_w_max-1;
svd_SVUXM_SMwl____(:,:,1+nw,1+nl) = ctranspose(CTF_UX_S_k_q_nSw___(:,:,1+nw))*svd_VUXM_nMwl____(:,:,1+nw,1+nl);
end;%for nw=0:n_w_max-1;
end;%for nl=0:FTK.n_svd_l-1;
nop = nop + FTK.n_svd_l*n_w_max*n_S*pm_n_UX_rank*n_M_sub;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_SVUXM_SMwl____: %0.6f',tmp_t)); end; elrt_sum_svd_SVUXM_SMwl____ = elrt_sum_svd_SVUXM_SMwl____ + tmp_t;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM_mex4___8: svd_SVUXM_SMwl____',tmp_t,1,nop);
%%%%;
tmp_t = tic(); nop=0;
svd_SVUXM_lwSM____ = permute(ifft(permute(svd_SVUXM_SMwl____,[3,4,1,2]),[],1)*n_w_max,[2,1,3,4]);
nop = nop + numel(svd_SVUXM_lwSM____);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_SVUXM_lwSM____: %0.6f',tmp_t)); end; elrt_sum_svd_SVUXM_lwSM____ = elrt_sum_svd_SVUXM_lwSM____ + tmp_t;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM_mex4___8: svd_SVUXM_lwSM____',tmp_t,1,nop);
end;%if (flag_compress_S==0);
%%%%%%%%;
flag_disp=0;
if flag_disp;
if (verbose>1); disp(sprintf(' %% nMbatch %d/%d',nMbatch,n_Mbatch)); end;
tab = min(8,n_S*n_M_sub*n_w_max*FTK.n_svd_l);
if (verbose>1); array_printf(svd_SVUXM_SMwl____,1,tab,' %% svd_SVUXM_SMwl____'); end;
if (verbose>1); array_printf(svd_SVUXM_lwSM____,1,tab,' %% svd_SVUXM_lwSM____'); end;
end;%if flag_disp;
flag_dump=0;
if flag_dump;
save('ori_svd_SVUXM_SMwl____.mat','svd_SVUXM_SMwl____');
save('ori_svd_SVUXM_lwSM____.mat','svd_SVUXM_lwSM____');
end;%if flag_dump;
%%%%%%%%;
if (flag_compress_S==1);
tmp_t = tic(); nop=0;
svd_USVUXM_SMwl____ = zeros(n_S_rank,n_M_sub,n_w_max,FTK.n_svd_l);
for nl=0:FTK.n_svd_l-1;
for nw=0:n_w_max-1;
svd_USVUXM_SMwl____(:,:,1+nw,1+nl) = ctranspose(US_CTF_UX_S_k_q_nSw___(:,:,1+nw))*svd_VUXM_nMwl____(:,:,1+nw,1+nl);
end;%for nw=0:n_w_max-1;
end;%for nl=0:FTK.n_svd_l-1;
nop = nop + FTK.n_svd_l*n_w_max*n_S_rank*pm_n_UX_rank*n_M_sub;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_USVUXM_SMwl____: %0.6f',tmp_t)); end; elrt_sum_svd_USVUXM_SMwl____ = elrt_sum_svd_USVUXM_SMwl____ + tmp_t;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM_mex4___8: svd_USVUXM_SMwl____',tmp_t,1,nop);
tmp_t = tic(); nop=0;
svd_USVUXM_SMwl____ = permute(ifft(permute(svd_USVUXM_SMwl____,[3,4,1,2]),[],1)*n_w_max,[3,4,1,2]);
nop = nop + numel(svd_USVUXM_SMwl____);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_USVUXM_lwSM____: %0.6f',tmp_t)); end; elrt_sum_svd_USVUXM_lwSM____ = elrt_sum_svd_USVUXM_lwSM____ + tmp_t;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM_mex4___8: svd_USVUXM_SMwl____ (permute)',tmp_t,1,nop);
end;%if (flag_compress_S==1);
%%%%%%%%;
for nSbatch=0:n_Sbatch-1;
index_S_in_Sbatch_ = nSbatch*n_S_per_Sbatch + (0:n_S_per_Sbatch-1);
index_S_in_Sbatch_ = index_S_in_Sbatch_(find(index_S_in_Sbatch_<n_S)); n_S_sub = numel(index_S_in_Sbatch_);
if (verbose>1); disp(sprintf(' %% nSbatch %d/%d index_S_in_Sbatch_ %d-->%d',nSbatch,n_Sbatch,index_S_in_Sbatch_(1+0),index_S_in_Sbatch_(1+n_S_sub-1))); end;
if (verbose>1 & mod(nSbatch,32)==0); disp(sprintf(' %% nSbatch %d/%d index_S_in_Sbatch_ %d-->%d',nSbatch,n_Sbatch,index_S_in_Sbatch_(1+0),index_S_in_Sbatch_(1+n_S_sub-1))); end;
if (n_S_sub>0);
%%%%%%%%;
if (flag_compress_S==0);
svd_SVUXM_lwsM____ = svd_SVUXM_lwSM____(:,:,1+index_S_in_Sbatch_,:);
if flag_dump; save('ori_svd_SVUXM_lwsM____.mat','svd_SVUXM_lwsM____'); end;
end;%if (flag_compress_S==0);
if (flag_compress_S==1);
tmp_t = tic(); nop=0;
svd_SVUXM_lwsM____ = permute(reshape(VS_k_q__(1+index_S_in_Sbatch_,:)*SS_k_q__*reshape(svd_USVUXM_SMwl____,[n_S_rank,n_M_sub*n_w_max*FTK.n_svd_l]),[n_S_sub,n_M_sub,n_w_max,FTK.n_svd_l]),[4,3,1,2]);
nop = nop + n_S_sub*n_S_rank*n_S_rank + n_S_sub*n_S_rank*n_M_sub*n_w_max*FTK.n_svd_l;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_SVUXM_lwsM____: %0.6f',tmp_t)); end; elrt_sum_svd_SVUXM_lwsM____ = elrt_sum_svd_SVUXM_lwsM____ + tmp_t;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM_mex4___8: svd_SVUXM_lwsM____',tmp_t,1,nop);
end;%if (flag_compress_S==1);
%%%%%%%%;
tmp_t = tic(); nop=0;
svd_USESVUXM_dwSM____ = real(reshape(FTK.svd_U_d_expiw_s__*reshape(svd_SVUXM_lwsM____,[FTK.n_svd_l,n_w_max*n_S_sub*n_M_sub]),[FTK.n_delta_v,n_w_max,n_S_sub,n_M_sub]));
if flag_dump; save('ori_svd_USESVUXM_dwSM____.mat','svd_USESVUXM_dwSM____'); end;
%%%%%%%%;
l2_dSM___ = permute(reshape(reshape(sqrt(CTF_UX_S_l2_use_(1+index_S_in_Sbatch_)),[n_S_sub,1])*reshape(sqrt(UX_M_l2_dM_use__(:,1+index_M_in_Mbatch_)),[1,FTK.n_delta_v*n_M_sub]),[n_S_sub,FTK.n_delta_v,n_M_sub]),[2,1,3]);
n2_dSM___ = 1./max(1e-14,l2_dSM___);
f2_dSM___ = permute(reshape(reshape(sqrt(CTF_UX_S_l2_use_(1+index_S_in_Sbatch_)),[n_S_sub,1])*reshape(1./max(1e-14,sqrt(UX_M_l2_dM_use__(:,1+index_M_in_Mbatch_))),[1,FTK.n_delta_v*n_M_sub]),[n_S_sub,FTK.n_delta_v,n_M_sub]),[2,1,3]);
if flag_dump;
save('ori_l2_dSM___.mat','l2_dSM___');
save('ori_n2_dSM___.mat','n2_dSM___');
save('ori_f2_dSM___.mat','f2_dSM___');
end;%if flag_dump;
ss_S_ = reshape(CTF_UX_S_l2_use_(1+index_S_in_Sbatch_),[n_S_sub,1]);
nop = nop + FTK.n_delta_v*FTK.n_svd_l*n_w_max*n_S_sub*n_M_sub + n_S_sub*FTK.n_delta_v*n_M_sub + n_S_sub*FTK.n_delta_v*n_M_sub;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_USESVUXM_dwSM____: %0.6f',tmp_t)); end; elrt_sum_svd_USESVUXM_dwSM____ = elrt_sum_svd_USESVUXM_dwSM____ + tmp_t;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM_mex4___8: svd_USESVUXM_dwSM____',tmp_t,1,nop);
if (nMbatch==0 && nSbatch==0 && verbose>1); 
tmp_str = 'svd_VUXM_nMwl____'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'svd_SVUXM_SMwl____'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'svd_SVUXM_lwsM____'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'svd_USESVUXM_dwSM____'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'l2_dSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'n2_dSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'f2_dSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
end;%if (verbose>1); 
tmp_t = tic(); nop=0;
X_sub_dwSM____ = repmat(reshape(n2_dSM___,[FTK.n_delta_v,1,n_S_sub,n_M_sub]),[1,n_w_max,1,1]) .* svd_USESVUXM_dwSM____; %<-- correlation. ;
if flag_dump; save('ori_X_sub_dwSM____.mat','X_sub_dwSM____'); end;
%X_sub_dwSM____ = bsxfun(@times,reshape(real(n2_dSM___),[FTK.n_delta_v,1,n_S_sub,n_M_sub]),real(svd_USESVUXM_dwSM____)); %<-- correlation. ;
if (flag_compute_I_value);
I_value_sub_dwSM____ = repmat(reshape(f2_dSM___,[FTK.n_delta_v,1,n_S_sub,n_M_sub]),[1,n_w_max,1,1]) .* X_sub_dwSM____; %<-- I_value. ;
I_value_use_dwSM____ = max(0,real(I_value_sub_dwSM____));
if flag_dump; save('ori_I_value_use_dwSM____.mat','I_value_use_dwSM____'); end;
end;%if (flag_compute_I_value);
nop = nop + numel(X_sub_dwSM____);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_sub_dwSM____: %0.6f',tmp_t)); end; elrt_sum_X_sub_dwSM____ = elrt_sum_X_sub_dwSM____ + tmp_t;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM_mex4___8: X_sub_dwSM____',tmp_t,1,nop);
%%%%%%%%;
flag_check=0;
if flag_check;
[tmp_X_wSM___,tmp_delta_ij___] = max(reshape(X_sub_dwSM____,[FTK.n_delta_v,n_w_max*n_S_sub*n_M_sub]),[],1); %<-- maximize correlation. ;
tmp_X_wSM___ = reshape(tmp_X_wSM___,[n_w_max,n_S_sub,n_M_sub]);
tmp_delta_ij___ = reshape(tmp_delta_ij___,[n_w_max,n_S_sub,n_M_sub]);
[tmp_X_SM__,tmp_dw_ij__] = max(reshape(X_sub_dwSM____,[FTK.n_delta_v*n_w_max,n_S_sub*n_M_sub]),[],1); %<-- maximize correlation. ;
[tmp_delta_ij__,tmp_gamma_ij__] = ind2sub([FTK.n_delta_v,n_w_max],tmp_dw_ij__);
tmp_X_SM__ = reshape(tmp_X_SM__,[n_S_sub,n_M_sub]);
tmp_delta_ij__ = reshape(tmp_delta_ij__,[n_S_sub,n_M_sub]);
tmp_gamma_ij__ = reshape(tmp_gamma_ij__,[n_S_sub,n_M_sub]);
for nS=0:n_S_sub-1;
for nM=0:n_M_sub-1;
[tmp_X,tmp_gamma_ij] = max(tmp_X_wSM___(:,1+nS,1+nM));
assert(tmp_X_wSM___(tmp_gamma_ij,1+nS,1+nM)==tmp_X_SM__(1+nS,1+nM));
assert(tmp_gamma_ij==tmp_gamma_ij__(1+nS,1+nM));
assert(tmp_delta_ij___(tmp_gamma_ij,1+nS,1+nM)==tmp_delta_ij__(1+nS,1+nM));
end;%for nM=0:n_M_sub-1;
end;%for nS=0:n_S_sub-1;
end;%if flag_check;
%%%%%%%%;
if (flag_optimize_over_gamma_z == 0);
tmp_t = tic(); nop=0;
[tmp_X_wSM___,tmp_delta_ij___] = max(reshape(X_sub_dwSM____,[FTK.n_delta_v,n_w_max*n_S_sub*n_M_sub]),[],1); %<-- maximize correlation. ;
assert(min(tmp_delta_ij___)>=1); assert(max(tmp_delta_ij___)<=FTK.n_delta_v);
tmp_X_wSM___ = reshape(tmp_X_wSM___,[n_w_max,n_S_sub,n_M_sub]);
tmp_delta_ij___ = reshape(tmp_delta_ij___,[n_w_max,n_S_sub,n_M_sub]);
tmp_delta_x___ = FTK.delta_x_(tmp_delta_ij___);
tmp_delta_y___ = FTK.delta_y_(tmp_delta_ij___);
tmp_gamma_z___ = 2*pi*(0:n_w_max-1)/n_w_max;
X_wSM___(:,1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = tmp_X_wSM___;
delta_x_wSM___(:,1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_delta_x___,[n_w_max,n_S_sub,n_M_sub]);
delta_y_wSM___(:,1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_delta_y___,[n_w_max,n_S_sub,n_M_sub]);
gamma_z_wSM___(:,1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = repmat(tmp_gamma_z___(:),[1,n_S_sub,n_M_sub]);
if (flag_compute_I_value);
tmp_I_value_use_dwSM__ = reshape(I_value_use_dwSM____,[FTK.n_delta_v,n_w_max*n_S_sub*n_M_sub]);
tmp_I_value_use_wSM_ = zeros(n_w_max*n_S_sub*n_M_sub,1);
tmp_t2=tic();
for nl=0:n_w_max*n_S_sub*n_M_sub-1;
tmp_I_value_use_wSM_(1+nl) = tmp_I_value_use_dwSM__(tmp_delta_ij___(1+nl),1+nl);
end;%for nl=0:n_w_max*n_S_sub*n_M_sub-1;
I_value_wSM___(:,1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_I_value_use_wSM_,[n_w_max,n_S_sub,n_M_sub]);
tmp_t2 = toc(tmp_t2); if (verbose>1); disp(sprintf(' %% I_value_wSM___ %0.6fs',tmp_t2)); end;
end;%if (flag_compute_I_value);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSM___: %0.6f',tmp_t)); end; elrt_sum_X_wSM___ = elrt_sum_X_wSM___ + tmp_t;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM_mex4___8: X_wSM___',tmp_t,1,nop);
end;%if (flag_optimize_over_gamma_z == 0);
%%%%%%%%;
if (flag_optimize_over_gamma_z == 1);
tmp_t = tic(); nop=0;
[tmp_X_SM__,tmp_dw_ij__] = max(reshape(X_sub_dwSM____,[FTK.n_delta_v*n_w_max,n_S_sub*n_M_sub]),[],1); %<-- maximize correlation. ;
[tmp_delta_ij__,tmp_gamma_ij__] = ind2sub([FTK.n_delta_v,n_w_max],tmp_dw_ij__);
assert(min(tmp_delta_ij__)>=1); assert(max(tmp_delta_ij__)<=FTK.n_delta_v);
assert(min(tmp_gamma_ij__)>=1); assert(max(tmp_gamma_ij__)<=n_w_max);
tmp_X_SM__ = reshape(tmp_X_SM__,[n_S_sub,n_M_sub]);
tmp_delta_ij__ = reshape(tmp_delta_ij__,[n_S_sub,n_M_sub]);
tmp_gamma_ij__ = reshape(tmp_gamma_ij__,[n_S_sub,n_M_sub]);
tmp_delta_x__ = FTK.delta_x_(tmp_delta_ij__);
tmp_delta_y__ = FTK.delta_y_(tmp_delta_ij__);
tmp_gamma_z__ = 2*pi*(tmp_gamma_ij__-1)/n_w_max;
X_SM__(1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = tmp_X_SM__;
delta_x_SM__(1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_delta_x__,[n_S_sub,n_M_sub]);
delta_y_SM__(1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_delta_y__,[n_S_sub,n_M_sub]);
gamma_z_SM__(1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_gamma_z__,[n_S_sub,n_M_sub]);
if (flag_compute_I_value);
tmp_I_value_use_dwSM___ = reshape(I_value_use_dwSM____,[FTK.n_delta_v,n_w_max,n_S_sub*n_M_sub]);
tmp_I_value_use_SM_ = zeros(n_S_sub*n_M_sub,1);
tmp_t2=tic();
for nl=0:n_S_sub*n_M_sub-1;
tmp_I_value_use_SM_(1+nl) = tmp_I_value_use_dwSM___(tmp_delta_ij__(1+nl),tmp_gamma_ij__(1+nl),1+nl);
end;%for nl=0:n_S_sub*n_M_sub-1;
I_value_SM__(1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_I_value_use_SM_,[n_S_sub,n_M_sub]);
tmp_t2 = toc(tmp_t2); if (verbose>1); disp(sprintf(' %% I_value_SM__ %0.6fs',tmp_t2)); end;
end;%if (flag_compute_I_value);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSM___: %0.6f',tmp_t)); end; elrt_sum_X_wSM___ = elrt_sum_X_wSM___ + tmp_t;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM_mex4___8: X_wSM___',tmp_t,1,nop);
end;%if (flag_optimize_over_gamma_z == 1);
%%%%%%%%;
if flag_disp;
if (verbose>1); disp(sprintf(' %% nMbatch %d/%d nSbatch %d/%d',nMbatch,n_Mbatch,nSbatch,n_Sbatch)); end;
if (flag_optimize_over_gamma_z==0);
tab = min(8,n_S_sub*n_M_sub*n_w_max);
if (verbose>1); array_printf(X_wSM___,1,tab,' %% X_wSM___'); end;
if (verbose>1); array_printf(delta_x_wSM___,1,tab,' %% delta_x_wSM___'); end;
if (verbose>1); array_printf(delta_y_wSM___,1,tab,' %% delta_y_wSM___'); end;
if (verbose>1); array_printf(gamma_z_wSM___,1,tab,' %% gamma_z_wSM___'); end;
if (flag_compute_I_value); if (verbose>1); array_printf(I_value_wSM___,1,tab,' %% I_value_wSM___'); end; end;
end;%if (flag_optimize_over_gamma_z==0);
if (flag_optimize_over_gamma_z==1);
tab = min(8,n_S_sub*n_M_sub); 
if (verbose>1); array_printf(X_SM__,1,tab,' %% X_SM__'); end;
if (verbose>1); array_printf(delta_x_SM__,1,tab,' %% delta_x_SM__'); end;
if (verbose>1); array_printf(delta_y_SM__,1,tab,' %% delta_y_SM__'); end;
if (verbose>1); array_printf(gamma_z_SM__,1,tab,' %% gamma_z_SM__'); end;
if (flag_compute_I_value); if (verbose>1); array_printf(I_value_SM__,1,tab,' %% I_value_SM__'); end; end;
end;%if (flag_optimize_over_gamma_z==1);
end;%if flag_disp;
%%%%%%%%;
end;%if (n_S_sub>0);
end;%for nSbatch=0:n_Sbatch-1;
end;%if (n_M_sub>0);
end;%for nMbatch=0:n_Mbatch-1;

if (flag_optimize_over_gamma_z == 1);
X_wSM___ = X_SM__;
delta_x_wSM___ = delta_x_SM__;
delta_y_wSM___ = delta_y_SM__;
gamma_z_wSM___ = gamma_z_SM__;
if (flag_compute_I_value); I_value_wSM___ = I_value_SM__; end;
end;%if (flag_optimize_over_gamma_z == 1);
if ( (nargout>5) & (isempty(I_value_wSM___)) ); I_value_wSM___ = ones(size(X_wSM___)); end;
if flag_dump;
save('ori_X_wSM___.mat','X_wSM___');
save('ori_delta_x_wSM___.mat','delta_x_wSM___');
save('ori_delta_y_wSM___.mat','delta_y_wSM___');
save('ori_gamma_z_wSM___.mat','gamma_z_wSM___');
save('ori_I_value_wSM___.mat','I_value_wSM___');
end;%if flag_dump;

if (verbose>0);
disp(sprintf(' %% elrt_sum_mex_ampmh_X_wSM___14: %0.6f',elrt_sum_mex_ampmh_X_wSM___14));
disp(sprintf(' %% elrt_sum_CTF_UX_S_k_q_nSw___: %0.6f',elrt_sum_CTF_UX_S_k_q_nSw___));
disp(sprintf(' %% elrt_sum_svd_VUXM_nMwl____: %0.6f',elrt_sum_svd_VUXM_nMwl____));
disp(sprintf(' %% elrt_sum_svd_SVUXM_SMwl____: %0.6f',elrt_sum_svd_SVUXM_SMwl____));
disp(sprintf(' %% elrt_sum_svd_SVUXM_lwSM____: %0.6f',elrt_sum_svd_SVUXM_lwSM____));
disp(sprintf(' %% elrt_sum_svd_SVUXM_lwsM____: %0.6f',elrt_sum_svd_SVUXM_lwsM____));
disp(sprintf(' %% elrt_sum_svd_USESVUXM_dwSM____: %0.6f',elrt_sum_svd_USESVUXM_dwSM____));
disp(sprintf(' %% elrt_sum_l2_dSM___: %0.6f',elrt_sum_l2_dSM___));
disp(sprintf(' %% elrt_sum_X_sub_dwSM____: %0.6f',elrt_sum_X_sub_dwSM____));
disp(sprintf(' %% elrt_sum_I_value_use_dwSM____: %0.6f',elrt_sum_I_value_use_dwSM____));
disp(sprintf(' %% elrt_sum_X_wSM___: %0.6f',elrt_sum_X_wSM___));
end;%if (verbose>0);

flag_disp=1;
if flag_disp;
disp(sprintf(' %% X_wSM___(:) vs mex_X_wSM___(:): %0.16f',fnorm(X_wSM___(:) - mex_X_wSM___(:))/fnorm(X_wSM___(:))));
disp(sprintf(' %% delta_x_wSM___(:) vs mex_delta_x_wSM___(:): %0.16f',fnorm(delta_x_wSM___(:) - mex_delta_x_wSM___(:))/fnorm(delta_x_wSM___(:))));
disp(sprintf(' %% delta_y_wSM___(:) vs mex_delta_y_wSM___(:): %0.16f',fnorm(delta_y_wSM___(:) - mex_delta_y_wSM___(:))/fnorm(delta_y_wSM___(:))));
disp(sprintf(' %% gamma_z_wSM___(:) vs mex_gamma_z_wSM___(:): %0.16f',fnorm(gamma_z_wSM___(:) - mex_gamma_z_wSM___(:))/fnorm(gamma_z_wSM___(:))));
disp(sprintf(' %% I_value_wSM___(:) vs mex_I_value_wSM___(:): %0.16f',fnorm(I_value_wSM___(:) - mex_I_value_wSM___(:))/fnorm(I_value_wSM___(:))));
end;%if flag_disp;

if (verbose>0); disp(sprintf(' %% [finished ampmh_X_wSM_mex4___8]')); end;


