%%%%%%%%;
% collecting calculations from: ;
% ssnll_from_a_k_p_15 ;
% kappa_basic_apply_4 ;
% to construct gradient and hessian. ;
%%%%%%%%;

%%%%%%%%;
platform = 'rusty';
if (exist('platform.type','file')); fp=fopen('platform.type'); platform = fscanf(fp,'%s'); fclose(fp); end;
if (strcmp(platform,'access1')); setup_access1; string_root = 'data'; end;
if (strcmp(platform,'OptiPlex')); setup_OptiPlex; string_root = 'home'; end;
if (strcmp(platform,'eval1')); setup_eval1; string_root = 'home'; end;
if (strcmp(platform,'rusty')); setup_rusty; string_root = 'mnt/home'; end;
%%%%%%%%;

str_thisfunction = 'test_slice_vs_volume_integral_from_a_k_p_7';
flag_verbose=1; flag_disp=1; nf=0;

k_int = 8;
k_eq_d_double = 0.250;
t_eq_d_double = 0.500;
n_order = 9;
n_w_int = 2;
KAPPA_flag_kernel_full = 1;
KAPPA_basic_l_max_use = k_int;
KAPPA_basic_l_max_ext = ceil(1.25*KAPPA_basic_l_max_use);
%KAPPA_basic_l_max_band = floor(KAPPA_basic_l_max_use/2); %<-- force limited resolution of volumetric-reconstruction. ;
KAPPA_basic_l_max_band = +Inf;
KAPPA_qref_k_eq_d_double = k_eq_d_double;
%%%%;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%%%%%%%%;
% First define integral of <f,f>. ;
%%%%%%%%;
h2d_ = @(kd) 4*pi^2*(besselj(0,kd) + besselj(2,kd)); % calculates <f_j,f_k>, normalized so that <f,f> = (4*pi^2);
dh2d_ = @(kd) 4*pi^3*(besselj(-1,kd) - besselj(+3,kd));
h3d_ = @(kd) 4*pi*( sin(kd) - (kd).*cos(kd) ) ./ kd.^3 ; % calculates <f_j,f_k>, normalized so that <f,f> = 4*pi/3;
dh3d_ = @(kd) 12*pi*( (kd.^2/3 - 1) .* sin(kd) + (kd).*cos(kd) ) ./ kd.^4 ;
%%%%%%%%;
% Now set up and test k-quadrature on sphere. ;
%%%%%%%%;
k_p_r_max = k_int/(2*pi); k_eq_d = k_eq_d_double/(2*pi); str_C2 = 'C2';
flag_uniform_over_n_k_p_r = 1;
flag_uniform_over_polar_a = 0; %<-- This is set to match test_ssnll_from_a_k_p_14 ;
[ ...
 n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,~ ...
,~ ...
,~ ...
,~ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
] = ...
sample_sphere_7( ...
 0*flag_verbose ...
,k_p_r_max ...
,k_eq_d ...
,str_C2 ...
,flag_uniform_over_n_k_p_r ...
,flag_uniform_over_polar_a ...
) ;
%%%%;
% and generate consistant quadrature-grid on shell. ;
%%%%;
qref_k_eq_d = k_eq_d_double/(2*pi)/max(1e-12,k_p_r_max);
tmp_t = tic();
[ ...
 qref_n_shell ...
,qref_azimu_b_shell_ ...
,qref_polar_a_shell_ ...
,qref_weight_shell_ ...
,qref_k_c_0_shell_ ...
,qref_k_c_1_shell_ ...
,qref_k_c_2_shell_ ...
,qref_n_polar_a ...
,qref_polar_a_ ...
,qref_n_azimu_b_ ...
] = ...
sample_shell_6( ...
 1.0 ...
,qref_k_eq_d ...
,str_C2 ...
,flag_uniform_over_polar_a ...
) ;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% sample_shell_6: %0.2fs',tmp_t)); end;
assert(fnorm(qref_azimu_b_shell_-k_p_azimu_b_qk_(1:qref_n_shell))<1e-12);
assert(fnorm(qref_polar_a_shell_-k_p_polar_a_qk_(1:qref_n_shell))<1e-12);
assert(fnorm(sum(qref_weight_shell_)-4*pi)<1e-12);
n_q = qref_n_shell;
weight_3d_k_p_qk__ = reshape(weight_3d_k_p_qk_,[n_q,n_k_p_r]);
weight_shell_qk__ = reshape(weight_shell_qk_,[n_q,n_k_p_r]);
assert(fnorm(4*pi*weight_3d_k_p_r_ - reshape(sum(weight_3d_k_p_qk__,1),[1,n_k_p_r]))<1e-12);
%%%%%%%%;
if (flag_disp>1);
figure(1+nf);nf=nf+1;clf;figbig;
p_row = 2; p_col = 4; n_plot = p_row*p_col;
for nplot=0:n_plot-1;
nk_p_r = max(0,min(n_k_p_r-1,round(n_k_p_r*nplot/n_plot)));
tmp_index_ = n_qk_csum_(1+nk_p_r):n_qk_csum_(1+nk_p_r+1)-1;
subplot(p_row,p_col,1+nplot);
plot3(k_c_0_qk_(1+tmp_index_),k_c_1_qk_(1+tmp_index_),k_c_2_qk_(1+tmp_index_),'.');
axis equal; axis vis3d; axisnotick3d;
title(sprintf('nk_p_r %d/%d',nk_p_r,n_k_p_r),'Interpreter','none');
end;%for nplot=0:n_plot-1;
end;%if flag_disp;
%%%%%%%%;
% Now set up polar-quadrature-weights on disk. ;
%%%%%%%%;
l_max_upb = round(2*pi*k_p_r_max);
l_max_max = min(l_max_upb,1+ceil(2*pi*k_p_r_(end)));
n_w_max = n_w_int*2*(l_max_max+1); n_w_0in = n_w_max; n_w_0in_ = n_w_max*ones(n_k_p_r,1);
[ ...
 n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,k_p_r_wk_ ...
,k_p_w_wk_ ...
,k_c_0_wk_ ...
,k_c_1_wk_ ...
] = ...
get_weight_2d_2( ...
 0*flag_verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,-1 ...
,n_w_0in_ ...
);
n_w_sum = sum(n_w_); n_w_csum_ = cumsum([0;n_w_]);
%%%%%%%%;

%%%%%%%%;
% set up sources. ;
%%%%%%%%;
n_source_a = 4;
n_source_b = 3;
n_source_dvol_a = 2;
rng(0);
delta_a_c__ = zeros(3,n_source_a);
delta_b_c__ = zeros(3,n_source_b);
delta_dvol_a_c__ = zeros(3,n_source_dvol_a);
for nsource_a=0:n_source_a-1;
rng(1+nsource_a);
delta_a_c_ = 2*rand(3,1)-1; delta_a_c_ = delta_a_c_*0.5/k_p_r_max/max(1e-12,fnorm(delta_a_c_)); %<-- ensure small in magnitude. ;
delta_a_c__(:,1+nsource_a) = delta_a_c_;
end;%for nsource_a=0:n_source_a-1;
for nsource_b=0:n_source_b-1;
rng(1+n_source_a+nsource_b);
delta_b_c_ = 2*rand(3,1)-1; delta_b_c_ = delta_b_c_*0.5/k_p_r_max/max(1e-12,fnorm(delta_b_c_)); %<-- ensure small in magnitude. ;
delta_b_c__(:,1+nsource_b) = delta_b_c_;
end;%for nsource_b=0:n_source_b-1;
for nsource_dvol_a=0:n_source_dvol_a-1;
rng(1+n_source_a+n_source_b+nsource_dvol_a);
delta_dvol_a_c_ = 2*rand(3,1)-1; delta_dvol_a_c_ = delta_dvol_a_c_*0.5/k_p_r_max/max(1e-12,fnorm(delta_dvol_a_c_)); %<-- ensure small in magnitude. ;
delta_dvol_a_c__(:,1+nsource_dvol_a) = delta_dvol_a_c_;
end;%for nsource_dvol_a=0:n_source_dvol_a-1;
%%%%%%%%;
v_source_a_ = 1 + rand(n_source_a,1);
v_source_b_ = 1 + rand(n_source_b,1);
v_source_dvol_a_ = 1 + rand(n_source_dvol_a,1);
%%%%%%%%;

%%%%%%%%;
% set up CTF and eta. ;
% This ignores eta. ;
%%%%%%%%;
n_CTF = 3;
rng(0);
CTF_phi_C_ = 2*pi*rand(n_CTF,1);
CTF_k_p_wkC__ = zeros(n_w_sum,n_CTF);
for nCTF=0:n_CTF-1;
CTF_phi = CTF_phi_C_(1+nCTF);
CTF_k_p_wkC__(:,1+nCTF) = 2*k_p_r_wk_.*cos(k_p_w_wk_-CTF_phi);
end;%for nCTF=0:n_CTF-1;
n_eta = 1;
eta_k_p_wke__ = ones(n_w_sum,n_eta);
%%%%%%%%;

%%%%%%%%;
% Now define a_k_p_form and b_k_p_form. ;
%%%%%%%%;
a_k_p_form_ = zeros(n_qk,1);
b_k_p_form_ = zeros(n_qk,1);
dvol_a_k_p_form_ = zeros(n_qk,1);
for nsource_a=0:n_source_a-1;
delta_a_c_ = delta_a_c__(:,1+nsource_a);
v_source_a = v_source_a_(1+nsource_a);
a_k_p_form_ = a_k_p_form_ + v_source_a*exp(+i*2*pi*(k_c_0_qk_*delta_a_c_(1+0) + k_c_1_qk_*delta_a_c_(1+1) + k_c_2_qk_*delta_a_c_(1+2)));
end;%for nsource_a=0:n_source_a-1;
for nsource_b=0:n_source_b-1;
delta_b_c_ = delta_b_c__(:,1+nsource_b);
v_source_b = v_source_b_(1+nsource_b);
b_k_p_form_ = b_k_p_form_ + v_source_b*exp(+i*2*pi*(k_c_0_qk_*delta_b_c_(1+0) + k_c_1_qk_*delta_b_c_(1+1) + k_c_2_qk_*delta_b_c_(1+2)));
end;%for nsource_b=0:n_source_b-1;
for nsource_dvol_a=0:n_source_dvol_a-1;
delta_dvol_a_c_ = delta_dvol_a_c__(:,1+nsource_dvol_a);
v_source_dvol_a = v_source_dvol_a_(1+nsource_dvol_a);
dvol_a_k_p_form_ = dvol_a_k_p_form_ + v_source_dvol_a*exp(+i*2*pi*(k_c_0_qk_*delta_dvol_a_c_(1+0) + k_c_1_qk_*delta_dvol_a_c_(1+1) + k_c_2_qk_*delta_dvol_a_c_(1+2)));
end;%for nsource_dvol_a=0:n_source_dvol_a-1;
%%%%;
I_a_quad = sum(a_k_p_form_.*weight_3d_k_p_qk_);
I_b_quad = sum(b_k_p_form_.*weight_3d_k_p_qk_);
I_dvol_a_quad = sum(dvol_a_k_p_form_.*weight_3d_k_p_qk_);
I_a_form = 0;
I_b_form = 0;
I_dvol_a_form = 0;
for nsource_a=0:n_source_a-1;
delta_a_c_ = delta_a_c__(:,1+nsource_a);
tmp_kd = 2*pi*k_p_r_max*fnorm(delta_a_c_);
I_a_form = I_a_form + h3d_(tmp_kd)*k_p_r_max^3*v_source_a_(1+nsource_a);
end;%for nsource_a=0:n_source_a-1;
for nsource_b=0:n_source_b-1;
delta_b_c_ = delta_b_c__(:,1+nsource_b);
tmp_kd = 2*pi*k_p_r_max*fnorm(delta_b_c_);
I_b_form = I_b_form + h3d_(tmp_kd)*k_p_r_max^3*v_source_b_(1+nsource_b);
end;%for nsource_b=0:n_source_b-1;
for nsource_dvol_a=0:n_source_dvol_a-1;
delta_dvol_a_c_ = delta_dvol_a_c__(:,1+nsource_dvol_a);
tmp_kd = 2*pi*k_p_r_max*fnorm(delta_dvol_a_c_);
I_dvol_a_form = I_dvol_a_form + h3d_(tmp_kd)*k_p_r_max^3*v_source_dvol_a_(1+nsource_dvol_a);
end;%for nsource_dvol_a=0:n_source_dvol_a-1;
fnorm_disp(flag_verbose,'I_a_form',I_a_form,'I_a_quad',I_a_quad,' %<-- should be <1e-6');
fnorm_disp(flag_verbose,'I_b_form',I_b_form,'I_b_quad',I_b_quad,' %<-- should be <1e-6');
fnorm_disp(flag_verbose,'I_dvol_a_form',I_dvol_a_form,'I_dvol_a_quad',I_dvol_a_quad,' %<-- should be <1e-6');
%%%%%%%%;

%%%%%%%%;
% test quadrature on disk. ;
%%%%%%%%;
tmp_p0_k_p_wk_ = zeros(n_w_sum,1);
for nsource_a=0:n_source_a-1;
tmp_p0_k_p_wk_ = tmp_p0_k_p_wk_ + v_source_a_(1+nsource_a)*exp(+2*pi*i*(k_c_0_wk_*delta_a_c__(1+0,1+nsource_a) + k_c_1_wk_*delta_a_c__(1+1,1+nsource_a)));
end;%for nsource_a=0:n_source_a-1;
p1_k_p_wk_ = zeros(n_w_sum,1);
for nsource_b=0:n_source_b-1;
p1_k_p_wk_ = p1_k_p_wk_ + v_source_b_(1+nsource_b)*exp(+2*pi*i*(k_c_0_wk_*delta_b_c__(1+0,1+nsource_b) + k_c_1_wk_*delta_b_c__(1+1,1+nsource_b)));
end;%for nsource_b=0:n_source_b-1;
I_quad = sum(conj(tmp_p0_k_p_wk_).*p1_k_p_wk_.*weight_2d_wk_)*(4*pi^2);
I_form = 0;
for nsource_a=0:n_source_a-1;
for nsource_b=0:n_source_b-1;
tmp_kd = 2*pi*k_p_r_max*fnorm(delta_a_c__(1:2,1+nsource_a) - delta_b_c__(1:2,1+nsource_b));
I_form = I_form + h2d_(tmp_kd)/(4*pi^2) * (pi*k_p_r_max^2) * v_source_a_(1+nsource_a) * v_source_b_(1+nsource_b) ;
end;%for nsource_b=0:n_source_b-1;
end;%for nsource_a=0:n_source_a-1;
fnorm_disp(flag_verbose,'I_form',I_form,'I_quad',I_quad,' %<-- should be <1e-6');
%%%%;
if (flag_disp>1);
figure(1+nf);nf=nf+1;clf;figmed;
Slim_ = n_source_a*[-1,+1];
subplot(1,2,1);
imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(tmp_p0_k_p_wk_),Slim_,colormap_beach());
axis image; axisnotick; title('real(tmp_p0_k_p_wk_)','Interpreter','none');
subplot(1,2,2);
imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(p1_k_p_wk_),Slim_,colormap_beach());
axis image; axisnotick; title('real(p1_k_p_wk_)','Interpreter','none');
end;% if flag_disp;
%%%%%%%%;

%%%%%%%%;
% generate template-grids. ;
%%%%%%%%;
tmp_t = tic();
viewing_k_eq_d = t_eq_d_double/k_p_r_max;
template_k_eq_d = t_eq_d_double/k_p_r_max;
str_L = 'L'; %<-- Use C2 to allow for off-grid interpolation. ;
flag_tensor_vs_adap = 0; %<-- use adaptive grid for ddssnll_from_a_k_p, but need tensor grid for ddsssnll_3. ;
[ ...
 n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,viewing_k_c_0_qk_ ...
,viewing_k_c_1_qk_ ...
,viewing_k_c_2_qk_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
sample_shell_6( ...
 1.0 ...
,template_k_eq_d ...
,str_C2 ...
,flag_tensor_vs_adap ...
) ;
n_S = n_viewing_S;
viewing_gamma_z_S_ = zeros(n_S,1);
if (flag_verbose>0); disp(sprintf(' %% n_S %d, n_viewing_polar_a %d, n_viewing_azimu_b [%d,..,%d]',n_S,n_viewing_polar_a,n_viewing_azimu_b_(1+0),n_viewing_azimu_b_(end))); end;
%%%%;

%%%%;
if (flag_disp>1);
figure(1+nf);nf=nf+1;clf;figsml;
plot3(viewing_k_c_0_qk_,viewing_k_c_1_qk_,viewing_k_c_2_qk_,'.');
axis equal; axisnotick3d; axis vis3d;
end;%if flag_disp;
%%%%;
[ ...
 ~ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
] = ...
get_weight_2d_2( ...
 0*flag_verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,-1 ...
,n_w_ ...
);
%%%%;
n_w_0in = n_w_max; n_w_0in_ = n_w_max*ones(n_k_p_r,1);
%%%%%%%%;

a_k_p_qk_ = a_k_p_form_ ;
b_k_p_qk_ = b_k_p_form_ ;
dvol_a_k_p_qk_ = dvol_a_k_p_form_ ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% generate templates using it7. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
tmp_t = tic();
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('n_R','var'); n_R = []; end;
if ~exist('R_use_R___','var'); R_use_R___ = []; end;
if ~exist('a_R_k_p_Rqk__','var'); a_R_k_p_Rqk__=[]; end;
if ~exist('ba_from_single_shell_Rbaba___','var'); ba_from_single_shell_Rbaba___=[]; end;
if ~exist('wS_from_R_single_shell_Rsba___','var'); wS_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSda_from_R_single_shell_Rsba___','var'); dwSda_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSdb_from_R_single_shell_Rsba___','var'); dwSdb_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_Rsba___','var'); ddwSdaa_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdab_from_R_single_shell_Rsba___','var'); ddwSdab_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_Rsba___','var'); ddwSdbb_from_R_single_shell_Rsba___=[]; end;
parameter_interpolate = struct('type','parameter');
parameter_interpolate.flag_verbose = 0;
parameter_interpolate.flag_check = 0;
[ ...
 parameter_interpolate ...
,template_from_a_k_p_wkS__ ...
,n_w ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
,n_S_sub ...
,index_nS_from_nS_sub_ ...
,n_R ...
,R_use_R___ ...
,viewing_R_polar_a_mod_S_subR__ ...
,viewing_R_azimu_b_mod_S_subR__ ...
,nR_from_nS_sub_ ...
,a_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dtemplateda_from_a_k_p_wkS__ ...
,dtemplatedb_from_a_k_p_wkS__ ...
,dtemplatedc_from_a_k_p_wkS__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddtemplatedaa_from_a_k_p_wkS__ ...
,ddtemplatedab_from_a_k_p_wkS__ ...
,ddtemplatedac_from_a_k_p_wkS__ ...
,ddtemplatedbb_from_a_k_p_wkS__ ...
,ddtemplatedbc_from_a_k_p_wkS__ ...
,ddtemplatedcc_from_a_k_p_wkS__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
] = ...
interpolate_template_7( ...
 parameter_interpolate ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w_0in ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_R ...
,R_use_R___ ...
,a_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
);
S_it7_k_p_wkS__ = template_from_a_k_p_wkS__;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% S_it7_k_p_wkS__ (interpolate_template_7): time %0.6fs',tmp_t)); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
tmp_t = tic();
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('n_R','var'); n_R = []; end;
if ~exist('R_use_R___','var'); R_use_R___ = []; end;
if ~exist('dvol_a_R_k_p_Rqk__','var'); dvol_a_R_k_p_Rqk__=[]; end;
if ~exist('ba_from_single_shell_Rbaba___','var'); ba_from_single_shell_Rbaba___=[]; end;
if ~exist('wS_from_R_single_shell_Rsba___','var'); wS_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSda_from_R_single_shell_Rsba___','var'); dwSda_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSdb_from_R_single_shell_Rsba___','var'); dwSdb_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_Rsba___','var'); ddwSdaa_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdab_from_R_single_shell_Rsba___','var'); ddwSdab_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_Rsba___','var'); ddwSdbb_from_R_single_shell_Rsba___=[]; end;
parameter_interpolate = struct('type','parameter');
parameter_interpolate.flag_verbose = 0;
parameter_interpolate.flag_check = 0;
[ ...
 parameter_interpolate ...
,template_from_dvol_a_k_p_wkS__ ...
] = ...
interpolate_template_7( ...
 parameter_interpolate ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,dvol_a_k_p_qk_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w_0in ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_R ...
,R_use_R___ ...
,dvol_a_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
);
dvol_S_it7_k_p_wkS__ = template_from_dvol_a_k_p_wkS__;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% dvol_S_it7_k_p_wkS__ (interpolate_template_7): time %0.6fs',tmp_t)); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
tmp_t = tic();
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('n_R','var'); n_R = []; end;
if ~exist('R_use_R___','var'); R_use_R___ = []; end;
if ~exist('b_R_k_p_Rqk__','var'); b_R_k_p_Rqk__=[]; end;
if ~exist('ba_from_single_shell_Rbaba___','var'); ba_from_single_shell_Rbaba___=[]; end;
if ~exist('wS_from_R_single_shell_Rsba___','var'); wS_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSda_from_R_single_shell_Rsba___','var'); dwSda_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSdb_from_R_single_shell_Rsba___','var'); dwSdb_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_Rsba___','var'); ddwSdaa_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdab_from_R_single_shell_Rsba___','var'); ddwSdab_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_Rsba___','var'); ddwSdbb_from_R_single_shell_Rsba___=[]; end;
parameter_interpolate = struct('type','parameter');
parameter_interpolate.flag_verbose = 0;
parameter_interpolate.flag_check = 0;
[ ...
 parameter_interpolate ...
,template_from_b_k_p_wkS__ ...
] = ...
interpolate_template_7( ...
 parameter_interpolate ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,b_k_p_qk_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w_0in ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_R ...
,R_use_R___ ...
,b_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
);
T_it7_k_p_wkS__ = template_from_b_k_p_wkS__;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% T_it7_k_p_wkS__ (interpolate_template_7): time %0.6fs',tmp_t)); end;
%%%%%%%%;

%%%%%%%%;
% Define rotation. ;
%%%%%%%%;
Rz = @(azimu_b) ...
[ +cos(azimu_b) -sin(azimu_b) 0 ; ...
  +sin(azimu_b) +cos(azimu_b) 0 ; ...
   0             0            1 ; ...
] ;
%%%%%%%%;
Ry = @(polar_a) ...
[ +cos(polar_a) 0 +sin(polar_a) ; ...
   0            1  0            ; ...
  -sin(polar_a) 0 +cos(polar_a) ; ...
];
%%%%%%%%;

%%%%%%%%;
% Now step through and reconstitute the templates. ;
%%%%%%%%;
R_k_p_wkS__ = zeros(n_w_sum,n_S);
dvol_R_k_p_wkS__ = zeros(n_w_sum,n_S);
for nS=0:n_S-1;
tmp_azimu_b = viewing_azimu_b_S_(1+nS);
tmp_polar_a = viewing_polar_a_S_(1+nS);
tmp_gamma_z = 0.0;
tmp_R__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
R_k_p_wk_ = zeros(n_w_sum,1);
for nsource_a=0:n_source_a-1;
tmp_delta_ = tmp_R__*delta_a_c__(:,1+nsource_a);
R_k_p_wk_ = R_k_p_wk_ + v_source_a_(1+nsource_a)*exp(+i*2*pi*(k_c_0_wk_*tmp_delta_(1+0) + k_c_1_wk_*tmp_delta_(1+1)));
end;%for nsource_a=0:n_source_a-1;
R_k_p_wkS__(:,1+nS) = R_k_p_wk_;
dvol_R_k_p_wk_ = zeros(n_w_sum,1);
for nsource_dvol_a=0:n_source_dvol_a-1;
tmp_delta_ = tmp_R__*delta_dvol_a_c__(:,1+nsource_dvol_a);
dvol_R_k_p_wk_ = dvol_R_k_p_wk_ + v_source_dvol_a_(1+nsource_dvol_a)*exp(+i*2*pi*(k_c_0_wk_*tmp_delta_(1+0) + k_c_1_wk_*tmp_delta_(1+1)));
end;%for nsource_dvol_a=0:n_source_dvol_a-1;
dvol_R_k_p_wkS__(:,1+nS) = dvol_R_k_p_wk_;
end;%for nS=0:n_S-1;
fnorm_disp(flag_verbose,'R_k_p_wkS__',R_k_p_wkS__,'S_it7_k_p_wkS__',S_it7_k_p_wkS__,' %<-- should be <1e-6');
fnorm_disp(flag_verbose,'dvol_R_k_p_wkS__',dvol_R_k_p_wkS__,'dvol_S_it7_k_p_wkS__',dvol_S_it7_k_p_wkS__,' %<-- should be <1e-6');
%%%%%%%%;
R_k_p_wkS__ = zeros(n_w_sum,n_S);
for nS=0:n_S-1;
tmp_azimu_b = viewing_azimu_b_S_(1+nS);
tmp_polar_a = viewing_polar_a_S_(1+nS);
tmp_gamma_z = 0.0;
tmp_R__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
R_k_p_wk_ = zeros(n_w_sum,1);
for nsource_b=0:n_source_b-1;
tmp_delta_ = tmp_R__*delta_b_c__(:,1+nsource_b);
R_k_p_wk_ = R_k_p_wk_ + v_source_b_(1+nsource_b)*exp(+i*2*pi*(k_c_0_wk_*tmp_delta_(1+0) + k_c_1_wk_*tmp_delta_(1+1)));
end;%for nsource_b=0:n_source_b-1;
R_k_p_wkS__(:,1+nS) = R_k_p_wk_;
end;%for nS=0:n_S-1;
fnorm_disp(flag_verbose,'R_k_p_wkS__',R_k_p_wkS__,'T_it7_k_p_wkS__',T_it7_k_p_wkS__,' %<-- should be <1e-6');
%%%%%%%%;

%%%%%%%%;
% Set up test with some 'on-grid' images. ;
% Note that these are on the tensor grid from sample_shell above. ;
% For this test we explicitly *exclude* those templates near the pole. ;
% This is because we have difficulty interpolating across the poles. ;
%%%%%%%%;
n_M = 64;
index_nCTF_from_nM_ = transpose(mod(0:n_M-1,n_CTF));
rng(0); M_phi_M_ = 2*pi*rand(n_M,1);
index_neta_from_nM_ = transpose(mod(0:n_M-1,n_eta));
nS_pole_south = max(efind(abs(viewing_polar_a_S_-1*pi)<1e-12)) + 1; if isempty(nS_pole_south); nS_pole_south = n_S-1; end;
nS_pole_north = min(efind(abs(viewing_polar_a_S_-0*pi)<1e-12)) - 1; if isempty(nS_pole_north); nS_pole_north = 0; end;
index_nS_from_nM_ = transpose(round(linspace(nS_pole_south,nS_pole_north,n_M)));
M_k_p_wkM__ = zeros(n_w_sum,n_M);
fromb_polar_a_M_ = viewing_polar_a_S_(1+index_nS_from_nM_);
fromb_azimu_b_M_ = viewing_azimu_b_S_(1+index_nS_from_nM_);
fromb_gamma_z_M_ = reshape(2*pi .* (mod(0:n_M-1,19))/max(1,19),[n_M,1]);
for nM=0:n_M-1;
M_k_p_wkM__(:,1+nM) = 2*k_p_r_wk_.*cos(k_p_w_wk_-M_phi_M_(1+nM)) .* rotate_p_to_p_fftw(n_k_p_r,n_w_,n_w_sum,T_it7_k_p_wkS__(:,1+index_nS_from_nM_(1+nM)),+fromb_gamma_z_M_(1+nM));
end;%for nM=0:n_M-1;
%%%%;
rng(0); rand_p = randperm(n_M);
euler_polar_a_M_ = viewing_polar_a_S_(1+index_nS_from_nM_(rand_p));
euler_azimu_b_M_ = viewing_azimu_b_S_(1+index_nS_from_nM_(rand_p));
euler_gamma_z_M_ = fromb_gamma_z_M_(rand_p);
%%%%;
rng(7);
dtau_euler_polar_a_M_ = 2*pi*randn(n_M,1);
dtau_euler_azimu_b_M_ = 2*pi*randn(n_M,1);
dtau_euler_gamma_z_M_ = 2*pi*randn(n_M,1);
dtau_M3__ = [ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
] ;
dtau = 1e-3;
%%%%;
weight_imagecount_M_ = rand(n_M,1);
%%%%;
ssnll_frm = 0.0d0;
ssnll_qua = 0.0d0;
U_vs_S_errrel_sum = 0.0d0;
V_vs_T_errrel_sum = 0.0d0;
M_vs_V_errrel_sum = 0.0d0;
for nM=0:n_M-1;
weight_imagecount = weight_imagecount_M_(1+nM);
M_phi = M_phi_M_(1+nM);
nT = index_nS_from_nM_(1+nM); %<-- on grid. ;
T_k_p_wk_ = T_it7_k_p_wkS__(:,1+nT);
nCTF = index_nCTF_from_nM_(1+nM);
CTF_phi = CTF_phi_C_(1+nCTF);
CTF_k_p_wk_ = CTF_k_p_wkC__(:,1+nCTF);
neta = index_neta_from_nM_(1+nM);
eta_k_p_wk_ = eta_k_p_wke__(:,1+neta);
tmp_euler_polar_a = +euler_polar_a_M_(1+nM);
tmp_euler_azimu_b = +euler_azimu_b_M_(1+nM);
tmp_euler_gamma_z = -euler_gamma_z_M_(1+nM);
tmp_R_a__ = Rz(-tmp_euler_gamma_z)*Ry(-tmp_euler_polar_a)*Rz(-tmp_euler_azimu_b);
U_k_p_wk_ = zeros(n_w_sum,1); tmp_delta_U_a_ = zeros(n_source_a,1); tmp_omega_U_a_ = zeros(n_source_a,1);
for nsource_a=0:n_source_a-1;
tmp_delta_U_ = tmp_R_a__*delta_a_c__(:,1+nsource_a); tmp_delta_U = fnorm(tmp_delta_U_(1+[0,1])); tmp_omega_U = atan2(tmp_delta_U_(1+1),tmp_delta_U_(1+0));
tmp_delta_U_a_(1+nsource_a) = tmp_delta_U; tmp_omega_U_a_(1+nsource_a) = tmp_omega_U;
U_k_p_wk_ = U_k_p_wk_ + v_source_a_(1+nsource_a)*exp(+i*2*pi*(k_c_0_wk_*tmp_delta_U_(1+0) + k_c_1_wk_*tmp_delta_U_(1+1)));
end;%for nsource_a=0:n_source_a-1;
nS = efind( abs(viewing_polar_a_S_-tmp_euler_polar_a)<1e-6 & abs(viewing_azimu_b_S_-tmp_euler_azimu_b)<1e-6 ); %<-- on grid. ;
S_k_p_wk_ = S_it7_k_p_wkS__(:,1+nS);
U_vs_S_errrel_sum = U_vs_S_errrel_sum + fnorm(S_k_p_wk_ - rotate_p_to_p_fftw(n_k_p_r,n_w_,n_w_sum,U_k_p_wk_,+tmp_euler_gamma_z))/max(1e-12,fnorm(U_k_p_wk_));
tmp_fromb_polar_a = +fromb_polar_a_M_(1+nM);
tmp_fromb_azimu_b = +fromb_azimu_b_M_(1+nM);
tmp_fromb_gamma_z = -fromb_gamma_z_M_(1+nM);
tmp_R_b__ = Rz(-tmp_fromb_gamma_z)*Ry(-tmp_fromb_polar_a)*Rz(-tmp_fromb_azimu_b);
V_k_p_wk_ = zeros(n_w_sum,1); tmp_delta_V_b_ = zeros(n_source_b,1); tmp_omega_V_b_ = zeros(n_source_b,1);
for nsource_b=0:n_source_b-1;
tmp_delta_V_ = tmp_R_b__*delta_b_c__(:,1+nsource_b); tmp_delta_V = fnorm(tmp_delta_V_(1+[0,1])); tmp_omega_V = atan2(tmp_delta_V_(1+1),tmp_delta_V_(1+0));
tmp_delta_V_b_(1+nsource_b) = tmp_delta_V; tmp_omega_V_b_(1+nsource_b) = tmp_omega_V;
V_k_p_wk_ = V_k_p_wk_ + v_source_b_(1+nsource_b)*exp(+i*2*pi*(k_c_0_wk_*tmp_delta_V_(1+0) + k_c_1_wk_*tmp_delta_V_(1+1)));
end;%for nsource_b=0:n_source_b-1;
V_vs_T_errrel_sum = V_vs_T_errrel_sum + fnorm(T_k_p_wk_ - rotate_p_to_p_fftw(n_k_p_r,n_w_,n_w_sum,V_k_p_wk_,+tmp_fromb_gamma_z))/max(1e-12,fnorm(V_k_p_wk_));
M_k_p_wk_ = M_k_p_wkM__(:,1+nM);
M_vs_V_errrel_sum = M_vs_V_errrel_sum + fnorm(M_k_p_wk_ - 2*k_p_r_wk_.*cos(k_p_w_wk_-M_phi) .* V_k_p_wk_)/max(1e-12,fnorm(M_k_p_wk_));
ssnll_qua = ssnll_qua + weight_imagecount*0.5*sum(abs(U_k_p_wk_.*CTF_k_p_wk_ - M_k_p_wk_).^2.*eta_k_p_wk_.*weight_2d_wk_,'all')*(2*pi)^2;
for nsource_a0=0:n_source_a-1; for nsource_a1=0:n_source_a-1;
tmp_delta_0 = tmp_delta_U_a_(1+nsource_a0); tmp_omega_0 = tmp_omega_U_a_(1+nsource_a0);
tmp_delta_1 = tmp_delta_U_a_(1+nsource_a1); tmp_omega_1 = tmp_omega_U_a_(1+nsource_a1);
ssnll_frm = ssnll_frm + weight_imagecount*0.5*1*I_PxxP(k_p_r_max,CTF_phi,tmp_delta_1,tmp_omega_1,CTF_phi,tmp_delta_0,tmp_omega_0) * v_source_a_(1+nsource_a0) * v_source_a_(1+nsource_a1) ;
end;end;%for nsource_a0=0:n_source_a-1; for nsource_a1=0:n_source_a-1;
for nsource_a0=0:n_source_a-1; for nsource_b1=0:n_source_b-1;
tmp_delta_0 = tmp_delta_U_a_(1+nsource_a0); tmp_omega_0 = tmp_omega_U_a_(1+nsource_a0);
tmp_delta_1 = tmp_delta_V_b_(1+nsource_b1); tmp_omega_1 = tmp_omega_V_b_(1+nsource_b1);
ssnll_frm = ssnll_frm - weight_imagecount*0.5*2*I_PxxP(k_p_r_max,  M_phi,tmp_delta_1,tmp_omega_1,CTF_phi,tmp_delta_0,tmp_omega_0) * v_source_a_(1+nsource_a0) * v_source_b_(1+nsource_b1) ;
end;end;%for nsource_a0=0:n_source_a-1; for nsource_b1=0:n_source_b-1;
for nsource_b0=0:n_source_b-1; for nsource_b1=0:n_source_b-1;
tmp_delta_0 = tmp_delta_V_b_(1+nsource_b0); tmp_omega_0 = tmp_omega_V_b_(1+nsource_b0);
tmp_delta_1 = tmp_delta_V_b_(1+nsource_b1); tmp_omega_1 = tmp_omega_V_b_(1+nsource_b1);
ssnll_frm = ssnll_frm + weight_imagecount*0.5*1*I_PxxP(k_p_r_max,  M_phi,tmp_delta_1,tmp_omega_1,  M_phi,tmp_delta_0,tmp_omega_0) * v_source_b_(1+nsource_b0) * v_source_b_(1+nsource_b1) ;
end;end;%for nsource_b0=0:n_source_b-1; for nsource_b1=0:n_source_b-1;
end;%for nM=0:n_M-1;
if (flag_verbose>0); disp(sprintf(' %% U_vs_S_errrel_sum: %0.16f',U_vs_S_errrel_sum)); end;
if (flag_verbose>0); disp(sprintf(' %% V_vs_T_errrel_sum: %0.16f',V_vs_T_errrel_sum)); end;
if (flag_verbose>0); disp(sprintf(' %% M_vs_V_errrel_sum: %0.16f',M_vs_V_errrel_sum)); end;
fnorm_disp(flag_verbose,'ssnll_frm',ssnll_frm,'ssnll_qua',ssnll_qua,' %<-- should be <1e-6');
%%%%%%%%;

%%%%%%%%;
% Now call ddssnll_from_a_k_p_4. ;
%%%%%%%%;
tmp_t = tic();
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('n_R','var'); n_R = []; end;
if ~exist('R_use_R___','var'); R_use_R___ = []; end;
if ~exist('a_R_k_p_Rqk__','var'); a_R_k_p_Rqk__=[]; end;
if ~exist('dvol_a_R_k_p_Rqk__','var'); dvol_a_R_k_p_Rqk__=[]; end;
if ~exist('ba_from_single_shell_Rbaba___','var'); ba_from_single_shell_Rbaba___=[]; end;
if ~exist('wS_from_R_single_shell_Rsba___','var'); wS_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSda_from_R_single_shell_Rsba___','var'); dwSda_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSdb_from_R_single_shell_Rsba___','var'); dwSdb_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_Rsba___','var'); ddwSdaa_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdab_from_R_single_shell_Rsba___','var'); ddwSdab_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_Rsba___','var'); ddwSdbb_from_R_single_shell_Rsba___=[]; end;
if ~exist('KAPPA','var'); KAPPA = []; end;
parameter_ddssnll = struct('type','parameter');
parameter_ddssnll.flag_verbose = flag_verbose;
parameter_ddssnll.flag_check = 1;
parameter_ddssnll.flag_disp = flag_disp;
parameter_ddssnll.n_order = n_order;
parameter.ddssnll.kernel_basic_qref_k_eq_d_double = k_eq_d_double;
parameter.ddssnll.kernel_basic_l_max_use = l_max_max;
[ ...
 parameter_ddssnll ...
,Hvt_qkabc_ ...
,Hv_q3d_k_p_qk_ ...
,Ht_q2d_M3__ ...
,a_restore_C2M0_k_p_qk__ ...
,Hvv_q3d_k_p_qk_ ...
,Hvt_q3d_k_p_qk_ ...
,Htv_q2d_M3__ ...
,Htt_q2d_M3__ ...
,dvol_a_k_p_qk_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
,n_dvt ... 
,dvt_ ... 
,dvt ... 
,ssnll_tmp_q2d_dvt_ ... 
,dssnll_mid_q2d ... 
,dssnll_dif_q2d ... 
,dssnll_lsq_q2d ... 
,ddssnll_mid_q2d ... 
,ddssnll_dif_q2d ... 
,ddssnll_lsq_q2d ... 
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_S_sub ...
,index_nS_from_nS_sub_ ...
,n_R ...
,R_use_R___ ...
,viewing_R_polar_a_mod_S_subR__ ...
,viewing_R_azimu_b_mod_S_subR__ ...
,nR_from_nS_sub_ ...
,a_R_k_p_Rqk__ ...
,dvol_a_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
] = ...
ddssnll_from_a_k_p_4( ...
 parameter_ddssnll ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,qref_k_eq_d ...
,a_k_p_qk_ ...
,dvol_a_k_p_qk_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_viewing_S ...
,S_it7_k_p_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,n_M ...
,weight_imagecount_M_ ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
,KAPPA ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_R ...
,R_use_R___ ...
,a_R_k_p_Rqk__ ...
,dvol_a_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
,n_source_a ...
,v_source_a_ ...
,delta_a_c__ ...
,n_source_dvol_a ...
,v_source_dvol_a_ ...
,delta_dvol_a_c__ ...
,CTF_phi_C_ ...
,n_source_b ...
,v_source_b_ ...
,delta_b_c__ ...
,fromb_polar_a_M_ ...
,fromb_azimu_b_M_ ...
,fromb_gamma_z_M_ ...
,M_phi_M_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% ddssnll_from_a_k_p_4: time %0.6fs',tmp_t)); end;
%%%%%%%%;

%%%%%%%%;
% Now call ddssnll_from_a_k_p_4 again, but with implicitly defined dtau. ;
%%%%%%%%;
tmp_t = tic();
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('n_R','var'); n_R = []; end;
if ~exist('R_use_R___','var'); R_use_R___ = []; end;
if ~exist('a_R_k_p_Rqk__','var'); a_R_k_p_Rqk__=[]; end;
if ~exist('dvol_a_R_k_p_Rqk__','var'); dvol_a_R_k_p_Rqk__=[]; end;
if ~exist('ba_from_single_shell_Rbaba___','var'); ba_from_single_shell_Rbaba___=[]; end;
if ~exist('wS_from_R_single_shell_Rsba___','var'); wS_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSda_from_R_single_shell_Rsba___','var'); dwSda_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSdb_from_R_single_shell_Rsba___','var'); dwSdb_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_Rsba___','var'); ddwSdaa_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdab_from_R_single_shell_Rsba___','var'); ddwSdab_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_Rsba___','var'); ddwSdbb_from_R_single_shell_Rsba___=[]; end;
if ~exist('KAPPA','var'); KAPPA = []; end;
parameter_ddssnll = struct('type','parameter');
parameter_ddssnll.flag_verbose = flag_verbose;
parameter_ddssnll.flag_check = 1;
parameter_ddssnll.flag_disp = flag_disp;
parameter_ddssnll.n_order = n_order;
parameter.ddssnll.kernel_basic_qref_k_eq_d_double = k_eq_d_double;
parameter.ddssnll.kernel_basic_l_max_use = l_max_max;
[ ...
 parameter_ddssnll ...
,Hvt_qkabc_ ...
,Hv_q3d_k_p_qk_ ...
,Ht_q2d_M3__ ...
,a_restore_C2M0_k_p_qk__ ...
,Hvv_q3d_k_p_qk_ ...
,Hvt_q3d_k_p_qk_ ...
,Htv_q2d_M3__ ...
,Htt_q2d_M3__ ...
,dvol_a_k_p_qk_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
,n_dvt ... 
,dvt_ ... 
,dvt ... 
,ssnll_tmp_q2d_dvt_ ... 
,dssnll_mid_q2d ... 
,dssnll_dif_q2d ... 
,dssnll_lsq_q2d ... 
,ddssnll_mid_q2d ... 
,ddssnll_dif_q2d ... 
,ddssnll_lsq_q2d ... 
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_S_sub ...
,index_nS_from_nS_sub_ ...
,n_R ...
,R_use_R___ ...
,viewing_R_polar_a_mod_S_subR__ ...
,viewing_R_azimu_b_mod_S_subR__ ...
,nR_from_nS_sub_ ...
,a_R_k_p_Rqk__ ...
,dvol_a_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
] = ...
ddssnll_from_a_k_p_4( ...
 parameter_ddssnll ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,qref_k_eq_d ...
,a_k_p_qk_ ...
,dvol_a_k_p_qk_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_viewing_S ...
,S_it7_k_p_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,n_M ...
,weight_imagecount_M_ ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,[] ...
,[] ...
,[] ...
,KAPPA ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_R ...
,R_use_R___ ...
,a_R_k_p_Rqk__ ...
,dvol_a_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
,n_source_a ...
,v_source_a_ ...
,delta_a_c__ ...
,n_source_dvol_a ...
,v_source_dvol_a_ ...
,delta_dvol_a_c__ ...
,CTF_phi_C_ ...
,n_source_b ...
,v_source_b_ ...
,delta_b_c__ ...
,fromb_polar_a_M_ ...
,fromb_azimu_b_M_ ...
,fromb_gamma_z_M_ ...
,M_phi_M_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% ddssnll_from_a_k_p_4: time %0.6fs',tmp_t)); end;
%%%%%%%%;

%%%%%%%%;
% Now call ddssnll_from_a_k_p_4 again, but with implicitly defined dvol. ;
% Note that the implicitly defined dvol will not fall within the domain of our analytical test. ;
% Thus, we overwrite dvol_a_firstorder_k_p_qk_ with the plane wave expansion. ;
%%%%%%%%;
tmp_t = tic();
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('n_R','var'); n_R = []; end;
if ~exist('R_use_R___','var'); R_use_R___ = []; end;
if ~exist('a_R_k_p_Rqk__','var'); a_R_k_p_Rqk__=[]; end;
if ~exist('dvol_a_R_k_p_Rqk__','var'); dvol_a_R_k_p_Rqk__=[]; end;
if ~exist('ba_from_single_shell_Rbaba___','var'); ba_from_single_shell_Rbaba___=[]; end;
if ~exist('wS_from_R_single_shell_Rsba___','var'); wS_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSda_from_R_single_shell_Rsba___','var'); dwSda_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSdb_from_R_single_shell_Rsba___','var'); dwSdb_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_Rsba___','var'); ddwSdaa_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdab_from_R_single_shell_Rsba___','var'); ddwSdab_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_Rsba___','var'); ddwSdbb_from_R_single_shell_Rsba___=[]; end;
if ~exist('KAPPA','var'); KAPPA = []; end;
parameter_ddssnll = struct('type','parameter');
parameter_ddssnll.flag_verbose = flag_verbose;
parameter_ddssnll.flag_check = 1;
parameter_ddssnll.flag_disp = flag_disp;
parameter_ddssnll.n_order = n_order;
parameter.ddssnll.kernel_basic_qref_k_eq_d_double = k_eq_d_double;
parameter.ddssnll.kernel_basic_l_max_use = l_max_max;
[ ...
 parameter_ddssnll ...
,Hvt_qkabc_ ...
,Hv_q3d_k_p_qk_ ...
,Ht_q2d_M3__ ...
,a_restore_C2M0_k_p_qk__ ...
,Hvv_q3d_k_p_qk_ ...
,Hvt_q3d_k_p_qk_ ...
,Htv_q2d_M3__ ...
,Htt_q2d_M3__ ...
,dvol_a_k_p_qk_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
,n_dvt ... 
,dvt_ ... 
,dvt ... 
,ssnll_tmp_q2d_dvt_ ... 
,dssnll_mid_q2d ... 
,dssnll_dif_q2d ... 
,dssnll_lsq_q2d ... 
,ddssnll_mid_q2d ... 
,ddssnll_dif_q2d ... 
,ddssnll_lsq_q2d ... 
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_S_sub ...
,index_nS_from_nS_sub_ ...
,n_R ...
,R_use_R___ ...
,viewing_R_polar_a_mod_S_subR__ ...
,viewing_R_azimu_b_mod_S_subR__ ...
,nR_from_nS_sub_ ...
,a_R_k_p_Rqk__ ...
,dvol_a_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
] = ...
ddssnll_from_a_k_p_4( ...
 parameter_ddssnll ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,qref_k_eq_d ...
,a_k_p_qk_ ...
,[] ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_viewing_S ...
,S_it7_k_p_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,n_M ...
,weight_imagecount_M_ ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
,KAPPA ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_R ...
,R_use_R___ ...
,a_R_k_p_Rqk__ ...
,[] ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
,n_source_a ...
,v_source_a_ ...
,delta_a_c__ ...
,n_source_dvol_a ...
,v_source_dvol_a_ ...
,delta_dvol_a_c__ ...
,CTF_phi_C_ ...
,n_source_b ...
,v_source_b_ ...
,delta_b_c__ ...
,fromb_polar_a_M_ ...
,fromb_azimu_b_M_ ...
,fromb_gamma_z_M_ ...
,M_phi_M_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% ddssnll_from_a_k_p_4: time %0.6fs',tmp_t)); end;
%%%%%%%%;

disp(sprintf(' %% returning')); return;
