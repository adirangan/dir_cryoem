
%%%%%%%%;
% Note that delta-function is not well-approximated as fourier-series in 1d. ;
%%%%%%%%;
n_f = 128;
z_ = transpose(linspace(-1,+1,1+8*n_f));
d_ = sum(cos(1*pi*z_*[-n_f:+n_f]),2);
subplot(1,2,1);
plot(z_,d_);
subplot(1,2,2);
plot(z_,log(abs(d_)),'.');

%%%%%%%%;
% Note that delta-function is not well-approximated as spherical-harmonic series on sphere. ;
%%%%%%%%;
l_max=48;
n_z = 1+1024;
z_ = transpose(linspace(-1,+1,n_z));
dz = 2/max(1,n_z-1);
leg_zl__ = zeros(n_z,1+l_max);
l_ = zeros(1+l_max,1);
for l_val=0:l_max;
l_(1+l_val) = l_val;
tmp_j_ = legendreP(l_val,z_);
tmp_j2_ = abs(tmp_j_).^2;
tmp_s = 0.5 * dz*(sum(tmp_j2_(2:end-1)) + 0.5*(tmp_j2_(1+0)+tmp_j2_(end)));
tmp_j_ = tmp_j_./max(1e-12,sqrt(tmp_s));
leg_zl__(:,1+l_val) = tmp_j_;
end;%for l_val=0:l_max;
f_ = sqrt(2*l_+1)/sqrt(4*pi);
subplot(1,2,1); plot(z_,leg_zl__*f_,'o');
subplot(1,2,2); plot(z_,log(abs(leg_zl__*f_)),'o');

%%%%%%%%;
% Note that different spatial-kernels correspond to different deconvolution-factors. ;
%%%%%%%%;

%%%%%%%%;
% Now working on qbp_single_shell_9.m. ;
%%%%%%%%;

str_thisfunction = 'qbp_single_shell_9';
flag_verbose=1; flag_disp=1; nf=0;
if (flag_verbose>0); disp(sprintf(' %% testing %s',str_thisfunction)); end;
k_p_r_max = 48.0/(2*pi); k_eq_d = 1.0/(2*pi);
n_k_p_r = 1; k_p_r_1 = 1.0; k_p_r_ = k_p_r_1;
[ ...
 n_shell ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_shell_ ...
,k_c_0_shell_ ...
,k_c_1_shell_ ...
,k_c_2_shell_ ...
] = ...
sample_shell_6( ...
 k_p_r_1 ...
,k_eq_d/k_p_r_max ...
) ;
k_p_r_shell_ = k_p_r_(1+0)*ones(n_shell,1);
%%%%%%%%;
l_max_upb = 96;
l_max = max(0,min(l_max_upb,1+ceil(2*pi*k_p_r_max)));
n_lm = (l_max+1).^2;
m_max_ = -l_max : +l_max;
n_m_max = length(m_max_);
Y_l_val_ = zeros(n_lm,1);
Y_m_val_ = zeros(n_lm,1);
tmp_l_val_ = zeros(n_lm,1);
tmp_m_val_ = zeros(n_lm,1);
na=0; 
for l_val=0:l_max;
for m_val=-l_val:+l_val;
tmp_l_val_(1+na) = l_val;
tmp_m_val_(1+na) = m_val;
na=na+1;
end;%for m_val=-l_val:+l_val;
end;%for l_val=0:l_max;
tmp_index_ = 0:n_lm-1;
Y_l_val_(1+tmp_index_) = tmp_l_val_;
Y_m_val_(1+tmp_index_) = tmp_m_val_;
weight_Y_ = ones(n_lm,1);
weight_3d_k_p_r_ = 4*pi;

%%%%%%%%;
% Build array of convolution-kernels for qbp. ;
%%%%%%%%;
sigma_kernel_ = pi*2.^[-8:0.5:-4]; n_sigma_kernel = numel(sigma_kernel_);
kernel_k_p_form_shells__ = zeros(n_shell,n_sigma_kernel);
for nsigma_kernel=0:n_sigma_kernel-1;
sigma_kernel = sigma_kernel_(1+nsigma_kernel);
kernel_k_p_form_ = exp(-((k_c_0_shell_-0).^2 + (k_c_1_shell_-0).^2 + (k_c_2_shell_-1).^2)/(2*sigma_kernel^2));
tmp_z = sum(kernel_k_p_form_.*weight_shell_)/(4*pi);
kernel_k_p_form_ = kernel_k_p_form_/max(1e-12,tmp_z);
tmp_z = sum(kernel_k_p_form_.*weight_shell_)/(4*pi);
assert(abs(tmp_z-1.0d0)<1e-6);
%%%%;
if (flag_disp>1);
kernel_lim_ = [0,prctile(kernel_k_p_form_,99.5)];
flag_2d_vs_3d = 0;
k_p_r_max = 1;
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,kernel_k_p_form_ ... 
,kernel_lim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_max ...
);
axisnotick3d; axis vis3d;
title('kernel_k_p_form_','Interpreter','none');
end;%if (flag_disp>1);
%%%%;
kernel_k_p_form_shells__(:,1+nsigma_kernel) = kernel_k_p_form_;
end;%for nsigma_kernel=0:n_sigma_kernel-1;
%%%%%%%%;
kernel_k_Y_quad_ys__ = zeros(n_lm,n_sigma_kernel);
kernel_k_p_quad_shells__ = zeros(n_shell,n_sigma_kernel);
%%%%;
for nsigma_kernel=0:n_sigma_kernel-1;
%%%%;
if (flag_verbose>0); disp(sprintf(' %% nsigma_kernel %d/%d',nsigma_kernel,n_sigma_kernel)); end;
kernel_k_p_form_ = kernel_k_p_form_shells__(:,1+nsigma_kernel);
if ~exist('Ylm_uklma___','var'); Ylm_uklma___=[]; end;
if ~exist('k_p_azimu_b_sub_uka__','var'); k_p_azimu_b_sub_uka__ = []; end;
if ~exist('k_p_polar_a_sub_uka__','var'); k_p_polar_a_sub_uka__ = []; end;
if ~exist('l_max_uk_','var'); l_max_uk_ = []; end;
if ~exist('index_nu_n_k_per_shell_from_nk_p_r_','var'); index_nu_n_k_per_shell_from_nk_p_r_ = []; end;
if ~exist('index_k_per_shell_uka__','var'); index_k_per_shell_uka__ = []; end;
[ ...
 kernel_k_Y_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
] = ...
convert_k_p_to_spharm_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,kernel_k_p_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%%%%%;
[ ...
 kernel_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,kernel_k_Y_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
if (flag_verbose>0); disp(sprintf(' %% kernel_k_p_form_ vs kernel_k_p_quad_: %0.16f',fnorm(kernel_k_p_form_-kernel_k_p_quad_)/fnorm(kernel_k_p_form_))); end;
kernel_k_Y_quad_ys__(:,1+nsigma_kernel) = kernel_k_Y_quad_;
kernel_k_p_quad_shells__(:,1+nsigma_kernel) = kernel_k_p_quad_;
%%%%;
end;%for nsigma_kernel=0:n_sigma_kernel-1;
%%%%;
%%%%%%%%;
% Illustrate the kernel-coefficients. ;
%%%%%%%%;
if (flag_disp>0);
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,2,1);
hold on;
for nsigma_kernel=0:n_sigma_kernel-1;
plot(Y_l_val_,real(kernel_k_Y_quad_ys__(:,1+nsigma_kernel)),'.');
end;%for nsigma_kernel=0:n_sigma_kernel-1;
hold off;
xlabel('Y_l_val_','Interpreter','none');
ylabel('real(kernel_k_Y_quad_)','Interpreter','none');
subplot(1,2,2);
hold on;
for nsigma_kernel=0:n_sigma_kernel-1;
plot(Y_m_val_,real(kernel_k_Y_quad_ys__(:,1+nsigma_kernel)),'.');
end;%for nsigma_kernel=0:n_sigma_kernel-1;
hold off;
xlabel('Y_m_val_','Interpreter','none');
ylabel('real(kernel_k_Y_quad_)','Interpreter','none');
sgtitle('kernel coefficients','Interpreter','none');
end;%if (flag_disp>0);
%%%%%%%%;
% The 3-dimensional diffusion used to generate the kernels is not too far from ;
% the surface-diffusion associated with the spherical-harmonics. ;
% I.e., a gaussian with standard-deviation sigma_kernel ;
% corresponds reasonably closely to a diffusion-time of t = 0.5 sigma_kernel^2, ;
% which in turn corresponds to a diagonal scaling-factor of: exp(l*(l+1)*t) ;
% (in the sperical-harmonic basis). ;
%%%%%%%%;
if (flag_disp>0);
figure(1+nf);nf=nf+1;clf;figmed;
c_use__ = colormap_beach(); n_c_use = size(c_use__,1);
subplot(1,2,1);
hold on;
for nsigma_kernel=0:n_sigma_kernel-1;
nc_use = max(0,min(n_c_use-1,floor(n_c_use*nsigma_kernel/n_sigma_kernel)));
plot(Y_l_val_,real(kernel_k_Y_quad_ys__(:,1+nsigma_kernel)),'.','Color',c_use__(1+nc_use,:));
end;%for nsigma_kernel=0:n_sigma_kernel-1;
hold off;
xlabel('Y_l_val_','Interpreter','none');
ylabel('real(kernel_k_Y_quad_)','Interpreter','none');
subplot(1,2,2);
tmp_index_ = efind(Y_m_val_==0);
hold on;
for nsigma_kernel=1:n_sigma_kernel-1;
nc_use = max(0,min(n_c_use-1,floor(n_c_use*nsigma_kernel/n_sigma_kernel)));
sigma_kernel_pos = sigma_kernel_(1+nsigma_kernel-0);
sigma_kernel_pre = sigma_kernel_(1+nsigma_kernel-1);
plot(Y_l_val_(1+tmp_index_),real(kernel_k_Y_quad_ys__(1+tmp_index_,1+nsigma_kernel-0))./real(kernel_k_Y_quad_ys__(1+tmp_index_,1+nsigma_kernel-1)),'.','Color',c_use__(1+nc_use,:));
plot(Y_l_val_(1+tmp_index_),exp(Y_l_val_(1+tmp_index_).*(1+Y_l_val_(1+tmp_index_)).*(0.5*(sigma_kernel_pre.^2 - sigma_kernel_pos.^2))),'-','Color',c_use__(1+nc_use,:));
end;%for nsigma_kernel=0:n_sigma_kernel-1;
hold off;
ylim([0,1]);
xlabel('Y_l_val_','Interpreter','none');
ylabel('real(kernel_k_Y_quad_ys__(:,1+nsigma_kernel-0))./real(kernel_k_Y_quad_ys__(:,1+nsigma_kernel-1))','Interpreter','none');
sgtitle('kernel coefficients','Interpreter','none');
end;%if (flag_disp>0);
%%%%%%%%;
% Now we can deconvolve the diffusion-kernel coefficients to approximately-reconstruct a delta-function at the pole. ;
% I.e., the (l,m==0) coefficient for the kernel is close to: ;
% exp(-l*(1+l)*0.5*sigma_kernel^2)*sqrt(2l+1)*sqrt(4*pi);
%%%%%%%%;
if (flag_disp>0);
figure(1+nf);nf=nf+1;clf;figsml;
c_use__ = colormap_beach(); n_c_use = size(c_use__,1);
tmp_l_val_ = transpose([0:l_max]);
tmp_index_ = tmp_l_val_.^2 + tmp_l_val_ ; %<-- (l,m) has index l.^2 + l + m. ;
tmp_d_val_ = sqrt(2*tmp_l_val_+1)/sqrt(4*pi)*(4*pi) ;
subplot(1,1,1); hold on;
for nsigma_kernel=0:n_sigma_kernel-1;
nc_use = max(0,min(n_c_use-1,floor(n_c_use*nsigma_kernel/n_sigma_kernel)));
sigma_kernel = sigma_kernel_(1+nsigma_kernel);
tmp_f_ = exp(-Y_l_val_(1+tmp_index_).*(1+Y_l_val_(1+tmp_index_)).*(0.5*sigma_kernel^2));
plot(Y_l_val_(1+tmp_index_),real(kernel_k_Y_quad_ys__(1+tmp_index_,1+nsigma_kernel)),'o','Color',c_use__(1+nc_use,:));
plot(Y_l_val_(1+tmp_index_),tmp_f_.*tmp_d_val_,'-','Color',c_use__(1+nc_use,:));
end;%for nsigma_kernel=0:n_sigma_kernel-1;
hold off;
%ylim([0,10]);
xlabel('Y_l_val_','Interpreter','none');
ylabel('deconvolved coefficients','Interpreter','none');
sgtitle('polar-spike coefficients','Interpreter','none');
end;%if (flag_disp>0);
%%%%%%%%;
% This strongly motivates the definition of a kernel with spherical-harmonic coefficients: ;
% Y_{l}^{m\equiv 0} := \exp(-l*(1+l)*0.5*\sigma^2)*\sqrt(2l+1)*\sqrt(4*pi), ;
% with a sigma chosen such that either: ;
% (i): Y_{l_{\max}}^{0} := \exp(-l_{\max}*(1+l_{\max})*0.5*\sigma^2)*\sqrt(2l_{\max}+1)*\sqrt(4*pi) < \epsilon , or ;
% (ii): \sum_{l>l_{\max}}  Y_{l_{\max}}^{0} := \sum_{l>l_{\max}} \left\{\exp(-l*(1+l)*0.5*\sigma^2)*\sqrt(2l+1)*\sqrt(4*pi)right\}^2 / Z < \epsilon , ;
% where Z is the normalizing-factor \sum_{l\geq 0}  Y_{l_{\max}}^{0} . ;
%%%%%%%%;
epsilon_ = 10.^transpose([-9:0.5:-2]); n_epsilon = numel(epsilon_);
sigma_e_ = zeros(n_epsilon,1);
for nepsilon=0:n_epsilon-1;
epsilon = epsilon_(1+nepsilon); l_upb = 1024; l_zer = 0;
[~,sigma] = sigma_shell_kernel_0(struct('tolerance_master',epsilon),l_max,1024);
sigma_e_(1+nepsilon) = sigma;
end;%for nepsilon=0:n_epsilon-1;
%%%%%%%%;
% Let us pick epsilon = 1e-6 for now. ;
%%%%%%%%;
tmp_index = efind(abs(epsilon_-1e-6)<1e-12);
epsilon_kernel_crit = epsilon_(1+tmp_index);
sigma_kernel_crit = sigma_e_(1+tmp_index);
kernel_crit_k_Y_form_ = zeros(n_lm,1);
tmp_l_val_ = transpose([0:l_max]);
tmp_index_ = tmp_l_val_.^2 + tmp_l_val_;
kernel_crit_k_Y_form_(1+tmp_index_) = exp(-tmp_l_val_.*(1+tmp_l_val_).*0.5*sigma_kernel_crit.^2).*sqrt(1+2*tmp_l_val_)*sqrt(4*pi);
[ ...
 kernel_crit_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,kernel_crit_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
[ ...
 kernel_crit_k_Y_quad_ ...
] = ...
convert_k_p_to_spharm_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,kernel_crit_k_p_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
if (flag_verbose>0); disp(sprintf(' %% kernel_crit_k_Y_form_ vs kernel_crit_k_Y_quad_: %0.16f',fnorm(kernel_crit_k_Y_form_-kernel_crit_k_Y_quad_)/fnorm(kernel_crit_k_Y_form_))); end;
%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,2,1);
tmp_l_val_ = transpose([0:l_max]);
tmp_index_ = tmp_l_val_.^2 + tmp_l_val_ ; %<-- (l,m) has index l.^2 + l + m. ;
tmp_c_val_ = exp(-tmp_l_val_.*(1+tmp_l_val_).*0.5*sigma_kernel_crit.^2).*sqrt(1+2*tmp_l_val_).*sqrt(4*pi);
subplot(1,2,1); hold on;
plot(Y_l_val_(1+tmp_index_),real(kernel_crit_k_Y_form_(1+tmp_index_)),'o','Color','k');
plot(Y_l_val_(1+tmp_index_),real(kernel_crit_k_Y_quad_(1+tmp_index_)),'x','Color','k');
plot(Y_l_val_(1+tmp_index_),tmp_c_val_,'-','Color','k');
hold off;
xlabel('Y_l_val_','Interpreter','none');
ylabel('polar-spike coefficients','Interpreter','none');
subplot(1,2,2);
kernel_crit_lim_ = [0,prctile(kernel_crit_k_p_quad_,99.5)];
flag_2d_vs_3d = 0;
k_p_r_max = 1;
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,kernel_crit_k_p_quad_ ... 
,kernel_crit_lim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_max ...
);
axisnotick3d; axis vis3d;
title('kernel_crit_k_p_quad_','Interpreter','none');
end;%if flag_disp;
%%%%;
%%%%%%%%;
% Now we note that kernel_crit is *not* actually a gaussian (although it should have the same mode and roughly the same nearby decay). ;
%%%%%%%%;
kernel_crit_k_p_gaus_ = exp(-((k_c_0_shell_-0).^2 + (k_c_1_shell_-0).^2 + (k_c_2_shell_-1).^2)/(2*sigma_kernel_crit^2));
tmp_z = sum(kernel_crit_k_p_gaus_.*weight_shell_)/(4*pi);
kernel_crit_k_p_gaus_ = kernel_crit_k_p_gaus_/max(1e-12,tmp_z);
tmp_z = sum(kernel_crit_k_p_gaus_.*weight_shell_)/(4*pi);
assert(abs(tmp_z-1.0d0)<1e-6);
if flag_disp;
figure(1+nf);nf=nf+1;clf;figsml;
plot(real(kernel_crit_k_p_quad_)-real(kernel_crit_k_p_gaus_),'.');
xlabel('real(kernel_crit_k_p_quad_)','Interpreter','none');
ylabel('real(kernel_crit_k_p_gaus_)','Interpreter','none');
title('difference between kernel_crit and gaussian','Interpreter','none');
end;%if flag_disp;
%%%%%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
%kernel_crit_lim_ = [0,prctile(kernel_crit_k_p_quad_,99.5)];
kernel_crit_lim_ = [-0.1,+0.1];
subplot(1,2,1);
flag_2d_vs_3d = 0;
k_p_r_max = 1;
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,kernel_crit_k_p_quad_ ... 
,kernel_crit_lim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_max ...
);
subplot(1,2,2);
flag_2d_vs_3d = 0;
k_p_r_max = 1;
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,kernel_crit_k_p_gaus_ ... 
,kernel_crit_lim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_max ...
);
end;%if flag_disp;
%%%%%%%%;

%%%%%%%%;
% Now try and form a kernel with a small support. ;
% Here we use a l2-norm constraint on the coefficient-vector, ;
% resulting in an eigenproblem. ;
%%%%%%%%;
chebleg_d_ = cell(1+l_max,1);
for l_val=0:l_max;
tmp_c_ = [zeros(l_val,1);1];
chebleg_d_{1+l_val} = chebfun(leg2cheb(tmp_c_,'norm'),'coeffs');
end;%for l_val=0:l_max;
%%%%;
[leg_node_,leg_weight_] = legpts(1+l_max,[-1,+1]); %<-- This is a gaussian-quadrature, which is accurate for polynomials up to order 2*(1+l_max)-1. ;
[che_node_,che_weight_] = chebpts(1+l_max,[-1,+1]); %<-- This is not quite a gaussian-quadrature, and will not be accurate for polynomials of order 2*(1+l_max)-1. ;
chebleg_int_dd__ = zeros(1+l_max,1+l_max);
chebleg_leg_dd__ = zeros(1+l_max,1+l_max);
chebleg_che_dd__ = zeros(1+l_max,1+l_max);
for l_val_0=0:l_max;
for l_val_1=0:l_max;
chebleg_int_dd__(1+l_val_0,1+l_val_1) = sum(chebleg_d_{1+l_val_0}*chebleg_d_{1+l_val_1});
chebleg_leg_dd__(1+l_val_0,1+l_val_1) = leg_weight_*(chebleg_d_{1+l_val_0}(leg_node_).*chebleg_d_{1+l_val_1}(leg_node_));
chebleg_che_dd__(1+l_val_0,1+l_val_1) = che_weight_*(chebleg_d_{1+l_val_0}(che_node_).*chebleg_d_{1+l_val_1}(che_node_));
end;%for l_val_1=0:l_max;
end;%for l_val_0=0:l_max;
if (flag_verbose>0); disp(sprintf(' %% chebleg_leg_dd__ vs chebleg_int_dd__: %0.16f %<-- should be <1e-6 ',fnorm(chebleg_leg_dd__-chebleg_int_dd__)/fnorm(chebleg_leg_dd__))); end;
if (flag_verbose>0); disp(sprintf(' %% chebleg_che_dd__ vs chebleg_int_dd__: %0.16f %<-- should be large',fnorm(chebleg_che_dd__-chebleg_int_dd__)/fnorm(chebleg_che_dd__))); end;
%imagesc(chebleg_leg_dd__-chebleg_int_dd__);colorbar;
%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
c_use__ = colormap_81s; n_c_use = size(c_use__,1);
n_z = 1+1024; z_ = transpose(linspace(-1,+1,n_z));
hold on;
for l_val=0:l_max;
nc_use = max(0,min(n_c_use-1,floor(n_c_use*l_val/l_max)));
plot(z_,chebleg_d_{1+l_val}(z_),'-','Color',c_use__(1+nc_use,:));
plot(leg_node_,chebleg_d_{1+l_val}(leg_node_),':','Color',c_use__(1+nc_use,:));
end;%for l_val=0:l_max;
hold off;
xlabel('z'); ylabel('P(z)'); title('legendre polynomials'); grid on;
end;%if flag_disp;
%%%%;
% Note that the distance 3*sigma_kernel_crit (i.e., 3 standard-deviations of gaussian) ;
% corresponds to an angle of polar_a = 3*sigma_kernel_crit, implying a z-value of cos(polar_a). ;
%%%%;
polar_a_kernel_crit = 3*sigma_kernel_crit;
n_a_use = 1+2*l_max + 16; %<-- Need to integrate polynomials of degree l_max^2. ;
[a_drop_node_,a_drop_weight_] = legpts(n_a_use,[polar_a_kernel_crit,pi]);
[a_keep_node_,a_keep_weight_] = legpts(n_a_use,[0 ,polar_a_kernel_crit]);
leg_drop_da__ = zeros(1+l_max,n_a_use);
for l_val=0:l_max;
leg_drop_da__(1+l_val,:) = chebleg_d_{1+l_val}(cos(a_drop_node_));
end;%for l_val=0:l_max;
%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
c_use__ = colormap_81s; n_c_use = size(c_use__,1);
hold on;
for l_val=0:l_max;
nc_use = max(0,min(n_c_use-1,floor(n_c_use*l_val/l_max)));
plot(a_drop_node_,leg_drop_da__(1+l_val,:),'-','Color',c_use__(1+nc_use,:));
end;%for l_val=0:l_max;
hold off;
xlabel('a'); ylabel('P(cos(a))'); title('legendre polynomials'); grid on;
end;%if flag_disp;
%%%%;
% Note leg_drop_da__(1+l_val,1+na) evaluates legendre-polynomial of degree l_val at a_drop_node_(1+na). ;
% The square-integral: ;
% \int_{polar_a = 3*sigma_kernel_crit}^{1*pi} \int_{azimu_b = 0}^{2*pi} [\sum_{d} c_{d} P_{d}(cos(polar_a))]^{2} * sin(polar_a) dpolar_a dazimu_b ;
% = 2*pi * \sum_{na} [\sum_{d0} c_{d0} P_{d0}(cos(a_drop_node_(1+na)))]*[\sum_{d1} c_{d1} P_{d1}(cos(a_drop_node_(1+na)))] * sin(a_drop_node_(1+na)) * a_drop_weight_(1+na) ;
% = \sum_{d0,d1}  c_{d0} * [2*pi * \sum_{na} leg_drop_da__(1+d0,1+na)*leg_drop_da__(1+d1,1+na)*sin(a_drop_node_(1+na))*a_drop_weight_(1+na)] * c_{d1}  ;
% = transpose(c_) * E_cc__ * c_ ;
%%%%;
E_cc__ = zeros(1+l_max,1+l_max);
for l_val_0=0:l_max;
for l_val_1=0:l_max;
E_cc__(1+l_val_0,1+l_val_1) = 2*pi * a_drop_weight_*(chebleg_d_{1+l_val_0}(cos(a_drop_node_)).*chebleg_d_{1+l_val_1}(cos(a_drop_node_)).*sin(a_drop_node_));
end;%for l_val_1=0:l_max;
end;%for l_val_0=0:l_max;
[U_E__,S_E__,V_E__] = svd(E_cc__); S_E_ = diag(S_E__);
u_sml_ = U_E__(:,end);
chebfun_kernel_crit_ = chebfun(0);
for l_val=0:l_max;
chebfun_kernel_crit_ = chebfun_kernel_crit_ + u_sml_(1+l_val)*chebleg_d_{1+l_val};
end;%for l_val=0:l_max;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
c_use__ = colormap_81s; n_c_use = size(c_use__,1);
subplot(1,3,[1,2]);
n_z = 1+1024; z_ = transpose(linspace(-1,+1,n_z));
hold on;
for l_val=0:l_max;
nc_use = max(0,min(n_c_use-1,floor(n_c_use*l_val/l_max)));
plot(z_,chebleg_d_{1+l_val}(z_),'-','Color',c_use__(1+nc_use,:));
end;%for l_val=0:l_max;
plot(z_,chebfun_kernel_crit_(z_),'-','Color','k','LineWidth',3);
hold off;
xlabel('z'); ylabel('P(z)'); title('legendre polynomials'); grid on;
subplot(1,3,3);
l_val_ = transpose([0:l_max]);
plot(l_val_,u_sml_,'o-');
xlabel('l_val','Interpreter','none');
ylabel('u_sml_','Interpreter','none');
title('scaling factor','Interpreter','none');
end;%if flag_disp;
s_e = sum(2*pi*a_drop_weight_*(chebfun_kernel_crit_(cos(a_drop_node_)).^2.*sin(a_drop_node_)));
if (flag_verbose>0); disp(sprintf(' %% min(S_E_): %0.16f',min(S_E_))); end;
if (flag_verbose>0); disp(sprintf(' %% s_e: %0.16f',s_e)); end;
if (flag_verbose>0); disp(sprintf(' %% min(S_E_) vs s_e: %0.16f',fnorm(min(S_E_)-s_e)/fnorm(min(S_E_)))); end;
const_avg = ...
  sum(2*pi*a_drop_weight_*(chebleg_d_{1+0}(cos(a_drop_node_)).^1.*sin(a_drop_node_))) ...
+ sum(2*pi*a_keep_weight_*(chebleg_d_{1+0}(cos(a_keep_node_)).^1.*sin(a_keep_node_))) ...
;
chebfun_kernel_crit_avg = ...
  sum(2*pi*a_drop_weight_*(chebfun_kernel_crit_(cos(a_drop_node_)).^1.*sin(a_drop_node_))) ...
+ sum(2*pi*a_keep_weight_*(chebfun_kernel_crit_(cos(a_keep_node_)).^1.*sin(a_keep_node_))) ...
;
chebfun_kernel_crit_avg = chebfun_kernel_crit_avg/const_avg;
if (flag_verbose>0); disp(sprintf(' %% chebfun_kernel_crit_avg: %0.16f',chebfun_kernel_crit_avg)); end;
%%%%;

%%%%;
% More generally, we will need to consider the following: ;
% l_max = largest l_val. ;
% polar_a_kernel_crit = requested sparsity. ;
% s_e = min(S_E_) = square-integral ignored. ;
% factor_scaling_min = smallest scaling-factor. ;
%%%%
n_polar_a_kernel_crit = 1+32;
polar_a_kernel_crit_ = sigma_kernel_crit*transpose(3.^linspace(-2,+2,n_polar_a_kernel_crit));
s_e_keep_k_ = zeros(n_polar_a_kernel_crit,1);
s_e_drop_k_ = zeros(n_polar_a_kernel_crit,1);
chebfun_kernel_crit_k__ = cell(n_polar_a_kernel_crit,1);
factor_scaling_lk__ = zeros(1+l_max,n_polar_a_kernel_crit);
for npolar_a_kernel_crit=0:n_polar_a_kernel_crit-1;
polar_a_kernel_crit = polar_a_kernel_crit_(1+npolar_a_kernel_crit);
if (flag_verbose>0); disp(sprintf(' %% npolar_a_kernel_crit %.2d/%.2d polar_a_kernel_crit %0.6f',npolar_a_kernel_crit,n_polar_a_kernel_crit,polar_a_kernel_crit)); end;
n_a_use = 1+2*l_max + 16; %<-- Need to integrate polynomials of degree l_max^2. ;
[a_drop_node_,a_drop_weight_] = legpts(n_a_use,[polar_a_kernel_crit,pi]);
[a_keep_node_,a_keep_weight_] = legpts(n_a_use,[0 ,polar_a_kernel_crit]);
leg_drop_da__ = zeros(1+l_max,n_a_use);
leg_keep_da__ = zeros(1+l_max,n_a_use);
for l_val=0:l_max;
leg_drop_da__(1+l_val,:) = chebleg_d_{1+l_val}(cos(a_drop_node_));
leg_keep_da__(1+l_val,:) = chebleg_d_{1+l_val}(cos(a_keep_node_));
end;%for l_val=0:l_max;
%%;
tmp_E_cc__ = zeros(1+l_max,1+l_max);
for l_val_0=0:l_max;
for l_val_1=0:l_max;
tmp_E_cc__(1+l_val_0,1+l_val_1) = 2*pi * a_drop_weight_*(chebleg_d_{1+l_val_0}(cos(a_drop_node_)).*chebleg_d_{1+l_val_1}(cos(a_drop_node_)).*sin(a_drop_node_));
end;%for l_val_1=0:l_max;
end;%for l_val_0=0:l_max;
[tmp_U_E__,tmp_S_E__,tmp_V_E__] = svd(tmp_E_cc__); tmp_S_E_ = diag(tmp_S_E__);
tmp_factor_scaling_ = tmp_U_E__(:,end); tmp_factor_scaling_ = tmp_factor_scaling_*sign(tmp_factor_scaling_(1+0));
tmp_chebfun_kernel_crit_ = chebfun(0);
for l_val=0:l_max;
tmp_chebfun_kernel_crit_ = tmp_chebfun_kernel_crit_ + tmp_factor_scaling_(1+l_val)*chebleg_d_{1+l_val};
end;%for l_val=0:l_max;
tmp_s_e_drop = sum(2*pi*a_drop_weight_*(tmp_chebfun_kernel_crit_(cos(a_drop_node_)).^2.*sin(a_drop_node_)));
tmp_s_e_keep = sum(2*pi*a_keep_weight_*(tmp_chebfun_kernel_crit_(cos(a_keep_node_)).^2.*sin(a_keep_node_)));
chebfun_kernel_crit_k__{1+npolar_a_kernel_crit} = tmp_chebfun_kernel_crit_;
factor_scaling_lk__(:,1+npolar_a_kernel_crit) = tmp_factor_scaling_;
s_e_drop_k_(1+npolar_a_kernel_crit) = tmp_s_e_drop;
s_e_keep_k_(1+npolar_a_kernel_crit) = tmp_s_e_keep;
%%;
end;%for npolar_a_kernel_crit=0:n_polar_a_kernel_crit-1;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,3,1); plot(polar_a_kernel_crit_,s_e_drop_k_,'.'); xlabel('polar_a_kernel_crit_','Interpreter','none'); ylabel('s_e_drop_k_','Interpreter','none');
subplot(1,3,2); plot(polar_a_kernel_crit_,s_e_keep_k_,'.'); xlabel('polar_a_kernel_crit_','Interpreter','none'); ylabel('s_e_keep_k_','Interpreter','none');
subplot(1,3,3); plot(polar_a_kernel_crit_,min(factor_scaling_lk__,[],1),'.'); xlabel('polar_a_kernel_crit_','Interpreter','none'); ylabel('min(factor_scaling_lk__,[],1)','Interpreter','none');
end;%if flag_disp;
%%%%%%%%;

%%%%%%%%;
% Again we try and form a kernel with a small support. ;
% Here we attempt quadratic-minimization with linear-constraints, ;
% resulting in a quadratic-program. ;
%%%%%%%%;
polar_a_kernel_qpro = 3*sigma_kernel_crit;
deconvolution_factor_max = 128;
n_a_use = 1+2*l_max + 16; %<-- Need to integrate polynomials of degree l_max^2. ;
[a_drop_node_,a_drop_weight_] = legpts(n_a_use,[polar_a_kernel_qpro,pi]);
[a_keep_node_,a_keep_weight_] = legpts(n_a_use,[0 ,polar_a_kernel_qpro]);
leg_drop_da__ = zeros(1+l_max,n_a_use);
for l_val=0:l_max;
leg_drop_da__(1+l_val,:) = chebleg_d_{1+l_val}(cos(a_drop_node_));
end;%for l_val=0:l_max;
%%%%;
E_cc__ = zeros(1+l_max,1+l_max);
for l_val_0=0:l_max;
for l_val_1=0:l_max;
E_cc__(1+l_val_0,1+l_val_1) = 2*pi * a_drop_weight_*(chebleg_d_{1+l_val_0}(cos(a_drop_node_)).*chebleg_d_{1+l_val_1}(cos(a_drop_node_)).*sin(a_drop_node_));
end;%for l_val_1=0:l_max;
end;%for l_val_0=0:l_max;
lb_ = zeros(1+l_max,1); %<-- lower-bound. ;
lb_(1+0) = sqrt(1+2*0)*sqrt(4*pi); %<-- ensure average is constant. ;
lb_(1+[1:l_max]) = sqrt(1+2*[1:l_max])*sqrt(4*pi)./max(1e-12,deconvolution_factor_max); %<-- ensure deconvolution_factor_max. ;
ub_ = zeros(1+l_max,1); %<-- lower-bound. ;
ub_(1+0) = sqrt(1+2*0)*sqrt(4*pi); %<-- ensure average is constant. ;
ub_(1+[1:l_max]) = sqrt(1+2*[1:l_max])*sqrt(4*pi).*max(1e-12,deconvolution_factor_max); %<-- ensure deconvolution_factor_max. ;
tmp_H = E_cc__;
tmp_f = []; tmp_A = []; tmp_b = []; tmp_Aeq = []; tmp_beq = []; tmp_lb = lb_; tmp_ub = ub_; tmp_x0 = sqrt(1+2*l_val_)*sqrt(4*pi);
kappa_ = quadprog( ...
 tmp_H ...
,tmp_f ...
,tmp_A ...
,tmp_b ...
,tmp_Aeq ...
,tmp_beq ...
,tmp_lb ...
,tmp_ub ...
,tmp_x0 ...
);
chebfun_kernel_qpro_ = chebfun(0);
for l_val=0:l_max;
chebfun_kernel_qpro_ = chebfun_kernel_qpro_ + kappa_(1+l_val)*chebleg_d_{1+l_val};
end;%for l_val=0:l_max;
const_avg = ...
  sum(2*pi*a_drop_weight_*(chebleg_d_{1+0}(cos(a_drop_node_)).^1.*sin(a_drop_node_))) ...
+ sum(2*pi*a_keep_weight_*(chebleg_d_{1+0}(cos(a_keep_node_)).^1.*sin(a_keep_node_))) ...
;
chebfun_kernel_qpro_avg = ...
  sum(2*pi*a_drop_weight_*(chebfun_kernel_qpro_(cos(a_drop_node_)).^1.*sin(a_drop_node_))) ...
+ sum(2*pi*a_keep_weight_*(chebfun_kernel_qpro_(cos(a_keep_node_)).^1.*sin(a_keep_node_))) ...
;
chebfun_kernel_qpro_avg = chebfun_kernel_qpro_avg/const_avg;
if (flag_verbose>0); disp(sprintf(' %% chebfun_kernel_qpro_avg: %0.16f',chebfun_kernel_qpro_avg)); end;
chebfun_kernel_norm_qpro_ = chebfun_kernel_qpro_ / max(1e-12,chebfun_kernel_qpro_avg) ;
kappa_norm_ = kappa_ / max(1e-12,chebfun_kernel_qpro_avg) ;
%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
c_use__ = colormap_81s; n_c_use = size(c_use__,1);
subplot(1,3,[1,2]);
n_z = 1+1024; z_ = transpose(linspace(-1,+1,n_z));
hold on;
for l_val=0:l_max;
nc_use = max(0,min(n_c_use-1,floor(n_c_use*l_val/l_max)));
plot(z_,chebleg_d_{1+l_val}(z_),'-','Color',c_use__(1+nc_use,:));
end;%for l_val=0:l_max;
plot(log(1.0-z_),chebfun_kernel_crit_(z_)/chebfun_kernel_crit_avg,'-','Color','k','LineWidth',3);
plot(log(1-0-z_),chebfun_kernel_qpro_(z_)/chebfun_kernel_qpro_avg,'-','Color',0.85*[1,1,1],'LineWidth',3);
hold off;
xlabel('log(1-z)'); ylabel('P(z)'); title('legendre polynomials'); grid on;
subplot(1,3,3);
l_val_ = transpose([0:l_max]);
hold on;
plot(l_val_,u_sml_/chebfun_kernel_crit_avg,'o-','Color','k','LineWidth',3);
plot(l_val_,kappa_/chebfun_kernel_qpro_avg,'x-','Color',0.85*[1,1,1],'LineWidth',3);
hold off;
xlabel('l_val','Interpreter','none');
ylabel('u_sml_','Interpreter','none');
title('scaling factor','Interpreter','none');
end;%if flag_disp;
s_e = sum(2*pi*a_drop_weight_*(chebfun_kernel_crit_(cos(a_drop_node_)).^2./chebfun_kernel_crit_avg.^2.*sin(a_drop_node_)));
r_e = sum(2*pi*a_drop_weight_*(chebfun_kernel_qpro_(cos(a_drop_node_)).^2./chebfun_kernel_qpro_avg.^2.*sin(a_drop_node_)));
if (flag_verbose>0); disp(sprintf(' %% s_e: %0.16f',s_e)); end;
if (flag_verbose>0); disp(sprintf(' %% r_e: %0.16f',r_e)); end;
%%%%;

%%%%;
% Now we reconstruct the kernel in k_p_ ;
% and see how well resolved it is on polar_a_shell_ and azimu_b_shell_. ;
%%%%;
kernel_qpro_k_Y_form_ = zeros(n_lm,1);
kernel_qpro_k_Y_form_(1+l_val_.^2 + l_val_) = kappa_norm_;
[ ...
 kernel_qpro_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,kernel_qpro_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
if (flag_verbose>0); disp(sprintf(' %% sum(kernel_qpro_k_p_quad_.*weight_shell_): %0.6f',sum(kernel_qpro_k_p_quad_.*weight_shell_))); end;
if (flag_verbose>0); disp(sprintf(' %% sum(kernel_qpro_k_p_quad_.*weight_shell_)*chebfun_kernel_qpro_avg/(4*pi): %0.6f',sum(kernel_qpro_k_p_quad_.*weight_shell_)*chebfun_kernel_qpro_avg/(4*pi))); end;
if (flag_verbose>0); disp(sprintf(' %% chebfun_kernel_norm_qpro_(cos(polar_a_shell_)) vs kernel_qpro_k_p_quad_*sqrt(2*pi): %0.16f',fnorm(chebfun_kernel_norm_qpro_(cos(polar_a_shell_))-kernel_qpro_k_p_quad_*sqrt(2*pi))/max(1e-12,fnorm(chebfun_kernel_norm_qpro_(cos(polar_a_shell_)))))); end;
[ ...
 kernel_qpro_k_Y_quad_ ...
] = ...
convert_k_p_to_spharm_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,kernel_qpro_k_p_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
if (flag_verbose>0); disp(sprintf(' %% kernel_qpro_k_Y_form_ vs kernel_qpro_k_Y_quad_: %0.16f',fnorm(kernel_qpro_k_Y_form_-kernel_qpro_k_Y_quad_)/fnorm(kernel_qpro_k_Y_form_))); end;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figsml;
klim_ = [0,prctile(chebfun_kernel_norm_qpro_(cos(a_keep_node_)),99.5)];
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,real(kernel_qpro_k_p_quad_) ... 
,klim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_1 ...
);
title('real(kernel_qpro_k_p_quad_)','Interpreter','none');
end;%if flag_disp;

%%%%;
% Now we place a point-source (i.e., delta-function) somewhere on the sphere, ;
% mollify it via the kernel_qpro_, ;
% then calculate the associated spherical-harmonics, ;
% then compare the result with the rotated kernel. ;
%%%%;
% For this calculation we use a quadrature-reference grid (qref). ;
%%%%;
qbp_deconvolution_factor_max = deconvolution_factor_max;
%qref_k_eq_d = sqrt(4*pi./max(1,n_lm)); %<-- older setting from qbp_6. consider changing. ;
qref_k_eq_d = 0.5*sqrt(4*pi./max(1,n_lm)); %<-- one half the older setting from qbp_6. increased density of quadrature points. ;
n_ring = ceil(polar_a_kernel_qpro/max(1e-12,qref_k_eq_d)); %<-- number of nearest neighbor-rings requested for each point. ;
n_nearest = 1+6*n_ring*(n_ring+1)/2; %<-- rough number of neighbors on hexagonal grid (i.e., 1+6+12+18+...). ;
if (flag_verbose>0); disp(sprintf(' %% qref_k_eq_d %0.6f n_nearest_k %d',qref_k_eq_d,n_nearest)); end;
%%%%;
tmp_t = tic();
[ ...
 qref_n_shell ...
,qref_azimu_b_shell_ ...
,qref_polar_a_shell_ ...
,qref_weight_shell_ ...
,qref_k_c_0_shell_ ...
,qref_k_c_1_shell_ ...
,qref_k_c_2_shell_ ...
,qref_n_polar_a ...
,qref_polar_a_ ...
,qref_n_azimu_b_ ...
] = ...
sample_shell_5( ...
 1.0 ...
,qref_k_eq_d ...
,'L' ...
) ;
qref_k_c_qd__ = [ qref_k_c_0_shell_ , qref_k_c_1_shell_ , qref_k_c_2_shell_ ];
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% sample_shell_5 (should be a precomputation): %0.2fs',tmp_t)); end;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figsml;
markersize_use = 1;
plot_sphere_grid_0;
hold on;
plot3(qref_k_c_0_shell_,qref_k_c_1_shell_,qref_k_c_2_shell_,'k.','MarkerSize',markersize_use);
hold off;
axis equal; axisnotick3d; axis vis3d;
end;%if flag_disp;
%%%%;
tmp_t = tic();
Ylm__ = get_Ylm__1(1+l_max,0:l_max,qref_n_shell,qref_azimu_b_shell_,qref_polar_a_shell_);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% get_Ylm__1 (should be a precomputation): %0.2fs',tmp_t)); end;
tmp_t = tic();
Ylm_yq__ = zeros(n_lm,qref_n_shell);
Y_l_val_ = zeros(n_lm,1);
Y_m_val_ = zeros(n_lm,1);
nml=0;
for l_val=0:l_max;
for m_val=-l_val:+l_val;
Y_l_val_(1+nml) = l_val;
Y_m_val_(1+nml) = m_val;
Ylm_yq__(1+nml,:) = Ylm__{1+l_val}(1+l_val+m_val,:);
nml=nml+1;
end;%for m_val=-l_val:+l_val;
end;%for l_val=0:l_max;
Ylm_weight_yq__ = Ylm_yq__ * sparse(1:qref_n_shell,1:qref_n_shell,qref_weight_shell_,qref_n_shell,qref_n_shell);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% Ylm_weight_yq__ (should be a precomputation): %0.2fs',tmp_t)); end;
%%%%;
deconvolve_lm_ = (sqrt(4*pi)*sqrt(1+2*Y_l_val_))./max(1e-12,kappa_norm_(1+Y_l_val_));
if flag_disp;
figure(1+nf);nf=nf+1;clf;figsml;
linewidth_use = 3;
plot(Y_l_val_,deconvolve_lm_,'k-','LineWidth',linewidth_use);
xlabel('Y_l_val_','Interpreter','none');
ylabel('deconvolve_lm_','Interpreter','none');
grid on;
end;%if flag_disp;
%%%%;
Rz = @(azimu_b) ...
[ +cos(azimu_b) -sin(azimu_b) 0 ; ...
  +sin(azimu_b) +cos(azimu_b) 0 ; ...
   0             0            1 ; ...
] ;
Ry = @(polar_a) ...
[ +cos(polar_a) 0 +sin(polar_a) ; ...
   0            1  0            ; ...
  -sin(polar_a) 0 +cos(polar_a) ; ...
];
tmp_I__ = eye(3,3);
tmp_I_pole_ = tmp_I__*[0;0;1];
tmp_I_d2_ = (qref_k_c_0_shell_ - tmp_I_pole_(1+0)).^2 + (qref_k_c_1_shell_ - tmp_I_pole_(1+1)).^2 + (qref_k_c_2_shell_ - tmp_I_pole_(1+2)).^2 ;
tmp_I_arc_ = acos(1-tmp_I_d2_/2);
tmp_I_ker_ = chebfun_kernel_norm_qpro_(cos(tmp_I_arc_));
tmp_euler_a = 3*pi/8;
tmp_euler_b = pi/12;
tmp_euler_c = pi/4;
tmp_R__ = Rz(tmp_euler_b)*Ry(tmp_euler_a)*Rz(tmp_euler_c);
tmp_R_pole_ = tmp_R__*[0;0;1];
tmp_R_d2_ = (qref_k_c_0_shell_ - tmp_R_pole_(1+0)).^2 + (qref_k_c_1_shell_ - tmp_R_pole_(1+1)).^2 + (qref_k_c_2_shell_ - tmp_R_pole_(1+2)).^2 ;
tmp_R_arc_ = acos(1-tmp_R_d2_/2);
tmp_R_ker_ = chebfun_kernel_norm_qpro_(cos(tmp_R_arc_));
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
p_row = 1; p_col = 3; np=0;
subplot(p_row,p_col,1+np);np=np+1;
alim_ = [0,prctile(tmp_R_arc_,99.5)];
imagesc_polar_a_azimu_b_0( ...
 qref_polar_a_shell_ ... 
,qref_azimu_b_shell_ ... 
,real(tmp_R_arc_) ... 
,alim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_1 ...
);
hold on;
plot3(tmp_R_pole_(1+0),tmp_R_pole_(1+1),tmp_R_pole_(1+2),'wo','MarkerFaceColor','g');
hold off;
title('real(tmp_R_arc_)','Interpreter','none');
subplot(p_row,p_col,1+np);np=np+1;
klim_ = prctile(chebfun_kernel_norm_qpro_(cos(a_keep_node_)),75)*[-1,+1];
imagesc_polar_a_azimu_b_0( ...
 qref_polar_a_shell_ ... 
,qref_azimu_b_shell_ ... 
,real(tmp_I_ker_) ... 
,klim_ ... 
,colormap_80s ... 
,flag_2d_vs_3d ...
,k_p_r_1 ...
);
hold on;
plot3(tmp_I_pole_(1+0),tmp_I_pole_(1+1),tmp_I_pole_(1+2),'wo','MarkerFaceColor','g');
hold off;
title('real(tmp_I_ker_)','Interpreter','none');
subplot(p_row,p_col,1+np);np=np+1;
klim_ = prctile(chebfun_kernel_norm_qpro_(cos(a_keep_node_)),75)*[-1,+1];
imagesc_polar_a_azimu_b_0( ...
 qref_polar_a_shell_ ... 
,qref_azimu_b_shell_ ... 
,real(tmp_R_ker_) ...
,klim_ ... 
,colormap_80s ... 
,flag_2d_vs_3d ...
,k_p_r_1 ...
);
hold on;
plot3(tmp_R_pole_(1+0),tmp_R_pole_(1+1),tmp_R_pole_(1+2),'wo','MarkerFaceColor','g');
hold off;
title('real(tmp_R_ker_)','Interpreter','none');
end;%if flag_disp;
%%%%;
a_I_I_k_Y_lm_ = conj(Ylm_weight_yq__)*tmp_I_ker_;
a_I_R_k_Y_lm_ = conj(Ylm_weight_yq__)*tmp_R_ker_;
tmp_euler_ = [tmp_euler_b,tmp_euler_a,tmp_euler_c];
tmp_euler_pos_ = [tmp_euler_c,tmp_euler_a,tmp_euler_b]; tmp_euler_neg_ = -flip(tmp_euler_pos_);
a_R_I_k_Y_lm_ = rotate_spharm_to_spharm_3(1,1,l_max,a_I_I_k_Y_lm_,tmp_euler_pos_);
a_R_R_k_Y_lm_ = rotate_spharm_to_spharm_3(1,1,l_max,a_I_R_k_Y_lm_,tmp_euler_neg_);
if (flag_verbose>0); disp(sprintf(' %% a_R_I_k_Y_lm_ vs a_I_R_k_Y_lm_: %0.16f',fnorm(a_R_I_k_Y_lm_ - a_I_R_k_Y_lm_)/fnorm(a_R_I_k_Y_lm_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_I_I_k_Y_lm_ vs a_R_R_k_Y_lm_: %0.16f',fnorm(a_I_I_k_Y_lm_ - a_R_R_k_Y_lm_)/fnorm(a_I_I_k_Y_lm_))); end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
disp('returning'); return;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;


%%%%%%%%;
% Now set up a_k_Y_form_ for later use. ;
%%%%%%%%;
a_k_Y_form_ = zeros(n_lm,1);
Y_l_use = +4; Y_m_use = -3;
%Y_l_use = +48; Y_m_use = -38;
a_k_Y_form_ = +1.0.*(Y_l_val_==Y_l_use).*(Y_m_val_==Y_m_use);
[ ...
 a_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,a_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%%%%%;
[ ...
 a_k_Y_quad_ ...
] = ...
convert_k_p_to_spharm_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,a_k_p_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_form_ vs a_k_Y_quad_: %0.16f',fnorm(a_k_Y_form_-a_k_Y_quad_)/fnorm(a_k_Y_form_))); end;
%%%%%%%%;
n_w = 2*2*l_max;
viewing_k_eq_d = 0.5*1.0/k_p_r_max;
[ ...
 S_k_p_wS__ ...
,~ ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
] = ...
pm_template_2( ...
 flag_verbose ...
,l_max ...
,n_k_p_r ...
,a_k_Y_form_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w ...
);
n_S = n_viewing_S;
if (flag_verbose>0); disp(sprintf(' %% n_w %d, viewing_k_eq_d %0.6f, n_S %d',n_w,viewing_k_eq_d,n_S)); end;
S_k_p_wS__ = reshape(S_k_p_wS__,[n_w,n_S]);
%%%%%%%%;

%%%%%%%%;
% test uniform distribution of images. ;
%%%%%%%%;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,a_k_Y_0qbp_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_S ...
,S_k_p_wS__ ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
);
%%%%%%%%;
[ ...
 a_k_p_0qbp_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,a_k_Y_0qbp_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%%%%%;
if flag_disp;
flag_2d_vs_3d = 0; %<-- 3d;
alim_ = prctile(real(a_k_p_quad_),[5,95]); alim_ = mean(alim_) + 0.5*1.25*diff(alim_)*[-1,+1];
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,2,1);
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,real(a_k_p_quad_) ... 
,alim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_1 ...
);
title('real(a_k_p_quad_)','Interpreter','none');
subplot(1,2,2);
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,real(a_k_p_0qbp_) ... 
,alim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_1 ...
);
title('real(a_k_p_0qbp_)','Interpreter','none');
sgtitle('true (left) vs reconstruction (right)','Interpreter','none');
end;%if flag_disp;
%%%%%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,3,1); plot(Y_l_val_,abs(a_k_Y_form_-a_k_Y_0qbp_),'.');
xlabel('Y_l_val_','Interpreter','none'); ylabel('abs(a_k_Y_form_-a_k_Y_0qbp_)','Interpreter','none'); grid on;
title('error vs l','Interpreter','none');
subplot(1,3,2); plot(Y_m_val_,abs(a_k_Y_form_-a_k_Y_0qbp_),'.');
xlabel('Y_m_val_','Interpreter','none'); ylabel('abs(a_k_Y_form_-a_k_Y_0qbp_)','Interpreter','none'); grid on;
title('error vs m','Interpreter','none');
disp(sprintf(' %% a_k_Y_form_ vs a_k_Y_0qbp_: %0.16f',fnorm(a_k_Y_form_-a_k_Y_0qbp_)/fnorm(a_k_Y_form_)));
subplot(1,3,3); plot(abs(a_k_Y_form_),abs(a_k_Y_0qbp_),'o');
xlabel('abs(a_k_Y_form_)','Interpreter','none'); ylabel('abs(a_k_Y_0qbp_)','Interpreter','none'); grid on;
title('scatterplot','Interpreter','none');
end;%if flag_disp;
%%%%%%%%;

%%%%%%%%;
% Now test nonuniform distribution of images. ;
% We select a subset of the templates and duplicate their appearance while retaining their amplitude.
%%%%%%%%;
index_nS_from_nM_ = transpose([0:n_S-1]); index_nS_from_nM_ = [repmat(index_nS_from_nM_(1:floor(n_S/4)),[3,1]);index_nS_from_nM_];
n_M = numel(index_nS_from_nM_);
index_MS__ = sparse(1+[0:n_M-1],1+index_nS_from_nM_,1,n_M,n_S);
index_sum_S_ = sum(index_MS__,1); %<-- number of times each S_k_p_w_ is used. ;
index_sum_M_ = index_sum_S_(1+index_nS_from_nM_); %<-- number of identical copies of each M_k_p_w_. ;
M_k_p_wM__ = zeros(n_w,n_M);
%M_k_p_wM__ = bsxfun(@rdivide,S_k_p_wS__(:,1+index_nS_from_nM_),reshape(max(1e-12,index_sum_M_),[1,n_M])); %<-- reduce amplitude. ;
M_k_p_wM__ = S_k_p_wS__(:,1+index_nS_from_nM_); %<-- retain amplitude. ;
viewing_polar_a_M_ = viewing_polar_a_S_(1+index_nS_from_nM_);
viewing_azimu_b_M_ = viewing_azimu_b_S_(1+index_nS_from_nM_);
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,a_k_Y_1qbp_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_M ...
,M_k_p_wM__ ...
,[] ...
,[] ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
);
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_0qbp_ vs a_k_Y_1qbp_: %0.16f',fnorm(a_k_Y_0qbp_-a_k_Y_1qbp_)/fnorm(a_k_Y_0qbp_))); end;

%%%%%%%%;
% Now test the same nonuniform distribution of images, ;
% except this time give each image an in-plane rotation. ;
%%%%%%%%;
viewing_gamma_z_N_ = 2*pi*transpose([0:n_M-1])/n_M;
N_k_p_wM__ = M_k_p_wM__;
for nM=0:n_M-1; N_k_p_wM__(:,1+nM) = rotate_p_to_p(1,n_w,n_w,M_k_p_wM__(:,1+nM),+viewing_gamma_z_N_(1+nM)); end;%for nM=0:n_M-1;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,a_k_Y_2qbp_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_M ...
,N_k_p_wM__ ...
,[] ...
,[] ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_0qbp_ vs a_k_Y_2qbp_: %0.16f',fnorm(a_k_Y_0qbp_-a_k_Y_2qbp_)/fnorm(a_k_Y_0qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_1qbp_ vs a_k_Y_2qbp_: %0.16f',fnorm(a_k_Y_1qbp_-a_k_Y_2qbp_)/fnorm(a_k_Y_1qbp_))); end;

%%%%%%%%;
% Now test the same nonuniform distribution of images, ;
% except this time give each image an in-plane rotation, ;
% as well as an image-specific CTF. ;
%%%%%%%%;
n_CTF = 3;
gamma_z_ = transpose(2*pi*[0:n_w-1]/n_w);
CTF_k_p_wC__ = 0.75+0.25*[cos(1*gamma_z_) , sin(2*gamma_z_) , cos(3*gamma_z_)]; %<-- anisotropic. ;
%CTF_k_p_wC__ = 0.75+0.25*[0.1*cos(0*gamma_z_) , 0.5*cos(0*gamma_z_) , 0.9*cos(0*gamma_z_)]; %<-- isotropic. ;
index_nCTF_from_nN_ = mod(transpose([0:n_M-1]),n_CTF);
viewing_gamma_z_N_ = 1*2*pi*transpose([0:n_M-1])/n_M; %<-- yes image-dependent in-plane rotation. ;
%viewing_gamma_z_N_ = 0*2*pi*transpose([0:n_M-1])/n_M; %<-- not image-dependent in-plane rotation. ;
N_k_p_wM__ = M_k_p_wM__;
for nM=0:n_M-1;
M_k_p_w_ = M_k_p_wM__(:,1+nM);
viewing_gamma_z = viewing_gamma_z_N_(1+nM);
nCTF = index_nCTF_from_nN_(1+nM);
CTF_k_p_w_ = CTF_k_p_wC__(:,1+nCTF);
N_k_p_w_ = rotate_p_to_p(1,n_w,n_w,M_k_p_w_.*CTF_k_p_w_,+viewing_gamma_z);
N_k_p_wM__(:,1+nM) = N_k_p_w_;
clear M_k_p_w_ viewing_gamma_z nCTF CTF_k_p_w_ N_k_p_w_ ;
end;%for nM=0:n_M-1;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,a_k_Y_3qbp_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_M ...
,N_k_p_wM__ ...
,index_nCTF_from_nN_ ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_0qbp_ vs a_k_Y_3qbp_: %0.16f',fnorm(a_k_Y_0qbp_-a_k_Y_3qbp_)/fnorm(a_k_Y_0qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_1qbp_ vs a_k_Y_3qbp_: %0.16f',fnorm(a_k_Y_1qbp_-a_k_Y_3qbp_)/fnorm(a_k_Y_1qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_2qbp_ vs a_k_Y_3qbp_: %0.16f',fnorm(a_k_Y_2qbp_-a_k_Y_3qbp_)/fnorm(a_k_Y_2qbp_))); end;

%%%%%%%%;
% Now measure the moments. ;
% Use the same nonuniform distribution of images, ;
% again giving each image an in-plane rotation, ;
% as well as an image-specific CTF. ;
%%%%%%%%;
n_CTF = 3;
gamma_z_ = transpose(2*pi*[0:n_w-1]/n_w);
CTF_k_p_wC__ = 0.75+0.25*[cos(1*gamma_z_) , sin(2*gamma_z_) , cos(3*gamma_z_)]; %<-- anisotropic. ;
%CTF_k_p_wC__ = 0.75+0.25*[0.1*cos(0*gamma_z_) , 0.5*cos(0*gamma_z_) , 0.9*cos(0*gamma_z_)]; %<-- isotropic. ;
index_nCTF_from_nN_ = mod(transpose([0:n_M-1]),n_CTF);
viewing_gamma_z_N_ = 1*2*pi*transpose([0:n_M-1])/n_M; %<-- yes image-dependent in-plane rotation. ;
%viewing_gamma_z_N_ = 0*2*pi*transpose([0:n_M-1])/n_M; %<-- not image-dependent in-plane rotation. ;
N_k_p_wM__ = M_k_p_wM__;
for nM=0:n_M-1;
M_k_p_w_ = M_k_p_wM__(:,1+nM);
viewing_gamma_z = viewing_gamma_z_N_(1+nM);
nCTF = index_nCTF_from_nN_(1+nM);
CTF_k_p_w_ = CTF_k_p_wC__(:,1+nCTF);
N_k_p_w_ = rotate_p_to_p(1,n_w,n_w,M_k_p_w_.*CTF_k_p_w_,+viewing_gamma_z);
N_k_p_wM__(:,1+nM) = N_k_p_w_;
clear M_k_p_w_ viewing_gamma_z nCTF CTF_k_p_w_ N_k_p_w_ ;
end;%for nM=0:n_M-1;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,a_qbp_k_Y_lm_ ...
,a_evi_k_Y_lm_ ...
,a_var_k_Y_lm_ ...
,a_num_k_Y_lm_ ...
,a_0_k_Y_lm_ ...
,a_1_k_Y_lm_ ...
,a_2_k_Y_lm_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_M ...
,N_k_p_wM__ ...
,index_nCTF_from_nN_ ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
a_k_Y_4qbp_ = a_qbp_k_Y_lm_;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_0qbp_ vs a_k_Y_4qbp_: %0.16f',fnorm(a_k_Y_0qbp_-a_k_Y_4qbp_)/fnorm(a_k_Y_0qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_1qbp_ vs a_k_Y_4qbp_: %0.16f',fnorm(a_k_Y_1qbp_-a_k_Y_4qbp_)/fnorm(a_k_Y_1qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_2qbp_ vs a_k_Y_4qbp_: %0.16f',fnorm(a_k_Y_2qbp_-a_k_Y_4qbp_)/fnorm(a_k_Y_2qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_3qbp_ vs a_k_Y_4qbp_: %0.16f',fnorm(a_k_Y_3qbp_-a_k_Y_4qbp_)/fnorm(a_k_Y_3qbp_))); end;
%%%%%%%%;
a_qbp_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_qbp_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_evi_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_evi_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_var_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_var_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_num_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_num_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_0_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_0_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_1_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_1_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_2_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_2_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
%%%%%%%%;
% Now check for consistency across the moments. ;
% Note that, currently, the variance is negligible. ;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% a_qbp_k_p_all_ vs (a_1_k_p_all_./a_0_k_p_all_): %0.16f',fnorm(a_qbp_k_p_all_ - (a_1_k_p_all_./a_0_k_p_all_))./fnorm(a_qbp_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_evi_k_p_all_ vs a_0_k_p_all_: %0.16f',fnorm(a_evi_k_p_all_ - a_0_k_p_all_)./fnorm(a_evi_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_var_k_p_all_ vs (a_2_k_p_all_./a_0_k_p_all_ - abs(a_1_k_p_all_./a_0_k_p_all_).^2): %0.16f',fnorm(a_var_k_p_all_ - (a_2_k_p_all_./a_0_k_p_all_ - abs(a_1_k_p_all_./a_0_k_p_all_).^2))./fnorm(a_var_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_var_k_p_all_ vs (a_2_k_p_all_./a_0_k_p_all_ - abs(a_qbp_k_p_all_).^2): %0.16f',fnorm(a_var_k_p_all_ - (a_2_k_p_all_./a_0_k_p_all_ - abs(a_qbp_k_p_all_).^2))./fnorm(a_var_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_2_k_p_all_ vs (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_qbp_k_p_all_).^2.*a_evi_k_p_all_): %0.16f',fnorm(a_2_k_p_all_ - (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_qbp_k_p_all_).^2.*a_evi_k_p_all_))./fnorm(a_2_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_2_k_p_all_ vs (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_1_k_p_all_./a_0_k_p_all_).^2.*a_evi_k_p_all_): %0.16f',fnorm(a_2_k_p_all_ - (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_1_k_p_all_./a_0_k_p_all_).^2.*a_evi_k_p_all_))./fnorm(a_2_k_p_all_))); end;
%%%%%%%%;

%%%%%%%%;
% Now measure the ssnll (sigma-squared * negative-log-likelihood). ;
% For this we need to add noise to the images. ;
%%%%%%%%;
flag_isotropic = 0;
flag_noinplane = 0;
flag_zeronoise = 0; sigma_noise = 0.125d0;
n_CTF = 3;
gamma_z_ = transpose(2*pi*[0:n_w-1]/n_w);
if flag_isotropic==0; CTF_k_p_wC__ = 0.75+0.25*[cos(1*gamma_z_) , sin(2*gamma_z_) , cos(3*gamma_z_)]; end; %<-- anisotropic. ;
if flag_isotropic==1; CTF_k_p_wC__ = 0.75+0.25*[0.1*cos(0*gamma_z_) , 0.5*cos(0*gamma_z_) , 0.9*cos(0*gamma_z_)]; end; %<-- isotropic. ;
index_nCTF_from_nN_ = mod(transpose([0:n_M-1]),n_CTF);
if flag_noinplane==0; viewing_gamma_z_N_ = 1*2*pi*transpose([0:n_M-1])/n_M; end; %<-- yes image-dependent in-plane rotation. ;
if flag_noinplane==1; viewing_gamma_z_N_ = 0*2*pi*transpose([0:n_M-1])/n_M; end; %<-- not image-dependent in-plane rotation. ;
O_k_p_wM__ = M_k_p_wM__;
for nM=0:n_M-1;
M_k_p_w_ = M_k_p_wM__(:,1+nM);
viewing_gamma_z = viewing_gamma_z_N_(1+nM);
nCTF = index_nCTF_from_nN_(1+nM);
CTF_k_p_w_ = CTF_k_p_wC__(:,1+nCTF);
if flag_zeronoise==0; %<-- yes add noise. ;
rng(1+nM);
eps_k_p_w_ = sigma_noise/sqrt(2) * crandn(n_w,1); eps_k_p_w_ = eps_k_p_w_ + conj(circshift(eps_k_p_w_,floor(n_w/2))); %<-- conjugacy constraint. ;
O_k_p_w_ = rotate_p_to_p(1,n_w,n_w,M_k_p_w_.*CTF_k_p_w_,+viewing_gamma_z) + eps_k_p_w_;
end;%if flag_zeronoise==0;
if flag_zeronoise==1; %<-- not add noise. ;
O_k_p_w_ = rotate_p_to_p(1,n_w,n_w,M_k_p_w_.*CTF_k_p_w_,+viewing_gamma_z);
end;%if flag_zeronoise==1;
O_k_p_wM__(:,1+nM) = O_k_p_w_;
clear M_k_p_w_ viewing_gamma_z nCTF CTF_k_p_w_ O_k_p_w_ ;
end;%for nM=0:n_M-1;
%%%%%%%%;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,a_qbp_k_Y_lm_ ...
,a_evi_k_Y_lm_ ...
,a_var_k_Y_lm_ ...
,a_num_k_Y_lm_ ...
,a_0_k_Y_lm_ ...
,a_1_k_Y_lm_ ...
,a_2_k_Y_lm_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_M ...
,O_k_p_wM__ ...
,index_nCTF_from_nN_ ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
a_k_Y_5qbp_ = a_qbp_k_Y_lm_;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_0qbp_ vs a_k_Y_5qbp_: %0.16f',fnorm(a_k_Y_0qbp_-a_k_Y_5qbp_)/fnorm(a_k_Y_0qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_1qbp_ vs a_k_Y_5qbp_: %0.16f',fnorm(a_k_Y_1qbp_-a_k_Y_5qbp_)/fnorm(a_k_Y_1qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_2qbp_ vs a_k_Y_5qbp_: %0.16f',fnorm(a_k_Y_2qbp_-a_k_Y_5qbp_)/fnorm(a_k_Y_2qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_3qbp_ vs a_k_Y_5qbp_: %0.16f',fnorm(a_k_Y_3qbp_-a_k_Y_5qbp_)/fnorm(a_k_Y_3qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_4qbp_ vs a_k_Y_5qbp_: %0.16f',fnorm(a_k_Y_4qbp_-a_k_Y_5qbp_)/fnorm(a_k_Y_4qbp_))); end;
%%%%%%%%;
a_qbp_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_qbp_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_evi_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_evi_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_var_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_var_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_num_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_num_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_0_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_0_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_1_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_1_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_2_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_2_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
%%%%%%%%;
% Now check for consistency across the moments. ;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% a_qbp_k_p_all_ vs (a_1_k_p_all_./a_0_k_p_all_): %0.16f',fnorm(a_qbp_k_p_all_ - (a_1_k_p_all_./a_0_k_p_all_))./fnorm(a_qbp_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_evi_k_p_all_ vs a_0_k_p_all_: %0.16f',fnorm(a_evi_k_p_all_ - a_0_k_p_all_)./fnorm(a_evi_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_var_k_p_all_ vs (a_2_k_p_all_./a_0_k_p_all_ - abs(a_1_k_p_all_./a_0_k_p_all_).^2): %0.16f',fnorm(a_var_k_p_all_ - (a_2_k_p_all_./a_0_k_p_all_ - abs(a_1_k_p_all_./a_0_k_p_all_).^2))./fnorm(a_var_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_var_k_p_all_ vs (a_2_k_p_all_./a_0_k_p_all_ - abs(a_qbp_k_p_all_).^2): %0.16f',fnorm(a_var_k_p_all_ - (a_2_k_p_all_./a_0_k_p_all_ - abs(a_qbp_k_p_all_).^2))./fnorm(a_var_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_2_k_p_all_ vs (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_qbp_k_p_all_).^2.*a_evi_k_p_all_): %0.16f',fnorm(a_2_k_p_all_ - (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_qbp_k_p_all_).^2.*a_evi_k_p_all_))./fnorm(a_2_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_2_k_p_all_ vs (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_1_k_p_all_./a_0_k_p_all_).^2.*a_evi_k_p_all_): %0.16f',fnorm(a_2_k_p_all_ - (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_1_k_p_all_./a_0_k_p_all_).^2.*a_evi_k_p_all_))./fnorm(a_2_k_p_all_))); end;
%%%%%%%%;
% Now calculate ssnll. ;
%%%%%%%%;

%%%%;
parameter_ssnll = struct('type','parameter');
parameter_ssnll.flag_verbose = flag_verbose;
[ ...
 parameter_ssnll ...
,ssnll_M ...
] = ...
ssnll_from_S_k_p_single_shell_9( ...
 parameter_ssnll ...
,l_max ...
,n_w ...
,n_S ...
,S_k_p_wS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,n_M ...
,M_k_p_wM__ ...
,[] ...
,[] ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
);
if (flag_verbose>0); disp(sprintf(' %% ssnll_M: %0.16f',ssnll_M)); end;
%%%%;
parameter_ssnll = struct('type','parameter');
parameter_ssnll.flag_verbose = flag_verbose;
[ ...
 parameter_ssnll ...
,ssnll_N ...
] = ...
ssnll_from_S_k_p_single_shell_9( ...
 parameter_ssnll ...
,l_max ...
,n_w ...
,n_S ...
,S_k_p_wS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,n_M ...
,N_k_p_wM__ ...
,index_nCTF_from_nN_ ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
if (flag_verbose>0); disp(sprintf(' %% ssnll_N: %0.16f',ssnll_N)); end;
%%%%;
parameter_ssnll = struct('type','parameter');
parameter_ssnll.flag_verbose = flag_verbose;
[ ...
 parameter_ssnll ...
,ssnll_O ...
] = ...
ssnll_from_S_k_p_single_shell_9( ...
 parameter_ssnll ...
,l_max ...
,n_w ...
,n_S ...
,S_k_p_wS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,n_M ...
,O_k_p_wM__ ...
,index_nCTF_from_nN_ ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
if (flag_verbose>0); disp(sprintf(' %% ssnll_O: %0.16f',ssnll_O)); end;
%%%%%%%%;
ssnll_from_S_O = ssnll_O;
ssnll_from_V_O_term0 = sum( + 1*real(a_evi_k_p_all_).*abs(a_k_p_quad_).^2.*weight_shell_/(4*pi) , 'all' );
ssnll_from_V_O_term1 = sum( - 2*real(real(a_evi_k_p_all_).*conj(a_k_p_quad_).*(a_qbp_k_p_all_)).*weight_shell_/(4*pi) , 'all' );
ssnll_from_V_O_term2 = sum( + 1*real(a_evi_k_p_all_).*abs(a_qbp_k_p_all_).^2.*weight_shell_/(4*pi) , 'all' );
ssnll_from_V_O_term3 = sum( + 1*real(a_evi_k_p_all_).*abs(a_var_k_p_all_).*weight_shell_/(4*pi) , 'all' );
ssnll_from_V_O = 0.5 * (ssnll_from_V_O_term0 + ssnll_from_V_O_term1 + ssnll_from_V_O_term2 + ssnll_from_V_O_term3)*(4*pi)/n_w ;
if (flag_verbose>0); disp(sprintf(' %% ssnll_from_S_O (unscaled): %0.16f',ssnll_from_S_O)); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_from_V_O (unscaled): %0.16f',ssnll_from_V_O)); end;
%%%%%%%%;

%%%%%%%%;
% set up experiment to test scaling. ;
%%%%%%%%;
n_frac = 8;
frac_ = transpose(linspace(0,1,1+n_frac)); frac_ = frac_(1:n_frac);
ssnll_from_S_O_f_ = zeros(n_frac,1);
ssnll_from_V_O_f_ = zeros(n_frac,1);
%%%%%%%%;
for nfrac=0:n_frac-1;
frac = frac_(1+nfrac);
tmp_n_M = ceil(frac*n_M);
rng(1+nfrac); tmp_p_ij_ = randperm(n_M,tmp_n_M);
%%%%;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,tmp_a_qbp_k_Y_lm_ ...
,tmp_a_evi_k_Y_lm_ ...
,tmp_a_var_k_Y_lm_ ...
,tmp_a_num_k_Y_lm_ ...
,tmp_a_0_k_Y_lm_ ...
,tmp_a_1_k_Y_lm_ ...
,tmp_a_2_k_Y_lm_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,tmp_n_M ...
,O_k_p_wM__(:,tmp_p_ij_) ...
,index_nCTF_from_nN_(tmp_p_ij_) ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_(tmp_p_ij_) ...
,viewing_azimu_b_M_(tmp_p_ij_) ...
,viewing_gamma_z_N_(tmp_p_ij_) ...
);
tmp_a_qbp_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,tmp_a_qbp_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
tmp_a_evi_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,tmp_a_evi_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
tmp_a_var_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,tmp_a_var_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
tmp_ssnll_from_V_O_term0 = sum( + 1*real(tmp_a_evi_k_p_all_).*abs(a_k_p_quad_).^2.*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_O_term1 = sum( - 2*real(real(tmp_a_evi_k_p_all_).*conj(a_k_p_quad_).*(tmp_a_qbp_k_p_all_)).*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_O_term2 = sum( + 1*real(tmp_a_evi_k_p_all_).*abs(tmp_a_qbp_k_p_all_).^2.*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_O_term3 = sum( + 1*real(tmp_a_evi_k_p_all_).*abs(tmp_a_var_k_p_all_).*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_O = 0.5 * (tmp_ssnll_from_V_O_term0 + tmp_ssnll_from_V_O_term1 + tmp_ssnll_from_V_O_term2 + tmp_ssnll_from_V_O_term3)*(4*pi)/n_w ;
ssnll_from_V_O_f_(1+nfrac) = tmp_ssnll_from_V_O;
%%%%;
parameter_ssnll = struct('type','parameter');
parameter_ssnll.flag_verbose = flag_verbose;
[ ...
 parameter_ssnll ...
,tmp_ssnll_O ...
] = ...
ssnll_from_S_k_p_single_shell_9( ...
 parameter_ssnll ...
,l_max ...
,n_w ...
,n_S ...
,S_k_p_wS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,tmp_n_M ...
,O_k_p_wM__(:,tmp_p_ij_) ...
,index_nCTF_from_nN_(tmp_p_ij_) ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_(tmp_p_ij_) ...
,viewing_azimu_b_M_(tmp_p_ij_) ...
,viewing_gamma_z_N_(tmp_p_ij_) ...
);
tmp_ssnll_from_S_O = tmp_ssnll_O;
ssnll_from_S_O_f_(1+nfrac) = tmp_ssnll_from_S_O;
%%%%;
end;%for nfrac=0:n_frac-1;
%%%%%%%%;

if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,2,1);
plot(frac_,ssnll_from_S_O_f_,'ko-',frac_,ssnll_from_V_O_f_,'ro-');
xlabel('fraction of image-pool used'); ylabel('ssnll');
legend({'ssnll from S','ssnll from V'},'Location','NorthWest');
title('ssnll vs fraction','Interpreter','none');
subplot(1,2,2);
plot(frac_,ssnll_from_V_O_f_./ssnll_from_S_O_f_,'ro-');
xlabel('fraction of image-pool used'); ylabel('ssnll_from_V_O_f_./ssnll_from_S_O_f_','Interpreter','none');
title('ratio (i.e., volumetric/template) vs fraction','Interpreter','none');
end;%if flag_disp;

%%%%%%%%;
% Try with zero images and templates that are identically one. ;
%%%%%%%%;
tmp_a_k_Y_form_ = zeros(n_lm,1); tmp_a_k_Y_form_(1+0) = 1.0d0; %<-- all ones. ;
[ ...
 tmp_a_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,tmp_a_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
[ ...
 tmp_S_k_p_wS__ ...
] = ...
pm_template_2( ...
 flag_verbose ...
,l_max ...
,n_k_p_r ...
,tmp_a_k_Y_form_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w ...
);
if (flag_verbose>0); disp(sprintf(' %% n_w %d, viewing_k_eq_d %0.6f, n_S %d',n_w,viewing_k_eq_d,n_S)); end;
tmp_S_k_p_wS__ = reshape(tmp_S_k_p_wS__,[n_w,n_S]); %<-- now each element of tmp_S_k_p_wS__ should be 1/sqrt(4*pi). ;
if (flag_verbose>0); disp(sprintf(' %% fnorm(tmp_S_k_p_wS__ - 1/sqrt(4*pi)): %0.16f',fnorm(tmp_S_k_p_wS__ - 1/sqrt(4*pi)))); end;
%%%%;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,tmp_a_qbp_k_Y_lm_ ...
,tmp_a_evi_k_Y_lm_ ...
,tmp_a_var_k_Y_lm_ ...
,tmp_a_num_k_Y_lm_ ...
,tmp_a_0_k_Y_lm_ ...
,tmp_a_1_k_Y_lm_ ...
,tmp_a_2_k_Y_lm_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_M ...
,zeros(size(O_k_p_wM__)) ...
,index_nCTF_from_nN_ ...
,ones(size(CTF_k_p_wC__)) ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
tmp_a_qbp_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,tmp_a_qbp_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
tmp_a_evi_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,tmp_a_evi_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
tmp_a_var_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,tmp_a_var_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
tmp_ssnll_from_V_0_term0 = sum( + 1*real(tmp_a_evi_k_p_all_).*abs(tmp_a_k_p_quad_).^2.*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_0_term1 = sum( - 2*real(real(tmp_a_evi_k_p_all_).*conj(tmp_a_k_p_quad_).*(tmp_a_qbp_k_p_all_)).*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_0_term2 = sum( + 1*real(tmp_a_evi_k_p_all_).*abs(tmp_a_qbp_k_p_all_).^2.*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_0_term3 = sum( + 1*real(tmp_a_evi_k_p_all_).*abs(tmp_a_var_k_p_all_).*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_0 = 0.5 * (tmp_ssnll_from_V_0_term0 + tmp_ssnll_from_V_0_term1 + tmp_ssnll_from_V_0_term2 + tmp_ssnll_from_V_0_term3)*(4*pi)/n_w ;
%%%%;
parameter_ssnll = struct('type','parameter');
parameter_ssnll.flag_verbose = flag_verbose;
[ ...
 parameter_ssnll ...
,tmp_ssnll_0 ...
] = ...
ssnll_from_S_k_p_single_shell_9( ...
 parameter_ssnll ...
,l_max ...
,n_w ...
,n_S ...
,tmp_S_k_p_wS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,n_M ...
,zeros(size(O_k_p_wM__)) ...
,index_nCTF_from_nN_ ...
,ones(size(CTF_k_p_wC__)) ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
tmp_ssnll_from_S_0 = tmp_ssnll_0;
%%%%%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
fontsize_use = 12;
subplot(1,2,1);
alim_ = [0,max(real(tmp_a_evi_k_p_all_))];
flag_2d_vs_3d = 0;
imagesc_polar_a_azimu_b_0(polar_a_shell_,azimu_b_shell_,real(tmp_a_evi_k_p_all_),alim_,colormap_80s(),flag_2d_vs_3d);
title('real(tmp_a_evi_k_p_all_)','Interpreter','none');
set(gca,'FontSize',fontsize_use);
axisnotick3d; axis equal; axis vis3d;
subplot(1,2,2);
[ ...
 tmp_k_p_polar_a_wM__ ...
,tmp_k_p_azimu_b_wM__ ...
] = ...
cg_rhs_2( ...
 n_M ...
,n_w ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
flag_loghist_vs_hist = 0;
[ ...
 hist_ ...
 weighted_hist_ ...
 lim_use_ ...
] = ...
hist2d_polar_a_azimu_b_0( ...
 polar_a_shell_ ...
,azimu_b_shell_ ...
,weight_shell_ ...
,periodize(tmp_k_p_polar_a_wM__(:),0,1*pi) ...
,periodize(tmp_k_p_azimu_b_wM__(:),0,2*pi) ...
,alim_ ...
,colormap_80s ...
,flag_2d_vs_3d ...
,flag_loghist_vs_hist ...
);
title('empirical a_evi_k_p_all_','Interpreter','none');
set(gca,'FontSize',fontsize_use);
axisnotick3d; axis equal; axis vis3d;
end;%if flag_disp;
%%%%%%%%;

%%%%%%%%;
% Now see ssnll_from_a_k_Y_10.m ;
% for a more general ssnll calculation. ;
%%%%%%%%;



		    





