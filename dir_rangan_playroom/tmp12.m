
%%%%%%%%;
% Note that delta-function is not well-approximated as fourier-series in 1d. ;
%%%%%%%%;
n_f = 128;
z_ = transpose(linspace(-1,+1,1+8*n_f));
d_ = sum(cos(1*pi*z_*[-n_f:+n_f]),2);
subplot(1,2,1);
plot(z_,d_);
subplot(1,2,2);
plot(z_,log(abs(d_)),'.');

%%%%%%%%;
% Note that delta-function is not well-approximated as spherical-harmonic series on sphere. ;
%%%%%%%%;
l_max=48;
n_z = 1+1024;
z_ = transpose(linspace(-1,+1,n_z));
dz = 2/max(1,n_z-1);
leg_zl__ = zeros(n_z,1+l_max);
l_ = zeros(1+l_max,1);
for l_val=0:l_max;
l_(1+l_val) = l_val;
tmp_j_ = legendreP(l_val,z_);
tmp_j2_ = abs(tmp_j_).^2;
tmp_s = 0.5 * dz*(sum(tmp_j2_(2:end-1)) + 0.5*(tmp_j2_(1+0)+tmp_j2_(end)));
tmp_j_ = tmp_j_./max(1e-12,sqrt(tmp_s));
leg_zl__(:,1+l_val) = tmp_j_;
end;%for l_val=0:l_max;
f_ = sqrt(2*l_+1)/sqrt(4*pi);
subplot(1,2,1); plot(z_,leg_zl__*f_,'o');
subplot(1,2,2); plot(z_,log(abs(leg_zl__*f_)),'o');

%%%%%%%%;
% Note that different spatial-kernels correspond to different deconvolution-factors. ;
%%%%%%%%;



%%%%%%%%;
% Now working on qbp_single_shell_9.m. ;
%%%%%%%%;

str_thisfunction = 'qbp_single_shell_9';
flag_verbose=1; flag_disp=1; nf=0;
if (flag_verbose>0); disp(sprintf(' %% testing %s',str_thisfunction)); end;
k_p_r_max = 48.0/(2*pi); k_eq_d = 1.0/(2*pi);
n_k_p_r = 1; k_p_r_1 = 1.0; k_p_r_ = k_p_r_1;
[ ...
 n_shell ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_shell_ ...
,k_c_0_shell_ ...
,k_c_1_shell_ ...
,k_c_2_shell_ ...
] = ...
sample_shell_6( ...
 k_p_r_1 ...
,k_eq_d/k_p_r_max ...
) ;
k_p_r_shell_ = k_p_r_(1+0)*ones(n_shell,1);
%%%%%%%%;
l_max_upb = 96;
l_max = max(0,min(l_max_upb,1+ceil(2*pi*k_p_r_max)));
n_lm = (l_max+1).^2;
m_max_ = -l_max : +l_max;
n_m_max = length(m_max_);
Y_l_val_ = zeros(n_lm,1);
Y_m_val_ = zeros(n_lm,1);
tmp_l_val_ = zeros(n_lm,1);
tmp_m_val_ = zeros(n_lm,1);
na=0; 
for l_val=0:l_max;
for m_val=-l_val:+l_val;
tmp_l_val_(1+na) = l_val;
tmp_m_val_(1+na) = m_val;
na=na+1;
end;%for m_val=-l_val:+l_val;
end;%for l_val=0:l_max;
tmp_index_ = 0:n_lm-1;
Y_l_val_(1+tmp_index_) = tmp_l_val_;
Y_m_val_(1+tmp_index_) = tmp_m_val_;
weight_Y_ = ones(n_lm,1);
weight_3d_k_p_r_ = 4*pi;

%%%%%%%%;
% Build array of convolution-kernels for qbp. ;
%%%%%%%%;
sigma_kernel_ = pi*2.^[-8:0.5:-4]; n_sigma_kernel = numel(sigma_kernel_);
kernel_k_p_form_shells__ = zeros(n_shell,n_sigma_kernel);
for nsigma_kernel=0:n_sigma_kernel-1;
sigma_kernel = sigma_kernel_(1+nsigma_kernel);
kernel_k_p_form_ = exp(-((k_c_0_shell_-0).^2 + (k_c_1_shell_-0).^2 + (k_c_2_shell_-1).^2)/(2*sigma_kernel^2));
tmp_z = sum(kernel_k_p_form_.*weight_shell_)/(4*pi);
kernel_k_p_form_ = kernel_k_p_form_/max(1e-12,tmp_z);
tmp_z = sum(kernel_k_p_form_.*weight_shell_)/(4*pi);
assert(abs(tmp_z-1.0d0)<1e-6);
%%%%;
if (flag_disp>1);
kernel_lim_ = [0,prctile(kernel_k_p_form_,99.5)];
flag_2d_vs_3d = 0;
k_p_r_max = 1;
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,kernel_k_p_form_ ... 
,kernel_lim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_max ...
);
axisnotick3d; axis vis3d;
title('kernel_k_p_form_','Interpreter','none');
end;%if (flag_disp>1);
%%%%;
kernel_k_p_form_shells__(:,1+nsigma_kernel) = kernel_k_p_form_;
end;%for nsigma_kernel=0:n_sigma_kernel-1;
%%%%%%%%;
kernel_k_Y_quad_ys__ = zeros(n_lm,n_sigma_kernel);
kernel_k_p_quad_shells__ = zeros(n_shell,n_sigma_kernel);
%%%%;
for nsigma_kernel=0:n_sigma_kernel-1;
%%%%;
if (flag_verbose>0); disp(sprintf(' %% nsigma_kernel %d/%d',nsigma_kernel,n_sigma_kernel)); end;
kernel_k_p_form_ = kernel_k_p_form_shells__(:,1+nsigma_kernel);
if ~exist('Ylm_uklma___','var'); Ylm_uklma___=[]; end;
if ~exist('k_p_azimu_b_sub_uka__','var'); k_p_azimu_b_sub_uka__ = []; end;
if ~exist('k_p_polar_a_sub_uka__','var'); k_p_polar_a_sub_uka__ = []; end;
if ~exist('l_max_uk_','var'); l_max_uk_ = []; end;
if ~exist('index_nu_n_k_per_shell_from_nk_p_r_','var'); index_nu_n_k_per_shell_from_nk_p_r_ = []; end;
if ~exist('index_k_per_shell_uka__','var'); index_k_per_shell_uka__ = []; end;
[ ...
 kernel_k_Y_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
] = ...
convert_k_p_to_spharm_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,kernel_k_p_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%%%%%;
[ ...
 kernel_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,kernel_k_Y_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
if (flag_verbose>0); disp(sprintf(' %% kernel_k_p_form_ vs kernel_k_p_quad_: %0.16f',fnorm(kernel_k_p_form_-kernel_k_p_quad_)/fnorm(kernel_k_p_form_))); end;
kernel_k_Y_quad_ys__(:,1+nsigma_kernel) = kernel_k_Y_quad_;
kernel_k_p_quad_shells__(:,1+nsigma_kernel) = kernel_k_p_quad_;
%%%%;
end;%for nsigma_kernel=0:n_sigma_kernel-1;
%%%%;
%%%%%%%%;
% Illustrate the kernel-coefficients. ;
%%%%%%%%;
if (flag_disp>0);
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,2,1);
hold on;
for nsigma_kernel=0:n_sigma_kernel-1;
plot(Y_l_val_,real(kernel_k_Y_quad_ys__(:,1+nsigma_kernel)),'.');
end;%for nsigma_kernel=0:n_sigma_kernel-1;
hold off;
xlabel('Y_l_val_','Interpreter','none');
ylabel('real(kernel_k_Y_quad_)','Interpreter','none');
subplot(1,2,2);
hold on;
for nsigma_kernel=0:n_sigma_kernel-1;
plot(Y_m_val_,real(kernel_k_Y_quad_ys__(:,1+nsigma_kernel)),'.');
end;%for nsigma_kernel=0:n_sigma_kernel-1;
hold off;
xlabel('Y_m_val_','Interpreter','none');
ylabel('real(kernel_k_Y_quad_)','Interpreter','none');
sgtitle('kernel coefficients','Interpreter','none');
end;%if (flag_disp>0);
%%%%%%%%;
% The 3-dimensional diffusion used to generate the kernels is not too far from ;
% the surface-diffusion associated with the spherical-harmonics. ;
% I.e., a gaussian with standard-deviation sigma_kernel ;
% corresponds reasonably closely to a diffusion-time of t = 0.5 sigma_kernel^2, ;
% which in turn corresponds to a diagonal scaling-factor of: exp(l*(l+1)*t) ;
% (in the sperical-harmonic basis). ;
%%%%%%%%;
if (flag_disp>0);
figure(1+nf);nf=nf+1;clf;figmed;
c_use__ = colormap_beach(); n_c_use = size(c_use__,1);
subplot(1,2,1);
hold on;
for nsigma_kernel=0:n_sigma_kernel-1;
nc_use = max(0,min(n_c_use-1,floor(n_c_use*nsigma_kernel/n_sigma_kernel)));
plot(Y_l_val_,real(kernel_k_Y_quad_ys__(:,1+nsigma_kernel)),'.','Color',c_use__(1+nc_use,:));
end;%for nsigma_kernel=0:n_sigma_kernel-1;
hold off;
xlabel('Y_l_val_','Interpreter','none');
ylabel('real(kernel_k_Y_quad_)','Interpreter','none');
subplot(1,2,2);
tmp_index_ = efind(Y_m_val_==0);
hold on;
for nsigma_kernel=1:n_sigma_kernel-1;
nc_use = max(0,min(n_c_use-1,floor(n_c_use*nsigma_kernel/n_sigma_kernel)));
sigma_kernel_pos = sigma_kernel_(1+nsigma_kernel-0);
sigma_kernel_pre = sigma_kernel_(1+nsigma_kernel-1);
plot(Y_l_val_(1+tmp_index_),real(kernel_k_Y_quad_ys__(1+tmp_index_,1+nsigma_kernel-0))./real(kernel_k_Y_quad_ys__(1+tmp_index_,1+nsigma_kernel-1)),'.','Color',c_use__(1+nc_use,:));
plot(Y_l_val_(1+tmp_index_),exp(Y_l_val_(1+tmp_index_).*(1+Y_l_val_(1+tmp_index_)).*(0.5*(sigma_kernel_pre.^2 - sigma_kernel_pos.^2))),'-','Color',c_use__(1+nc_use,:));
end;%for nsigma_kernel=0:n_sigma_kernel-1;
hold off;
ylim([0,1]);
xlabel('Y_l_val_','Interpreter','none');
ylabel('real(kernel_k_Y_quad_ys__(:,1+nsigma_kernel-0))./real(kernel_k_Y_quad_ys__(:,1+nsigma_kernel-1))','Interpreter','none');
sgtitle('kernel coefficients','Interpreter','none');
end;%if (flag_disp>0);
%%%%%%%%;
% Now we can deconvolve the diffusion-kernel coefficients to approximately-reconstruct a delta-function at the pole. ;
% I.e., the (l,m==0) coefficient for the kernel is close to: ;
% exp(-l*(1+l)*0.5*sigma_kernel^2)*sqrt(2l+1)*sqrt(4*pi);
%%%%%%%%;
if (flag_disp>0);
figure(1+nf);nf=nf+1;clf;figsml;
c_use__ = colormap_beach(); n_c_use = size(c_use__,1);
tmp_l_val_ = transpose([0:l_max]);
tmp_index_ = tmp_l_val_.^2 + tmp_l_val_ ; %<-- (l,m) has index l.^2 + l + m. ;
tmp_d_val_ = sqrt(2*tmp_l_val_+1)/sqrt(4*pi)*(4*pi) ;
subplot(1,1,1); hold on;
for nsigma_kernel=0:n_sigma_kernel-1;
nc_use = max(0,min(n_c_use-1,floor(n_c_use*nsigma_kernel/n_sigma_kernel)));
sigma_kernel = sigma_kernel_(1+nsigma_kernel);
tmp_f_ = exp(-Y_l_val_(1+tmp_index_).*(1+Y_l_val_(1+tmp_index_)).*(0.5*sigma_kernel^2));
plot(Y_l_val_(1+tmp_index_),real(kernel_k_Y_quad_ys__(1+tmp_index_,1+nsigma_kernel)),'o','Color',c_use__(1+nc_use,:));
plot(Y_l_val_(1+tmp_index_),tmp_f_.*tmp_d_val_,'-','Color',c_use__(1+nc_use,:));
end;%for nsigma_kernel=0:n_sigma_kernel-1;
hold off;
%ylim([0,10]);
xlabel('Y_l_val_','Interpreter','none');
ylabel('deconvolved coefficients','Interpreter','none');
sgtitle('polar-spike coefficients','Interpreter','none');
end;%if (flag_disp>0);
%%%%%%%%;
% This strongly motivates the definition of a kernel with spherical-harmonic coefficients: ;
% Y_{l}^{m\equiv 0} := \exp(-l*(1+l)*0.5*\sigma^2)*\sqrt(2l+1)*\sqrt(4*pi), ;
% with a sigma chosen such that either: ;
% (i): Y_{l_{\max}}^{0} := \exp(-l_{\max}*(1+l_{\max})*0.5*\sigma^2)*\sqrt(2l_{\max}+1)*\sqrt(4*pi) < \epsilon , or ;
% (ii): \sum_{l>l_{\max}}  Y_{l_{\max}}^{0} := \sum_{l>l_{\max}} \left\{\exp(-l*(1+l)*0.5*\sigma^2)*\sqrt(2l+1)*\sqrt(4*pi)right\}^2 / Z < \epsilon , ;
% where Z is the normalizing-factor \sum_{l\geq 0}  Y_{l_{\max}}^{0} . ;
%%%%%%%%;
epsilon_ = 10.^transpose([-9:0.5:-2]); n_epsilon = numel(epsilon_);
sigma_e_ = zeros(n_epsilon,1);
for nepsilon=0:n_epsilon-1;
epsilon = epsilon_(1+nepsilon); l_upb = 1024; l_zer = 0;
[~,sigma] = sigma_shell_kernel_0(struct('tolerance_master',epsilon),l_max,1024);
sigma_e_(1+nepsilon) = sigma;
end;%for nepsilon=0:n_epsilon-1;
%%%%%%%%;
% Let us pick epsilon = 1e-6 for now. ;
%%%%%%%%;
tmp_index = efind(abs(epsilon_-1e-6)<1e-12);
epsilon_kernel_crit = epsilon_(1+tmp_index);
sigma_kernel_crit = sigma_e_(1+tmp_index);
kernel_crit_k_Y_form_ = zeros(n_lm,1);
tmp_l_val_ = transpose([0:l_max]);
tmp_index_ = tmp_l_val_.^2 + tmp_l_val_;
kernel_crit_k_Y_form_(1+tmp_index_) = exp(-tmp_l_val_.*(1+tmp_l_val_).*0.5*sigma_kernel_crit.^2).*sqrt(1+2*tmp_l_val_)*sqrt(4*pi);
[ ...
 kernel_crit_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,kernel_crit_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
[ ...
 kernel_crit_k_Y_quad_ ...
] = ...
convert_k_p_to_spharm_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,kernel_crit_k_p_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
if (flag_verbose>0); disp(sprintf(' %% kernel_crit_k_Y_form_ vs kernel_crit_k_Y_quad_: %0.16f',fnorm(kernel_crit_k_Y_form_-kernel_crit_k_Y_quad_)/fnorm(kernel_crit_k_Y_form_))); end;
%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,2,1);
tmp_l_val_ = transpose([0:l_max]);
tmp_index_ = tmp_l_val_.^2 + tmp_l_val_ ; %<-- (l,m) has index l.^2 + l + m. ;
tmp_c_val_ = exp(-tmp_l_val_.*(1+tmp_l_val_).*0.5*sigma_kernel_crit.^2).*sqrt(1+2*tmp_l_val_).*sqrt(4*pi);
subplot(1,2,1); hold on;
plot(Y_l_val_(1+tmp_index_),real(kernel_crit_k_Y_form_(1+tmp_index_)),'o','Color','k');
plot(Y_l_val_(1+tmp_index_),real(kernel_crit_k_Y_quad_(1+tmp_index_)),'x','Color','k');
plot(Y_l_val_(1+tmp_index_),tmp_c_val_,'-','Color','k');
hold off;
xlabel('Y_l_val_','Interpreter','none');
ylabel('polar-spike coefficients','Interpreter','none');
subplot(1,2,2);
kernel_crit_lim_ = [0,prctile(kernel_crit_k_p_quad_,99.5)];
flag_2d_vs_3d = 0;
k_p_r_max = 1;
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,kernel_crit_k_p_quad_ ... 
,kernel_crit_lim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_max ...
);
axisnotick3d; axis vis3d;
title('kernel_crit_k_p_quad_','Interpreter','none');
end;%if flag_disp;
%%%%;
%%%%%%%%;
% Now we note that kernel_crit is *not* actually a gaussian (although it should be close). ;
%%%%%%%%;
kernel_crit_k_p_gaus_ = exp(-((k_c_0_shell_-0).^2 + (k_c_1_shell_-0).^2 + (k_c_2_shell_-1).^2)/(2*sigma_kernel_crit^2));
tmp_z = sum(kernel_crit_k_p_gaus_.*weight_shell_)/(4*pi);
kernel_crit_k_p_gaus_ = kernel_crit_k_p_gaus_/max(1e-12,tmp_z);
tmp_z = sum(kernel_crit_k_p_gaus_.*weight_shell_)/(4*pi);
assert(abs(tmp_z-1.0d0)<1e-6);
plot(real(kernel_crit_k_p_quad_)-real(kernel_crit_k_p_gaus_),'.');
xlabel(real(kernel_crit_k_p_quad_),'Interpreter','none');
ylabel(real(kernel_crit_k_p_gaus_),'Interpreter','none');
title('difference between kernel_crit and gaussian','Interpreter','none');
%%%%%%%%;
%kernel_crit_lim_ = [0,prctile(kernel_crit_k_p_quad_,99.5)];
kernel_crit_lim_ = [-0.1,+0.1];
subplot(1,2,1);
flag_2d_vs_3d = 0;
k_p_r_max = 1;
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,kernel_crit_k_p_quad_ ... 
,kernel_crit_lim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_max ...
);
subplot(1,2,2);
flag_2d_vs_3d = 0;
k_p_r_max = 1;
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,kernel_crit_k_p_gaus_ ... 
,kernel_crit_lim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_max ...
);
%%%%%%%%;
% Now try and form a kernel with a small support. ;
%%%%%%%%;
L_d_ = cell(1+l_max,1);
for l_val=0:l_max;
tmp_c_ = [zeros(l_val,1);1];
L_d_{1+l_val} = chebfun(leg2cheb(tmp_c_,'norm'),'coeffs');
end;%for l_val=0:l_max;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
c_use__ = colormap_81s; n_c_use = size(c_use__,1);
n_z = 1+1024; z_ = transpose(linspace(-1,+1,n_z));
hold on;
for l_val=0:l_max;
nc_use = max(0,min(nc_use-1,floor(nc_use*l_val/l_max)));
plot(z_,L_d_{1+l_val}(z_),'-','Color',c_use__(1+nc_use,:));
end;%for l_val=0:l_max;
hold off;
xlabel('z'); ylabel('P(z)'); title('legendre polynomials'); grid on;
end;%if flag_disp;


%%%%%%%%;
% Now set up a_k_Y_form_ for later use. ;
%%%%%%%%;
a_k_Y_form_ = zeros(n_lm,1);
Y_l_use = +4; Y_m_use = -3;
%Y_l_use = +48; Y_m_use = -38;
a_k_Y_form_ = +1.0.*(Y_l_val_==Y_l_use).*(Y_m_val_==Y_m_use);
[ ...
 a_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,a_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%%%%%;
[ ...
 a_k_Y_quad_ ...
] = ...
convert_k_p_to_spharm_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,a_k_p_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_form_ vs a_k_Y_quad_: %0.16f',fnorm(a_k_Y_form_-a_k_Y_quad_)/fnorm(a_k_Y_form_))); end;
%%%%%%%%;
n_w = 2*2*l_max;
viewing_k_eq_d = 0.5*1.0/k_p_r_max;
[ ...
 S_k_p_wS__ ...
,~ ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
] = ...
pm_template_2( ...
 flag_verbose ...
,l_max ...
,n_k_p_r ...
,a_k_Y_form_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w ...
);
n_S = n_viewing_S;
if (flag_verbose>0); disp(sprintf(' %% n_w %d, viewing_k_eq_d %0.6f, n_S %d',n_w,viewing_k_eq_d,n_S)); end;
S_k_p_wS__ = reshape(S_k_p_wS__,[n_w,n_S]);
%%%%%%%%;

%%%%%%%%;
% test uniform distribution of images. ;
%%%%%%%%;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,a_k_Y_0qbp_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_S ...
,S_k_p_wS__ ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
);
%%%%%%%%;
[ ...
 a_k_p_0qbp_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,a_k_Y_0qbp_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%%%%%;
if flag_disp;
flag_2d_vs_3d = 0; %<-- 3d;
alim_ = prctile(real(a_k_p_quad_),[5,95]); alim_ = mean(alim_) + 0.5*1.25*diff(alim_)*[-1,+1];
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,2,1);
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,real(a_k_p_quad_) ... 
,alim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_1 ...
);
title('real(a_k_p_quad_)','Interpreter','none');
subplot(1,2,2);
imagesc_polar_a_azimu_b_0( ...
 polar_a_shell_ ... 
,azimu_b_shell_ ... 
,real(a_k_p_0qbp_) ... 
,alim_ ... 
,colormap_81s ... 
,flag_2d_vs_3d ...
,k_p_r_1 ...
);
title('real(a_k_p_0qbp_)','Interpreter','none');
sgtitle('true (left) vs reconstruction (right)','Interpreter','none');
end;%if flag_disp;
%%%%%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,3,1); plot(Y_l_val_,abs(a_k_Y_form_-a_k_Y_0qbp_),'.');
xlabel('Y_l_val_','Interpreter','none'); ylabel('abs(a_k_Y_form_-a_k_Y_0qbp_)','Interpreter','none'); grid on;
title('error vs l','Interpreter','none');
subplot(1,3,2); plot(Y_m_val_,abs(a_k_Y_form_-a_k_Y_0qbp_),'.');
xlabel('Y_m_val_','Interpreter','none'); ylabel('abs(a_k_Y_form_-a_k_Y_0qbp_)','Interpreter','none'); grid on;
title('error vs m','Interpreter','none');
disp(sprintf(' %% a_k_Y_form_ vs a_k_Y_0qbp_: %0.16f',fnorm(a_k_Y_form_-a_k_Y_0qbp_)/fnorm(a_k_Y_form_)));
subplot(1,3,3); plot(abs(a_k_Y_form_),abs(a_k_Y_0qbp_),'o');
xlabel('abs(a_k_Y_form_)','Interpreter','none'); ylabel('abs(a_k_Y_0qbp_)','Interpreter','none'); grid on;
title('scatterplot','Interpreter','none');
end;%if flag_disp;
%%%%%%%%;

%%%%%%%%;
% Now test nonuniform distribution of images. ;
% We select a subset of the templates and duplicate their appearance while retaining their amplitude.
%%%%%%%%;
index_nS_from_nM_ = transpose([0:n_S-1]); index_nS_from_nM_ = [repmat(index_nS_from_nM_(1:floor(n_S/4)),[3,1]);index_nS_from_nM_];
n_M = numel(index_nS_from_nM_);
index_MS__ = sparse(1+[0:n_M-1],1+index_nS_from_nM_,1,n_M,n_S);
index_sum_S_ = sum(index_MS__,1); %<-- number of times each S_k_p_w_ is used. ;
index_sum_M_ = index_sum_S_(1+index_nS_from_nM_); %<-- number of identical copies of each M_k_p_w_. ;
M_k_p_wM__ = zeros(n_w,n_M);
%M_k_p_wM__ = bsxfun(@rdivide,S_k_p_wS__(:,1+index_nS_from_nM_),reshape(max(1e-12,index_sum_M_),[1,n_M])); %<-- reduce amplitude. ;
M_k_p_wM__ = S_k_p_wS__(:,1+index_nS_from_nM_); %<-- retain amplitude. ;
viewing_polar_a_M_ = viewing_polar_a_S_(1+index_nS_from_nM_);
viewing_azimu_b_M_ = viewing_azimu_b_S_(1+index_nS_from_nM_);
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,a_k_Y_1qbp_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_M ...
,M_k_p_wM__ ...
,[] ...
,[] ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
);
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_0qbp_ vs a_k_Y_1qbp_: %0.16f',fnorm(a_k_Y_0qbp_-a_k_Y_1qbp_)/fnorm(a_k_Y_0qbp_))); end;

%%%%%%%%;
% Now test the same nonuniform distribution of images, ;
% except this time give each image an in-plane rotation. ;
%%%%%%%%;
viewing_gamma_z_N_ = 2*pi*transpose([0:n_M-1])/n_M;
N_k_p_wM__ = M_k_p_wM__;
for nM=0:n_M-1; N_k_p_wM__(:,1+nM) = rotate_p_to_p(1,n_w,n_w,M_k_p_wM__(:,1+nM),+viewing_gamma_z_N_(1+nM)); end;%for nM=0:n_M-1;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,a_k_Y_2qbp_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_M ...
,N_k_p_wM__ ...
,[] ...
,[] ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_0qbp_ vs a_k_Y_2qbp_: %0.16f',fnorm(a_k_Y_0qbp_-a_k_Y_2qbp_)/fnorm(a_k_Y_0qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_1qbp_ vs a_k_Y_2qbp_: %0.16f',fnorm(a_k_Y_1qbp_-a_k_Y_2qbp_)/fnorm(a_k_Y_1qbp_))); end;

%%%%%%%%;
% Now test the same nonuniform distribution of images, ;
% except this time give each image an in-plane rotation, ;
% as well as an image-specific CTF. ;
%%%%%%%%;
n_CTF = 3;
gamma_z_ = transpose(2*pi*[0:n_w-1]/n_w);
CTF_k_p_wC__ = 0.75+0.25*[cos(1*gamma_z_) , sin(2*gamma_z_) , cos(3*gamma_z_)]; %<-- anisotropic. ;
%CTF_k_p_wC__ = 0.75+0.25*[0.1*cos(0*gamma_z_) , 0.5*cos(0*gamma_z_) , 0.9*cos(0*gamma_z_)]; %<-- isotropic. ;
index_nCTF_from_nN_ = mod(transpose([0:n_M-1]),n_CTF);
viewing_gamma_z_N_ = 1*2*pi*transpose([0:n_M-1])/n_M; %<-- yes image-dependent in-plane rotation. ;
%viewing_gamma_z_N_ = 0*2*pi*transpose([0:n_M-1])/n_M; %<-- not image-dependent in-plane rotation. ;
N_k_p_wM__ = M_k_p_wM__;
for nM=0:n_M-1;
M_k_p_w_ = M_k_p_wM__(:,1+nM);
viewing_gamma_z = viewing_gamma_z_N_(1+nM);
nCTF = index_nCTF_from_nN_(1+nM);
CTF_k_p_w_ = CTF_k_p_wC__(:,1+nCTF);
N_k_p_w_ = rotate_p_to_p(1,n_w,n_w,M_k_p_w_.*CTF_k_p_w_,+viewing_gamma_z);
N_k_p_wM__(:,1+nM) = N_k_p_w_;
clear M_k_p_w_ viewing_gamma_z nCTF CTF_k_p_w_ N_k_p_w_ ;
end;%for nM=0:n_M-1;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,a_k_Y_3qbp_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_M ...
,N_k_p_wM__ ...
,index_nCTF_from_nN_ ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_0qbp_ vs a_k_Y_3qbp_: %0.16f',fnorm(a_k_Y_0qbp_-a_k_Y_3qbp_)/fnorm(a_k_Y_0qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_1qbp_ vs a_k_Y_3qbp_: %0.16f',fnorm(a_k_Y_1qbp_-a_k_Y_3qbp_)/fnorm(a_k_Y_1qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_2qbp_ vs a_k_Y_3qbp_: %0.16f',fnorm(a_k_Y_2qbp_-a_k_Y_3qbp_)/fnorm(a_k_Y_2qbp_))); end;

%%%%%%%%;
% Now measure the moments. ;
% Use the same nonuniform distribution of images, ;
% again giving each image an in-plane rotation, ;
% as well as an image-specific CTF. ;
%%%%%%%%;
n_CTF = 3;
gamma_z_ = transpose(2*pi*[0:n_w-1]/n_w);
CTF_k_p_wC__ = 0.75+0.25*[cos(1*gamma_z_) , sin(2*gamma_z_) , cos(3*gamma_z_)]; %<-- anisotropic. ;
%CTF_k_p_wC__ = 0.75+0.25*[0.1*cos(0*gamma_z_) , 0.5*cos(0*gamma_z_) , 0.9*cos(0*gamma_z_)]; %<-- isotropic. ;
index_nCTF_from_nN_ = mod(transpose([0:n_M-1]),n_CTF);
viewing_gamma_z_N_ = 1*2*pi*transpose([0:n_M-1])/n_M; %<-- yes image-dependent in-plane rotation. ;
%viewing_gamma_z_N_ = 0*2*pi*transpose([0:n_M-1])/n_M; %<-- not image-dependent in-plane rotation. ;
N_k_p_wM__ = M_k_p_wM__;
for nM=0:n_M-1;
M_k_p_w_ = M_k_p_wM__(:,1+nM);
viewing_gamma_z = viewing_gamma_z_N_(1+nM);
nCTF = index_nCTF_from_nN_(1+nM);
CTF_k_p_w_ = CTF_k_p_wC__(:,1+nCTF);
N_k_p_w_ = rotate_p_to_p(1,n_w,n_w,M_k_p_w_.*CTF_k_p_w_,+viewing_gamma_z);
N_k_p_wM__(:,1+nM) = N_k_p_w_;
clear M_k_p_w_ viewing_gamma_z nCTF CTF_k_p_w_ N_k_p_w_ ;
end;%for nM=0:n_M-1;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,a_qbp_k_Y_lm_ ...
,a_evi_k_Y_lm_ ...
,a_var_k_Y_lm_ ...
,a_num_k_Y_lm_ ...
,a_0_k_Y_lm_ ...
,a_1_k_Y_lm_ ...
,a_2_k_Y_lm_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_M ...
,N_k_p_wM__ ...
,index_nCTF_from_nN_ ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
a_k_Y_4qbp_ = a_qbp_k_Y_lm_;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_0qbp_ vs a_k_Y_4qbp_: %0.16f',fnorm(a_k_Y_0qbp_-a_k_Y_4qbp_)/fnorm(a_k_Y_0qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_1qbp_ vs a_k_Y_4qbp_: %0.16f',fnorm(a_k_Y_1qbp_-a_k_Y_4qbp_)/fnorm(a_k_Y_1qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_2qbp_ vs a_k_Y_4qbp_: %0.16f',fnorm(a_k_Y_2qbp_-a_k_Y_4qbp_)/fnorm(a_k_Y_2qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_3qbp_ vs a_k_Y_4qbp_: %0.16f',fnorm(a_k_Y_3qbp_-a_k_Y_4qbp_)/fnorm(a_k_Y_3qbp_))); end;
%%%%%%%%;
a_qbp_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_qbp_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_evi_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_evi_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_var_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_var_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_num_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_num_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_0_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_0_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_1_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_1_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_2_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_2_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
%%%%%%%%;
% Now check for consistency across the moments. ;
% Note that, currently, the variance is negligible. ;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% a_qbp_k_p_all_ vs (a_1_k_p_all_./a_0_k_p_all_): %0.16f',fnorm(a_qbp_k_p_all_ - (a_1_k_p_all_./a_0_k_p_all_))./fnorm(a_qbp_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_evi_k_p_all_ vs a_0_k_p_all_: %0.16f',fnorm(a_evi_k_p_all_ - a_0_k_p_all_)./fnorm(a_evi_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_var_k_p_all_ vs (a_2_k_p_all_./a_0_k_p_all_ - abs(a_1_k_p_all_./a_0_k_p_all_).^2): %0.16f',fnorm(a_var_k_p_all_ - (a_2_k_p_all_./a_0_k_p_all_ - abs(a_1_k_p_all_./a_0_k_p_all_).^2))./fnorm(a_var_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_var_k_p_all_ vs (a_2_k_p_all_./a_0_k_p_all_ - abs(a_qbp_k_p_all_).^2): %0.16f',fnorm(a_var_k_p_all_ - (a_2_k_p_all_./a_0_k_p_all_ - abs(a_qbp_k_p_all_).^2))./fnorm(a_var_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_2_k_p_all_ vs (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_qbp_k_p_all_).^2.*a_evi_k_p_all_): %0.16f',fnorm(a_2_k_p_all_ - (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_qbp_k_p_all_).^2.*a_evi_k_p_all_))./fnorm(a_2_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_2_k_p_all_ vs (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_1_k_p_all_./a_0_k_p_all_).^2.*a_evi_k_p_all_): %0.16f',fnorm(a_2_k_p_all_ - (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_1_k_p_all_./a_0_k_p_all_).^2.*a_evi_k_p_all_))./fnorm(a_2_k_p_all_))); end;
%%%%%%%%;

%%%%%%%%;
% Now measure the ssnll (sigma-squared * negative-log-likelihood). ;
% For this we need to add noise to the images. ;
%%%%%%%%;
flag_isotropic = 0;
flag_noinplane = 0;
flag_zeronoise = 0; sigma_noise = 0.125d0;
n_CTF = 3;
gamma_z_ = transpose(2*pi*[0:n_w-1]/n_w);
if flag_isotropic==0; CTF_k_p_wC__ = 0.75+0.25*[cos(1*gamma_z_) , sin(2*gamma_z_) , cos(3*gamma_z_)]; end; %<-- anisotropic. ;
if flag_isotropic==1; CTF_k_p_wC__ = 0.75+0.25*[0.1*cos(0*gamma_z_) , 0.5*cos(0*gamma_z_) , 0.9*cos(0*gamma_z_)]; end; %<-- isotropic. ;
index_nCTF_from_nN_ = mod(transpose([0:n_M-1]),n_CTF);
if flag_noinplane==0; viewing_gamma_z_N_ = 1*2*pi*transpose([0:n_M-1])/n_M; end; %<-- yes image-dependent in-plane rotation. ;
if flag_noinplane==1; viewing_gamma_z_N_ = 0*2*pi*transpose([0:n_M-1])/n_M; end; %<-- not image-dependent in-plane rotation. ;
O_k_p_wM__ = M_k_p_wM__;
for nM=0:n_M-1;
M_k_p_w_ = M_k_p_wM__(:,1+nM);
viewing_gamma_z = viewing_gamma_z_N_(1+nM);
nCTF = index_nCTF_from_nN_(1+nM);
CTF_k_p_w_ = CTF_k_p_wC__(:,1+nCTF);
if flag_zeronoise==0; %<-- yes add noise. ;
rng(1+nM);
eps_k_p_w_ = sigma_noise/sqrt(2) * crandn(n_w,1); eps_k_p_w_ = eps_k_p_w_ + conj(circshift(eps_k_p_w_,floor(n_w/2))); %<-- conjugacy constraint. ;
O_k_p_w_ = rotate_p_to_p(1,n_w,n_w,M_k_p_w_.*CTF_k_p_w_,+viewing_gamma_z) + eps_k_p_w_;
end;%if flag_zeronoise==0;
if flag_zeronoise==1; %<-- not add noise. ;
O_k_p_w_ = rotate_p_to_p(1,n_w,n_w,M_k_p_w_.*CTF_k_p_w_,+viewing_gamma_z);
end;%if flag_zeronoise==1;
O_k_p_wM__(:,1+nM) = O_k_p_w_;
clear M_k_p_w_ viewing_gamma_z nCTF CTF_k_p_w_ O_k_p_w_ ;
end;%for nM=0:n_M-1;
%%%%%%%%;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,a_qbp_k_Y_lm_ ...
,a_evi_k_Y_lm_ ...
,a_var_k_Y_lm_ ...
,a_num_k_Y_lm_ ...
,a_0_k_Y_lm_ ...
,a_1_k_Y_lm_ ...
,a_2_k_Y_lm_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_M ...
,O_k_p_wM__ ...
,index_nCTF_from_nN_ ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
a_k_Y_5qbp_ = a_qbp_k_Y_lm_;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_0qbp_ vs a_k_Y_5qbp_: %0.16f',fnorm(a_k_Y_0qbp_-a_k_Y_5qbp_)/fnorm(a_k_Y_0qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_1qbp_ vs a_k_Y_5qbp_: %0.16f',fnorm(a_k_Y_1qbp_-a_k_Y_5qbp_)/fnorm(a_k_Y_1qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_2qbp_ vs a_k_Y_5qbp_: %0.16f',fnorm(a_k_Y_2qbp_-a_k_Y_5qbp_)/fnorm(a_k_Y_2qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_3qbp_ vs a_k_Y_5qbp_: %0.16f',fnorm(a_k_Y_3qbp_-a_k_Y_5qbp_)/fnorm(a_k_Y_3qbp_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_4qbp_ vs a_k_Y_5qbp_: %0.16f',fnorm(a_k_Y_4qbp_-a_k_Y_5qbp_)/fnorm(a_k_Y_4qbp_))); end;
%%%%%%%%;
a_qbp_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_qbp_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_evi_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_evi_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_var_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_var_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_num_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_num_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_0_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_0_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_1_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_1_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
a_2_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,a_2_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
%%%%%%%%;
% Now check for consistency across the moments. ;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% a_qbp_k_p_all_ vs (a_1_k_p_all_./a_0_k_p_all_): %0.16f',fnorm(a_qbp_k_p_all_ - (a_1_k_p_all_./a_0_k_p_all_))./fnorm(a_qbp_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_evi_k_p_all_ vs a_0_k_p_all_: %0.16f',fnorm(a_evi_k_p_all_ - a_0_k_p_all_)./fnorm(a_evi_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_var_k_p_all_ vs (a_2_k_p_all_./a_0_k_p_all_ - abs(a_1_k_p_all_./a_0_k_p_all_).^2): %0.16f',fnorm(a_var_k_p_all_ - (a_2_k_p_all_./a_0_k_p_all_ - abs(a_1_k_p_all_./a_0_k_p_all_).^2))./fnorm(a_var_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_var_k_p_all_ vs (a_2_k_p_all_./a_0_k_p_all_ - abs(a_qbp_k_p_all_).^2): %0.16f',fnorm(a_var_k_p_all_ - (a_2_k_p_all_./a_0_k_p_all_ - abs(a_qbp_k_p_all_).^2))./fnorm(a_var_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_2_k_p_all_ vs (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_qbp_k_p_all_).^2.*a_evi_k_p_all_): %0.16f',fnorm(a_2_k_p_all_ - (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_qbp_k_p_all_).^2.*a_evi_k_p_all_))./fnorm(a_2_k_p_all_))); end;
if (flag_verbose>0); disp(sprintf(' %% a_2_k_p_all_ vs (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_1_k_p_all_./a_0_k_p_all_).^2.*a_evi_k_p_all_): %0.16f',fnorm(a_2_k_p_all_ - (a_var_k_p_all_.*a_evi_k_p_all_ + abs(a_1_k_p_all_./a_0_k_p_all_).^2.*a_evi_k_p_all_))./fnorm(a_2_k_p_all_))); end;
%%%%%%%%;
% Now calculate ssnll. ;
%%%%%%%%;

%%%%;
parameter_ssnll = struct('type','parameter');
parameter_ssnll.flag_verbose = flag_verbose;
[ ...
 parameter_ssnll ...
,ssnll_M ...
] = ...
ssnll_from_S_k_p_single_shell_9( ...
 parameter_ssnll ...
,l_max ...
,n_w ...
,n_S ...
,S_k_p_wS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,n_M ...
,M_k_p_wM__ ...
,[] ...
,[] ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
);
if (flag_verbose>0); disp(sprintf(' %% ssnll_M: %0.16f',ssnll_M)); end;
%%%%;
parameter_ssnll = struct('type','parameter');
parameter_ssnll.flag_verbose = flag_verbose;
[ ...
 parameter_ssnll ...
,ssnll_N ...
] = ...
ssnll_from_S_k_p_single_shell_9( ...
 parameter_ssnll ...
,l_max ...
,n_w ...
,n_S ...
,S_k_p_wS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,n_M ...
,N_k_p_wM__ ...
,index_nCTF_from_nN_ ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
if (flag_verbose>0); disp(sprintf(' %% ssnll_N: %0.16f',ssnll_N)); end;
%%%%;
parameter_ssnll = struct('type','parameter');
parameter_ssnll.flag_verbose = flag_verbose;
[ ...
 parameter_ssnll ...
,ssnll_O ...
] = ...
ssnll_from_S_k_p_single_shell_9( ...
 parameter_ssnll ...
,l_max ...
,n_w ...
,n_S ...
,S_k_p_wS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,n_M ...
,O_k_p_wM__ ...
,index_nCTF_from_nN_ ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
if (flag_verbose>0); disp(sprintf(' %% ssnll_O: %0.16f',ssnll_O)); end;
%%%%%%%%;
ssnll_from_S_O = ssnll_O;
ssnll_from_V_O_term0 = sum( + 1*real(a_evi_k_p_all_).*abs(a_k_p_quad_).^2.*weight_shell_/(4*pi) , 'all' );
ssnll_from_V_O_term1 = sum( - 2*real(real(a_evi_k_p_all_).*conj(a_k_p_quad_).*(a_qbp_k_p_all_)).*weight_shell_/(4*pi) , 'all' );
ssnll_from_V_O_term2 = sum( + 1*real(a_evi_k_p_all_).*abs(a_qbp_k_p_all_).^2.*weight_shell_/(4*pi) , 'all' );
ssnll_from_V_O_term3 = sum( + 1*real(a_evi_k_p_all_).*abs(a_var_k_p_all_).*weight_shell_/(4*pi) , 'all' );
ssnll_from_V_O = 0.5 * (ssnll_from_V_O_term0 + ssnll_from_V_O_term1 + ssnll_from_V_O_term2 + ssnll_from_V_O_term3)*(4*pi)/n_w ;
if (flag_verbose>0); disp(sprintf(' %% ssnll_from_S_O (unscaled): %0.16f',ssnll_from_S_O)); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_from_V_O (unscaled): %0.16f',ssnll_from_V_O)); end;
%%%%%%%%;

%%%%%%%%;
% set up experiment to test scaling. ;
%%%%%%%%;
n_frac = 8;
frac_ = transpose(linspace(0,1,1+n_frac)); frac_ = frac_(1:n_frac);
ssnll_from_S_O_f_ = zeros(n_frac,1);
ssnll_from_V_O_f_ = zeros(n_frac,1);
%%%%%%%%;
for nfrac=0:n_frac-1;
frac = frac_(1+nfrac);
tmp_n_M = ceil(frac*n_M);
rng(1+nfrac); tmp_p_ij_ = randperm(n_M,tmp_n_M);
%%%%;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,tmp_a_qbp_k_Y_lm_ ...
,tmp_a_evi_k_Y_lm_ ...
,tmp_a_var_k_Y_lm_ ...
,tmp_a_num_k_Y_lm_ ...
,tmp_a_0_k_Y_lm_ ...
,tmp_a_1_k_Y_lm_ ...
,tmp_a_2_k_Y_lm_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,tmp_n_M ...
,O_k_p_wM__(:,tmp_p_ij_) ...
,index_nCTF_from_nN_(tmp_p_ij_) ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_(tmp_p_ij_) ...
,viewing_azimu_b_M_(tmp_p_ij_) ...
,viewing_gamma_z_N_(tmp_p_ij_) ...
);
tmp_a_qbp_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,tmp_a_qbp_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
tmp_a_evi_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,tmp_a_evi_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
tmp_a_var_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,tmp_a_var_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
tmp_ssnll_from_V_O_term0 = sum( + 1*real(tmp_a_evi_k_p_all_).*abs(a_k_p_quad_).^2.*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_O_term1 = sum( - 2*real(real(tmp_a_evi_k_p_all_).*conj(a_k_p_quad_).*(tmp_a_qbp_k_p_all_)).*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_O_term2 = sum( + 1*real(tmp_a_evi_k_p_all_).*abs(tmp_a_qbp_k_p_all_).^2.*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_O_term3 = sum( + 1*real(tmp_a_evi_k_p_all_).*abs(tmp_a_var_k_p_all_).*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_O = 0.5 * (tmp_ssnll_from_V_O_term0 + tmp_ssnll_from_V_O_term1 + tmp_ssnll_from_V_O_term2 + tmp_ssnll_from_V_O_term3)*(4*pi)/n_w ;
ssnll_from_V_O_f_(1+nfrac) = tmp_ssnll_from_V_O;
%%%%;
parameter_ssnll = struct('type','parameter');
parameter_ssnll.flag_verbose = flag_verbose;
[ ...
 parameter_ssnll ...
,tmp_ssnll_O ...
] = ...
ssnll_from_S_k_p_single_shell_9( ...
 parameter_ssnll ...
,l_max ...
,n_w ...
,n_S ...
,S_k_p_wS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,tmp_n_M ...
,O_k_p_wM__(:,tmp_p_ij_) ...
,index_nCTF_from_nN_(tmp_p_ij_) ...
,CTF_k_p_wC__ ...
,viewing_polar_a_M_(tmp_p_ij_) ...
,viewing_azimu_b_M_(tmp_p_ij_) ...
,viewing_gamma_z_N_(tmp_p_ij_) ...
);
tmp_ssnll_from_S_O = tmp_ssnll_O;
ssnll_from_S_O_f_(1+nfrac) = tmp_ssnll_from_S_O;
%%%%;
end;%for nfrac=0:n_frac-1;
%%%%%%%%;

if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,2,1);
plot(frac_,ssnll_from_S_O_f_,'ko-',frac_,ssnll_from_V_O_f_,'ro-');
xlabel('fraction of image-pool used'); ylabel('ssnll');
legend({'ssnll from S','ssnll from V'},'Location','NorthWest');
title('ssnll vs fraction','Interpreter','none');
subplot(1,2,2);
plot(frac_,ssnll_from_V_O_f_./ssnll_from_S_O_f_,'ro-');
xlabel('fraction of image-pool used'); ylabel('ssnll_from_V_O_f_./ssnll_from_S_O_f_','Interpreter','none');
title('ratio (i.e., volumetric/template) vs fraction','Interpreter','none');
end;%if flag_disp;

%%%%%%%%;
% Try with zero images and templates that are identically one. ;
%%%%%%%%;
tmp_a_k_Y_form_ = zeros(n_lm,1); tmp_a_k_Y_form_(1+0) = 1.0d0; %<-- all ones. ;
[ ...
 tmp_a_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 flag_verbose ...
,n_shell ...
,[0,n_shell] ...
,k_p_r_shell_ ...
,azimu_b_shell_ ...
,polar_a_shell_ ...
,weight_3d_k_p_r_ ...
,weight_shell_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max ...
,tmp_a_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
[ ...
 tmp_S_k_p_wS__ ...
] = ...
pm_template_2( ...
 flag_verbose ...
,l_max ...
,n_k_p_r ...
,tmp_a_k_Y_form_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w ...
);
if (flag_verbose>0); disp(sprintf(' %% n_w %d, viewing_k_eq_d %0.6f, n_S %d',n_w,viewing_k_eq_d,n_S)); end;
tmp_S_k_p_wS__ = reshape(tmp_S_k_p_wS__,[n_w,n_S]); %<-- now each element of tmp_S_k_p_wS__ should be 1/sqrt(4*pi). ;
if (flag_verbose>0); disp(sprintf(' %% fnorm(tmp_S_k_p_wS__ - 1/sqrt(4*pi)): %0.16f',fnorm(tmp_S_k_p_wS__ - 1/sqrt(4*pi)))); end;
%%%%;
parameter_qbp = struct('type','parameter');
parameter_qbp.tolerance_master = 1e-4;
parameter_qbp.flag_verbose = flag_verbose;
[ ...
 parameter_qbp ...
,tmp_a_qbp_k_Y_lm_ ...
,tmp_a_evi_k_Y_lm_ ...
,tmp_a_var_k_Y_lm_ ...
,tmp_a_num_k_Y_lm_ ...
,tmp_a_0_k_Y_lm_ ...
,tmp_a_1_k_Y_lm_ ...
,tmp_a_2_k_Y_lm_ ...
] = ...
qbp_single_shell_9( ...
 parameter_qbp ...
,l_max ...
,n_w ...
,n_M ...
,zeros(size(O_k_p_wM__)) ...
,index_nCTF_from_nN_ ...
,ones(size(CTF_k_p_wC__)) ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
tmp_a_qbp_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,tmp_a_qbp_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
tmp_a_evi_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,tmp_a_evi_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
tmp_a_var_k_p_all_ = convert_spharm_to_k_p_4(flag_verbose,n_shell,[0,n_shell],k_p_r_shell_,azimu_b_shell_,polar_a_shell_,weight_3d_k_p_r_,weight_shell_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max,tmp_a_var_k_Y_lm_,Ylm_uklma___,k_p_azimu_b_sub_uka__,k_p_polar_a_sub_uka__,l_max_uk_,index_nu_n_k_per_shell_from_nk_p_r_,index_k_per_shell_uka__);
tmp_ssnll_from_V_0_term0 = sum( + 1*real(tmp_a_evi_k_p_all_).*abs(tmp_a_k_p_quad_).^2.*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_0_term1 = sum( - 2*real(real(tmp_a_evi_k_p_all_).*conj(tmp_a_k_p_quad_).*(tmp_a_qbp_k_p_all_)).*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_0_term2 = sum( + 1*real(tmp_a_evi_k_p_all_).*abs(tmp_a_qbp_k_p_all_).^2.*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_0_term3 = sum( + 1*real(tmp_a_evi_k_p_all_).*abs(tmp_a_var_k_p_all_).*weight_shell_/(4*pi) , 'all' );
tmp_ssnll_from_V_0 = 0.5 * (tmp_ssnll_from_V_0_term0 + tmp_ssnll_from_V_0_term1 + tmp_ssnll_from_V_0_term2 + tmp_ssnll_from_V_0_term3)*(4*pi)/n_w ;
%%%%;
parameter_ssnll = struct('type','parameter');
parameter_ssnll.flag_verbose = flag_verbose;
[ ...
 parameter_ssnll ...
,tmp_ssnll_0 ...
] = ...
ssnll_from_S_k_p_single_shell_9( ...
 parameter_ssnll ...
,l_max ...
,n_w ...
,n_S ...
,tmp_S_k_p_wS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,n_M ...
,zeros(size(O_k_p_wM__)) ...
,index_nCTF_from_nN_ ...
,ones(size(CTF_k_p_wC__)) ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
tmp_ssnll_from_S_0 = tmp_ssnll_0;
%%%%%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
fontsize_use = 12;
subplot(1,2,1);
alim_ = [0,max(real(tmp_a_evi_k_p_all_))];
flag_2d_vs_3d = 0;
imagesc_polar_a_azimu_b_0(polar_a_shell_,azimu_b_shell_,real(tmp_a_evi_k_p_all_),alim_,colormap_80s(),flag_2d_vs_3d);
title('real(tmp_a_evi_k_p_all_)','Interpreter','none');
set(gca,'FontSize',fontsize_use);
axisnotick3d; axis equal; axis vis3d;
subplot(1,2,2);
[ ...
 tmp_k_p_polar_a_wM__ ...
,tmp_k_p_azimu_b_wM__ ...
] = ...
cg_rhs_2( ...
 n_M ...
,n_w ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_N_ ...
);
flag_loghist_vs_hist = 0;
[ ...
 hist_ ...
 weighted_hist_ ...
 lim_use_ ...
] = ...
hist2d_polar_a_azimu_b_0( ...
 polar_a_shell_ ...
,azimu_b_shell_ ...
,weight_shell_ ...
,periodize(tmp_k_p_polar_a_wM__(:),0,1*pi) ...
,periodize(tmp_k_p_azimu_b_wM__(:),0,2*pi) ...
,alim_ ...
,colormap_80s ...
,flag_2d_vs_3d ...
,flag_loghist_vs_hist ...
);
title('empirical a_evi_k_p_all_','Interpreter','none');
set(gca,'FontSize',fontsize_use);
axisnotick3d; axis equal; axis vis3d;
end;%if flag_disp;
%%%%%%%%;

%%%%%%%%;
% Now see ssnll_from_a_k_Y_10.m ;
% for a more general ssnll calculation. ;
%%%%%%%%;



		    





