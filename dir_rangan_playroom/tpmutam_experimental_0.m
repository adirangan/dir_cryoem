function tpmutam_experimental_0( ...
 dat_infix ...
,dat_rseed ...
,dat_n_M ...
,dat_M_k_p__ ...
,dat_n_UX_rank ...
,dat_n_iteration ...
,dat_n_order ...
,dir_trunk ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,n_w_ ...
,weight_3d_k_p_r_ ...
,weight_2d_k_p_r_ ...
,viewing_k_eq_d ...
,template_k_eq_d ...
,delta_r_max ...
,delta_r_upb ...
,svd_eps ...
,n_delta_v_requested ...
,n_CTF_rank ...
,CTF_index_ ...
,CTF_k_p_r__ ...
,l_max_ ...
,UX__ ...
,X_weight_r_ ...
,a_CTF_UX_Y_quad__ ...
,euler_polar_a_0in_ ...
,euler_azimu_b_0in_ ...
,euler_gamma_z_0in_ ...
,image_delta_x_0in_ ...
,image_delta_y_0in_ ...
,image_I_value_0in_ ...
,f_rand_0in ...
,flag_plot ...
,order_limit_MS ...
,flag_mp_init ...
);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% test_principled_marching_update_translation_alternating_minimization_experimental_0. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

date_diff_threshold = 1.5;

if (nargin<34); f_rand_0in = 0.05; end;
if (nargin<35); flag_plot = 1; end;
if (nargin<36); order_limit_MS = -1; end;
if (nargin<37); flag_mp_init = 0; end;

rng(0);

n_lm_ = (l_max_+1).^2;
n_lm_max = max(n_lm_);
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
l_max_max = max(l_max_); dWtdkd__l_max_max = 2*l_max_max;
m_max_ = -l_max_max : +l_max_max;
n_m_max = length(m_max_);
n_w_max = max(n_w_);
n_w_sum = sum(n_w_);
n_w_csum_ = cumsum([0;n_w_]);
verbose=1;

fname_mat = sprintf('%s_mat/tpmutameux_%s_M_k_p___n%.3dr%.3d.mat',dir_trunk,dat_infix,dat_n_M,dat_n_UX_rank);
if (~exist(fname_mat,'file'));
disp(sprintf(' %% %s not found, creating',fname_mat));
%%%%%%%%
% Set up translation distribution. ;
%%%%%%%%;
% Note that a 2d isotropic gaussian with std delta_sigma has the property ;
% that a fraction (1-exp(-R^2/(2*delta_sigma^2))) is contained within radius R. ;
% For example, try out: ;
% tmp_delta_sigma = 1.45; tmp_R = 3.3; tmp_A_ = randn(1024*64,2)*tmp_delta_sigma; tmp_r_ = sqrt(sum(tmp_A_.^2,2)); tmp_0in = numel(find(tmp_r_<tmp_R))/numel(tmp_r_); tmp_1in = 1-exp(-tmp_R^2/(2*tmp_delta_sigma^2)); disp(sprintf(' %% I_monte: %0.6f I_form: %0.6f',tmp_0in,tmp_1in));
% Thus, to ensure that 95-percent of the true-displacements lie within delta_r_max, ;
% we require that exp(-delta_r_max^2/(2*delta_sigma^2)) = 0.05 ;
% or that delta_sigma = sqrt(delta_r_max^2/log(20^2)). ;
% Roughly speaking, delta_sigma should approximately equal delta_r_max/2.5. ;
% Conversely: if we know delta_sigma, we can conclude that delta_r_max = delta_sigma*sqrt(log(20^2)). ; 
%%%%%%%%;
delta_r_p = 0.05;
delta_r_s = delta_r_max/sqrt(2*log(1/delta_r_p));
delta_r_N = delta_r_max * (2*pi*k_p_r_max) / (pi*sqrt(2));
tmp_t = tic();
FTK = ampmh_FTK_1(n_k_p_r,k_p_r_,k_p_r_max,delta_r_max,svd_eps,n_delta_v_requested);
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% FTK: %0.3fs',tmp_t)); end;
disp(sprintf(' %% p-val %0.4f delta_r_max %0.6f sigma %0.4f N_pixel %0.4f --> FTK.n_svd_l %d, n_delta_v_requested %d',delta_r_p,delta_r_max,delta_r_s,delta_r_N,FTK.n_svd_l,n_delta_v_requested));
%{
%%%%%%%%;
% no need to prepare precomputation for ampm. ;
%%%%%%%%;
pm_n_UX_rank = dat_n_UX_rank;
tmp_t = tic();
dat_M_k_q__ = zeros(n_w_sum,dat_n_M);
for nM=0:dat_n_M-1;
dat_M_k_q__(:,1+nM) = interp_p_to_q(n_k_p_r,n_w_,n_w_sum,dat_M_k_p__(:,1+nM));
end;%for nM=0:dat_n_M-1;
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% dat_M_k_q__: %0.3fs',tmp_t)); end;
tmp_t = tic();
svd_VUXM_lwnM____ = tpmh_VUXM_lwnM____0(FTK,n_k_p_r,n_w_,dat_n_M,dat_M_k_q__,pm_n_UX_rank,UX__,X_weight_r_);
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% svd_VUXM_lwnM____: %0.3fs',tmp_t)); end;
tmp_t = tic();
UX_M_l2_dM__ = ampmh_UX_M_l2_dM__1(FTK,n_w_,dat_n_M,pm_n_UX_rank,svd_VUXM_lwnM____);
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% UX_M_l2_dM__: %0.3fs',tmp_t)); end;
[dat_UX_M_k_q_wnM_d0___,dat_UX_M_k_p_wnM_d0___] = ampmh_UX_M_k_p_wnM___0(FTK,n_w_,pm_n_UX_rank,dat_n_M,svd_VUXM_lwnM____(:,:,1:pm_n_UX_rank,:),zeros(dat_n_M,1),zeros(dat_n_M,1));
%}
%%%%%%%%;
save(fname_mat ...
     ,'n_lm_','n_lm_max','n_lm_sum','n_lm_csum_','l_max_max','m_max_','n_m_max' ...
     ,'n_w_','n_w_max','n_w_sum','n_w_csum_' ...
     ,'delta_r_max','delta_r_p','delta_r_s','delta_r_N','svd_eps','n_delta_v_requested','FTK' ...
     );
end;%if (~exist(fname_mat,'file'));
if ( exist(fname_mat,'file'));
disp(sprintf(' %% %s found, not creating',fname_mat));
load(fname_mat);
end;%if ( exist(fname_mat,'file'));
%%%%%%%%;

rng(dat_rseed);

fname_0 = sprintf('%s_mat/tpmutameux_%s_n%.3d',dir_trunk,dat_infix,dat_n_M);

tmp_t = tic();
dat_M_k_q__ = zeros(n_w_sum,dat_n_M);
for nM=0:dat_n_M-1;
dat_M_k_q__(:,1+nM) = interp_p_to_q(n_k_p_r,n_w_,n_w_sum,dat_M_k_p__(:,1+nM));
end;%for nM=0:dat_n_M-1;
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% dat_M_k_q__: %0.3fs',tmp_t)); end;

pm_n_UX_rank = dat_n_UX_rank;
pm_n_k_p_r = pm_n_UX_rank;
pm_k_p_r_ = ones(pm_n_k_p_r,1);
pm_k_p_r_max = 1;
pm_n_w_ = n_w_max*ones(pm_n_k_p_r,1);
pm_n_w_max = n_w_max;
pm_n_w_sum = sum(pm_n_w_);
pm_n_w_csum_ = cumsum([0;pm_n_w_]);
pm_l_max_ = l_max_max*ones(pm_n_k_p_r,1);
pm_n_lm_ = (1+pm_l_max_).^2; pm_n_lm_sum = sum(pm_n_lm_);
pm_weight_3d_k_p_r_ = ones(pm_n_k_p_r,1);
pm_weight_2d_k_p_r_ = ones(pm_n_k_p_r,1);
pm_N_pixel = delta_r_max * (2*pi*k_p_r_max) / (pi*sqrt(2)) ; 

%%%%%%%%;
% Now set up alternating minimization for 'MS-phase' of successive combinations of principled-image-rings. ;
%%%%%%%%;
for nUX_rank=0:dat_n_UX_rank-1;
fname_2 = sprintf('nUX%.3drng%.3d',nUX_rank,dat_rseed);
MS_fname_pre = sprintf('%s_MS_%s',fname_0,fname_2);
MS_fname_mat = sprintf('%s.mat',MS_fname_pre);
%MS_fname_tmp = sprintf('%s.tmp',MS_fname_pre);
if (~exist(MS_fname_mat,'file'));
flag_skip=0;
MS_fname_tmp = sprintf('%s.tmp',MS_fname_pre);
if ( exist(MS_fname_tmp,'file'));
tmp_date_diff = datenum(clock) - datenum(dir(MS_fname_tmp).date);
if (tmp_date_diff< date_diff_threshold);
disp(sprintf(' %% %s found, tmp_date_diff = %0.2f = recent, skipping',MS_fname_tmp,tmp_date_diff));
flag_skip=1;
end;%if (tmp_date_diff< date_diff_threshold);
if (tmp_date_diff>=date_diff_threshold);
disp(sprintf(' %% %s found, tmp_date_diff = %0.2f = stale, deleting',MS_fname_tmp,tmp_date_diff));
delete(MS_fname_tmp);
flag_skip=0;
end;%if (tmp_date_diff>=date_diff_threshold);
end;%if ( exist(MS_fname_tmp,'file'));
if (~flag_skip);
disp(sprintf(' %% %s not found, creating',MS_fname_pre));
save(MS_fname_tmp,'MS_fname_mat');
%%%%%%%%;
if flag_mp_init;
if ( isempty(euler_polar_a_0in_) | isempty(euler_azimu_b_0in_) | isempty(euler_gamma_z_0in_) )
[ ...
 mp_init_image_polar_a_0est_ ...
,mp_init_image_azimu_b_0est_ ...
,mp_init_image_gamma_z_0est_ ...
,mp_init_image_delta_0est_dM__ ...
,mp_init_image_sigma_gamma_z_0est_ ...
,mp_init_image_sigma_delta_0est_ ...
,mp_init_image_flag_update_0est_ ...
,mp_init_fnorm_d_image_gamma_z_0est_ ...
,mp_init_fnorm_d_image_delta_0est_ ...
] = ...
mp_init_0( ...
 dir_trunk ...
,dat_infix ...
,dat_n_M ...
,dat_M_k_p__ ...
,dat_n_UX_rank ...
,nUX_rank ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,n_w_max*ones(n_k_p_r,1) ...
,weight_3d_k_p_r_ ...
,weight_2d_k_p_r_ ...
,viewing_k_eq_d ...
,template_k_eq_d ...
,delta_r_max ...
,svd_eps ...
,n_delta_v_requested ...
,n_CTF_rank ...
,CTF_index_ ...
,CTF_k_p_r__ ...
,UX__ ...
,X_weight_r_ ...
);
euler_polar_a_use_ = mp_init_image_polar_a_0est_;
euler_azimu_b_use_ = mp_init_image_azimu_b_0est_;
euler_gamma_z_use_ = mp_init_image_gamma_z_0est_;
image_delta_x_use_ = transpose(mp_init_image_delta_0est_dM__(1+0,:));
image_delta_y_use_ = transpose(mp_init_image_delta_0est_dM__(1+1,:));
image_I_value_use_ = ones(dat_n_M,1);
else;
euler_polar_a_use_ = euler_polar_a_0in_;
euler_azimu_b_use_ = euler_azimu_b_0in_;
euler_gamma_z_use_ = euler_gamma_z_0in_;
image_delta_x_use_ = image_delta_x_0in_;
image_delta_y_use_ = image_delta_y_0in_;
image_I_value_use_ = image_I_value_0in_;
end;%if ( isempty(euler_polar_a_0in_) | isempty(euler_azimu_b_0in_) | isempty(euler_gamma_z_0in_) )
end;%if flag_mp_init;
if ~flag_mp_init;
euler_polar_a_use_ = euler_polar_a_0in_;
euler_azimu_b_use_ = euler_azimu_b_0in_;
euler_gamma_z_use_ = euler_gamma_z_0in_;
image_delta_x_use_ = image_delta_x_0in_;
image_delta_y_use_ = image_delta_y_0in_;
image_I_value_use_ = image_I_value_0in_;
end;%if ~flag_mp_init;
%%%%%%%%;
tmp_rseed=dat_rseed;tmp_n_iteration=dat_n_iteration;tmp_n_iteration_register=1;
tmp_viewing_k_eq_d = 1/(2*pi)/sqrt(1);tmp_n_order = dat_n_order;
tmp_pm_n_UX_rank = 1+nUX_rank;
tmp_pm_n_k_p_r = tmp_pm_n_UX_rank;
tmp_pm_k_p_r_ = ones(tmp_pm_n_k_p_r,1);
tmp_pm_k_p_r_max = 1;
tmp_pm_n_w_ = n_w_max*ones(tmp_pm_n_k_p_r,1);
tmp_pm_n_w_max = n_w_max;
tmp_pm_n_w_sum = sum(tmp_pm_n_w_);
tmp_pm_n_w_csum_ = cumsum([0;tmp_pm_n_w_]);
tmp_pm_l_max_ = l_max_max*ones(tmp_pm_n_k_p_r,1);
tmp_pm_n_lm_ = (1+tmp_pm_l_max_).^2; tmp_pm_n_lm_sum = sum(tmp_pm_n_lm_);
tmp_pm_weight_3d_k_p_r_ = ones(tmp_pm_n_k_p_r,1);
tmp_pm_weight_2d_k_p_r_ = ones(tmp_pm_n_k_p_r,1);
flag_MS_vs_SM = 1;
f_rand = 0;
a_CTF_UX_Y_true_ = reshape(a_CTF_UX_Y_quad__(:,1:tmp_pm_n_UX_rank),[n_lm_max*tmp_pm_n_UX_rank,1]); %<-- use as ground truth for this set of principled-image-rings. ;
tmp_t = tic();
[X_best_MS_ ...
,a_CTF_UX_Y_0lsq_MS__ ...
,euler_polar_a_MS__ ...
,euler_azimu_b_MS__ ...
,euler_gamma_z_MS__ ...
,image_delta_x_MS__ ...
,image_delta_y_MS__ ...
,image_I_value_MS__ ...
,image_X_value_MS__ ...
,image_S_index_MS__ ...
] = ...
ampmut_1( ...
 tmp_rseed ...
,tmp_n_iteration ...
,tmp_n_iteration_register ...
,tmp_viewing_k_eq_d ...
,tmp_n_order ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,weight_2d_k_p_r_ ...
,delta_r_max ...
,delta_r_upb ...
,svd_eps ...
,n_delta_v_requested ...
,FTK ...
,n_w_ ...
,tmp_pm_n_UX_rank ...
,UX__(:,1:tmp_pm_n_UX_rank) ...
,X_weight_r_ ...
,dat_n_M ...
,dat_M_k_p__ ...
,n_CTF_rank ...
,CTF_index_ ...
,CTF_k_p_r__ ...
,l_max_ ...
,a_CTF_UX_Y_true_ ...
,euler_polar_a_use_ ...
,euler_azimu_b_use_ ...
,euler_gamma_z_use_ ...
,image_delta_x_use_ ...
,image_delta_y_use_ ...
,image_I_value_use_ ...
,flag_MS_vs_SM ...
,f_rand ...
,order_limit_MS ...
);
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% X_best_MS_: %0.3fs',tmp_t)); end;
X_best_MS_time = tmp_t;
%%%%%%%%;
% Construct M_k_q__ while taking into account the translations. ;
%%%%%%%%;
tmp_t = tic();
dat_M_k_q__ = zeros(n_w_sum,dat_n_M);
for nM=0:dat_n_M-1;
dat_M_k_p_ = ...
transf_p_to_p( ...
 n_k_p_r ...
,k_p_r_ ...
,n_w_ ...
,n_w_sum ...
,dat_M_k_p__(:,1+nM) ...
,+image_delta_x_MS__(1+nM,end) ...
,+image_delta_y_MS__(1+nM,end) ...
);
dat_M_k_q__(:,1+nM) = ...
interp_p_to_q( ...
 n_k_p_r ...
,n_w_ ...
,n_w_sum ...
,dat_M_k_p_ ...
);
end;%for nM=0:dat_n_M-1;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% dat_M_k_q__: %0.3fs',tmp_t)); end;
%%%%%%%%;
% Now form svd_VUXM_lwnM____ using these translated images. ;
%%%%%%%%;
tmp_t = tic();
svd_VUXM_lwnM____ = tpmh_VUXM_lwnM____0(FTK,n_k_p_r,n_w_,dat_n_M,dat_M_k_q__,tmp_pm_n_UX_rank,UX__(:,1:tmp_pm_n_UX_rank),X_weight_r_);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_VUXM_lwnM____: %0.3fs',tmp_t)); end;
%%%%%%%%;
tmp_t = tic();
tmp_n_residual_loading = 3; tmp_n_residual_iteration = 32;
[UX_M_k_q_wnM___,UX_M_k_p_wnM___] = ...
ampmh_UX_M_k_p_wnM___0( ...
 FTK ...
,n_w_ ...
,tmp_pm_n_UX_rank ...
,dat_n_M ...
,svd_VUXM_lwnM____(:,:,1:tmp_pm_n_UX_rank,:) ...
,image_delta_x_MS__(:,end) ...
,image_delta_y_MS__(:,end) ...
);
dat_M_loading_MS__ = ...
get_loading_0( ...
 tmp_n_residual_loading ...
,tmp_n_residual_iteration ...
,dat_n_order ...
,tmp_pm_n_k_p_r ...
,tmp_pm_weight_3d_k_p_r_ ...
,tmp_pm_l_max_ ...
,tmp_pm_n_w_ ...
,dat_n_M ...
,reshape(UX_M_k_p_wnM___,[tmp_pm_n_w_sum,dat_n_M]) ...
,euler_polar_a_MS__(:,end) ...
,euler_azimu_b_MS__(:,end) ...
,euler_gamma_z_MS__(:,end) ...
);
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% dat_M_loading_MS__: %0.3fs',tmp_t)); end;
dat_M_loading_MS_time = tmp_t;
save(MS_fname_mat ...
     ,'X_best_MS_','X_best_MS_time' ...
     ,'a_CTF_UX_Y_0lsq_MS__' ...
     ,'euler_polar_a_MS__','euler_azimu_b_MS__','euler_gamma_z_MS__' ...
     ,'image_delta_x_MS__','image_delta_y_MS__','image_X_value_MS__','image_S_index_MS__','image_I_value_MS__' ...
     ,'dat_M_loading_MS__','dat_M_loading_MS_time' ...
     );
%%%%%%%%;
delete(MS_fname_tmp);
end;%if (~flag_skip);
end;%if (~exist(MS_fname_mat,'file'));
if ( exist(MS_fname_mat,'file'));
disp(sprintf(' %% %s found, not creating',MS_fname_pre));
end;%if ( exist(MS_fname_mat,'file'));
end;%for nUX_rank=0:dat_n_UX_rank-1;

%%%%%%%%;
% Now set up alternating minimization for 'SM-phase' of successive combinations of principled-image-rings. ;
%%%%%%%%;
for nUX_rank=0:dat_n_UX_rank-1;
fname_2 = sprintf('nUX%.3drng%.3d',nUX_rank,dat_rseed);
MS_fname_pre = sprintf('%s_MS_%s',fname_0,fname_2);
MS_fname_mat = sprintf('%s.mat',MS_fname_pre);
%MS_fname_tmp = sprintf('%s.tmp',MS_fname_pre);
tmp_rseed=dat_rseed;tmp_n_iteration=dat_n_iteration;tmp_n_iteration_register=1;
tmp_viewing_k_eq_d = 1/(2*pi)/sqrt(1);tmp_n_order = dat_n_order;
tmp_pm_n_UX_rank = 1+nUX_rank;
tmp_pm_n_k_p_r = tmp_pm_n_UX_rank;
tmp_pm_k_p_r_ = ones(tmp_pm_n_k_p_r,1);
tmp_pm_k_p_r_max = 1;
tmp_pm_n_w_ = n_w_max*ones(tmp_pm_n_k_p_r,1);
tmp_pm_n_w_max = n_w_max;
tmp_pm_n_w_sum = sum(tmp_pm_n_w_);
tmp_pm_n_w_csum_ = cumsum([0;tmp_pm_n_w_]);
tmp_pm_l_max_ = l_max_max*ones(tmp_pm_n_k_p_r,1);
tmp_pm_n_lm_ = (1+tmp_pm_l_max_).^2; tmp_pm_n_lm_sum = sum(tmp_pm_n_lm_);
tmp_pm_weight_3d_k_p_r_ = ones(tmp_pm_n_k_p_r,1);
tmp_pm_weight_2d_k_p_r_ = ones(tmp_pm_n_k_p_r,1);
if (~exist(MS_fname_mat,'file'));
disp(sprintf(' %% %s not found, skipping',MS_fname_pre));
end;%if (~exist(MS_fname_mat,'file'));
if ( exist(MS_fname_mat,'file'));
disp(sprintf(' %% %s found, loading',MS_fname_pre));
MS_tmp_ = load(MS_fname_mat);
%%%%%%%%;
SM_fname_pre = sprintf('%s_SM_%s',fname_0,fname_2);
SM_fname_mat = sprintf('%s.mat',SM_fname_pre);
%SM_fname_tmp = sprintf('%s.tmp',SM_fname_pre);
if (~exist(SM_fname_mat,'file'));
flag_skip=0;
SM_fname_tmp = sprintf('%s.tmp',SM_fname_pre);
if ( exist(SM_fname_tmp,'file'));
tmp_date_diff = datenum(clock) - datenum(dir(SM_fname_tmp).date);
if (tmp_date_diff< date_diff_threshold);
disp(sprintf(' %% %s found, tmp_date_diff = %0.2f = recent, skipping',SM_fname_tmp,tmp_date_diff));
flag_skip=1;
end;%if (tmp_date_diff< date_diff_threshold);
if (tmp_date_diff>=date_diff_threshold);
disp(sprintf(' %% %s found, tmp_date_diff = %0.2f = stale, deleting',SM_fname_tmp,tmp_date_diff));
delete(SM_fname_tmp);
flag_skip=0;
end;%if (tmp_date_diff>=date_diff_threshold);
end;%if ( exist(SM_fname_tmp,'file'));
if (~flag_skip);
disp(sprintf(' %% %s not found, creating',SM_fname_pre));
save(SM_fname_tmp,'SM_fname_mat');
%%%%%%%%;
tmp_euler_polar_a_MS_ = MS_tmp_.euler_polar_a_MS__(:,end);
tmp_euler_azimu_b_MS_ = MS_tmp_.euler_azimu_b_MS__(:,end);
tmp_euler_gamma_z_MS_ = MS_tmp_.euler_gamma_z_MS__(:,end);
tmp_image_delta_x_MS_ = MS_tmp_.image_delta_x_MS__(:,end);
tmp_image_delta_y_MS_ = MS_tmp_.image_delta_y_MS__(:,end);
tmp_image_I_value_MS_ = MS_tmp_.image_I_value_MS__(:,end);
flag_MS_vs_SM = 0; f_rand = f_rand_0in;
%%%%%%%%;
tmp_rseed=dat_rseed;tmp_n_iteration=dat_n_iteration;tmp_n_iteration_register=1;
tmp_viewing_k_eq_d = 1/(2*pi)/sqrt(1);tmp_n_order = dat_n_order;
a_CTF_UX_Y_true_ = reshape(a_CTF_UX_Y_quad__(:,1:tmp_pm_n_UX_rank),[n_lm_max*tmp_pm_n_UX_rank,1]); %<-- use as ground truth for this set of principled-image-rings. ;
tmp_t = tic();
[X_best_SM_ ...
,a_CTF_UX_Y_0lsq_SM__ ...
,euler_polar_a_SM__ ...
,euler_azimu_b_SM__ ...
,euler_gamma_z_SM__ ...
,image_delta_x_SM__ ...
,image_delta_y_SM__ ...
,image_I_value_SM__ ...
,image_X_value_SM__ ...
,image_S_index_SM__ ...
] = ...
ampmut_1( ...
 tmp_rseed ...
,tmp_n_iteration ...
,tmp_n_iteration_register ...
,tmp_viewing_k_eq_d ...
,tmp_n_order ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,weight_2d_k_p_r_ ...
,delta_r_max ...
,delta_r_upb ...
,svd_eps ...
,n_delta_v_requested ...
,FTK ...
,n_w_ ...
,tmp_pm_n_UX_rank ...
,UX__(:,1:tmp_pm_n_UX_rank) ...
,X_weight_r_ ...
,dat_n_M ...
,dat_M_k_p__ ...
,n_CTF_rank ...
,CTF_index_ ...
,CTF_k_p_r__ ...
,l_max_ ...
,a_CTF_UX_Y_true_ ...
,tmp_euler_polar_a_MS_ ...
,tmp_euler_azimu_b_MS_ ...
,tmp_euler_gamma_z_MS_ ...
,tmp_image_delta_x_MS_ ...
,tmp_image_delta_y_MS_ ...
,tmp_image_I_value_MS_ ...
,flag_MS_vs_SM ...
,f_rand ...
,order_limit_MS ...
);
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% X_best_SM_: %0.3fs',tmp_t)); end;
X_best_SM_time = tmp_t;
%%%%%%%%;
% Construct M_k_q__ while taking into account the translations. ;
%%%%%%%%;
tmp_t = tic();
dat_M_k_q__ = zeros(n_w_sum,dat_n_M);
for nM=0:dat_n_M-1;
dat_M_k_p_ = ...
transf_p_to_p( ...
 n_k_p_r ...
,k_p_r_ ...
,n_w_ ...
,n_w_sum ...
,dat_M_k_p__(:,1+nM) ...
,+image_delta_x_SM__(1+nM,end) ...
,+image_delta_y_SM__(1+nM,end) ...
);
dat_M_k_q__(:,1+nM) = ...
interp_p_to_q( ...
 n_k_p_r ...
,n_w_ ...
,n_w_sum ...
,dat_M_k_p_ ...
);
end;%for nM=0:dat_n_M-1;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% dat_M_k_q__: %0.3fs',tmp_t)); end;
%%%%%%%%;
% Now form svd_VUXM_lwnM____ using these translated images. ;
%%%%%%%%;
tmp_t = tic();
svd_VUXM_lwnM____ = tpmh_VUXM_lwnM____0(FTK,n_k_p_r,n_w_,dat_n_M,dat_M_k_q__,tmp_pm_n_UX_rank,UX__(:,1:tmp_pm_n_UX_rank),X_weight_r_);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_VUXM_lwnM____: %0.3fs',tmp_t)); end;
%%%%%%%%;
tmp_t = tic();
tmp_n_residual_loading = 3; tmp_n_residual_iteration = 32;
[UX_M_k_q_wnM___,UX_M_k_p_wnM___] = ...
ampmh_UX_M_k_p_wnM___0( ...
 FTK ...
,n_w_ ...
,tmp_pm_n_UX_rank ...
,dat_n_M ...
,svd_VUXM_lwnM____(:,:,1:tmp_pm_n_UX_rank,:) ...
,image_delta_x_SM__(:,end) ...
,image_delta_y_SM__(:,end) ...
);
dat_M_loading_SM__ = ...
get_loading_0( ...
 tmp_n_residual_loading ...
,tmp_n_residual_iteration ...
,dat_n_order ...
,tmp_pm_n_k_p_r ...
,tmp_pm_weight_3d_k_p_r_ ...
,tmp_pm_l_max_ ...
,tmp_pm_n_w_ ...
,dat_n_M ...
,reshape(UX_M_k_p_wnM___,[tmp_pm_n_w_sum,dat_n_M]) ...
,euler_polar_a_SM__(:,end) ...
,euler_azimu_b_SM__(:,end) ...
,euler_gamma_z_SM__(:,end) ...
);
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% dat_M_loading_SM__: %0.3fs',tmp_t)); end;
dat_M_loading_SM_time = tmp_t;
save(SM_fname_mat ...
     ,'X_best_SM_','X_best_SM_time' ...
     ,'a_CTF_UX_Y_0lsq_SM__' ...
     ,'euler_polar_a_SM__','euler_azimu_b_SM__','euler_gamma_z_SM__' ...
     ,'image_delta_x_SM__','image_delta_y_SM__','image_X_value_SM__','image_S_index_SM__','image_I_value_SM__' ...
     ,'dat_M_loading_SM__','dat_M_loading_SM_time' ...
     );
%%%%%%%%;
delete(SM_fname_tmp);
end;%if (~flag_skip);
end;%if (~exist(SM_fname_mat,'file'));
if ( exist(SM_fname_mat,'file'));
disp(sprintf(' %% %s found, not creating',SM_fname_pre));
end;%if ( exist(SM_fname_mat,'file'));
%%%%%%%%;
end;%if ( exist(MS_fname_mat,'file'));
end;%for nUX_rank=0:dat_n_UX_rank-1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;





