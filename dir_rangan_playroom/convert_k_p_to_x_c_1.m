function ...
[ ...
 a_x_c_ ...
] = ...
convert_k_p_to_x_c_1( ...
 verbose ...
,n_k_all ...
,weight_3d_k_all_ ...
,k_c_0_all_ ...
,k_c_1_all_ ...
,k_c_2_all_ ...
,k_p_r_max ...
,n_xxx_c ...
,xxx_c_weight_ ...
,x_c_0___ ...
,x_c_1___ ...
,x_c_2___ ...
,x_p_r_max ...
,a_k_p_ ...
);

na=0;
if (nargin<1+na); verbose=[]; end; na=na+1;
if (nargin<1+na); n_k_all=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_all_=[]; end; na=na+1;
if (nargin<1+na); k_c_0_all_=[]; end; na=na+1;
if (nargin<1+na); k_c_1_all_=[]; end; na=na+1;
if (nargin<1+na); k_c_2_all_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_max=[]; end; na=na+1;
if (nargin<1+na); n_xxx_c=[]; end; na=na+1;
if (nargin<1+na); xxx_c_weight_=[]; end; na=na+1;
if (nargin<1+na); x_c_0___=[]; end; na=na+1;
if (nargin<1+na); x_c_1___=[]; end; na=na+1;
if (nargin<1+na); x_c_2___=[]; end; na=na+1;
if (nargin<1+na); x_p_r_max=[]; end; na=na+1;
if (nargin<1+na); a_k_p_=[]; end; na=na+1;

if (verbose); disp(sprintf(' %% [entering convert_k_p_to_x_c_1]')); end;

if isempty(x_p_r_max); x_p_r_max = 1.0; end;
if isempty(n_xxx_c); n_xxx_c = numel(x_c_0___); end;
%assert(numel(a_x_c_)==n_xxx_c);
assert(numel(x_c_0___)==n_xxx_c);
assert(numel(x_c_1___)==n_xxx_c);
assert(numel(x_c_2___)==n_xxx_c);
if isempty(xxx_c_weight_); xxx_c_weight_ = (2*x_p_r_max)^3 / n_xxx_c; end;

eta = pi/k_p_r_max; tmp_t = tic;
a_x_c_ = ...
xxnufft3d3( ...
 n_k_all ...
,2*pi*k_c_0_all_*eta ...
,2*pi*k_c_1_all_*eta ...
,2*pi*k_c_2_all_*eta ...
,a_k_p_.*(2*pi)^3.*weight_3d_k_all_ ...
,+1 ...
,1e-12 ...
,n_xxx_c ...
,x_c_0___(:)/eta ...
,x_c_1___(:)/eta ...
,x_c_2___(:)/eta ...
) ...
/sqrt(2*pi)/sqrt(2*pi)/sqrt(2*pi);
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% xxnufft3d3: a_k_p_ to a_x_c_ time %0.2fs',tmp_t)); end;

if (verbose); disp(sprintf(' %% [finished convert_k_p_to_x_c_1]')); end;
