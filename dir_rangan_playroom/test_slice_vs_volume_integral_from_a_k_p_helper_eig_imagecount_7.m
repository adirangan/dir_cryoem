%%%%%%%%;
% intended for use with test_slice_vs_volume_integral_from_a_k_p_trpv1_12.m ;
% limiting to principal-modes. ;
%%%%%%%%;

[~,str_hostname] = system('hostname');
flag_256G = 0 ...
| ~isempty(strfind(str_hostname,'crunchy')) ...
| ~isempty(strfind(str_hostname,'linserv')) ...
;
flag_128G = 0 ...
| ~isempty(strfind(str_hostname,'crunchy')) ...
| ~isempty(strfind(str_hostname,'linserv')) ...
| ~isempty(strfind(str_hostname,'xcalibr8')) ...
| ~isempty(strfind(str_hostname,'snappy')) ...
;

n_1 = 1; n_3 = 3; n_9 = 9;

%%%%%%%%;
% If necessary, calculate the idealized principal-modes for unit CTF. ;
%%%%%%%%;
if ~exist('X_2d_x1_d0_kk__','var');
[X_2d_x1_d0_kk__,X_2d_x1_d0_weight_r_] = principled_marching_cost_matrix_6(n_k_p_r,k_p_r_,weight_2d_k_p_r_,l_max_,[],[],a_k_Y_quad_yk_);
end;%if ~exist('X_2d_x1_d0_kk__','var');
%%%%%%%%;
% Now determine principal-modes. ;
%%%%%%%%;
if ~exist('tolerance_pm','var'); tolerance_pm = 1e-3; end;
n_UX_rank = n_k_p_r-1; %<-- just to check dimensions. ;
X_kk__ = X_2d_x1_d0_kk__;
[tmp_UX__,tmp_SX__,tmp_VX__] = svds(X_kk__,n_UX_rank); tmp_SX_ = diag(tmp_SX__);
pm_n_UX_rank = max(find(tmp_SX_/max(tmp_SX_)> tolerance_pm));
if pm_n_UX_rank_max < pm_n_UX_rank;
tolerance_pm_max = sqrt(tmp_SX_(pm_n_UX_rank_max)/max(tmp_SX_) * tmp_SX_(min(n_UX_rank,pm_n_UX_rank_max+1))/max(tmp_SX_));
disp(sprintf(' %% raising tolerance_pm %0.6f to tolerance_pm_max %0.6f',tolerance_pm,tolerance_pm_max));
tolerance_pm = tolerance_pm_max;
pm_n_UX_rank = max(find(tmp_SX_/max(tmp_SX_)> tolerance_pm));
end;%if pm_n_UX_rank_max < pm_n_UX_rank;
UX_kn__ = zeros(n_k_p_r,n_UX_rank); SX_k_ = zeros(n_UX_rank,1);
UX_kn__(:,:) = tmp_UX__(:,1+[0:n_UX_rank-1]);
SX_k_(:) = tmp_SX_(1+[0:n_UX_rank-1]);
nlt = -log10(tolerance_pm);
str_tolerance_pm = sprintf('nlt%.2dpm%d',round(10*nlt),pm_n_UX_rank);
if (flag_verbose>0); disp(sprintf(' %% tolerance_pm %0.6f: pm_n_UX_rank %d/%d --> %s',tolerance_pm,pm_n_UX_rank,n_UX_rank,str_tolerance_pm)); end;
%%%%%%%%;
[ ...
 ~ ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_k_p_r_max ...
,pm_l_max_ ...
,pm_n_qk ...
,pm_n_qk_csum_ ...
,pm_k_p_r_qk_ ...
,pm_k_p_azimu_b_qk_ ...
,pm_k_p_polar_a_qk_ ...
,pm_weight_3d_k_p_qk_ ...
,pm_weight_shell_qk_ ...
,pm_weight_3d_k_p_r_ ...
,pm_n_w_ ...
,pm_weight_2d_k_p_r_ ...
,pm_weight_2d_wk_ ...
] = ...
get_weight_pm_3( ...
 parameter ...
,pm_n_UX_rank ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,weight_3d_k_p_r_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
);
pm_n_w_max = max(pm_n_w_);
pm_n_w_sum = sum(pm_n_w_);
pm_n_w_csum_ = cumsum([0;pm_n_w_]);
pm_n_lm_ = (pm_l_max_+1).^2;
pm_n_lm_max = max(pm_n_lm_);
pm_n_lm_sum = sum(pm_n_lm_);
pm_n_lm_csum_ = cumsum([0;pm_n_lm_]);
pm_l_max_max = max(pm_l_max_);
%%%%%%%%;

pm_k_c_0_qk_ = pm_k_p_r_qk_.*cos(pm_k_p_azimu_b_qk_).*sin(pm_k_p_polar_a_qk_);
pm_k_c_1_qk_ = pm_k_p_r_qk_.*sin(pm_k_p_azimu_b_qk_).*sin(pm_k_p_polar_a_qk_);
pm_k_c_2_qk_ = pm_k_p_r_qk_.*cos(pm_k_p_polar_a_qk_);
pm_n_polar_a_k_ = n_polar_a_k_(1+0)*ones(pm_n_k_p_r,1);
pm_polar_a_ka__ = cell(pm_n_k_p_r,1); for pm_nk_p_r=0:pm_n_k_p_r-1; pm_polar_a_ka__{1+pm_nk_p_r} = polar_a_ka__{1+0}; end;
pm_n_azimu_b_ka__ = cell(pm_n_k_p_r,1); for pm_nk_p_r=0:pm_n_k_p_r-1; pm_n_azimu_b_ka__{1+pm_nk_p_r} = n_azimu_b_ka__{1+0}; end;

%%%%%%%%;
% Now adjust pm_weights according to get_weight_3d_riesz_2. ;
%%%%%%%%;
pm_n_q = n_q;
pm_n_qk = pm_n_q*pm_n_k_p_r;
pm_n_qk_csum_ = cumsum([0;pm_n_q*ones(pm_n_k_p_r,1)]);
pm_weight_shell_qk_ = pm_weight_shell_qk_/max(1e-12,sum(pm_weight_shell_qk_))*4*pi*pm_n_k_p_r ;
pm_weight_2d_k_p_r_ = ones(pm_n_k_p_r,1)/max(1,pm_n_k_p_r)*pi ;
pm_weight_2d_wk_ = ones(pm_n_w_sum,1)/max(1,pm_n_w_sum)/(4*pi) ;
pm_weight_3d_k_p_r_ = ones(pm_n_k_p_r,1)/max(1,pm_n_k_p_r)/3 ;
pm_weight_3d_k_p_qk_ = ones(pm_n_qk,1)/max(1,pm_n_qk)*((4/3)*pi) ;
pm_weight_3d_riesz_k_p_r_ = ones(pm_n_k_p_r,1)/max(1,pm_n_k_p_r)*pi ;
pm_weight_3d_riesz_qk_ = ones(pm_n_qk,1)/max(1,pm_n_qk)*(4*pi^2) ;

%%%%%%%%;
% Now form a_x1_UX_Y_quad_yn__ ;
%%%%%%%%;
X_weight_r_ = X_2d_x1_d0_weight_r_;
a_x1_UX_Y_quad_yn__ = zeros(n_lm_max,pm_n_UX_rank);
for nUX_rank=0:pm_n_UX_rank-1;
for nk_p_r=0:n_k_p_r-1;
tmp_l_max = l_max_(1+nk_p_r);
tmp_n_lm = (tmp_l_max+1).^2;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:tmp_n_lm-1);
a_x1_UX_Y_quad_yn__(1:tmp_n_lm,1+nUX_rank) = a_x1_UX_Y_quad_yn__(1:tmp_n_lm,1+nUX_rank) + UX_kn__(1+nk_p_r,1+nUX_rank)*X_weight_r_(1+nk_p_r)*a_k_Y_quad_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nUX_rank=0:pm_n_UX_rank-1;
a_x1_UX_Y_quad_yn_ = local_yk_from_yk__(pm_n_k_p_r,pm_l_max_,a_x1_UX_Y_quad_yn__);
if (flag_verbose>0); disp(sprintf(' %% a_x1_UX_Y_quad_yn_ vs a_x1_UX_Y_quad_yn__(:): %0.16f',fnorm(a_x1_UX_Y_quad_yn_-a_x1_UX_Y_quad_yn__(:)))); end;
pm_a_k_Y_quad_yk__ = a_x1_UX_Y_quad_yn__;
pm_a_k_Y_quad_yk_ = a_x1_UX_Y_quad_yn_;
%%%%;
flag_check=1;
if flag_check;
a_k_Y_reco_yk_ = zeros(n_lm_sum,1);
for nUX_rank=0:pm_n_UX_rank-1;
for nk_p_r=0:n_k_p_r-1;
tmp_l_max = l_max_(1+nk_p_r);
tmp_n_lm = (tmp_l_max+1).^2;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:tmp_n_lm-1);
a_k_Y_reco_yk_(1+tmp_index_) = a_k_Y_reco_yk_(1+tmp_index_) + UX_kn__(1+nk_p_r,1+nUX_rank)/max(1e-12,X_weight_r_(1+nk_p_r))*a_x1_UX_Y_quad_yn__(1:tmp_n_lm,1+nUX_rank);
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nUX_rank=0:pm_n_UX_rank-1;
a_k_Y_diff_yk_ = a_k_Y_quad_yk_ - a_k_Y_reco_yk_;
[~,~,a_k_Y_quad_l3] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_Y_quad_yk_,0);
[~,~,a_k_Y_reco_l3] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_Y_reco_yk_,0);
[~,~,a_k_Y_diff_l3] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_Y_diff_yk_,0);
[~,~,a_k_Y_quad_l2] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_2d_k_p_r_,l_max_,a_k_Y_quad_yk_,0);
[~,~,a_k_Y_reco_l2] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_2d_k_p_r_,l_max_,a_k_Y_reco_yk_,0);
[~,~,pm_a_k_Y_quad_l3] = spharm_normalize_2(pm_n_k_p_r,pm_k_p_r_,pm_weight_3d_k_p_r_,pm_l_max_,pm_a_k_Y_quad_yk_,0);
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_quad_yk_ vs a_k_Y_reco_yk_: %0.16f %%<-- will not be small if tolerance_pm> 0',a_k_Y_diff_l3/max(1e-12,a_k_Y_quad_l3))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_quad_l3 %0.6f',a_k_Y_quad_l3)); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_reco_l3 %0.6f',a_k_Y_reco_l3)); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_quad_l2 %0.6f',a_k_Y_quad_l2)); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_reco_l2 %0.6f',a_k_Y_reco_l2)); end;
if (flag_verbose>0); disp(sprintf(' %% pm_a_k_Y_quad_l3 %0.6f',pm_a_k_Y_quad_l3)); end;
end;%if flag_check;
%%%%%%%%;

%%%%%%%%;
% Now form a_x1_UX_k_p_qn__ ;
%%%%%%%%;
X_weight_r_ = X_2d_x1_d0_weight_r_;
a_x1_UX_k_p_qn__ = zeros(n_q,pm_n_UX_rank);
for nUX_rank=0:pm_n_UX_rank-1;
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_qk_csum_(1+nk_p_r) + (0:n_q-1);
a_x1_UX_k_p_qn__(1:n_q,1+nUX_rank) = a_x1_UX_k_p_qn__(1:n_q,1+nUX_rank) + UX_kn__(1+nk_p_r,1+nUX_rank)*X_weight_r_(1+nk_p_r)*a_k_p_qk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nUX_rank=0:pm_n_UX_rank-1;
a_x1_UX_k_p_qn_ = reshape(a_x1_UX_k_p_qn__,[pm_n_qk,1]);
if (flag_verbose>0); disp(sprintf(' %% a_x1_UX_k_p_qn_ vs a_x1_UX_k_p_qn__(:): %0.16f',fnorm(a_x1_UX_k_p_qn_-a_x1_UX_k_p_qn__(:)))); end;
pm_a_k_p_qk__ = a_x1_UX_k_p_qn__;
pm_a_k_p_qk_ = a_x1_UX_k_p_qn_;
%%%%;
flag_check=1;
if flag_check;
a_k_p_reco_qk_ = zeros(n_qk,1);
for nUX_rank=0:pm_n_UX_rank-1;
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_qk_csum_(1+nk_p_r) + (0:n_q-1);
a_k_p_reco_qk_(1+tmp_index_) = a_k_p_reco_qk_(1+tmp_index_) + UX_kn__(1+nk_p_r,1+nUX_rank)/max(1e-12,X_weight_r_(1+nk_p_r))*a_x1_UX_k_p_qn__(1:n_q,1+nUX_rank);
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nUX_rank=0:pm_n_UX_rank-1;
a_k_p_diff_qk_ = a_k_p_qk_ - a_k_p_reco_qk_;
a_k_p_quad_l3 = sum(abs(a_k_p_qk_).^2.*weight_3d_k_p_qk_,'all');
a_k_p_reco_l3 = sum(abs(a_k_p_reco_qk_).^2.*weight_3d_k_p_qk_,'all');
a_k_p_diff_l3 = sum(abs(a_k_p_diff_qk_).^2.*weight_3d_k_p_qk_,'all');
pm_a_k_p_quad_l3 = sum(abs(pm_a_k_p_qk_).^2.*pm_weight_3d_k_p_qk_,'all');
if (flag_verbose>0); disp(sprintf(' %% a_k_p_qk_ vs a_k_p_reco_qk_: %0.16f %%<-- will not be small if tolerance_pm> 0',a_k_p_diff_l3/max(1e-12,a_k_p_quad_l3))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_p_quad_l3 %0.6f',a_k_p_quad_l3)); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_p_reco_l3 %0.6f',a_k_p_reco_l3)); end;
if (flag_verbose>0); disp(sprintf(' %% pm_a_k_p_quad_l3 %0.6f',pm_a_k_p_quad_l3)); end;
end;%if flag_check;
%%%%%%%%;

flag_check=1;
if flag_check;
fname_fig_pre = sprintf('%s_jpg/pm_a_k_p_quad_qk_reco_FIGC',dir_ssnll);
fname_fig_jpg = sprintf('%s.jpg',fname_fig_pre);
if (flag_replot | ~exist(fname_fig_jpg,'file'));
disp(sprintf(' %% %s not found, creating',fname_fig_pre));
%%%%%%%%;
% Now check real-space reconstructions from principal-modes. ;
%%%%%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figbig;
p_row = 2; p_col = ceil((1+pm_n_UX_rank)/p_row); np=0;
subplot(p_row,p_col,1+np);np=np+1;
isosurface_f_x_u_1([],a_x_u_reco_); title(sprintf('a_x_u_reco_'),'Interpreter','none');
end;%if flag_disp;
a_k_p_reco_qk_ = zeros(n_qk,1);
for pm_nk_p_r=0:pm_n_k_p_r-1;
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_qk_csum_(1+nk_p_r) + (0:n_q-1);
a_k_p_reco_qk_(1+tmp_index_) = a_k_p_reco_qk_(1+tmp_index_) + UX_kn__(1+nk_p_r,1+pm_nk_p_r)/max(1e-12,X_weight_r_(1+nk_p_r))*a_x1_UX_k_p_qn__(1:n_q,1+pm_nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%;
eta = pi/k_p_r_max; tmp_t = tic;
tmp_a_x_u_reco_ = xxnufft3d3(n_qk,2*pi*k_c_0_qk_*eta,2*pi*k_c_1_qk_*eta,2*pi*k_c_2_qk_*eta,a_k_p_reco_qk_.*(2*pi)^3.*weight_3d_k_p_qk_,+1,1e-12,n_xxx_u,x_u_0___(:)/eta,x_u_1___(:)/eta,x_u_2___(:)/eta)/sqrt(2*pi)/sqrt(2*pi)/sqrt(2*pi);
tmp_t = toc(tmp_t); disp(sprintf(' %% xxnufft3d3: tmp_a_x_u_reco_ time %0.2fs',tmp_t));
if flag_disp;
subplot(p_row,p_col,1+np);np=np+1;
isosurface_f_x_u_1([],tmp_a_x_u_reco_); title(sprintf('pm_nk_p_r %d/%d',pm_nk_p_r,pm_n_k_p_r),'Interpreter','none');
drawnow();
end;%if flag_disp;
%%%%;
end;%for pm_nk_p_r=0:pm_n_k_p_r-1;
%%%%;
disp(sprintf(' %% writing %s',fname_fig_pre));
sgtitle(fname_fig_pre,'Interpreter','none');
print('-djpeg',fname_fig_jpg);
close(gcf);
end;%if (~exist(fname_fig_jpg,'file'));
if ( exist(fname_fig_jpg,'file'));
disp(sprintf(' %% %s found, not creating',fname_fig_pre));
end;%if ( exist(fname_fig_jpg,'file'));
%%%%%%%%;
end;%if flag_check;

%%%%%%%%;
% Use a_x1_UX_Y_quad_yn_ to generate pm_S_use_k_p_wkS__ := S_x1_UX_k_p_wnS__. ;
% Note that poles are included for subsequent interpolation (when estimating ddssnll_lsq). ;
%%%%%%%%;
viewing_k_eq_d = t_eq_d_double/k_p_r_max;
template_k_eq_d = t_eq_d_double/k_p_r_max;
str_L = 'L'; %<-- Use C2 to allow for off-grid interpolation. ;
flag_tensor_vs_adap = 0; %<-- use adaptive grid for ddssnll_from_a_k_p, but need tensor grid for ddsssnll_3. ;
[ ...
 n_viewing_S_use ...
,viewing_azimu_b_S_use_ ...
,viewing_polar_a_S_use_ ...
,viewing_weight_S_use_ ...
,viewing_k_c_0_S_use_ ...
,viewing_k_c_1_S_use_ ...
,viewing_k_c_2_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
] = ...
sample_shell_6( ...
 1.0 ...
,template_k_eq_d ...
,str_C2 ...
,flag_tensor_vs_adap ...
) ;
n_S_use = n_viewing_S_use;
viewing_gamma_z_S_use_ = zeros(n_S_use,1);
%%%%;
tmp_t = tic();
parameter_interpolate = struct('type','parameter');
parameter_interpolate.flag_verbose = 0;
parameter_interpolate.flag_check = 0;
[ ...
 parameter_interpolate ...
,pm_S_use_k_p_wkS__ ...
] = ...
interpolate_template_7( ...
 parameter_interpolate ...
,n_order ...
,pm_n_qk ...
,pm_n_qk_csum_ ...
,pm_k_p_r_qk_ ...
,pm_k_p_azimu_b_qk_ ...
,pm_k_p_polar_a_qk_ ...
,pm_weight_3d_k_p_qk_ ...
,pm_weight_shell_qk_ ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_k_p_r_max ...
,pm_weight_3d_k_p_r_ ...
,pm_k_c_0_qk_ ...
,pm_k_c_1_qk_ ...
,pm_k_c_2_qk_ ...
,pm_n_polar_a_k_ ...
,pm_polar_a_ka__ ...
,pm_n_azimu_b_ka__ ...
,pm_a_k_p_qk_ ...
,viewing_k_eq_d ...
,-1 ...
,n_w_0in ...
,n_viewing_S_use ...
,viewing_azimu_b_S_use_ ...
,viewing_polar_a_S_use_ ...
,viewing_weight_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
,viewing_gamma_z_S_use_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% pm_S_use_k_p_wkS__ (interpolate_template_7): %0.6fs',tmp_t)); end;
%%%%%%%%;

%%%%%%%%;
% Now define pm_M_use_k_p_wkM__. ;
% Note that poles are excluded (to allow for finite derivatives in U_SmallRotation_2). ;
%%%%%%%%;
tmp_index_ = efind( abs(viewing_polar_a_S_use_-0*pi)>1e-6 & abs(viewing_polar_a_S_use_-1*pi)>1e-6 );
n_M_use = numel(tmp_index_);
viewing_weight_M_use_ = viewing_weight_S_use_(1+tmp_index_);
viewing_weight_M_use_ = viewing_weight_M_use_*sum(viewing_weight_S_use_)/max(1e-12,sum(viewing_weight_M_use_));
pm_M_use_k_p_wkM__ = pm_S_use_k_p_wkS__(:,1+tmp_index_);
euler_polar_a_M_use_ = viewing_polar_a_S_use_(1+tmp_index_);
euler_azimu_b_M_use_ = viewing_azimu_b_S_use_(1+tmp_index_);
euler_gamma_z_M_use_ = zeros(n_M_use,1);
%%%%%%%%;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
lsigma_dist_ = [NaN,-3:0.5:+3]; n_lsigma_dist = numel(lsigma_dist_);
factor_imagecount_Ms__ = zeros(n_M_use,n_lsigma_dist);
for nlsigma_dist=0:n_lsigma_dist-1;
lsigma_dist = lsigma_dist_(1+nlsigma_dist);
sigma_dist = exp(-abs(lsigma_dist));
if abs(lsigma_dist)<1e-12; factor_imagecount_M_use_ = 1/sqrt(2*pi)^2; end;
if lsigma_dist< 0;
factor_imagecount_M_use_ = 1/sqrt(2*pi)^2/sigma_dist^2*exp(-min((euler_polar_a_M_use_-0).^2,(euler_polar_a_M_use_-pi).^2)/(2*sigma_dist^2));
end;%if lsigma_dist< 0;
if lsigma_dist> 0;
factor_imagecount_M_use_ = 1/sqrt(2*pi)^2/sigma_dist^2*exp(-(euler_polar_a_M_use_-pi/2).^2/(2*sigma_dist^2));
end;%if lsigma_dist> 0;
if ~isfinite(lsigma_dist);
[ ...
 tmp_h_raw_ab_ ...
 tmp_h_w3d_ab_ ...
] = ...
hist2d_polar_a_azimu_b_0( ...
 euler_polar_a_M_use_ ...
,euler_azimu_b_M_use_ ...
,viewing_weight_M_use_ ...
,euler_polar_a_tavg_(:) ...
,euler_azimu_b_tavg_(:) ...
,[] ...
,[] ...
,-1 ...
);
factor_imagecount_M_use_ = tmp_h_w3d_ab_;
end;%if ~isfinite(lsigma_dist);
tmp_f = sum(factor_imagecount_M_use_.*viewing_weight_M_use_);
factor_imagecount_M_use_ = factor_imagecount_M_use_./max(1e-12,tmp_f);
factor_imagecount_Ms__(:,1+nlsigma_dist) = factor_imagecount_M_use_;
end;%for nlsigma_dist=0:n_lsigma_dist-1;
%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figbig;
p_row = 4; p_col = ceil(n_lsigma_dist/p_row); np=0;
%flim_ = prctile(factor_imagecount_Ms__,[  0,100],'all');
flim_ = 4.0*[0,2.0/(4*pi)];
flag_2d_vs_3d=0;
for nlsigma_dist=0:n_lsigma_dist-1;
lsigma_dist = lsigma_dist_(1+nlsigma_dist);
subplot(p_row,p_col,1+np);np=np+1;
imagesc_polar_a_azimu_b_0( ...
 euler_polar_a_M_use_ ... 
,euler_azimu_b_M_use_ ... 
,factor_imagecount_Ms__(:,1+nlsigma_dist) ...
,flim_ ... 
,colormap_beach ... 
,flag_2d_vs_3d ...
,k_p_r_max ...
);
axisnotick3d; axis equal; axis vis3d;
title(sprintf('lsigma %0.2f',lsigma_dist),'Interpreter','none');
end;%for nlsigma_dist=0:n_lsigma_dist-1;
drawnow();
close(gcf);
end;%if flag_disp;

flag_calc = flag_256G | (k_int<=32 & flag_128G);
if flag_calc;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
%for nlsigma_dist=0:n_lsigma_dist-1;
%for flag_implicit_dtau = 1;
nlsigma_dist = efind(lsigma_dist_==-0.5); flag_implicit_dtau = 1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
lsigma_dist = lsigma_dist_(1+nlsigma_dist);
factor_imagecount_M_use_ = factor_imagecount_Ms__(:,1+nlsigma_dist);
weight_imagecount_M_use_ = viewing_weight_M_use_ .* factor_imagecount_M_use_ ;
if ~isfinite(lsigma_dist); str_infix = sprintf('p_empirical'); end;
if lsigma_dist< -1e-12; str_infix = sprintf('lsigma_n%.3d',fix(100*abs(lsigma_dist))); end;
if lsigma_dist>=-1e-12; str_infix = sprintf('lsigma_p%.3d',fix(100*abs(lsigma_dist))); end;
if (flag_verbose>0); disp(sprintf(' %% nlsigma_dist %.2d/%.2d %+0.2f %s',nlsigma_dist,n_lsigma_dist,lsigma_dist,str_infix)); end;
str_dir_mat = sprintf('%s_mat',dir_ssnll);
str_dir_jpg = sprintf('%s_jpg',dir_ssnll);
if flag_implicit_dtau==0; str_fname_nopath_prefix = sprintf('eig_from_synth_%s_%s',str_tolerance_pm,str_infix); end;
if flag_implicit_dtau==1; str_fname_nopath_prefix = sprintf('eig_i1_from_synth_%s_%s',str_tolerance_pm,str_infix); end;
%%%%;
fname_pre = sprintf('%s/%s',str_dir_mat,str_fname_nopath_prefix);
[flag_skip,fname_mat] = open_fname_tmp(fname_pre);
%%%%%%%%%%%%%%%%;
if flag_recalc | ~flag_skip
%%%%%%%%%%%%%%%%;
tmp_lanczos_n_iteration_max = 0;
if ( exist(fname_mat,'file'));
tmp_ = load(fname_mat);
if isfield(tmp_,'alph_i_'); tmp_lanczos_n_iteration_max = numel(tmp_.alph_i_); end;
if isfield(tmp_,'alph_tilde_i_'); tmp_lanczos_n_iteration_max = numel(tmp_.alph_tilde_i_); end;
clear tmp_;
disp(sprintf(' %% %s found, tmp_lanczos_n_iteration_max %.2d',fname_mat,tmp_lanczos_n_iteration_max));
end;%if ( exist(fname_mat,'file'));
if (flag_recalc | ~exist(fname_mat,'file') | tmp_lanczos_n_iteration_max< lanczos_n_iteration_max);
disp(sprintf(' %% %s not complete, calculating',fname_mat));

parameter_eig = struct('type','eig');
parameter_eig.flag_verbose = flag_verbose;
parameter_eig.flag_implicit_dtau = flag_implicit_dtau;
parameter_eig.flag_check = 0;
parameter_eig.flag_disp = 0;
parameter_eig.lanczos_n_iteration_max = 8;%parameter_eig.lanczos_n_iteration_max = lanczos_n_iteration_max;
pm_U_SmallRotation_Delta_qkabc3__ = []; %<-- construct internally. ;
pm_U_tilde_SmallRotation_Delta_qkabc3__ = []; %<-- construct internally. ;
%%%%;
if ( flag_recalc | ~exist(fname_mat,'file'));
tmp_lanczos_n_iteration_max = 0;
rng(0);
pm_v_tilde_qkabci__=[];
pm_w_tilde_qkabc_=[];
alph_tilde_i_=[];
beta_tilde_i_=[];
dvol_a_k_Y_quad_qki__=[];
dtau_euler_polar_a_Mi__=[];
dtau_euler_azimu_b_Mi__=[];
dtau_euler_gamma_z_Mi__=[];
end;%if (~exist(fname_mat,'file'));
%%%%;
if (~flag_recalc &  exist(fname_mat,'file'));
tmp_ = load(fname_mat);
if isfield(tmp_,'alph_tilde_i_'); tmp_lanczos_n_iteration_max = numel(tmp_.alph_tilde_i_); end;
if isfield(tmp_,'pm_U_tilde_SmallRotation_Delta_qkabc3__'); pm_U_tilde_SmallRotation_Delta_qkabc3__ = tmp_.pm_U_tilde_SmallRotation_Delta_qkabc3__; end;
if isfield(tmp_,'pm_v_tilde_qkabci__'); pm_v_tilde_qkabci__ = tmp_.pm_v_tilde_qkabci__; end;
if isfield(tmp_,'pm_w_tilde_qkabc_'); pm_w_tilde_qkabc_ = tmp_.pm_w_tilde_qkabc_; end;
if isfield(tmp_,'alph_tilde_i_'); alph_tilde_i_ = tmp_.alph_tilde_i_; end;
if isfield(tmp_,'beta_tilde_i_'); beta_tilde_i_ = tmp_.beta_tilde_i_; end;
if isfield(tmp_,'dvol_a_k_Y_quad_qki__'); dvol_a_k_Y_quad_qki__ = tmp_.dvol_a_k_Y_quad_qki__; end;
if isfield(tmp_,'dtau_euler_polar_a_Mi__'); dtau_euler_polar_a_Mi__ = tmp_.dtau_euler_polar_a_Mi__; end;
if isfield(tmp_,'dtau_euler_azimu_b_Mi__'); dtau_euler_azimu_b_Mi__ = tmp_.dtau_euler_azimu_b_Mi__; end;
if isfield(tmp_,'dtau_euler_gamma_z_Mi__'); dtau_euler_gamma_z_Mi__ = tmp_.dtau_euler_gamma_z_Mi__; end;
clear tmp_;
end;%if ( exist(fname_mat,'file'));
%%%%;
if ~exist('pm_wS_from_single_shell_sba__','var'); pm_wS_from_single_shell_sba__=[]; end;
if ~exist('pm_dwSda_from_single_shell_sba__','var'); pm_dwSda_from_single_shell_sba__=[]; end;
if ~exist('pm_dwSdb_from_single_shell_sba__','var'); pm_dwSdb_from_single_shell_sba__=[]; end;
if ~exist('pm_ddwSdaa_from_single_shell_sba__','var'); pm_ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('pm_ddwSdab_from_single_shell_sba__','var'); pm_ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('pm_ddwSdbb_from_single_shell_sba__','var'); pm_ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('pm_n_R','var'); pm_n_R = []; end;
if ~exist('pm_R_use_R___','var'); pm_R_use_R___ = []; end;
if ~exist('pm_a_R_k_p_Rqk__','var'); pm_a_R_k_p_Rqk__=[]; end;
if ~exist('pm_ba_from_single_shell_Rbaba___','var'); pm_ba_from_single_shell_Rbaba___=[]; end;
if ~exist('pm_wS_from_R_single_shell_Rsba___','var'); pm_wS_from_R_single_shell_Rsba___=[]; end;
if ~exist('pm_dwSda_from_R_single_shell_Rsba___','var'); pm_dwSda_from_R_single_shell_Rsba___=[]; end;
if ~exist('pm_dwSdb_from_R_single_shell_Rsba___','var'); pm_dwSdb_from_R_single_shell_Rsba___=[]; end;
if ~exist('pm_ddwSdaa_from_R_single_shell_Rsba___','var'); pm_ddwSdaa_from_R_single_shell_Rsba___=[]; end;
if ~exist('pm_ddwSdab_from_R_single_shell_Rsba___','var'); pm_ddwSdab_from_R_single_shell_Rsba___=[]; end;
if ~exist('pm_ddwSdbb_from_R_single_shell_Rsba___','var'); pm_ddwSdbb_from_R_single_shell_Rsba___=[]; end;
if ~exist('pm_KAPPA','var'); pm_KAPPA = []; end;
%%%%;
%if ~exist('pm_v_tilde_qkabci__ ','var'); pm_v_tilde_qkabci__ =[]; end;
%if ~exist('pm_w_tilde_qkabc_ ','var'); pm_w_tilde_qkabc_ =[]; end;
%if ~exist('alph_tilde_i_','var'); alph_tilde_i_=[]; end;
%if ~exist('beta_tilde_i_ ','var'); beta_tilde_i_ =[]; end;
%%%%;
[ ...
 parameter_eig ...
,pm_U_tilde_SmallRotation_Delta_qkabc3__ ...
,pm_v_tilde_qkabci__  ...
,pm_w_tilde_qkabc_  ...
,alph_tilde_i_ ...
,beta_tilde_i_ ... 
,dvol_pm_a_k_Y_quad_qki__ ...
,dtau_euler_polar_a_Mi__ ...
,dtau_euler_azimu_b_Mi__ ...
,dtau_euler_gamma_z_Mi__ ...
] = ...
eig_ddssnll_lanczos_from_a_k_p_4( ...
 parameter_eig ...
,pm_n_qk ...
,pm_n_qk_csum_ ...
,pm_k_p_r_qk_ ...
,pm_k_p_azimu_b_qk_ ...
,pm_k_p_polar_a_qk_ ...
,pm_weight_3d_k_p_qk_ ...
,pm_weight_shell_qk_ ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_k_p_r_max ...
,pm_weight_3d_k_p_r_ ...
,pm_k_c_0_qk_ ...
,pm_k_c_1_qk_ ...
,pm_k_c_2_qk_ ...
,pm_n_polar_a_k_ ...
,pm_polar_a_ka__ ...
,pm_n_azimu_b_ka__ ...
,qref_k_eq_d ...
,pm_a_k_p_qk_ ...
,pm_n_w_ ...
,pm_weight_2d_k_p_r_ ...
,pm_weight_2d_wk_ ...
,n_viewing_S_use ...
,pm_S_use_k_p_wkS__ ...
,viewing_polar_a_S_use_ ...
,viewing_azimu_b_S_use_ ...
,viewing_weight_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
,viewing_gamma_z_S_use_ ...
,n_M_use ...
,weight_imagecount_M_use_ ...
,pm_M_use_k_p_wkM__ ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,euler_polar_a_M_use_ ...
,euler_azimu_b_M_use_ ...
,euler_gamma_z_M_use_ ...
,pm_KAPPA ...
,pm_wS_from_single_shell_sba__ ...
,pm_dwSda_from_single_shell_sba__ ...
,pm_dwSdb_from_single_shell_sba__ ...
,pm_ddwSdaa_from_single_shell_sba__ ...
,pm_ddwSdab_from_single_shell_sba__ ...
,pm_ddwSdbb_from_single_shell_sba__ ...
,pm_n_R ...
,pm_R_use_R___ ...
,pm_a_R_k_p_Rqk__ ...
,pm_ba_from_single_shell_Rbaba___ ...
,pm_wS_from_R_single_shell_Rsba___ ...
,pm_dwSda_from_R_single_shell_Rsba___ ...
,pm_dwSdb_from_R_single_shell_Rsba___ ...
,pm_ddwSdaa_from_R_single_shell_Rsba___ ...
,pm_ddwSdab_from_R_single_shell_Rsba___ ...
,pm_ddwSdbb_from_R_single_shell_Rsba___ ...
,pm_U_tilde_SmallRotation_Delta_qkabc3__ ...
,pm_v_tilde_qkabci__  ...
,pm_w_tilde_qkabc_  ...
,alph_tilde_i_ ...
,beta_tilde_i_ ... 
);

save(fname_mat ...
     ,'parameter_eig' ...
     ,'pm_n_k_p_r' ...
     ,'pm_k_p_r_' ...
     ,'pm_k_p_r_max' ...
     ,'pm_l_max_' ...
     ,'pm_n_qk' ...
     ,'pm_n_qk_csum_' ...
     ,'pm_k_p_r_qk_' ...
     ,'pm_k_p_azimu_b_qk_' ...
     ,'pm_k_p_polar_a_qk_' ...
     ,'pm_weight_3d_k_p_qk_' ...
     ,'pm_weight_shell_qk_' ...
     ,'pm_weight_3d_k_p_r_' ...
     ,'pm_n_w_' ...
     ,'pm_weight_2d_k_p_r_' ...
     ,'pm_weight_2d_wk_' ...
     ,'n_S_use' ...
     ,'pm_S_use_k_p_wkS__' ...
     ,'viewing_polar_a_S_use_' ...
     ,'viewing_azimu_b_S_use_' ...
     ,'viewing_weight_S_use_' ...
     ,'n_viewing_polar_a_use' ...
     ,'viewing_polar_a_use_' ...
     ,'n_viewing_azimu_b_use_' ...
     ,'pm_U_tilde_SmallRotation_Delta_qkabc3__' ...
     ,'pm_v_tilde_qkabci__'  ...
     ,'pm_w_tilde_qkabc_' ...
     ,'alph_tilde_i_' ...
     ,'beta_tilde_i_' ... 
     ,'dvol_pm_a_k_Y_quad_qki__' ...
     ,'dtau_euler_polar_a_Mi__' ...
     ,'dtau_euler_azimu_b_Mi__' ...
     ,'dtau_euler_gamma_z_Mi__' ...
     ,'n_M_use' ...
     ,'viewing_weight_M_use_' ...
     ,'weight_imagecount_M_use_' ...
     ,'factor_imagecount_M_use_' ...
     ,'pm_M_use_k_p_wkM__' ...
     ,'euler_polar_a_M_use_' ...
     ,'euler_azimu_b_M_use_' ...
     ,'euler_gamma_z_M_use_' ...
     );
close_fname_tmp(fname_pre);
%%%%%%%%;
end;%if (flag_recalc | ~exist(fname_mat,'file') | tmp_lanczos_n_iteration_max< lanczos_n_iteration_max);
%%%%%%%%%%%%%%%%;
end;%if flag_recalc | ~flag_skip
%%%%%%%%%%%%%%%%;
if ( exist(fname_mat,'file'));
disp(sprintf(' %% %s found, not creating',fname_mat));
end;%if ( exist(fname_mat,'file'));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
%end;%for flag_implicit_dtau = 1;
%end;%for nlsigma_dist=0:n_lsigma_dist-1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%if flag_calc;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%disp(sprintf(' %% returning before diagnostic')); return;

if flag_calc;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
%for nlsigma_dist=0:n_lsigma_dist-1;
%for flag_implicit_dtau = 1;
nlsigma_dist = efind(lsigma_dist_==-0.5); flag_implicit_dtau = 1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
lsigma_dist = lsigma_dist_(1+nlsigma_dist);
factor_imagecount_M_use_ = factor_imagecount_Ms__(:,1+nlsigma_dist);
weight_imagecount_M_use_ = viewing_weight_M_use_ .* factor_imagecount_M_use_ ;
if ~isfinite(lsigma_dist); str_infix = sprintf('p_empirical'); end;
if lsigma_dist< -1e-12; str_infix = sprintf('lsigma_n%.3d',fix(100*abs(lsigma_dist))); end;
if lsigma_dist>=-1e-12; str_infix = sprintf('lsigma_p%.3d',fix(100*abs(lsigma_dist))); end;
if (flag_verbose>0); disp(sprintf(' %% nlsigma_dist %.2d/%.2d %+0.2f %s',nlsigma_dist,n_lsigma_dist,lsigma_dist,str_infix)); end;
str_dir_mat = sprintf('%s_mat',dir_ssnll);
str_dir_jpg = sprintf('%s_jpg',dir_ssnll);
if flag_implicit_dtau==0; str_fname_nopath_prefix = sprintf('eig_from_synth_%s_%s',str_tolerance_pm,str_infix); end;
if flag_implicit_dtau==1; str_fname_nopath_prefix = sprintf('eig_i1_from_synth_%s_%s',str_tolerance_pm,str_infix); end
fname_mat = sprintf('%s/%s.mat',str_dir_mat,str_fname_nopath_prefix);
if ~exist(fname_mat,'file');
disp(sprintf(' %% Warning, %s not found, not running diagnostic',fname_mat));
end;%if ~exist(fname_mat,'file');
if  exist(fname_mat,'file');
tmp_ = load(fname_mat);

if ~exist('pm_wS_from_single_shell_sba__','var'); pm_wS_from_single_shell_sba__=[]; end;
if ~exist('pm_dwSda_from_single_shell_sba__','var'); pm_dwSda_from_single_shell_sba__=[]; end;
if ~exist('pm_dwSdb_from_single_shell_sba__','var'); pm_dwSdb_from_single_shell_sba__=[]; end;
if ~exist('pm_ddwSdaa_from_single_shell_sba__','var'); pm_ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('pm_ddwSdab_from_single_shell_sba__','var'); pm_ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('pm_ddwSdbb_from_single_shell_sba__','var'); pm_ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('pm_n_R','var'); pm_n_R = []; end;
if ~exist('pm_R_use_R___','var'); pm_R_use_R___ = []; end;
if ~exist('pm_a_R_k_p_Rqk__','var'); pm_a_R_k_p_Rqk__=[]; end;
if ~exist('pm_ba_from_single_shell_Rbaba___','var'); pm_ba_from_single_shell_Rbaba___=[]; end;
if ~exist('pm_wS_from_R_single_shell_Rsba___','var'); pm_wS_from_R_single_shell_Rsba___=[]; end;
if ~exist('pm_dwSda_from_R_single_shell_Rsba___','var'); pm_dwSda_from_R_single_shell_Rsba___=[]; end;
if ~exist('pm_dwSdb_from_R_single_shell_Rsba___','var'); pm_dwSdb_from_R_single_shell_Rsba___=[]; end;
if ~exist('pm_ddwSdaa_from_R_single_shell_Rsba___','var'); pm_ddwSdaa_from_R_single_shell_Rsba___=[]; end;
if ~exist('pm_ddwSdab_from_R_single_shell_Rsba___','var'); pm_ddwSdab_from_R_single_shell_Rsba___=[]; end;
if ~exist('pm_ddwSdbb_from_R_single_shell_Rsba___','var'); pm_ddwSdbb_from_R_single_shell_Rsba___=[]; end;
if ~exist('pm_KAPPA','var'); pm_KAPPA = []; end;
parameter_eig_diagnostic = tmp_.parameter_eig;
parameter_eig_diagnostic.type = 'eig_diagnostic';
parameter_eig_diagnostic.flag_verbose = flag_verbose;
parameter_eig_diagnostic.flag_implicit_dtau = flag_implicit_dtau;
parameter_eig_diagnostic.flag_recalc = 0;
parameter_eig_diagnostic.flag_check = 1;
parameter_eig_diagnostic.flag_disp = 1;
parameter_eig_diagnostic.flag_replot = 0;

parameter_eig_diagnostic.lanczos_n_iteration_max = lanczos_n_iteration_max;
eig_ddssnll_lanczos_from_a_k_p_diagnostic_5( ...
 parameter_eig_diagnostic ...
,pm_n_qk ...
,pm_n_qk_csum_ ...
,pm_k_p_r_qk_ ...
,pm_k_p_azimu_b_qk_ ...
,pm_k_p_polar_a_qk_ ...
,pm_weight_3d_k_p_qk_ ...
,pm_weight_shell_qk_ ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_k_p_r_max ...
,pm_weight_3d_k_p_r_ ...
,pm_k_c_0_qk_ ...
,pm_k_c_1_qk_ ...
,pm_k_c_2_qk_ ...
,pm_n_polar_a_k_ ...
,pm_polar_a_ka__ ...
,pm_n_azimu_b_ka__ ...
,qref_k_eq_d ...
,pm_a_k_p_qk_ ...
,pm_n_w_ ...
,pm_weight_2d_k_p_r_ ...
,pm_weight_2d_wk_ ...
,n_viewing_S_use ...
,pm_S_use_k_p_wkS__ ...
,viewing_polar_a_S_use_ ...
,viewing_azimu_b_S_use_ ...
,viewing_weight_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
,viewing_gamma_z_S_use_ ...
,n_M_use ...
,weight_imagecount_M_use_ ...
,pm_M_use_k_p_wkM__ ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,euler_polar_a_M_use_ ...
,euler_azimu_b_M_use_ ...
,euler_gamma_z_M_use_ ...
,pm_KAPPA ...
,pm_wS_from_single_shell_sba__ ...
,pm_dwSda_from_single_shell_sba__ ...
,pm_dwSdb_from_single_shell_sba__ ...
,pm_ddwSdaa_from_single_shell_sba__ ...
,pm_ddwSdab_from_single_shell_sba__ ...
,pm_ddwSdbb_from_single_shell_sba__ ...
,pm_n_R ...
,pm_R_use_R___ ...
,pm_a_R_k_p_Rqk__ ...
,pm_ba_from_single_shell_Rbaba___ ...
,pm_wS_from_R_single_shell_Rsba___ ...
,pm_dwSda_from_R_single_shell_Rsba___ ...
,pm_dwSdb_from_R_single_shell_Rsba___ ...
,pm_ddwSdaa_from_R_single_shell_Rsba___ ...
,pm_ddwSdab_from_R_single_shell_Rsba___ ...
,pm_ddwSdbb_from_R_single_shell_Rsba___ ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,UX_kn__ ...
,X_weight_r_ ...
,n_x_u_pack ...
,tmp_.pm_U_tilde_SmallRotation_Delta_qkabc3__ ...
,tmp_.pm_v_tilde_qkabci__  ...
,tmp_.pm_w_tilde_qkabc_  ...
,tmp_.alph_tilde_i_ ...
,tmp_.beta_tilde_i_ ... 
,str_dir_mat ...
,str_dir_jpg ...
,str_fname_nopath_prefix ...
);

clear tmp_;
end;%if  exist(fname_mat,'file');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
%end;%for flag_implicit_dtau = 1;
%end;%for nlsigma_dist=0:n_lsigma_dist-1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%if flag_calc;

disp(sprintf(' %% returning after diagnostic')); return;

