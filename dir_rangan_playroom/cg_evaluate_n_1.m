function a_k_p__ = cg_evaluate_n_1(l_max,a_k_Y__,n_polar_a,n_azimu_b,legendre_evaluate_ljm___);
% evaluates spherical_harmonic_expansion a_k_Y_ on a tensor-product spherical grid. ;
% Note that polar_a_ ranges uniformly from 0 to pi (inclusive of the endpoints). ;
% Note that azimu_b_ ranges uniformly from 0 to 2*pi periodically (associating 2*pi with 0). ;
% Note that a_k_Y__ is a stacked matrix, with l_val corresponding to rows and m_val corresponding to columns. ;
% Note that a_k_p__ is ordered with polar_a varying quickly, and azimu_b varying slowly. ;
%%%%%%%%;
if (nargin<4);
disp(sprintf(' %% testing cg_evaluate_n_1 and cg_evaluate_t_0'));
n_polar_a = 16;
n_azimu_b = 18;
l_max = 4;
n_l_val = 1+1*l_max;
n_m_val = 1+2*l_max;
n_lm_max = (1+l_max)^2;
A1__ = zeros(n_polar_a*n_azimu_b,n_l_val*n_m_val);
A2__ = zeros(n_polar_a*n_azimu_b,n_l_val*n_m_val);
[legendre_evaluate_ljm___,legendre_evaluate_mlj___,expil__,expi__] = legendre_evaluate_ljm___0(l_max,cos(linspace(0,pi,n_polar_a)),n_azimu_b);
for l_val=0:l_max; for m_val=-l_val:+l_val;
tab = 1 + (l_val) + (l_max+m_val)*n_l_val;
tmp_a_k_Y__ = zeros(n_l_val,n_m_val); tmp_a_k_Y__(1+l_val,1+l_max+m_val)=1;
A1__(:,tab) = reshape(cg_evaluate_n_1(l_max,tmp_a_k_Y__,n_polar_a,n_azimu_b,legendre_evaluate_ljm___),[n_polar_a*n_azimu_b,1]);
A2__(:,tab) = reshape(cg_evaluate_n_1(l_max,tmp_a_k_Y__,n_polar_a,n_azimu_b,[]),[n_polar_a*n_azimu_b,1]);
end;end;%for l_val=0:l_max; for m_val=-l_val:+l_val;
B1__ = zeros(n_l_val*n_m_val,n_polar_a*n_azimu_b);
B2__ = zeros(n_l_val*n_m_val,n_polar_a*n_azimu_b);
for nall=0:n_polar_a*n_azimu_b-1;
tmp_a_k_p__ = zeros(n_polar_a,n_azimu_b); tmp_a_k_p__(1+nall)=1;
B1__(:,1+nall) = reshape(cg_evaluate_t_1(n_polar_a,n_azimu_b,tmp_a_k_p__,l_max,legendre_evaluate_mlj___,expil__,expi__),[n_l_val*n_m_val,1]);
B2__(:,1+nall) = reshape(cg_evaluate_t_1(n_polar_a,n_azimu_b,tmp_a_k_p__,l_max,[],[],[]),[n_l_val*n_m_val,1]);
end;%for nall=0:n_polar_a*n_azimu_b-1;
disp(sprintf(' %% 1: cg_n__ vs ctranspose(cg_t__): %0.16f',fnorm(A1__-ctranspose(B1__))/fnorm(A1__)));
disp(sprintf(' %% 2: cg_n__ vs ctranspose(cg_t__): %0.16f',fnorm(A2__-ctranspose(B2__))/fnorm(A2__)));
%%%%%%%%;
n_polar_a = 65; polar_a_ = transpose(linspace(0,pi,n_polar_a)); weight_polar_a_ = sin(polar_a_)*pi/(n_polar_a-1); weight_polar_a_(2:2:end) = weight_polar_a_(2:2:end)*4/3; weight_polar_a_(1:2:end) = weight_polar_a_(1:2:end)*2/3; %<-- simpson rule. ;
legendre_evaluate_ljm___ = legendre_evaluate_ljm___0(l_max,cos(linspace(0,pi,n_polar_a)));
n_azimu_b = 128; azimu_b_ = transpose(linspace(0,2*pi,n_azimu_b+1)); azimu_b_ = azimu_b_(1:end-1); weight_azimu_b = 2*pi/n_azimu_b;
weight__ = weight_polar_a_*weight_azimu_b*ones(1,n_azimu_b);
[polar_a__,azimu_b__] = ndgrid(polar_a_,azimu_b_);
polar_a_all_ = polar_a__(:);
azimu_b_all_ = azimu_b__(:);
n_all = n_polar_a*n_azimu_b;
l_max = 4;
n_lm_max = (1+l_max)^2;
[Ylm__] = get_Ylm__(1+l_max,0:l_max,n_all,azimu_b_all_,polar_a_all_);
I0_form__ = eye(n_lm_max,n_lm_max);
I1_quad__ = zeros(n_lm_max,n_lm_max);
I2_quad__ = zeros(n_lm_max,n_lm_max);
nlm_1_max=0;
for l_val_1=0:l_max;
for m_val_1=-l_val_1:+l_val_1;
tmp_a_k_Y_ = zeros(n_lm_max,1); tmp_a_k_Y_(1+l_val_1^2+l_val_1+m_val_1,1) = 1;
tmp_a_k_Y__ = convert_spharm_to_spharm__0(l_max,tmp_a_k_Y_);
tmp_a_k_p_1__ = cg_evaluate_n_1(l_max,tmp_a_k_Y__,n_polar_a,n_azimu_b,legendre_evaluate_ljm___);
tmp_a_k_p_2__ = cg_evaluate_n_1(l_max,tmp_a_k_Y__,n_polar_a,n_azimu_b,[]);
nlm_2_max=0;
for l_val_2=0:l_max;
for m_val_2=-l_val_2:+l_val_2;
I1_quad__(1+nlm_1_max,1+nlm_2_max) = sum(ctranspose(Ylm__{1+l_val_2}(1+l_val_2+m_val_2,:)).*tmp_a_k_p_1__(:).*weight__(:),'all');
I2_quad__(1+nlm_1_max,1+nlm_2_max) = sum(ctranspose(Ylm__{1+l_val_2}(1+l_val_2+m_val_2,:)).*tmp_a_k_p_2__(:).*weight__(:),'all');
nlm_2_max=nlm_2_max+1;
end;%for m_val_2=-l_val_2:+l_val_2;
end;%for l_val_2=0:l_max;
assert(nlm_2_max==n_lm_max);
nlm_1_max=nlm_1_max+1;
end;%for m_val_1=-l_val_1:+l_val_1;
end;%for l_val_1=0:l_max;
assert(nlm_1_max==n_lm_max);
disp(sprintf(' %% orthonormality (simpson''s quadrature): I0_form__ vs I1_quad__: %0.16f',fnorm(I0_form__-I1_quad__)/fnorm(I0_form__)));
disp(sprintf(' %% orthonormality (simpson''s quadrature): I0_form__ vs I2_quad__: %0.16f',fnorm(I0_form__-I2_quad__)/fnorm(I0_form__)));
%%%%%%%%;
n_polar_a = 65; n_azimu_b = 128; l_max = 16;
[legendre_evaluate_ljm___,legendre_evaluate_mlj___,expil__,expi__] = legendre_evaluate_ljm___0(l_max,cos(linspace(0,pi,n_polar_a)),n_azimu_b);
tmp_a_k_Y__ = randn(1+1*l_max,1+2*l_max);
tmp_a_k_p__ = randn(n_polar_a,n_azimu_b);
n_iteration = 256;
tmp_t = tic;
for niteration=1:n_iteration;
cg_evaluate_n_1(l_max,tmp_a_k_Y__,n_polar_a,n_azimu_b,legendre_evaluate_ljm___);
cg_evaluate_t_1(n_polar_a,n_azimu_b,tmp_a_k_p__,l_max,legendre_evaluate_mlj___,expil__,expi__);
end;%for niteration=1:n_iteration;
tmp_t = toc(tmp_t);
disp(sprintf(' %% n_polar_a %d n_azimu_b %d l_max %d n_iteration %d : precomputation 0on: %0.2fs',n_polar_a,n_azimu_b,l_max,n_iteration,tmp_t));
tmp_t = tic;
for niteration=1:n_iteration;
cg_evaluate_n_1(l_max,tmp_a_k_Y__,n_polar_a,n_azimu_b,[]);
cg_evaluate_t_1(n_polar_a,n_azimu_b,tmp_a_k_p__,l_max,[],[],[]);
end;%for niteration=1:n_iteration;
tmp_t = toc(tmp_t);
disp(sprintf(' %% n_polar_a %d n_azimu_b %d l_max %d n_iteration %d : precomputation off: %0.2fs',n_polar_a,n_azimu_b,l_max,n_iteration,tmp_t));
%%%%%%%%;
disp('returning'); return;
end;%if (nargin<4);

% evaluate a_k_Y_ on tensor spherical grid. ;
n_l_val = 1 + 1*l_max;
n_lm_max = (1+l_max)^2;
n_m_abs = 1 + 1*l_max;
n_m_val = 1 + 2*l_max;
if (n_azimu_b<n_m_val); disp(sprintf(' %% Warning, n_azimu_b %d < n_m_val %d',n_azimu_b,n_m_val)); end;
n_azimu_b = max(n_azimu_b,n_m_val); %<-- important later for ifft. ;
azimu_b_ = transpose(linspace(0,2*pi,n_azimu_b+1));
azimu_b_ = azimu_b_(1:end-1);

if ((nargin<=4) | isempty(legendre_evaluate_ljm___)); 
legendre_evaluate_ljm___ = legendre_evaluate_ljm___0(l_max,cos(transpose(linspace(0,pi,n_polar_a))));
end;%if ((nargin<=4) | isempty(legendre_evaluate_ljm___)); 

%%%%%%%%;
% Create a_k_Y_ml__ so that rows correspond to m_val and columns correspond to l_val. ;
%%%%%%%%;
a_k_Y_ml__ = permute(a_k_Y__,[2,1]); %<-- non-conjugate transpose. ;

%%%%%%%%;
% Our main goal is to compute: ;
% a_k_p__(1+npolar_a,1+nazimu_b) = ;
% \sum_{l_val=0}^{l_val=l_max} \sum_{m_val=-l_val}^{+l_val} .... ;
%  Ylm__(l_val;m_val)(polar_a,azimu_b) * a_k_Y__(1+l_val,1+l_max+m_val), ;
% Where polar_a = polar_a_(npolar_a), and azimu_b = azimu_b_(nazimu_b), ;
% and a_k_Y__(1+l_val,1+l_max+m_val) = a_k_Y_(1+(1+(l_val-1))^2 + l_val + m_val) ;
% = a_k_Y_( 1 + l_val^2 + l_val + m_val ). ;
% ;
% Note that Ylm__(l_val;m_val)(polar_a,azimu_b) can be decomposed as: ;
% Ylm__(l_val;m_val) = ... ;
% legendre_normalization(l_val;m_val) ... ;
% * legendre_evaluate(l_val;m_val)(cos(polar_a_(npolar_a))) ... ;
% * exp(+i*m_val*azimu_b_(nazimu_b)). ;
% ;
% We will use the ifft by first calculating: ;
% spherical_harmonic_unphased__(1+l_max+m_val,npolar_a)
% \sum_{l_val=0}^{l_val=l_max} ... ;
%  legendre_normalization(l_val;m_val) ... ;
%  * legendre_evaluate(l_val;m_val;cos_polar_a_(npolar_a))) ... ;
%  * a_k_Y_ml__(1+l_max+m_val,1+l_val);
% ;
% And then calculating: ;
% a_k_p__(1+npolar_a,1+nazimu_b) = ;
% \sum_{m_val=-l_max}^{m_val=+l_max} ... ;
% spherical_harmonic_unphased__(1+l_max+m_val,npolar_a) ... ;
% * exp(+i*m_val*azimu_b_(nazimu_b)). ;
%%%%%%%%;

%%%%%%%%;
% First sum over l_val for each m_val ;
% Note that legendre_evaluate_ljm___ already accounts for the normalization. ;
%%%%%%%%;
spherical_harmonic_unphased__ = zeros(n_m_val,n_polar_a);
for m_val=-l_max:+l_max;
spherical_harmonic_unphased__(1+l_max+m_val,:) = a_k_Y_ml__(1 + l_max + m_val,:) * legendre_evaluate_ljm___(:,:,1 + l_max + m_val);
end;%for m_val=-l_max:+l_max;

%%%%%%%%;
% Now sum over m_val ;
% Note that IFFT computes: ;
%                    N                                                  ;
%      x(n) = (1/N) sum  X(k)*exp( j*2*pi*(k-1)*(n-1)/N), 1 <= n <= N.  ;
%                   k=1                                                 ;
% Whereas we would like to compute: ;
% a_k_p__(1+npolar_a,1+nazimu_b) = ;
% \sum_{m_val=-l_max}^{m_val=+l_max} ... ;
% spherical_harmonic_unphased__(1+l_max+m_val,npolar_a) ... ;
% * exp(+i*m_val*azimu_b_(nazimu_b)). ;
% ;
% Noting that: m_val = -l_max + nm_val, ;
% where nm_val ranges across [0:(2*l_max)] ;
% and that: azimu_b_(nazimu_b) = 2*pi*nazimu_b/n_azimu_b, ;
% We can rewrite this sum as: ;
% 
% a_k_p__(1+npolar_a,1+nazimu_b) = ;
% \sum_{nm_val=0}^{nm_val=n_m_val-1} ... ;
% spherical_harmonic_unphased__(1+nm_val,npolar_a) ... ;
% * exp(+i*2*pi*(nm_val-l_max)*nazimu_b/n_azimu_b). ;
% which equals: ;
% a_k_p__(1+npolar_a,1+nazimu_b) = ;
% exp(-i*2*pi*l_max/n_azimu_b)^nazimu_b * ... ;
% \sum_{nm_val=0}^{nm_val=n_m_val-1} ... ;
% spherical_harmonic_unphased__(1+nm_val,npolar_a) ... ;
% * exp(+i*2*pi*nm_val*nazimu_b/n_azimu_b). ;
% where nazimu_b ranges across [0:n_azimu_b-1]. ;
% ;
% Thus, assuming that n_azimu_b >= n_m_val, ;
% the entries of a_k_p__(1+npolar_a,:) should be equal to ;
% (exp(-i*2*pi*l_max/n_azimu_b).^[0:n_azimu_b-1]) .* tmp_ifft_out_, ;
% where tmp_ifft_out_ = n_azimu_b * ifft(tmp_ifft_0in_), ;
% where tmp_ifft_0in_ has been padded as: ;
% tmp_ifft_0in_ = [ spherical_harmonic_unphased__(:,npolar_a) ; zeros(n_azimu_b - n_m_val,1) ];
%%%%%%%%;
assert(n_azimu_b>=n_m_val);
a_k_p__ = zeros(n_polar_a,n_azimu_b);
tmp_ifft_0in__ = [ spherical_harmonic_unphased__(:,:) ; zeros(n_azimu_b-n_m_val,n_polar_a) ];
tmp_ifft_out__ = n_azimu_b * ifft(tmp_ifft_0in__);
expi = exp(-i*2*pi*l_max/n_azimu_b);
expi_ = expi.^transpose([0:n_azimu_b-1]);
a_k_p__ = permute(sparse(1:n_azimu_b,1:n_azimu_b,expi_,n_azimu_b,n_azimu_b)*tmp_ifft_out__,[2,1]);





