function wigners_2(n_l,kdelta_max,eps);
% constructs approximate factorization of wigner-s matrix, defined as: ;
% Ws = Wd(-omega) * Wt(k*delta) * Wd(+omega), where: ; 
% Wd = wigner-d matrix for angle omega ;
% Wt = wigner-t matrix for z-translation delta on shell-k ;

verbose=1;

if (nargin<na); n_l = 10; end; na = na+1;
if (nargin<na); kdelta_max = 2.0; end; na = na+1;
if (nargin<na); eps = 1e-3; end; na = na+1;

k_val_max = n_l;
n_kdelta = max(20,2*n_l);
k_val_ = linspace(1,k_val_max,n_kdelta);
delta_ = linspace(0,kdelta_max/k_val_max,n_kdelta+1);
kdelta_ = reshape(k_val_,length(k_val_),1)*reshape(delta_,1,length(delta_));
kdelta_ = reshape(kdelta_,length(k_val_)*length(delta_),1);
omega_ = linspace(0,pi,n_kdelta+2);
n_all = length(k_val_)*length(delta_)*length(omega_);

n_sample = 0.5;
n_lm = (1+n_l).^2;
n_m = 1+2*n_l;

[m1_,l1_,m2_,l2_,pp_,qq_] = permute_ml_to_lm(n_l);
m3_ = unique(m2_,'stable');

if verbose; disp(sprintf(' %% calculating Wd_')); tic; end;
Wdf__ = cell(length(omega_),1);
Wdf_ = cell(length(omega_),1);
Sdf_ = cell(length(omega_),1);
Wdb__ = cell(length(omega_),1);
Wdb_ = cell(length(omega_),1);
Sdb_ = cell(length(omega_),1);
for nomega = 1:length(omega_);
omega = omega_(nomega);
Wdf__{nomega} = wignerd_b(n_l,+omega);
Wdb__{nomega} = wignerd_b(n_l,-omega);
Wdf_{nomega} = zeros(n_lm,n_lm);
Wdb_{nomega} = zeros(n_lm,n_lm);
nlm=0;
for nl=0:n_l;
l_val = nl;
nm = 1 + 2*l_val;
Wdf_{nomega}(nlm + (1:nm),nlm + (1:nm)) = Wdf__{nomega}{1+nl};
Wdb_{nomega}(nlm + (1:nm),nlm + (1:nm)) = Wdb__{nomega}{1+nl};
nlm = nlm + nm;
end;%for nl=0:n_l;
assert(nlm==n_lm);
Sdf_{nomega} = sparse(Wdf_{nomega});
Sdb_{nomega} = sparse(Wdb_{nomega});
end;%for nomega = 1:length(omega_);
if verbose; disp(sprintf(' %% finished Wd_, total time %0.2f',toc)); end;
clear Wdf__ Wdf_ Wdb__ Wdb_ ;

if verbose; disp(sprintf(' %% calculating Wt_')); tic; end;
Wz__ = wignerz_leg(n_l,kdelta_,n_sample);
n_s = 9;
Uz_ = cell(n_m,n_s);
Sz_ = cell(n_m,n_s);
Vz_ = cell(n_m,n_s);
for nm=1:n_m;
%if nm==1; m_val=0; end; if nm>1; m_val = (1+floor((nm-2)/2))*((-1)^(mod(nm-1,2))); end; 
m_val = m3_(nm); m_abs = abs(m_val); nl = 1+n_l-m_abs;
W_tmp_ = zeros(nl,nl,length(k_val_),length(delta_));
for ndelta = 1:length(delta_); for nk_val = 1:length(k_val_);
nkd = 1 + (nk_val-1) + (ndelta-1)*length(k_val_);
W_tmp_(:,:,nk_val,ndelta) = Wz__{nm,nkd};
end;end;%for ndelta = 1:length(delta_); for nk_val = 1:length(k_val_);
W_tmp_ = reshape(W_tmp_,[nl*nl*length(k_val_),length(delta_)]);
[U_tmp_,S_tmp_,V_tmp_] = svds(W_tmp_,n_s);
for ns=1:n_s;
Uz_{nm,ns} = reshape(U_tmp_(:,ns),[nl,nl,length(k_val_)]);
Sz_{nm,ns} = S_tmp_(ns,ns);
Vz_{nm,ns} = V_tmp_(:,ns)*S_tmp_(ns,ns);
end;%for ns=1:n_s;
clear W_tmp_ U_tmp_ S_tmp_ V_tmp_ ;
end;%for nm=1:n_m;
if verbose; disp(sprintf(' %% finished Wt_, total time %0.2f',toc)); end;
clear Wz__ ;

% look at Sz_ to see how many terms we need for each nm. ;
% Looks as though 3 terms suffices for 1e-2 accuracy. ;
Sz = cell2mat(Sz_);
cra = colormap('jet'); ncra = size(cra,1);
for nm=1:n_m;
%if nm==1; m_val=0; end; if nm>1; m_val = (1+floor((nm-2)/2))*((-1)^(mod(nm-1,2))); end; 
m_val = m3_(nm); m_abs = abs(m_val); nl = 1+n_l-m_abs;
cbin = max(1,min(ncra,floor(ncra*nm/(n_m))));
subplot(1,2,1); hold on;
plot(1:n_s,Sz(nm,:),'.-','MarkerSize',35,'Color',cra(cbin,:));
xlabel('ns'); ylabel('S'); title(sprintf(' %% S^m for various m'));
hold off;
subplot(1,2,2); hold on;
plot(1:n_s,log10(Sz(nm,:)),'.-','MarkerSize',35,'Color',cra(cbin,:));
xlabel('ns'); ylabel('log10(S)'); title(sprintf(' %% S^m for various m'));
hold off;
end;%for nm=1:n_m;

% look at Vz_ to see how it depends on delta, nm and ns. ;
% looks as though Vz_ scales with nm. ;
cra = colormap('jet'); ncra = size(cra,1);
prows = ceil(sqrt(n_s)); pcols = ceil(sqrt(n_s));
for ns=1:n_s;
subplot(prows,pcols,ns); hold on;
for nm=1:n_m;
%if nm==1; m_val=0; end; if nm>1; m_val = (1+floor((nm-2)/2))*((-1)^(mod(nm-1,2))); end; 
m_val = m3_(nm); m_abs = abs(m_val); nl = 1+n_l-m_abs;
cbin = max(1,min(ncra,floor(ncra*nm/(n_m))));
plot(delta_,real(Vz_{nm,ns}),'-','Color',cra(cbin,:));
end;%for nm=1:n_m;
hold off;
xlabel('delta'); ylabel('V'); title(sprintf(' %% V^m for ns=%d',ns));
end;%for ns=1:n_s;

% look at Vz_ to see if we can factor out nm dependence. ;
% Only first 2 or 1 terms are relevant for each ns. ;
Vz = zeros(length(delta_),n_m,n_s);
for ns=1:n_s;
for nm=1:n_m;
Vz(:,nm,ns) = real(Vz_{nm,ns});
end;%for nm=1:n_m;
end;%for ns=1:n_s;
figure;
prows = ceil(sqrt(n_s)); pcols = ceil(sqrt(n_s));
for ns=1:n_s;
subplot(prows,pcols,ns); 
imagesc(squeeze(Vz(:,:,ns))); colorbar; 
xlabel('nm'); ylabel('delta'); title(sprintf(' ns %d',ns));
end;%for ns=1:n_s;
figure;
for ns=1:n_s;
subplot(prows,pcols,ns); 
tmp_s = svds(squeeze(Vz(:,:,ns)),9);
plot(log10(tmp_s),'.-','MarkerSize',25);
xlabel('svd'); ylabel('log10(sv)'); title(sprintf(' svs for ns %d',ns));
end;%for ns=1:n_s;

% Now look at Uz_{nm==1,ns==1:3}(:,:,nk) to see how it depends on k_val. ;
% Note that we expect Uz_{nm,ns}(:,:,nk) to be banded. ;
% This means we can look at the various diagonals of Uz_. ;
% These certainly look like they scale with k_val. ;
cra = colormap('jet'); ncra = size(cra,1);
n_s_sub = 3;
n_band = 7;
nm = 1;
%if nm==1; m_val=0; end; if nm>1; m_val = (1+floor((nm-2)/2))*((-1)^(mod(nm-1,2))); end; 
m_val = m3_(nm); m_abs = abs(m_val); nl = 1+n_l-m_abs;
for ns=1:n_s_sub;
for nband=1:n_band;
subplot(n_s_sub,n_band,nband + (ns-1)*n_band); hold on;
for nk_val = 1:length(k_val_);
U_tmp = diag(squeeze(Uz_{1,ns}(:,:,nk_val)),nband-1); 
cbin = max(1,min(ncra,floor(ncra*nk_val/length(k_val_))));
plot(1:nl-(nband-1),abs(U_tmp),'.-','MarkerSize',25,'Color',cra(cbin,:));
end;%for nk_val = 1:length(k_val_);
hold off;
xlabel(sprintf('diag %d',nband-1)); ylabel('abs(U)'); title(sprintf('m %d diag %d ns %d',m_val,nband-1,ns));
end;%for nband=1:n_band;
end;%for ns=1:n_s_sub;

% Now look at Uz_{nm=1:6,ns=1:3}(:,:,nk) in a different way. ;
% Here we construct a U_tmp which has several diagonals of Uz_ as rows, and nk as columns. ;
% We can see that U_tmp is nearly separable in terms of the diagonals vs k_val_. ;
n_s_sub = 3;
n_m_sub = 6;
n_band = 12;
figure;
for ns=1:n_s_sub;
for nm=1:n_m_sub;
%if nm==1; m_val=0; end; if nm>1; m_val = (1+floor((nm-2)/2))*((-1)^(mod(nm-1,2))); end; 
m_val = m3_(nm); m_abs = abs(m_val); nl = 1+n_l-m_abs;
len_tmp = 0; for nband=1:n_band; len_tmp = len_tmp + (nl-(nband-1)); end; len_sum = len_tmp;
U_tmp = zeros(len_sum,length(k_val_));
for nk_val = 1:length(k_val_);
len_tmp = 0;
for nband=1:n_band;
U_tmp(len_tmp + (1:nl-(nband-1)),nk_val) = diag(Uz_{nm,ns}(:,:,nk_val),nband-1);
len_tmp = len_tmp + (nl-(nband-1));
end;%for nband=1:n_band;
assert(len_tmp==len_sum);
end;%for nk_val = 1:length(k_val_);
subplot(n_s_sub,2*n_m_sub,1+0+2*(nm-1) + (ns-1)*2*n_m_sub);
imagesc(abs(U_tmp));
title(sprintf('U m %d s %d',nm,ns));
tmp_s = svds(U_tmp,15);
subplot(n_s_sub,2*n_m_sub,1+1+2*(nm-1) + (ns-1)*2*n_m_sub);
plot(log10(tmp_s),'.-','Markersize',35);
title(sprintf('sv m %d s %d',nm,ns));
end;%for nm=1:n_m_sub;
end;%for ns=1:n_s_sub;



