function tesselation_ver6();

rng(0);
%n_point = 8192;
n_point = 128*4;
%n_point = 12;
x_ = cos(linspace(-2*pi,+2*pi,n_point+1)); x_ = x_(1:n_point);
y_ = sin(linspace(-2*pi,+2*pi,n_point+1)); y_ = y_(1:n_point);
z_ = linspace(-2*pi,+2*pi,n_point+1); z_ = z_(1:n_point);
L_ = [x_;y_;z_];
%L_ = [ L_ , L_ , L_ , repmat([1;1;1]/sqrt(3),1,5) ]; n_point = n_point*3+5;
%L_ = [ repmat([1;1;1]/sqrt(3),1,5) ]; n_point = 5; L_,;
for npoint=1:n_point; L_(:,npoint) = L_(:,npoint)/norm(L_(:,npoint)); end;% for npoint=1:n_point;
%plot3(L_(1,:),L_(2,:),L_(3,:),'o'); axis vis3d; return;
hL_ = HandleObject(L_); % List of points ;
hLT = HandleObject(1:n_point); % List-index for each point ;
hTL = HandleObject(zeros(1,n_point)); % This will eventually store the tesselation-index for each element of hL_ (leaves only) ;

v_n00 = [-1; 0; 0];
v_0n0 = [ 0;-1; 0];
v_00n = [ 0; 0;-1];
v_p00 = [+1; 0; 0];
v_0p0 = [ 0;+1; 0];
v_00p = [ 0; 0;+1];

dmin = 0.5^7;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% Test all eight octants ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;

[nl_nnn,nm_nnn,ll_nnn] = tesselation_size(dmin,0,v_n00,v_0n0,v_00n,0,hL_.O);
[nl_nnp,nm_nnp,ll_nnp] = tesselation_size(dmin,0,v_n00,v_0n0,v_00p,1,hL_.O);
[nl_npn,nm_npn,ll_npn] = tesselation_size(dmin,0,v_n00,v_0p0,v_00n,1,hL_.O);
[nl_npp,nm_npp,ll_npp] = tesselation_size(dmin,0,v_n00,v_0p0,v_00p,0,hL_.O);
[nl_pnn,nm_pnn,ll_pnn] = tesselation_size(dmin,0,v_p00,v_0n0,v_00n,1,hL_.O);
[nl_pnp,nm_pnp,ll_pnp] = tesselation_size(dmin,0,v_p00,v_0n0,v_00p,0,hL_.O);
[nl_ppn,nm_ppn,ll_ppn] = tesselation_size(dmin,0,v_p00,v_0p0,v_00n,0,hL_.O);
[nl_ppp,nm_ppp,ll_ppp] = tesselation_size(dmin,0,v_p00,v_0p0,v_00p,1,hL_.O);
nl_= [nl_nnn,nl_nnp,nl_npn,nl_npp,nl_pnn,nl_pnp,nl_ppn,nl_ppp];
nm_= [nm_nnn,nm_nnp,nm_npn,nm_npp,nm_pnn,nm_pnp,nm_ppn,nm_ppp];
ll_= [ll_nnn,ll_nnp,ll_npn,ll_npp,ll_pnn,ll_pnp,ll_ppn,ll_ppp];
disp(num2str(nl_));
disp(num2str(nm_));
disp(num2str(ll_));
nl_max = max(nl_);
nm_sum = sum(nm_);
ll_sum = sum(ll_);
disp(sprintf(' %% n_point %d --> nl_max %d nm_sum %d ll_sum %d',n_point,nl_max,nm_sum,ll_sum));

hT_nl_ = HandleObject(zeros(nm_sum*1,1)); % level ;
hT_up_ = HandleObject(zeros(nm_sum*1,1)); % parity (up vs down) ;
hT_id_ = HandleObject(zeros(nm_sum*1,1)); % self pointer ;
hT_pa_ = HandleObject(zeros(nm_sum*1,1)); % parent pointer ;
hT_v1_ = HandleObject(zeros(nm_sum*3,1)); % vertex 1 ;
hT_v2_ = HandleObject(zeros(nm_sum*3,1)); % vertex 2 ;
hT_v3_ = HandleObject(zeros(nm_sum*3,1)); % vertex 3 ;
hT_vm_ = HandleObject(zeros(nm_sum*3,1)); % vertex center ;
hT_m1_ = HandleObject(zeros(nm_sum*3,1)); % edge midpoint 1 ;
hT_m2_ = HandleObject(zeros(nm_sum*3,1)); % edge midpoint 2 ;
hT_m3_ = HandleObject(zeros(nm_sum*3,1)); % edge midpoint 3 ;
hT_e1_ = HandleObject(zeros(nm_sum*3,1)); % edge vector 1 ;
hT_e2_ = HandleObject(zeros(nm_sum*3,1)); % edge vector 2 ;
hT_e3_ = HandleObject(zeros(nm_sum*3,1)); % edge vector 3 ;
hT_n1_ = HandleObject(zeros(nm_sum*3,1)); % edge normal 1 ;
hT_n2_ = HandleObject(zeros(nm_sum*3,1)); % edge normal 2 ;
hT_n3_ = HandleObject(zeros(nm_sum*3,1)); % edge normal 3 ;
hT_nn_ = HandleObject(zeros(nm_sum*3,1)); % center normal ;
hT_dd_ = HandleObject(zeros(nm_sum*1,1)); % diameter ;
hT_ll_ = HandleObject(zeros(nm_sum*1,1)); % number of points from hL_ in hT_ ;
hT_lf_ = HandleObject(zeros(nm_sum*1,1)); % is leaf ;
hT_c1_ = HandleObject(zeros(nm_sum*1,1)); % child_1 pointer ;
hT_c2_ = HandleObject(zeros(nm_sum*1,1)); % child_2 pointer ;
hT_c3_ = HandleObject(zeros(nm_sum*1,1)); % child_3 pointer ;
hT_c4_ = HandleObject(zeros(nm_sum*1,1)); % child_4 pointer ;
hT_ls_ = HandleObject(zeros(nm_sum*1,1)); % starting location of point list for hT_ (leaves only);
hT_LT_ = HandleObject(zeros(ll_sum*1,1)); % actual point list for hT_ (leaves only);
hT_end = HandleObject(0);

index_output = 1; ls_output = 0;
nl = 0; index_root_base=0;
index_root_base = index_root_base+1; root_base_(index_root_base) = index_output;
index_parent = 0; v1_input = v_n00; v2_input = v_0n0; v3_input = v_00n; parity = 0;
[index_output,ls_output] = tesselation_index(dmin,nl_max,nl,v1_input,v2_input,v3_input,parity,hL_.O,hLT.O,hTL,index_parent,index_output,ls_output,hT_nl_,hT_up_,hT_id_,hT_pa_,hT_v1_,hT_v2_,hT_v3_,hT_vm_,hT_m1_,hT_m2_,hT_m3_,hT_e1_,hT_e2_,hT_e3_,hT_n1_,hT_n2_,hT_n3_,hT_nn_,hT_dd_,hT_ll_,hT_lf_,hT_c1_,hT_c2_,hT_c3_,hT_c4_,hT_ls_,hT_LT_,hT_end);
index_root_base = index_root_base+1; root_base_(index_root_base) = index_output;
index_parent = 0; v1_input = v_n00; v2_input = v_0n0; v3_input = v_00p; parity = 1;
[index_output,ls_output] = tesselation_index(dmin,nl_max,nl,v1_input,v2_input,v3_input,parity,hL_.O,hLT.O,hTL,index_parent,index_output,ls_output,hT_nl_,hT_up_,hT_id_,hT_pa_,hT_v1_,hT_v2_,hT_v3_,hT_vm_,hT_m1_,hT_m2_,hT_m3_,hT_e1_,hT_e2_,hT_e3_,hT_n1_,hT_n2_,hT_n3_,hT_nn_,hT_dd_,hT_ll_,hT_lf_,hT_c1_,hT_c2_,hT_c3_,hT_c4_,hT_ls_,hT_LT_,hT_end);
index_root_base = index_root_base+1; root_base_(index_root_base) = index_output;
index_parent = 0; v1_input = v_n00; v2_input = v_0p0; v3_input = v_00n; parity = 1;
[index_output,ls_output] = tesselation_index(dmin,nl_max,nl,v1_input,v2_input,v3_input,parity,hL_.O,hLT.O,hTL,index_parent,index_output,ls_output,hT_nl_,hT_up_,hT_id_,hT_pa_,hT_v1_,hT_v2_,hT_v3_,hT_vm_,hT_m1_,hT_m2_,hT_m3_,hT_e1_,hT_e2_,hT_e3_,hT_n1_,hT_n2_,hT_n3_,hT_nn_,hT_dd_,hT_ll_,hT_lf_,hT_c1_,hT_c2_,hT_c3_,hT_c4_,hT_ls_,hT_LT_,hT_end);
index_root_base = index_root_base+1; root_base_(index_root_base) = index_output;
index_parent = 0; v1_input = v_n00; v2_input = v_0p0; v3_input = v_00p; parity = 0;
[index_output,ls_output] = tesselation_index(dmin,nl_max,nl,v1_input,v2_input,v3_input,parity,hL_.O,hLT.O,hTL,index_parent,index_output,ls_output,hT_nl_,hT_up_,hT_id_,hT_pa_,hT_v1_,hT_v2_,hT_v3_,hT_vm_,hT_m1_,hT_m2_,hT_m3_,hT_e1_,hT_e2_,hT_e3_,hT_n1_,hT_n2_,hT_n3_,hT_nn_,hT_dd_,hT_ll_,hT_lf_,hT_c1_,hT_c2_,hT_c3_,hT_c4_,hT_ls_,hT_LT_,hT_end);
index_root_base = index_root_base+1; root_base_(index_root_base) = index_output;
index_parent = 0; v1_input = v_p00; v2_input = v_0n0; v3_input = v_00n; parity = 1;
[index_output,ls_output] = tesselation_index(dmin,nl_max,nl,v1_input,v2_input,v3_input,parity,hL_.O,hLT.O,hTL,index_parent,index_output,ls_output,hT_nl_,hT_up_,hT_id_,hT_pa_,hT_v1_,hT_v2_,hT_v3_,hT_vm_,hT_m1_,hT_m2_,hT_m3_,hT_e1_,hT_e2_,hT_e3_,hT_n1_,hT_n2_,hT_n3_,hT_nn_,hT_dd_,hT_ll_,hT_lf_,hT_c1_,hT_c2_,hT_c3_,hT_c4_,hT_ls_,hT_LT_,hT_end);
index_root_base = index_root_base+1; root_base_(index_root_base) = index_output;
index_parent = 0; v1_input = v_p00; v2_input = v_0n0; v3_input = v_00p; parity = 0;
[index_output,ls_output] = tesselation_index(dmin,nl_max,nl,v1_input,v2_input,v3_input,parity,hL_.O,hLT.O,hTL,index_parent,index_output,ls_output,hT_nl_,hT_up_,hT_id_,hT_pa_,hT_v1_,hT_v2_,hT_v3_,hT_vm_,hT_m1_,hT_m2_,hT_m3_,hT_e1_,hT_e2_,hT_e3_,hT_n1_,hT_n2_,hT_n3_,hT_nn_,hT_dd_,hT_ll_,hT_lf_,hT_c1_,hT_c2_,hT_c3_,hT_c4_,hT_ls_,hT_LT_,hT_end);
index_root_base = index_root_base+1; root_base_(index_root_base) = index_output;
index_parent = 0; v1_input = v_p00; v2_input = v_0p0; v3_input = v_00n; parity = 0;
[index_output,ls_output] = tesselation_index(dmin,nl_max,nl,v1_input,v2_input,v3_input,parity,hL_.O,hLT.O,hTL,index_parent,index_output,ls_output,hT_nl_,hT_up_,hT_id_,hT_pa_,hT_v1_,hT_v2_,hT_v3_,hT_vm_,hT_m1_,hT_m2_,hT_m3_,hT_e1_,hT_e2_,hT_e3_,hT_n1_,hT_n2_,hT_n3_,hT_nn_,hT_dd_,hT_ll_,hT_lf_,hT_c1_,hT_c2_,hT_c3_,hT_c4_,hT_ls_,hT_LT_,hT_end);
index_root_base = index_root_base+1; root_base_(index_root_base) = index_output;
index_parent = 0; v1_input = v_p00; v2_input = v_0p0; v3_input = v_00p; parity = 1;
[index_output,ls_output] = tesselation_index(dmin,nl_max,nl,v1_input,v2_input,v3_input,parity,hL_.O,hLT.O,hTL,index_parent,index_output,ls_output,hT_nl_,hT_up_,hT_id_,hT_pa_,hT_v1_,hT_v2_,hT_v3_,hT_vm_,hT_m1_,hT_m2_,hT_m3_,hT_e1_,hT_e2_,hT_e3_,hT_n1_,hT_n2_,hT_n3_,hT_nn_,hT_dd_,hT_ll_,hT_lf_,hT_c1_,hT_c2_,hT_c3_,hT_c4_,hT_ls_,hT_LT_,hT_end);

disp(sprintf(' %% hT_nl length %d, hT_LT length %d index_root_base %d',length(hT_nl_.O),length(hT_LT_.O),index_root_base));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% plotting tesselation at deepest level ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
plot_flag=0;
if plot_flag;
figure;
colormap('jet');
hold on;
for index_root=1:index_root_base;
index__input = root_base_(index_root);
tesselation_plot_leaf(nl_max,0,...
		      hL_.O,...
		      index__input,...
		      hT_nl_,...
		      hT_up_,...
		      hT_v1_,...
		      hT_v2_,...
		      hT_v3_,...
		      hT_vm_,...
		      hT_nn_,...
		      hT_ll_,...
		      hT_lf_,...
		      hT_c1_,...
		      hT_c2_,...
		      hT_c3_,...
		      hT_c4_,...
		      hT_ls_,...
		      hT_LT_,...
		      hT_end);
end;%for index_root=1:index_root_base;
plot3(hL_.O(1,:),hL_.O(2,:),hL_.O(3,:),'m*','MarkerSize',15);
hold off;
xlabel('x'); ylabel('y'); zlabel('z');
axis equal;axis vis3d;
disp('returning');return;
end;%if plot_flag;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% plotting neighbors ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
plot_flag=0;
if (plot_flag);
for npoint = 1:n_point;
vp = hL_.O(:,npoint);
dist = 0.5;
h_NL = HandleObject(zeros(1,n_point)); % will store list of neighbors ;
h_Nn = HandleObject(0); % current length of list ;
for index_root=1:index_root_base;
index__input = root_base_(index_root);
tesselation_neighborhood(nl_max,0,...
			 vp,...
			 dist,...
			 h_NL,...
			 h_Nn,...
			 hL_.O,...
			 index__input,...
			 hT_nl_,...
			 hT_up_,...
			 hT_v1_,...
			 hT_v2_,...
			 hT_v3_,...
			 hT_vm_,...
			 hT_dd_,...
			 hT_ll_,...
			 hT_lf_,...
			 hT_c1_,...
			 hT_c2_,...
			 hT_c3_,...
			 hT_c4_,...
			 hT_ls_,...
			 hT_LT_,...
			 hT_end);
end;%for index_root=1:index_root_base;
disp(sprintf(' %% h_Nn.O %d',h_Nn.O));
NL = h_NL.O(1:h_Nn.O);
%figure; 
clf;
colormap('jet');
hold on;
for npoint_tmp=1:n_point;
vp_tmp = hL_.O(:,npoint_tmp);
if (norm(vp_tmp-vp)<=dist); plot3(vp_tmp(1),vp_tmp(2),vp_tmp(3),'ko','MarkerSize',5);
elseif (norm(vp_tmp-vp)> dist); plot3(vp_tmp(1),vp_tmp(2),vp_tmp(3),'go','MarkerSize',5); 
end;% if close;
end;% for npoint_tmp=1:n_point;
plot3(hL_.O(1,NL),hL_.O(2,NL),hL_.O(3,NL),'k+','MarkerSize',7);
plot3(vp(1),vp(2),vp(3),'kx','MarkerSize',10);
hold off;
xlabel('x'); ylabel('y'); zlabel('z');
axis equal;axis vis3d;
title(sprintf(' np %d/%d',npoint,n_point));
drawnow(); pause();
end;%for npoint = 1:n_point;
disp('returning');return;
end;%if (plot_flag);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% listing neighbors ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
for npoint = 1:n_point;
vp = hL_.O(:,npoint);
dist = 0.25;
h_NL = HandleObject(zeros(1,n_point)); % will store list of neighbors ;
h_Nn = HandleObject(0); % current length of list ;
for index_root=1:index_root_base;
index__input = root_base_(index_root);
tesselation_neighborhood(nl_max,0,...
			 vp,...
			 dist,...
			 h_NL,...
			 h_Nn,...
			 hL_.O,...
			 index__input,...
			 hT_nl_,...
			 hT_up_,...
			 hT_v1_,...
			 hT_v2_,...
			 hT_v3_,...
			 hT_vm_,...
			 hT_dd_,...
			 hT_ll_,...
			 hT_lf_,...
			 hT_c1_,...
			 hT_c2_,...
			 hT_c3_,...
			 hT_c4_,...
			 hT_ls_,...
			 hT_LT_,...
			 hT_end);
end;%for index_root=1:index_root_base;
disp(sprintf(' %% npoint %d Nn %d',npoint,h_Nn.O));
end;%for npoint = 1:n_point;
disp('returning');return;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [nl_out,nm_out,ll_out] = tesselation_size(dmin,nl,v1_i,v2_i,v3_i,parity,L_);
verbose=0;
prefix = 37*ones(1,1*(nl+1));
if (verbose); disp(sprintf('%s [entering tesselation_size] nl %d',prefix,nl)); end;
nl_out = nl;
nm_out = 0;
ll_out = 0;
v1_i = v1_i/norm(v1_i); v2_i = v2_i/norm(v2_i); v3_i = v3_i/norm(v3_i);
v1 = v1_i; v2 = v2_i; v3 = v3_i; 
vm = (v1+v2+v3)/3;
nn = cross(v3-v2,v1-v3);
aa = dot(vm,nn);
if (aa>=0); v1 = v1_i; v2 = v2_i; v3 = v3_i; end;
if (aa< 0); v1 = v2_i; v2 = v1_i; v3 = v3_i; end;
if (verbose); disp(sprintf('%s v1 %4.3f %4.3f %4.3f ',prefix,v1)); end;
if (verbose); disp(sprintf('%s v2 %4.3f %4.3f %4.3f ',prefix,v2)); end;
if (verbose); disp(sprintf('%s v3 %4.3f %4.3f %4.3f ',prefix,v3)); end;
dd = max([norm(vm-v1),norm(vm-v2),norm(vm-v3)]);
e2 = v1-v3; e3 = v2-v1; e1 = v3-v2;
m1 = (v2+v3)/2; m1 = m1/norm(m1);
m2 = (v3+v1)/2; m2 = m2/norm(m2);
m3 = (v1+v2)/2; m3 = m3/norm(m3);
nn = cross(e1,e2); nn = nn/norm(nn);
n2 = cross(v3,e2); n2 = n2/norm(n2);
n3 = cross(v1,e3); n3 = n3/norm(n3);
n1 = cross(v2,e1); n1 = n1/norm(n1);
if (verbose); disp(sprintf('%s vm %4.3f %4.3f %4.3f ',prefix,vm)); end;
if (verbose); disp(sprintf('%s nn %4.3f %4.3f %4.3f ',prefix,nn)); end;
if (verbose); disp(sprintf('%s e1 %4.3f %4.3f %4.3f ',prefix,e1)); end;
if (verbose); disp(sprintf('%s e2 %4.3f %4.3f %4.3f ',prefix,e2)); end;
if (verbose); disp(sprintf('%s e3 %4.3f %4.3f %4.3f ',prefix,e3)); end;
if (verbose); disp(sprintf('%s m1 %4.3f %4.3f %4.3f ',prefix,m1)); end;
if (verbose); disp(sprintf('%s m2 %4.3f %4.3f %4.3f ',prefix,m2)); end;
if (verbose); disp(sprintf('%s m3 %4.3f %4.3f %4.3f ',prefix,m3)); end;
if (verbose); disp(sprintf('%s n1 %4.3f %4.3f %4.3f ',prefix,n1)); end;
if (verbose); disp(sprintf('%s n2 %4.3f %4.3f %4.3f ',prefix,n2)); end;
if (verbose); disp(sprintf('%s n3 %4.3f %4.3f %4.3f ',prefix,n3)); end;
n_L = size(L_,2);
I1 = zeros(n_L,1); for nL=1:n_L; I1(nL) = dot(n1,L_(:,nL)); end;%for nL=1:n_L;
I2 = zeros(n_L,1); for nL=1:n_L; I2(nL) = dot(n2,L_(:,nL)); end;%for nL=1:n_L;
I3 = zeros(n_L,1); for nL=1:n_L; I3(nL) = dot(n3,L_(:,nL)); end;%for nL=1:n_L;
if (verbose); disp(num2str(transpose(I1))); disp(num2str(transpose(I2))); disp(num2str(transpose(I3))); end;
if  parity; IA = zeros(n_L,1); IA = (I1>=0) & (I2>=0) & (I3>=0); end;
if ~parity; IA = zeros(n_L,1); IA = (I1> 0) & (I2> 0) & (I3> 0); end;
L_sub_ = L_(:,find(IA));
n_L_sub = size(L_sub_,2);
lf = (n_L_sub==1 | (n_L_sub>1 && dd<=dmin));
if (verbose); disp(sprintf('%s n_L %d n_L_sub %d dd %f lf %d',prefix,n_L,n_L_sub,dd,lf)); end;
if (n_L_sub==0);
nl_out = -1;
nm_out = 0;
ll_out = 0;
elseif (n_L_sub>=1);
if (lf);
nl_out = nl;
nm_out = 1;
ll_out = n_L_sub;
end; % if (lf);
if (~lf);
if (verbose); disp(num2str(L_sub_)); end;
if (verbose); disp(sprintf('%s n_L_sub %d dd %f; calling children ',prefix,n_L_sub,dd)); end;
[nl_child_1,nm_child_1,ll_child_1] = tesselation_size(dmin,nl+1,v1,m3,m2, parity,L_sub_);
[nl_child_2,nm_child_2,ll_child_2] = tesselation_size(dmin,nl+1,v2,m1,m3, parity,L_sub_);
[nl_child_3,nm_child_3,ll_child_3] = tesselation_size(dmin,nl+1,v3,m2,m1, parity,L_sub_);
[nl_child_4,nm_child_4,ll_child_4] = tesselation_size(dmin,nl+1,m1,m2,m3,~parity,L_sub_);
nl_child_ = [nl_child_1,nl_child_2,nl_child_3,nl_child_4];
nm_child_ = [nm_child_1,nm_child_2,nm_child_3,nm_child_4];
ll_child_ = [ll_child_1,ll_child_2,ll_child_3,ll_child_4];
nl_out = max(nl_child_);
nm_out = 1 + sum(nm_child_);
ll_out = sum(ll_child_);
end; % if (~lf);
end;% if (n_L_sub>1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [index_output,ls_output] = ...
  tesselation_index(dmin,nl_max,nl,...
		    v1_input,v2_input,v3_input,...
		    parity,...
		    L_,...
		    LT,...
		    hTL,...
		    index_parent,...
		    index__input,...
		    ls__input,...
		    hT_nl_,...
		    hT_up_,...
		    hT_id_,...
		    hT_pa_,...
		    hT_v1_,...
		    hT_v2_,...
		    hT_v3_,...
		    hT_vm_,...
		    hT_m1_,...
		    hT_m2_,...
		    hT_m3_,...
		    hT_e1_,...
		    hT_e2_,...
		    hT_e3_,...
		    hT_n1_,...
		    hT_n2_,...
		    hT_n3_,...
		    hT_nn_,...
		    hT_dd_,...
		    hT_ll_,...
		    hT_lf_,...
		    hT_c1_,...
		    hT_c2_,...
		    hT_c3_,...
		    hT_c4_,...
		    hT_ls_,...
		    hT_LT_,...
		    hT_end);
if (nl>nl_max); disp(sprintf(' %% Warning! nl %d/%d in tesselation_index',nl,nl_max)); end;%if (nl>nl_max);
verbose=0;
prefix = 37*ones(1,1*(nl+1));
v1_input = v1_input/norm(v1_input); 
v2_input = v2_input/norm(v2_input); 
v3_input = v3_input/norm(v3_input);
v1 = v1_input; v2 = v2_input; v3 = v3_input; 
vm = (v1+v2+v3)/3;
nn = cross(v3-v2,v1-v3);
aa = dot(vm,nn);
if (aa>=0); v1 = v1_input; v2 = v2_input; v3 = v3_input; end;
if (aa< 0); v1 = v2_input; v2 = v1_input; v3 = v3_input; end;
dd = max([norm(vm-v1),norm(vm-v2),norm(vm-v3)]);
e2 = v1-v3; e3 = v2-v1; e1 = v3-v2;
m1 = (v2+v3)/2; m1 = m1/norm(m1);
m2 = (v3+v1)/2; m2 = m2/norm(m2);
m3 = (v1+v2)/2; m3 = m3/norm(m3);
nn = cross(e1,e2); nn = nn/norm(nn);
n2 = cross(v3,e2); n2 = n2/norm(n2);
n3 = cross(v1,e3); n3 = n3/norm(n3);
n1 = cross(v2,e1); n1 = n1/norm(n1);
n_L = size(L_,2);
I1 = zeros(n_L,1); for nL_length=1:n_L; I1(nL_length) = dot(n1,L_(:,nL_length)); end;%for nL_length=1:n_L;
I2 = zeros(n_L,1); for nL_length=1:n_L; I2(nL_length) = dot(n2,L_(:,nL_length)); end;%for nL_length=1:n_L;
I3 = zeros(n_L,1); for nL_length=1:n_L; I3(nL_length) = dot(n3,L_(:,nL_length)); end;%for nL_length=1:n_L;
if  parity; IA = zeros(n_L,1); IA = (I1>=0) & (I2>=0) & (I3>=0); end;
if ~parity; IA = zeros(n_L,1); IA = (I1> 0) & (I2> 0) & (I3> 0); end;
L_sub_ = L_(:,find(IA)); LT_sub = LT(find(IA));
n_L_sub = size(L_sub_,2);
lf = (n_L_sub==1 | (n_L_sub>1 && dd<=dmin));
if (verbose); disp(sprintf('%s nl %0.2d parity %d index_parent %0.3d index__input %0.3d; n_L %0.4d; n_L_sub %0.4d dd %.f',prefix,nl,parity,index_parent,index__input,n_L,n_L_sub,dd)); end;
if (n_L_sub==0);
%if (verbose); disp(sprintf('%s skipping self',prefix)); end;
index_output = index__input;
ls_output = ls__input;
end;%if (n_L_sub==0);
if (n_L_sub>=1);
%if (verbose); disp(sprintf('%s creating self',prefix)); end;
hT_nl_.O(index__input) = nl;
hT_up_.O(index__input) = parity;
hT_id_.O(index__input) = index__input;
hT_pa_.O(index__input) = index_parent;
ij_tmp = (1:3) + 3*(index__input-1);
hT_v1_.O(ij_tmp) = v1;
hT_v2_.O(ij_tmp) = v2;
hT_v3_.O(ij_tmp) = v3;
hT_vm_.O(ij_tmp) = vm;
hT_m1_.O(ij_tmp) = m1;
hT_m2_.O(ij_tmp) = m2;
hT_m3_.O(ij_tmp) = m3;
hT_e1_.O(ij_tmp) = e1;
hT_e2_.O(ij_tmp) = e2;
hT_e3_.O(ij_tmp) = e3;
hT_n1_.O(ij_tmp) = n1;
hT_n2_.O(ij_tmp) = n2;
hT_n3_.O(ij_tmp) = n3;
hT_nn_.O(ij_tmp) = nn;
hT_dd_.O(index__input) = dd;
hT_ll_.O(index__input) = n_L_sub;
hT_lf_.O(index__input) = lf;
hT_c1_.O(index__input) = 0;
hT_c2_.O(index__input) = 0;
hT_c3_.O(index__input) = 0;
hT_c4_.O(index__input) = 0;
hT_ls_.O(index__input) = -1;
index_output = index__input+1;
ls_output = ls__input;
if (lf);
%if (verbose); disp(sprintf('%s leaf: copying LT_sub to hT_LT_ ',prefix)); end;
hT_ls_.O(index__input) = ls__input;
for nL_sub=0:n_L_sub-1;
hT_LT_.O(1 + ls__input + nL_sub) = LT_sub(1 + nL_sub); 
hTL.O(LT_sub(1 + nL_sub))=index__input; 
end;%for nL_sub=0:n_L_sub-1;
ls_output = ls__input + n_L_sub;
end;%if (lf);
if (~lf);
%if (verbose); disp(sprintf('%s creating children',prefix)); end;
index_tempor = index_output;
if (verbose); disp(sprintf('%s creating child_1 at index %d ls %d',prefix,index_output,ls_output)); end;
[index_output,ls_output] = ...
  tesselation_index(dmin,nl_max,nl+1,...
		    v1,m3,m2,...
		     parity,...
		    L_sub_,...
		    LT_sub,...
		    hTL,...
		    hT_id_.O(index__input),...
		    index_output,...
		    ls_output,...
		    hT_nl_,...
		    hT_up_,...
		    hT_id_,...
		    hT_pa_,...
		    hT_v1_,...
		    hT_v2_,...
		    hT_v3_,...
		    hT_vm_,...
		    hT_m1_,...
		    hT_m2_,...
		    hT_m3_,...
		    hT_e1_,...
		    hT_e2_,...
		    hT_e3_,...
		    hT_n1_,...
		    hT_n2_,...
		    hT_n3_,...
		    hT_nn_,...
		    hT_dd_,...
		    hT_ll_,...
		    hT_lf_,...
		    hT_c1_,...
		    hT_c2_,...
		    hT_c3_,...
		    hT_c4_,...
		    hT_ls_,...
		    hT_LT_,...
		    hT_end);
if (index_output>index_tempor); hT_c1_.O(index__input) = index_tempor; else hT_c1_.O(index__input) = 0; end;
index_tempor = index_output;
if (verbose); disp(sprintf('%s creating child_2 at index %d ls %d',prefix,index_output,ls_output)); end;
[index_output,ls_output] = ...
  tesselation_index(dmin,nl_max,nl+1,...
		    v2,m1,m3,...
		     parity,...
		    L_sub_,...
		    LT_sub,...
		    hTL,...
		    hT_id_.O(index__input),...
		    index_output,...
		    ls_output,...
		    hT_nl_,...
		    hT_up_,...
		    hT_id_,...
		    hT_pa_,...
		    hT_v1_,...
		    hT_v2_,...
		    hT_v3_,...
		    hT_vm_,...
		    hT_m1_,...
		    hT_m2_,...
		    hT_m3_,...
		    hT_e1_,...
		    hT_e2_,...
		    hT_e3_,...
		    hT_n1_,...
		    hT_n2_,...
		    hT_n3_,...
		    hT_nn_,...
		    hT_dd_,...
		    hT_ll_,...
		    hT_lf_,...
		    hT_c1_,...
		    hT_c2_,...
		    hT_c3_,...
		    hT_c4_,...
		    hT_ls_,...
		    hT_LT_,...
		    hT_end);
if (index_output>index_tempor); hT_c2_.O(index__input) = index_tempor; else hT_c2_.O(index__input) = 0; end;
index_tempor = index_output;
if (verbose); disp(sprintf('%s creating child_3 at index %d ls %d',prefix,index_output,ls_output)); end;
[index_output,ls_output] = ...
  tesselation_index(dmin,nl_max,nl+1,...
		    v3,m2,m1,...
		     parity,...
		    L_sub_,...
		    LT_sub,...
		    hTL,...
		    hT_id_.O(index__input),...
		    index_output,...
		    ls_output,...
		    hT_nl_,...
		    hT_up_,...
		    hT_id_,...
		    hT_pa_,...
		    hT_v1_,...
		    hT_v2_,...
		    hT_v3_,...
		    hT_vm_,...
		    hT_m1_,...
		    hT_m2_,...
		    hT_m3_,...
		    hT_e1_,...
		    hT_e2_,...
		    hT_e3_,...
		    hT_n1_,...
		    hT_n2_,...
		    hT_n3_,...
		    hT_nn_,...
		    hT_dd_,...
		    hT_ll_,...
		    hT_lf_,...
		    hT_c1_,...
		    hT_c2_,...
		    hT_c3_,...
		    hT_c4_,...
		    hT_ls_,...
		    hT_LT_,...
		    hT_end);
if (index_output>index_tempor); hT_c3_.O(index__input) = index_tempor; else hT_c3_.O(index__input) = 0; end;
index_tempor = index_output;
if (verbose); disp(sprintf('%s creating child_4 at index %d ls %d',prefix,index_output,ls_output)); end;
[index_output,ls_output] = ...
  tesselation_index(dmin,nl_max,nl+1,...
		    m1,m2,m3,...
		    ~parity,...
		    L_sub_,...
		    LT_sub,...
		    hTL,...
		    hT_id_.O(index__input),...
		    index_output,...
		    ls_output,...
		    hT_nl_,...
		    hT_up_,...
		    hT_id_,...
		    hT_pa_,...
		    hT_v1_,...
		    hT_v2_,...
		    hT_v3_,...
		    hT_vm_,...
		    hT_m1_,...
		    hT_m2_,...
		    hT_m3_,...
		    hT_e1_,...
		    hT_e2_,...
		    hT_e3_,...
		    hT_n1_,...
		    hT_n2_,...
		    hT_n3_,...
		    hT_nn_,...
		    hT_dd_,...
		    hT_ll_,...
		    hT_lf_,...
		    hT_c1_,...
		    hT_c2_,...
		    hT_c3_,...
		    hT_c4_,...
		    hT_ls_,...
		    hT_LT_,...
		    hT_end);
if (index_output>index_tempor); hT_c4_.O(index__input) = index_tempor; else hT_c4_.O(index__input) = 0; end;
end;%if (~lf);
end;%if (n_L_sub>=1);
if (verbose); disp(sprintf('%s final index_output %d ls_output %d',prefix,index_output,ls_output)); end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function ...
  tesselation_plot_leaf(nl_max,nl,...
		    L_,...
                    index__input,...
		    hT_nl_,...
		    hT_up_,...
		    hT_v1_,...
		    hT_v2_,...
		    hT_v3_,...
		    hT_vm_,...
		    hT_nn_,...
		    hT_ll_,...
		    hT_lf_,...
		    hT_c1_,...
		    hT_c2_,...
		    hT_c3_,...
		    hT_c4_,...
		    hT_ls_,...
		    hT_LT_,...
		    hT_end);
if (nl>nl_max); disp(sprintf(' %% Warning! nl %d/%d in tesselation_plot_leaf',nl,nl_max)); end;%if (nl>nl_max);
verbose=0;
prefix = 37*ones(1,1*(nl+1));
if (hT_lf_.O(index__input)==1);
if (verbose); disp(sprintf('%s leaf, plotting self',prefix)); end;
n_L_sub = hT_ll_.O(index__input);
ls_start = hT_ls_.O(index__input);
for nL_sub=0:n_L_sub-1;
LT = hT_LT_.O(1 + ls_start + nL_sub);
plot3(L_(1,LT),L_(2,LT),L_(3,LT),'go','Markersize',5*(1+nL_sub));
end;%for nL_sub=0:n_L_sub-1;
ij_tmp = (1:3) + 3*(index__input-1);
T_v1 = hT_v1_.O(ij_tmp);
T_v2 = hT_v2_.O(ij_tmp);
T_v3 = hT_v3_.O(ij_tmp);
T_vm = hT_vm_.O(ij_tmp);
T_nn = hT_nn_.O(ij_tmp);
T_up = hT_up_.O(index__input);
v1 = T_vm + 0.9*(T_v1-T_vm);
v2 = T_vm + 0.9*(T_v2-T_vm);
v3 = T_vm + 0.9*(T_v3-T_vm);
vm = T_vm; el = norm(v1-v2)/4;
vn = vm + T_nn*el;
x = [v1(1),v2(1),v3(1)];y = [v1(2),v2(2),v3(2)];z = [v1(3),v2(3),v3(3)];
if T_up==0; c_ = [0.0;1.0;2.0]/2.0; end;
if T_up==1; c_ = [0.5;1.0;1.5]/2.0; end;
patch(x,y,z,c_,'FaceColor','Interp');
x = [vm(1),vn(1)];y = [vm(2),vn(2)];z = [vm(3),vn(3)];
line(x,y,z,'LineWidth',1,'Color',[0,0,0]);
end;%if (hT_lf_.O(index__input)==1);
if (hT_lf_.O(index__input)==0);
if (verbose); disp(sprintf('%s branch, plotting children',prefix)); end;
if (hT_c1_.O(index__input)>0);
  tesselation_plot_leaf(nl_max,nl+1,...
		    L_,...
		    hT_c1_.O(index__input),...
		    hT_nl_,...
		    hT_up_,...
		    hT_v1_,...
		    hT_v2_,...
		    hT_v3_,...
		    hT_vm_,...
		    hT_nn_,...
		    hT_ll_,...
		    hT_lf_,...
		    hT_c1_,...
		    hT_c2_,...
		    hT_c3_,...
		    hT_c4_,...
		    hT_ls_,...
		    hT_LT_,...
		    hT_end);
end;%if (hT_c1_.O(index__input)>0);
if (hT_c2_.O(index__input)>0);
  tesselation_plot_leaf(nl_max,nl+1,...
		    L_,...
		    hT_c2_.O(index__input),...
		    hT_nl_,...
		    hT_up_,...
		    hT_v1_,...
		    hT_v2_,...
		    hT_v3_,...
		    hT_vm_,...
		    hT_nn_,...
		    hT_ll_,...
		    hT_lf_,...
		    hT_c1_,...
		    hT_c2_,...
		    hT_c3_,...
		    hT_c4_,...
		    hT_ls_,...
		    hT_LT_,...
		    hT_end);
end;%if (hT_c2_.O(index__input)>0);
if (hT_c3_.O(index__input)>0);
  tesselation_plot_leaf(nl_max,nl+1,...
		    L_,...
		    hT_c3_.O(index__input),...
		    hT_nl_,...
		    hT_up_,...
		    hT_v1_,...
		    hT_v2_,...
		    hT_v3_,...
		    hT_vm_,...
		    hT_nn_,...
		    hT_ll_,...
		    hT_lf_,...
		    hT_c1_,...
		    hT_c2_,...
		    hT_c3_,...
		    hT_c4_,...
		    hT_ls_,...
		    hT_LT_,...
		    hT_end);
end;%if (hT_c3_.O(index__input)>0);
if (hT_c4_.O(index__input)>0);
  tesselation_plot_leaf(nl_max,nl+1,...
		    L_,...
		    hT_c4_.O(index__input),...
		    hT_nl_,...
		    hT_up_,...
		    hT_v1_,...
		    hT_v2_,...
		    hT_v3_,...
		    hT_vm_,...
		    hT_nn_,...
		    hT_ll_,...
		    hT_lf_,...
		    hT_c1_,...
		    hT_c2_,...
		    hT_c3_,...
		    hT_c4_,...
		    hT_ls_,...
		    hT_LT_,...
		    hT_end);
end;%if (hT_c4_.O(index__input)>0);
end;%if (hT_lf_.O(index__input)==0);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function ...
tesselation_neighborhood(nl_max,nl,...
			 vp,...
			 dist,...
			 h_NL,...
			 h_Nn,...
			 L_,...
			 index__input,...
			 hT_nl_,...
			 hT_up_,...
			 hT_v1_,...
			 hT_v2_,...
			 hT_v3_,...
			 hT_vm_,...
			 hT_dd_,...
			 hT_ll_,...
			 hT_lf_,...
			 hT_c1_,...
			 hT_c2_,...
			 hT_c3_,...
			 hT_c4_,...
			 hT_ls_,...
			 hT_LT_,...
			 hT_end);
if (nl>nl_max); disp(sprintf(' %% Warning! nl %d/%d in tesselation_neighborhood',nl,nl_max)); end;%if (nl>nl_max);
verbose=0;
prefix = 37*ones(1,1*(nl+1));
ij_tmp = (1:3) + 3*(index__input-1);
T_vm = hT_vm_.O(ij_tmp);
T_v1 = hT_v1_.O(ij_tmp);
T_v2 = hT_v2_.O(ij_tmp);
T_v3 = hT_v3_.O(ij_tmp);
T_dd = hT_dd_.O(index__input);
%dist_est = norm(T_vm-vp) - max([norm(T_vm-T_v1),norm(T_vm-T_v2),norm(T_vm-T_v3)]);
dist_est = norm(T_vm-vp) - T_dd;
if (dist_est> dist); if (verbose); disp(sprintf('%s dist_est %f > dist %f',prefix,dist_est,dist)); end; end;
if (dist_est<=dist);
if (verbose); disp(sprintf('%s dist_est %f < dist %f',prefix,dist_est,dist)); end;
if (hT_lf_.O(index__input)==1);
if (verbose); disp(sprintf('%s leaf, checking self',prefix)); end;
n_L_sub = hT_ll_.O(index__input);
ls_start = hT_ls_.O(index__input);
for nL_sub=0:n_L_sub-1;
LT = hT_LT_.O(1 + ls_start + nL_sub);
vs = L_(:,LT);
if (norm(vs-vp)<=dist);
h_Nn.O = h_Nn.O+1; % increment list length;
h_NL.O(h_Nn.O) = LT;
end;%if (norm(vs-vp)<=dist);
end;%for nL_sub=0:n_L_sub-1;
end;%if (hT_lf_.O(index__input)==1);
if (hT_lf_.O(index__input)==0);
if (verbose); disp(sprintf('%s branch, checking children',prefix)); end;
if (hT_c1_.O(index__input)>0);
tesselation_neighborhood(nl_max,nl+1,...
			 vp,...
			 dist,...
			 h_NL,...
			 h_Nn,...
			 L_,...
			 hT_c1_.O(index__input),...
			 hT_nl_,...
			 hT_up_,...
			 hT_v1_,...
			 hT_v2_,...
			 hT_v3_,...
			 hT_vm_,...
			 hT_dd_,...
			 hT_ll_,...
			 hT_lf_,...
			 hT_c1_,...
			 hT_c2_,...
			 hT_c3_,...
			 hT_c4_,...
			 hT_ls_,...
			 hT_LT_,...
			 hT_end);
end;%if (hT_c1_.O(index__input)>0);
if (hT_c2_.O(index__input)>0);
tesselation_neighborhood(nl_max,nl+1,...
			 vp,...
			 dist,...
			 h_NL,...
			 h_Nn,...
			 L_,...
			 hT_c2_.O(index__input),...
			 hT_nl_,...
			 hT_up_,...
			 hT_v1_,...
			 hT_v2_,...
			 hT_v3_,...
			 hT_vm_,...
			 hT_dd_,...
			 hT_ll_,...
			 hT_lf_,...
			 hT_c1_,...
			 hT_c2_,...
			 hT_c3_,...
			 hT_c4_,...
			 hT_ls_,...
			 hT_LT_,...
			 hT_end);
end;%if (hT_c2_.O(index__input)>0);
if (hT_c3_.O(index__input)>0);
tesselation_neighborhood(nl_max,nl+1,...
			 vp,...
			 dist,...
			 h_NL,...
			 h_Nn,...
			 L_,...
			 hT_c3_.O(index__input),...
			 hT_nl_,...
			 hT_up_,...
			 hT_v1_,...
			 hT_v2_,...
			 hT_v3_,...
			 hT_vm_,...
			 hT_dd_,...
			 hT_ll_,...
			 hT_lf_,...
			 hT_c1_,...
			 hT_c2_,...
			 hT_c3_,...
			 hT_c4_,...
			 hT_ls_,...
			 hT_LT_,...
			 hT_end);
end;%if (hT_c3_.O(index__input)>0);
if (hT_c4_.O(index__input)>0);
tesselation_neighborhood(nl_max,nl+1,...
			 vp,...
			 dist,...
			 h_NL,...
			 h_Nn,...
			 L_,...
			 hT_c4_.O(index__input),...
			 hT_nl_,...
			 hT_up_,...
			 hT_v1_,...
			 hT_v2_,...
			 hT_v3_,...
			 hT_vm_,...
			 hT_dd_,...
			 hT_ll_,...
			 hT_lf_,...
			 hT_c1_,...
			 hT_c2_,...
			 hT_c3_,...
			 hT_c4_,...
			 hT_ls_,...
			 hT_LT_,...
			 hT_end);
end;%if (hT_c4_.O(index__input)>0);
end;%if (hT_lf_.O(index__input)==0);
end;%if (dist_est<=dist);
