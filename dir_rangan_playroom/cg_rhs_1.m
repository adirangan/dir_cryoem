function [k_p_polar_a__,k_p_azimu_b__,k_c_0__,k_c_1__,k_c_2__] = cg_rhs_1(n_M,n_w,viewing_polar_a_,viewing_azimu_b_,viewing_gamma_z_);
% returns right-hand-side for a least-squares problem, ;
% comprising the values of M_k_p__, along with their locations (in k_p_polar_a and k_p_azimu_b_). ;
% In this context, M_k_p__ refers to a complex array of size n_w-by-n_M. ;
% M_k_p__(1+nw,1+nM) contains the (complex) value of image-ring nM at angle gamma_z_(1+nw) = 2*pi*nw/n_w. ;
% ;
% Inputs: ;
% n_M = integer number of image-rings (each image is a single ring). ;
% n_w = integer number of gamma_z values for each image-ring. ;
%       We assume gamma_z_ = linspace(0,2*pi,n_w+1); gamma_z_ = gamma_z(1:end-1);
% viewing_polar_a_ = double array of size n_M. viewing_polar_a_(1+nM) contains the viewing_polar_a for image-ring nM. ;
% viewing_azimu_b_ = double array of size n_M. viewing_azimu_b_(1+nM) contains the viewing_azimu_b for image-ring nM. ;
% viewing_gamma_z_ = double array of size n_M. viewing_gamma_z_(1+nM) contains the viewing_gamma_z for image-ring nM. ;
% ;
% Outputs: ;
% k_p_polar_a__ = double array of size n_w-by-n_M. k_p_polar_a__(1+nw,1+nM) lists the k_p_polar_a for point nw of image-ring nM. ;
% k_p_azimu_b__ = double array of size n_w-by-n_M. k_p_azimu_b__(1+nw,1+nM) lists the k_p_azimu_b for point nw of image-ring nM. ;
% k_c_0__ = double array of size n_w-by-n_M. k_c_0__(1+nw,1+nM) lists the k_c_0 for point nw of image-ring nM. ;
% k_c_1__ = double array of size n_w-by-n_M. k_c_0__(1+nw,1+nM) lists the k_c_1 for point nw of image-ring nM. ;
% k_c_2__ = double array of size n_w-by-n_M. k_c_0__(1+nw,1+nM) lists the k_c_2 for point nw of image-ring nM. ;
% ;
% For this calculation we use the same assumptions made in get_template_0.m: ;
% The general formula used here is as follows. ;
% let sa and ca be sin(viewing_polar_a) and cos(viewing_polar_a), respectively. ;
% let sb and cb be sin(viewing_azimu_b) and cos(viewing_azimu_b), respectively. ;
% let sc and cc be sin(inplane_gamma_z) and cos(inplane_gamma_z), respectively. ;
% And rotation by viewing_azimu_b about the +z-axis is represented as: ;
% Rz(viewing_azimu_b) = ;
% [ +cb -sb 0 ] ;
% [ +sb +cb 0 ] ;
% [  0   0  1 ] ;
% And rotation by viewing_polar_a about the +y-axis is represented as: ;
% Ry(viewing_polar_a) = ;
% [ +ca 0 +sa ] ;
% [  0  1  0  ] ;
% [ -sa 0 +ca ] ;
% And rotation by inplane_gamma_z about the +z-axis is represented as: ;
% Rz(inplane_gamma_z) = ;
% [ +cc -sc 0 ] ;
% [ +sc +cc 0 ] ;
% [  0   0  1 ] ;
% Which, collectively, implies that under the transform: ;
% Rz(viewing_azimu_b) * Ry(viewing_polar_a) * Rz(inplane_gamma_z), ;
% Which is the same as: ;
% [ +cb -sb 0 ] [ +ca*cc -ca*sc +sa ]   [ +cb*ca*cc - sb*sc , -cb*ca*sc -sb*cc , +cb*sa ];
% [ +sb +cb 0 ] [ +sc    +cc    0   ] = [ +sb*ca*cc + cb*sc , -sb*ca*sc +cb*cc , +sb*sa ];
% [  0   0  1 ] [ -sa*cc +sa*sc +ca ]   [ -sa*cc            , +sa*sc           , +ca    ];
% the point [1;0;0] is mapped to: ;
% [ template_k_c_0 ; template_k_c_1 ; template_k_c_2 ] = [ +cb*ca*cc - sb*sc ; +sb*ca*cc + cb*sc ; -sa*cc ];
% ;
% In other words: 
% the point M_k_p_(1+nw)==M_k_p__(1+nw,1+nM), ;
% corresponding to the nw-th point on the nM-th image-ring, ;
% is generated using inplane_gamma_z = 2*pi*nw/n_w, ;
% as well as viewing_polar_a and viewing_azimu_b. ;
% Thus, the k_c_ location for that point (in 3d) is: ;
% k_c_ = [ +cb*ca*cc - sb*sc ; +sb*ca*cc + cb*sc ; -sa*cc ]. ;
% Correspondingly, the k_p_r01, k_p_polar_a and k_p_azimu_b for that point can be calculated as: ;
% k_p_r01 = sqrt(k_c_(1+0)^2 + k_c_(1+1)^2) = ;
% k_p_polar_a = atan2(k_p_r01,k_c_(1+2));
% k_p_azimu_b = atan2(k_c_(1+1),k_c_(1+0));
% ;
% Here we adopt the convention that the input viewing_gamma_z for each image-ring ;
% should be applied as an inplane rotation of the image-ring itself before calculating k_c_. ;
% Thus, the viewing_gamma_z is simply subtracted from the inplane_gamma_z associated with each point nw in that image-ring. ;
%%%%%%%%;

sa__ = repmat(reshape(sin(viewing_polar_a_),[1,n_M]),[n_w,1]); ca__ = repmat(reshape(cos(viewing_polar_a_),[1,n_M]),[n_w,1]);
sb__ = repmat(reshape(sin(viewing_azimu_b_),[1,n_M]),[n_w,1]); cb__ = repmat(reshape(cos(viewing_azimu_b_),[1,n_M]),[n_w,1]);
viewing_gamma_z_ = reshape(viewing_gamma_z_,[1,n_M]); inplane_gamma_z_ = reshape(2*pi*[0:n_w-1]/n_w,[n_w,1]);
combine_gamma_z__ = repmat(inplane_gamma_z_,[1,n_M]) - repmat(viewing_gamma_z_,[n_w,1]);
sc__ = sin(combine_gamma_z__); cc__ = cos(combine_gamma_z__);
k_c_0__ = +cb__.*ca__.*cc__ - sb__.*sc__ ; 
k_c_1__ = +sb__.*ca__.*cc__ + cb__.*sc__ ; 
k_c_2__ = -sa__.*cc__ ;
k_p_r01__ = sqrt(k_c_0__.^2 + k_c_1__.^2);
k_p_polar_a__ = atan2(k_p_r01__,k_c_2__);
k_p_azimu_b__ = atan2(k_c_1__,k_c_0__);
