% simple test of multi-reference-alignment error. ;
clear;
rng(1);
q_max = 16; %<-- largest bessel-order. ;
n_q = 1+2*q_max;
q_ = transpose(-q_max:+q_max);
n_psi = 1024*8;
psi_ = transpose(linspace(0,2*pi,n_psi+1)); psi_ = psi_(1:end-1);
exp_iqpsi__ = zeros(n_psi,n_q);
for nq=0:n_q-1;
q_val = q_(1+nq);
exp_iqpsi__(:,1+nq) = exp(+i*q_val*psi_);
end;%for nq=0:n_q-1;
sigma_q = q_max/3;
F_q_tru_ = crandn(n_q,1).*exp(-q_.^2/(2*sigma_q^2)); %<-- attenuated for smoothness. ;
F_q_tru_ = F_q_tru_/fnorm(F_q_tru_); %<-- normalize ;
l2_signal = sqrt(mean(abs(F_q_tru_).^2));
%%%%%%%%;
% define images. ;
%%%%%%%%;
n_M = 1024*4.0; %<-- note that, as long as n_M is sufficiently large, the error is determined by \partial_gamma_F_ and the snr. ;
gamma_tru_ = transpose(linspace(0,2*pi,n_M+1)); gamma_tru_ = gamma_tru_(1:end-1);
dgamma = mean(diff(gamma_tru_));
exp_iqdgamma_ = exp(+i*q_*dgamma);
eps__ = crandn(n_q,n_M);
gamma_est_ini_ = 2*pi*rand(n_M,1);
%sigma_eps_use_ = transpose(0:0.0125:1);
sigma_eps_use_ = exp(transpose(-4:0.125:0));
snr_ = l2_signal./sigma_eps_use_; snr_(find(~isfinite(snr_)))=0; n_snr = numel(snr_);
%snr_ = [0;0.1;0.25;0.5;1.0;1.5;2.0;3.0;4.0;5.0;6.0;7.0;8.0;9.0;10.0]; n_snr = numel(snr_);
%sigma_eps_use_ = zeros(n_snr,1);
sigma_gam_emp_ = zeros(n_snr,1);
for nsnr=0:n_snr-1;
snr = snr_(1+nsnr);
if (snr==0); sigma_eps_use=0; end;
if (snr> 0); sigma_eps_use = l2_signal/snr; end;
M_q__ = zeros(n_q,n_M);
for nM=0:n_M-1;
M_q__(:,1+nM) = F_q_tru_.*exp(-i*q_*gamma_tru_(1+nM)) + sigma_eps_use * eps__(:,1+nM);
end;%for nM=0:n_M-1;
%%%%%%%%;
% plot each M_q__. ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
imagesc(real(exp_iqpsi__*M_q__));
colormap(colormap_beach());
xlabel('image'); ylabel('psi');
end;%if flag_plot;
%%%%%%%%;
% Compare F_q_tru_ with F_q_avg_ ;
%%%%%%%%;
F_q_avg_ = mean(M_q__.*exp(+i*q_*transpose(gamma_tru_)),2);
flag_plot=0;
if flag_plot;
plot(psi_,real(exp_iqpsi__*F_q_tru_),'k-',psi_,real(exp_iqpsi__*F_q_avg_),'r-');
xlim([0,2*pi]);
xlabel('psi');ylabel('F'); title('tru vs avg');
end;%if flag_plot;
%%%%%%%%;
% assign random viewing-angles. ;
%%%%%%%%;
gamma_est_ = gamma_est_ini_;
%%%%%%%%;
% Now run alternating minimization. ;
%%%%%%%%;
n_iteration = 128; stepsize = 1;
tmp_0in__ = zeros(n_psi,n_M);
tmp_mid__ = zeros(n_psi,n_M);
tmp_out__ = zeros(n_psi,n_M);
flag_plot=1;
if flag_plot;
c_ = colormap_beach(); n_c = size(c_,1);
figure(1);clf; hold on;
end;%if flag_plot;
for niteration=0:n_iteration-1;
F_q_est_ = mean(M_q__.*exp(+i*q_*transpose(gamma_est_)),2); %<-- lsq-step. ;
tmp_0in__(:) = 0;
tmp_0in__(1:n_q,:) = repmat(conj(F_q_est_),[1,n_M]).*M_q__;
tmp_mid__ = circshift(tmp_0in__,-q_max);
tmp_out__ = ifft(tmp_mid__);
[~,index_gamma_upd_] = max(tmp_out__,[],1); index_gamma_upd_ = index_gamma_upd_ - 1;
gamma_upd_ = psi_(1+index_gamma_upd_); %<-- alignment. ;
if flag_plot;
nc = max(0,min(n_c-1,floor(n_c*niteration/n_iteration)));
gamma_shift = median(periodize(gamma_est_-gamma_tru_,-pi,+pi));
gamma_shift_ = periodize(gamma_est_ - gamma_shift,0,2*pi);
plot(gamma_tru_,gamma_shift_,'.','Color',c_(1+nc,:));
xlim([0,2*pi]); ylim([0,2*pi]);
axisnotick; axis square;
xlabel('tru'); ylabel('shift (est)');
title(sprintf('snr %0.2f sigma_eps %0.2f',snr,sigma_eps_use),'Interpreter','none');
if (mod(niteration,128)==0); drawnow(); end;
end;%if flag_plot;
gamma_est_ = gamma_est_ + stepsize*(gamma_upd_ - gamma_est_);
end;%for niteration=0:n_iteration-1;
%%%%%%%%;
% Now calculate the errors in gamma_est_. ;
%%%%%%%%;
gamma_shift = median(periodize(gamma_est_-gamma_tru_,-pi,+pi));
gamma_shift_ = periodize(gamma_est_ - gamma_shift,0,2*pi);
gamma_error_ = periodize(gamma_shift_ - gamma_tru_,-pi,pi);
sigma_gam_emp = std(gamma_error_);
sigma_eps_use_(1+nsnr) = sigma_eps_use;
sigma_gam_emp_(1+nsnr) = sigma_gam_emp;
end;%for nsnr=0:n_snr-1;
%%%%%%%%;
if flag_plot; close(gcf); end;%if flag_plot;

%%%%%%%%;
% Now estimate errors. ;
% We assume that the initial errors in gamma_est_ are gaussian, with variance sigma_gam^2. ;
% We also assume that the images have noise sigma_eps^2. ;
%%%%%%%%;
% Now, to lowest order, during the lsq-step, ;
% F_est_ = F_tru_ + d_eps_F_ + d_gam_F_, ;
% where: ;
% d_eps_F_ is gaussian with variance sigma_eps^2/n_M ;
% and: ;
% d_gam_F_ = exp(-q_.^2*sigma_gam^2).*F_q_tru_ - F_q_tru_ \approx (-q_.^2*sigma_gam^2).*F_q_tru_ ;
%%%%%%%%;
% And, to lowest order, during the alignment-step, ;
% We use the gradient: ;
% partial_gamma_F_ = -i*q_.*F_q_tru_ ;
% such that: ;
% partial_gamma_F_ * (gamma_est_ - gamma_tru_) = F_q_est_ - F_q_tru_ ;
% or: ;
% gamma_est_ = gamma_tru_ + inv(ctranspose(partial_gamma_F_)*partial_gamma_F_) * ctranspose(partial_gamma_F_) * (F_q_est_ - F_q_tru_);
% ;
% Now setting: inv_partial_gamma_F_ = inv(ctranspose(partial_gamma_F_)*partial_gamma_F_) * ctranspose(partial_gamma_F_), ;
% we have: ;
% gamma_est_ = gamma_tru_ + d_eps_gamma_ + d_eps_F_gamma_ + d_gam_F_gamma_ ;
% where: ;
% d_eps_gamma_ is gaussian with variance |inv_partial_gamma_F_|^2 * sigma_eps^2 ;
% and: ;
% d_eps_F_gamma_ is also gaussian with variance |inv_partial_gamma_F_|^2 * sigma_eps^2/n_M ;
% and: ;
% d_gam_F_gamma_ is systematic, with magnitude inv_partial_gamma_F_ * d_gam_F_. ;

%%%%%%%%;
% Putting this all together, we can estimate: ;
% sigma_gam_ = sqrt(|inv_partial_gamma_F_|^2 * sigma_eps^2 * (1 + 1/n_M)) + sigma_gam^2 * inv_partial_gamma_F_ * (q_.^2 .* F_q_tru_) ;
%%%%%%%%;
sigma_eps_ = transpose(linspace(0,max(sigma_gam_emp_),1024)); n_sigma_eps = numel(sigma_eps_);
sigma_gam_equi_upb_ = zeros(n_sigma_eps,1);
sigma_gam_equi_lob_ = zeros(n_sigma_eps,1);
partial_gamma_F_ = -i*q_.*F_q_tru_ ;
inv_partial_gamma_F_ = inv(ctranspose(partial_gamma_F_)*partial_gamma_F_) * ctranspose(partial_gamma_F_) ;
tmp_a = fnorm(inv_partial_gamma_F_ * (q_.^2 .* F_q_tru_));
tmp_b = -1.0d0;
for nsigma_eps=0:n_sigma_eps-1;
sigma_eps = sigma_eps_(1+nsigma_eps);
tmp_c = fnorm(inv_partial_gamma_F_)*sigma_eps * sqrt(1 + 1/n_M);
tmp_d = tmp_b^2 - 4*tmp_a*tmp_c;
if (tmp_d< 0); sigma_gam_equi_upb = +Inf; sigma_gam_equi_lob = +Inf; end;
if (tmp_d>=0); sigma_gam_equi_upb = (-tmp_b + sqrt(tmp_d))/(2*tmp_a); sigma_gam_equi_lob = (-tmp_b - sqrt(tmp_d))/(2*tmp_a); end;
sigma_gam_equi_upb_(1+nsigma_eps) = sigma_gam_equi_upb;
sigma_gam_equi_lob_(1+nsigma_eps) = sigma_gam_equi_lob;
end;%for nsigma_eps=0:n_sigma_eps-1;

dir_jpg = '/data/rangan/dir_cryoem/dir_rangan_playroom/dir_jpg';
flag_plot=1;
if flag_plot;
%%%%%%%%;
figure(2);clf;set(gcf,'Position',1+[0,0,512,512]);
subplot(1,1,1);
hold on;
%plot(sigma_eps_,sigma_gam_equi_upb_,'k-');
plot(log(sigma_eps_),log(fnorm(inv_partial_gamma_F_) * sigma_eps_ * sqrt(1+1/n_M)),'-','Color',0.85*[1,1,1],'LineWidth',3);
plot(log(sigma_eps_),log(sigma_gam_equi_lob_),'k-','LineWidth',3);
tmp_index = max(efind(isfinite(sigma_gam_equi_lob_)));
plot(log(sigma_eps_(1+tmp_index))*[1,1],[log(sigma_gam_equi_lob_(1+tmp_index)),10],'k-','LineWidth',3);
plot(log(sigma_eps_use_),log(sigma_gam_emp_),'ro','MarkerFaceColor','r');
xlabel('$\log(\sigma_{\epsilon})$','Interpreter','latex');
ylabel('$\log(\sigma_{\gamma})$','Interpreter','latex');
title('error (log-scale)');
xlim([-4,0]);
ylim([-6,+1]);
grid on;
set(gca,'FontSize',18);
%%%%%%%%;
fname_fig = sprintf('%s/test_mra_error_N%d_0.jpg',dir_jpg,n_M);
print('-djpeg',fname_fig);
fname_fig = sprintf('%s/test_mra_error_N%d_0.eps',dir_jpg,n_M);
print('-depsc',fname_fig);
close(gcf);
end;%if flag_plot;
