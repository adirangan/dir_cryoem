%%%%%%%%;
% collecting calculations from: ;
% ssnll_from_a_k_Y_12 ;
% kappa_qpro_apply_2 ;
% to construct gradient and hessian. ;
%%%%%%%%;

%%%%%%%%;
platform = 'rusty';
if (exist('platform.type','file')); fp=fopen('platform.type'); platform = fscanf(fp,'%s'); fclose(fp); end;
if (strcmp(platform,'access1')); setup_access1; string_root = 'data'; end;
if (strcmp(platform,'OptiPlex')); setup_OptiPlex; string_root = 'home'; end;
if (strcmp(platform,'eval1')); setup_eval1; string_root = 'home'; end;
if (strcmp(platform,'rusty')); setup_rusty; string_root = 'mnt/home'; end;
%%%%%%%%;

str_thisfunction = 'test_slice_vs_volume_integral_5';
flag_verbose=1; flag_disp=1; nf=0;

k_int = 16;
k_eq_d_double = 0.5;
t_eq_d_double = 0.5;
n_w_int = 1;
KAPPA_flag_kernel_full = 1;
KAPPA_pole_north_double = 12*pi/24;
KAPPA_pole_south_double = 12*pi/24;
KAPPA_qref_k_eq_d_double = 0.5;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%%%%%%%%;
% First define integral of <f,f>. ;
%%%%%%%%;
h2d_ = @(kd) 4*pi^2*(besselj(0,kd) + besselj(2,kd)); % calculates <f_j,f_k>, normalized so that <f,f> = (4*pi^2);
dh2d_ = @(kd) 4*pi^3*(besselj(-1,kd) - besselj(+3,kd));
h3d_ = @(kd) 4*pi*( sin(kd) - (kd).*cos(kd) ) ./ kd.^3 ; % calculates <f_j,f_k>, normalized so that <f,f> = 4*pi/3;
dh3d_ = @(kd) 12*pi*( (kd.^2/3 - 1) .* sin(kd) + (kd).*cos(kd) ) ./ kd.^4 ;
%%%%%%%%;
% Now set up and test k-quadrature on sphere. ;
%%%%%%%%;
k_p_r_max = k_int/(2*pi); k_eq_d = k_eq_d_double/(2*pi); str_T_vs_L = 'C';
flag_unif_vs_adap = 0; flag_tensor_vs_adap = 0; %<-- This is set to match test_ssnll_from_a_k_Y_12 ;
[ ...
 n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,k_c_0_all_ ...
,k_c_1_all_ ...
,k_c_2_all_ ...
] = ...
sample_sphere_7( ...
 0*flag_verbose ...
,k_p_r_max ...
,k_eq_d ...
,str_T_vs_L ...
,flag_unif_vs_adap ...
,flag_tensor_vs_adap ...
) ;
%%%%;
if (flag_disp>1);
figure(1+nf);nf=nf+1;clf;figbig;
p_row = 2; p_col = 4; n_plot = p_row*p_col;
for nplot=0:n_plot-1;
nk_p_r = max(0,min(n_k_p_r-1,round(n_k_p_r*nplot/n_plot)));
tmp_index_ = n_k_all_csum_(1+nk_p_r):n_k_all_csum_(1+nk_p_r+1)-1;
subplot(p_row,p_col,1+nplot);
plot3(k_c_0_all_(1+tmp_index_),k_c_1_all_(1+tmp_index_),k_c_2_all_(1+tmp_index_),'.');
axis equal; axis vis3d; axisnotick3d;
title(sprintf('nk_p_r %d/%d',nk_p_r,n_k_p_r),'Interpreter','none');
end;%for nplot=0:n_plot-1;
end;%if flag_disp;
%%%%;
n_source = 4;
rng(0);
delta_a_c__ = zeros(3,n_source);
delta_b_c__ = zeros(3,n_source);
for nsource=0:n_source-1;
rng(1+nsource);
delta_a_c_ = 2*rand(3,1)-1; delta_a_c_ = delta_a_c_*0.5/k_p_r_max/max(1e-12,fnorm(delta_a_c_)); %<-- ensure small in magnitude. ;
delta_a_c__(:,1+nsource) = delta_a_c_;
delta_b_c_ = 2*rand(3,1)-1; delta_b_c_ = delta_b_c_*0.5/k_p_r_max/max(1e-12,fnorm(delta_b_c_)); %<-- ensure small in magnitude. ;
delta_b_c__(:,1+nsource) = delta_b_c_;
end;%for nsource=0:n_source-1;
a_k_p_form_ = zeros(n_k_all,1);
b_k_p_form_ = zeros(n_k_all,1);
for nsource=0:n_source-1;
delta_a_c_ = delta_a_c__(:,1+nsource);
a_k_p_form_ = a_k_p_form_ + exp(+i*2*pi*(k_c_0_all_*delta_a_c_(1+0) + k_c_1_all_*delta_a_c_(1+1) + k_c_2_all_*delta_a_c_(1+2)));
delta_b_c_ = delta_b_c__(:,1+nsource);
b_k_p_form_ = b_k_p_form_ + exp(+i*2*pi*(k_c_0_all_*delta_b_c_(1+0) + k_c_1_all_*delta_b_c_(1+1) + k_c_2_all_*delta_b_c_(1+2)));
end;%for nsource=0:n_source-1;
%%%%;
I_a_quad = sum(a_k_p_form_.*weight_3d_k_all_);
I_b_quad = sum(b_k_p_form_.*weight_3d_k_all_);
I_a_form = 0;
I_b_form = 0;
for nsource=0:n_source-1;
delta_a_c_ = delta_a_c__(:,1+nsource);
delta_b_c_ = delta_b_c__(:,1+nsource);
tmp_kd = 2*pi*k_p_r_max*fnorm(delta_a_c_);
I_a_form = I_a_form + h3d_(tmp_kd)*k_p_r_max^3;
tmp_kd = 2*pi*k_p_r_max*fnorm(delta_b_c_);
I_b_form = I_b_form + h3d_(tmp_kd)*k_p_r_max^3;
end;%for nsource=0:n_source-1;
disp(sprintf(' %% I_a_form vs I_a_quad %0.16f %%<-- should be <1e-6',fnorm(I_a_form-I_a_quad)/fnorm(I_a_form)));
disp(sprintf(' %% I_b_form vs I_b_quad %0.16f %%<-- should be <1e-6',fnorm(I_b_form-I_b_quad)/fnorm(I_b_form)));
%%%%%%%%;
% Now set up and test polar-quadrature-weights on disk. ;
%%%%%%%%;
l_max_upb = round(2*pi*k_p_r_max);
l_max_max = min(l_max_upb,1+ceil(2*pi*k_p_r_(end)));
n_w_max = n_w_int*2*(l_max_max+1); n_w_0in_ = n_w_max*ones(n_k_p_r,1);
[ ...
 n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,k_p_r_wk_ ...
,k_p_w_wk_ ...
,k_c_0_wk_ ...
,k_c_1_wk_ ...
] = ...
get_weight_2d_2( ...
 0*flag_verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,-1 ...
,n_w_0in_ ...
);
n_w_sum = sum(n_w_); n_w_csum_ = cumsum([0;n_w_]);
%%%%;
S_k_p_wk_ = zeros(n_w_sum,1);
T_k_p_wk_ = zeros(n_w_sum,1);
for nsource=0:n_source-1;
S_k_p_wk_ = S_k_p_wk_ + exp(+2*pi*i*(k_c_0_wk_*delta_a_c__(1+0,1+nsource) + k_c_1_wk_*delta_a_c__(1+1,1+nsource)));
T_k_p_wk_ = T_k_p_wk_ + exp(+2*pi*i*(k_c_0_wk_*delta_b_c__(1+0,1+nsource) + k_c_1_wk_*delta_b_c__(1+1,1+nsource)));
end;%for nsource=0:n_source-1;
I_quad = sum(conj(S_k_p_wk_).*T_k_p_wk_.*weight_2d_wk_)*(4*pi^2);
I_form = 0;
for nsource0=0:n_source-1;
for nsource1=0:n_source-1;
tmp_kd = 2*pi*k_p_r_max*fnorm(delta_a_c__(1:2,1+nsource0) - delta_b_c__(1:2,1+nsource1));
I_form = I_form + h2d_(tmp_kd)/(4*pi^2) * (pi*k_p_r_max^2);
end;%for nsource1=0:n_source-1;
end;%for nsource0=0:n_source-1;
disp(sprintf(' %% I_form vs I_quad %0.16f %%<-- should be <1e-2',fnorm(I_form-I_quad)/fnorm(I_form)));
%%%%;
if (flag_disp>1);
figure(1+nf);nf=nf+1;clf;figmed;
Slim_ = n_source*[-1,+1];
subplot(1,2,1);
imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(S_k_p_wk_),Slim_,colormap_beach());
axis image; axisnotick; title('real(S_k_p_wk_)','Interpreter','none');
subplot(1,2,2);
imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(T_k_p_wk_),Slim_,colormap_beach());
axis image; axisnotick; title('real(T_k_p_wk_)','Interpreter','none');
end;% if flag_disp;
%%%%%%%%;
% Now set up spherical-harmonics. ;
%%%%%%%%;
l_max_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
l_max_(1+nk_p_r) = max(0,min(l_max_upb,1+ceil(2*pi*k_p_r_(1+nk_p_r))));
end;%for nk_p_r=0:n_k_p_r-1;
n_lm_ = (l_max_+1).^2;
n_lm_max = max(n_lm_);
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
l_max_max = max(l_max_);
m_max_ = -l_max_max : +l_max_max;
n_m_max = length(m_max_);
%%%%;
Y_l_val_ = zeros(n_lm_sum,1);
Y_m_val_ = zeros(n_lm_sum,1);
Y_k_val_ = zeros(n_lm_sum,1);
for nk_p_r=0:n_k_p_r-1;
l_max = l_max_(1+nk_p_r);
tmp_l_val_ = zeros(n_lm_(1+nk_p_r),1);
tmp_m_val_ = zeros(n_lm_(1+nk_p_r),1);
na=0; 
for l_val=0:l_max;
for m_val=-l_val:+l_val;
tmp_l_val_(1+na) = l_val;
tmp_m_val_(1+na) = m_val;
na=na+1;
end;%for m_val=-l_val:+l_val;
end;%for l_val=0:l_max;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
Y_l_val_(1+tmp_index_) = tmp_l_val_;
Y_m_val_(1+tmp_index_) = tmp_m_val_;
Y_k_val_(1+tmp_index_) = k_p_r_(1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
weight_Y_ = zeros(n_lm_sum,1);
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
weight_Y_(1+tmp_index_) = weight_3d_k_p_r_(1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%;
a_k_Y_form_ = zeros(n_lm_sum,1);
b_k_Y_form_ = zeros(n_lm_sum,1);
for nsource=0:n_source-1;
a_k_Y_form_ = a_k_Y_form_ + plane_wave_expansion_1(n_k_p_r,k_p_r_,delta_a_c__(:,1+nsource),l_max_);
b_k_Y_form_ = b_k_Y_form_ + plane_wave_expansion_1(n_k_p_r,k_p_r_,delta_b_c__(:,1+nsource),l_max_);
end;%for nsource=0:n_source-1;
%%%%;
tmp_t = tic;
if ~exist('Ylm_uklma___','var'); Ylm_uklma___ = []; end;
if ~exist('k_p_azimu_b_sub_uka__','var'); k_p_azimu_b_sub_uka__ = []; end;
if ~exist('k_p_polar_a_sub_uka__','var'); k_p_polar_a_sub_uka__ = []; end;
if ~exist('l_max_uk_','var'); l_max_uk_ = []; end;
if ~exist('index_nu_n_k_per_shell_from_nk_p_r_','var'); index_nu_n_k_per_shell_from_nk_p_r_ = []; end;
if ~exist('index_k_per_shell_uka__','var'); index_k_per_shell_uka__ = []; end;
[ ...
 a_k_Y_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_p_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% a_k_Y_quad_ time %0.2fs',tmp_t));
disp(sprintf(' %% a_k_Y_form_ vs a_k_Y_quad_: %0.16f %%<-- should be <1e-2',fnorm(a_k_Y_form_-a_k_Y_quad_)/fnorm(a_k_Y_form_)));
%%%%;
tmp_t = tic();
[ ...
 b_k_Y_quad_ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,b_k_p_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% b_k_Y_quad_ time %0.2fs',tmp_t));
disp(sprintf(' %% b_k_Y_form_ vs b_k_Y_quad_: %0.16f %%<-- should be <1e-2',fnorm(b_k_Y_form_-b_k_Y_quad_)/fnorm(b_k_Y_form_)));
%%%%;
tmp_t = tic;
[ ...
 a_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% a_k_p_quad_ time %0.2fs',tmp_t));
disp(sprintf(' %% a_k_p_form_ vs a_k_p_quad_: %0.16f %%<-- should be <1e-2',fnorm(a_k_p_form_-a_k_p_quad_)/fnorm(a_k_p_form_)));
%%%%;
tmp_t = tic;
[ ...
 b_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,b_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% b_k_p_quad_ time %0.2fs',tmp_t));
disp(sprintf(' %% b_k_p_form_ vs b_k_p_quad_: %0.16f %%<-- should be <1e-2',fnorm(b_k_p_form_-b_k_p_quad_)/fnorm(b_k_p_form_)));
%%%%%%%%;
% prepare a_k_Y_form__ and b_k_Y_form__ ;
%%%%%%%%;
a_k_Y_form_yk_ = a_k_Y_form_;
a_k_Y_form_yk__ = zeros(n_lm_max,n_k_p_r);
tmp_t = tic();
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
a_k_Y_form_yk__(1:n_lm,1+nk_p_r) = a_k_Y_form_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_Y_form_yk__: time %0.6fs',tmp_t)); end;
%%%%;
b_k_Y_form_yk_ = b_k_Y_form_;
b_k_Y_form_yk__ = zeros(n_lm_max,n_k_p_r);
tmp_t = tic();
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
b_k_Y_form_yk__(1:n_lm,1+nk_p_r) = b_k_Y_form_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% b_k_Y_form_yk__: time %0.6fs',tmp_t)); end;
%%%%%%%%;
% define rotations. ;
%%%%%%%%;
Rz = @(azimu_b) ...
[ +cos(azimu_b) -sin(azimu_b) 0 ; ...
  +sin(azimu_b) +cos(azimu_b) 0 ; ...
   0             0            1 ; ...
] ;
%%%%%%%%;
Ry = @(polar_a) ...
[ +cos(polar_a) 0 +sin(polar_a) ; ...
   0            1  0            ; ...
  -sin(polar_a) 0 +cos(polar_a) ; ...
];
%%%%%%%%;
% generate templates. ;
%%%%%%%%;
tmp_t = tic();
template_k_eq_d = t_eq_d_double/k_p_r_max;
flag_tensor_vs_adap = 1; %<-- tensor grid. ;
[ ...
 n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,viewing_k_c_0_all_ ...
,viewing_k_c_1_all_ ...
,viewing_k_c_2_all_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
sample_shell_6( ...
 1.0 ...
,template_k_eq_d ...
,str_T_vs_L ...
,flag_tensor_vs_adap ...
) ;
n_S = n_viewing_S;
if (flag_verbose>0); disp(sprintf(' %% n_S %d, n_viewing_polar_a %d, n_viewing_azimu_b [%d,..,%d]',n_S,n_viewing_polar_a,n_viewing_azimu_b_(1+0),n_viewing_azimu_b_(end))); end;
%%%%;
if (flag_disp>1);
figure(1+nf);nf=nf+1;clf;figsml;
plot3(viewing_k_c_0_all_,viewing_k_c_1_all_,viewing_k_c_2_all_,'.');
axis equal; axisnotick3d; axis vis3d;
end;%if flag_disp;
%%%%;
[ ...
 ~ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
] = ...
get_weight_2d_2( ...
 0*flag_verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,-1 ...
,n_w_ ...
);
%%%%;
tmp_t = tic();
[ ...
 S_k_p_wkS__ ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
pm_template_2( ...
 0*flag_verbose ...
,l_max ...
,n_k_p_r ...
,a_k_Y_form_yk__ ...
,[] ...
,-1 ...
,n_w_max ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
);
S_k_p_wkS__ = reshape(S_k_p_wkS__,[n_w_sum,n_S]);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% S_k_p_wkS__ (pm_template_2): time %0.6fs',tmp_t)); end;
%%%%%%%%;
tmp_t = tic();
[ ...
 R_k_p_wkS__ ...
] = ...
sph_template_3( ...
 0*flag_verbose ...
,l_max ...
,n_k_p_r ...
,a_k_Y_form_yk__ ...
,[] ...
,[] ...
,-1 ...
,n_w_max ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% R_k_p_wkS__ (sph_template_3): time %0.6fs',tmp_t)); end;
disp(sprintf(' %% R_k_p_wkS__ vs S_k_p_wkS__: %0.16f %%<-- should be <1e-2',fnorm(R_k_p_wkS__-S_k_p_wkS__)/fnorm(R_k_p_wkS__)));
%%%%%%%%;
% Now step through and reconstitute the templates. ;
%%%%%%%%;
R_k_p_wkS__ = zeros(n_w_sum,n_S);
for nS=0:n_S-1;
S_k_p_wk_ = S_k_p_wkS__(:,1+nS);
tmp_azimu_b = viewing_azimu_b_S_(1+nS);
tmp_polar_a = viewing_polar_a_S_(1+nS);
tmp_gamma_z = 0.0;
tmp_R__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
R_k_p_wk_ = zeros(n_w_sum,1);
for nsource=0:n_source-1;
tmp_delta_ = tmp_R__*delta_a_c__(:,1+nsource);
R_k_p_wk_ = R_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_(1+0) + k_c_1_wk_*tmp_delta_(1+1)));
end;%for nsource=0:n_source-1;
R_k_p_wkS__(:,1+nS) = R_k_p_wk_;
end;%for nS=0:n_S-1;
disp(sprintf(' %% R_k_p_wkS__ vs S_k_p_wkS__: %0.16f %%<-- should be <1e-2',fnorm(R_k_p_wkS__-S_k_p_wkS__)/fnorm(R_k_p_wkS__)));
%%%%%%%%;
% Now get templates for b_k_Y_form. ;
%%%%%%%%;
tmp_t = tic();
[ ...
 T_k_p_wkS__ ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
pm_template_2( ...
 0*flag_verbose ...
,l_max ...
,n_k_p_r ...
,b_k_Y_form_yk__ ...
,[] ...
,-1 ...
,n_w_max ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
);
T_k_p_wkS__ = reshape(T_k_p_wkS__,[n_w_sum,n_S]);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% T_k_p_wkS__ (pm_template_2): time %0.6fs',tmp_t)); end;
%%%%%%%%;
tmp_t = tic();
[ ...
 R_k_p_wkS__ ...
] = ...
sph_template_3( ...
 0*flag_verbose ...
,l_max ...
,n_k_p_r ...
,b_k_Y_form_yk__ ...
,[] ...
,[] ...
,-1 ...
,n_w_max ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% R_k_p_wkS__ (sph_template_3): time %0.6fs',tmp_t)); end;
disp(sprintf(' %% R_k_p_wkS__ vs T_k_p_wkS__: %0.16f %%<-- should be <1e-2',fnorm(R_k_p_wkS__-T_k_p_wkS__)/fnorm(R_k_p_wkS__)));
%%%%%%%%;
% Now step through and reconstitute the templates. ;
%%%%%%%%;
R_k_p_wkS__ = zeros(n_w_sum,n_S);
for nS=0:n_S-1;
T_k_p_wk_ = T_k_p_wkS__(:,1+nS);
tmp_azimu_b = viewing_azimu_b_S_(1+nS);
tmp_polar_a = viewing_polar_a_S_(1+nS);
tmp_gamma_z = 0.0;
tmp_R__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
R_k_p_wk_ = zeros(n_w_sum,1);
for nsource=0:n_source-1;
tmp_delta_ = tmp_R__*delta_b_c__(:,1+nsource);
R_k_p_wk_ = R_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_(1+0) + k_c_1_wk_*tmp_delta_(1+1)));
end;%for nsource=0:n_source-1;
R_k_p_wkS__(:,1+nS) = R_k_p_wk_;
end;%for nS=0:n_S-1;
disp(sprintf(' %% R_k_p_wkS__ vs T_k_p_wkS__: %0.16f %%<-- should be <1e-2',fnorm(R_k_p_wkS__-T_k_p_wkS__)/fnorm(R_k_p_wkS__)));
%%%%%%%%;
% Now test integral. ;
%%%%%%%%;
CTF_alpha = 0.3;
CTF_k_p_wk_ = reshape(repmat(reshape(besselj(0,CTF_alpha*k_p_r_),[1,n_k_p_r]),[n_w_max,1]),[n_w_sum,1]);
%%%%;
nS = max(0,min(n_S-1,128));
S_k_p_wk_ = S_k_p_wkS__(:,1+nS);
tmp_azimu_b = viewing_azimu_b_S_(1+nS);
tmp_polar_a = viewing_polar_a_S_(1+nS);
tmp_gamma_z = 0.0;
tmp_R_a__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
U_k_p_wk_ = zeros(n_w_sum,1);
nsource_a = 0;
tmp_delta_U_ = tmp_R_a__*delta_a_c__(:,1+nsource_a);
tmp_delta_U = fnorm(tmp_delta_U_(1+[0,1]));
tmp_omega_U = atan2(tmp_delta_U_(1+1),tmp_delta_U_(1+0));
U_k_p_wk_ = U_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_U_(1+0) + k_c_1_wk_*tmp_delta_U_(1+1)));
%%%%;
nT = max(0,min(n_S-1,128));
T_k_p_wk_ = T_k_p_wkS__(:,1+nT);
tmp_azimu_b = viewing_azimu_b_S_(1+nT);
tmp_polar_a = viewing_polar_a_S_(1+nT);
tmp_gamma_z = 0.0;
tmp_R_b__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
V_k_p_wk_ = zeros(n_w_sum,1);
nsource_b = 0;
tmp_delta_V_ = tmp_R_b__*delta_b_c__(:,1+nsource_b);
tmp_delta_V = fnorm(tmp_delta_V_(1+[0,1]));
tmp_omega_V = atan2(tmp_delta_V_(1+1),tmp_delta_V_(1+0));
V_k_p_wk_ = V_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_V_(1+0) + k_c_1_wk_*tmp_delta_V_(1+1)));
%%%%;
I_quad = sum(conj(U_k_p_wk_).*CTF_k_p_wk_.*V_k_p_wk_.*weight_2d_wk_,'all')*(4*pi^2);
I_form = ...
plane_bessel_plane_integral_0( ...
 k_p_r_max ...
,tmp_delta_U ...
,tmp_omega_U ...
,tmp_delta_V ...
,tmp_omega_V ...
,CTF_alpha ...
);
if (flag_verbose>0); disp(sprintf(' %% I_form vs I_quad: %0.16f',fnorm(I_form-I_quad)/fnorm(I_form))); end;
J_quad = 0.5 * sum(abs(U_k_p_wk_.*CTF_k_p_wk_ - V_k_p_wk_).^2.*weight_2d_wk_,'all')*(4*pi^2);
%%%%;
% Note that (Gradshteyn and Ryzhik 5.52.1): ;
% \int_{0}^{K} k besselj(0,alpha*k) dkdpsi = 2*pi*K*besselj(1,alpha*K)/alpha. ;
% and: \lim_{alpha\rightarrow 0} besselj(1,alpha*K)/alpha = K/2. ;
% i.e.: CTF_alpha = 0.2; integral2(@(k,psi) k.*besselj(0,CTF_alpha.*k),0,k_p_r_max,0,2*pi)*CTF_alpha/(2*pi*k_p_r_max*besselj(1,CTF_alpha.*k_p_r_max));
% Note also that (Gradshteyn and Ryzhik 5.54.2): ;
% \int_{0}^{k} k besselj(0,alpha*k)^2 dkdpsi = 2*pi* (K^2/2)*(besselj(0,alpha*K)^2 - besselj(-1,alpha*K)*besselj(+1,alpha*K)). ;
% i.e., ;
% nu = 0; CTF_alpha = 0.2;
% tmp_I = integral(@(k) k.*besselj(nu,CTF_alpha.*k).^2,0,k_p_r_max);
% tmp_J = (k_p_r_max^2/2)*(besselj(nu,CTF_alpha.*k_p_r_max)^2 - besselj(nu+1,CTF_alpha.*k_p_r_max)*besselj(nu-1,CTF_alpha.*k_p_r_max));
% disp(sprintf(' %% fnorm(tmp_I - tmp_J): %0.16f',fnorm(tmp_I-tmp_J)));
% CTF_alpha = 1e-4;
% tmp_J = (k_p_r_max^2/2)*(besselj(nu,CTF_alpha.*k_p_r_max)^2 - besselj(nu+1,CTF_alpha.*k_p_r_max)*besselj(nu-1,CTF_alpha.*k_p_r_max));
% disp(sprintf(' %% fnorm(tmp_J - k_p_r_max^2/2) %0.6f',fnorm(tmp_J - k_p_r_max^2/2)));
%%%%;
G_form = (2*pi)*k_p_r_max^2/2.0; if (CTF_alpha> 1e-12); G_form = (2*pi)*(k_p_r_max^2/2)*(besselj(0,CTF_alpha*k_p_r_max)^2 - besselj(-1,CTF_alpha*k_p_r_max)*besselj(+1,CTF_alpha*k_p_r_max)); end;
H_form = pi*k_p_r_max^2;
J_form = 0.5 * (G_form - 2*I_form + H_form);
%%%%;
n_nS_sub = 8; nS_sub_ = randperm(n_S,n_nS_sub)-1;
n_nT_sub = 10; nT_sub_ = randperm(n_S,n_nT_sub)-1;
I_quad_ST__ = zeros(n_nS_sub,n_nT_sub);
I_form_ST__ = zeros(n_nS_sub,n_nT_sub);
for nnS_sub=0:n_nS_sub-1;
nS_sub = nS_sub_(1+nnS_sub);
nS = nS_sub;
S_k_p_wk_ = S_k_p_wkS__(:,1+nS);
tmp_azimu_b = viewing_azimu_b_S_(1+nS);
tmp_polar_a = viewing_polar_a_S_(1+nS);
tmp_gamma_z = 0.0;
tmp_R_a__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
U_k_p_wk_ = zeros(n_w_sum,1);
for nsource_a=0:n_source-1;
tmp_delta_U_ = tmp_R_a__*delta_a_c__(:,1+nsource_a);
tmp_delta_U = fnorm(tmp_delta_U_(1+[0,1]));
tmp_omega_U = atan2(tmp_delta_U_(1+1),tmp_delta_U_(1+0));
U_k_p_wk_ = U_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_U_(1+0) + k_c_1_wk_*tmp_delta_U_(1+1)));
end;%for nsource_a=0:n_source-1;
for nnT_sub=0:n_nT_sub-1;
nT_sub = nT_sub_(1+nnT_sub);
nT = nT_sub;
T_k_p_wk_ = T_k_p_wkS__(:,1+nT);
tmp_azimu_b = viewing_azimu_b_S_(1+nT);
tmp_polar_a = viewing_polar_a_S_(1+nT);
tmp_gamma_z = 0.0;
tmp_R_b__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
V_k_p_wk_ = zeros(n_w_sum,1);
for nsource_b=0:n_source-1;
tmp_delta_V_ = tmp_R_b__*delta_b_c__(:,1+nsource_b);
tmp_delta_V = fnorm(tmp_delta_V_(1+[0,1]));
tmp_omega_V = atan2(tmp_delta_V_(1+1),tmp_delta_V_(1+0));
V_k_p_wk_ = V_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_V_(1+0) + k_c_1_wk_*tmp_delta_V_(1+1)));
end;%for nsource_b=0:n_source-1;
I_quad = sum(conj(U_k_p_wk_).*CTF_k_p_wk_.*V_k_p_wk_.*weight_2d_wk_,'all')*(4*pi^2);
I_form = 0;
for nsource_a=0:n_source-1;
tmp_delta_U_ = tmp_R_a__*delta_a_c__(:,1+nsource_a);
tmp_delta_U = fnorm(tmp_delta_U_(1+[0,1]));
tmp_omega_U = atan2(tmp_delta_U_(1+1),tmp_delta_U_(1+0));
for nsource_b=0:n_source-1;
tmp_delta_V_ = tmp_R_b__*delta_b_c__(:,1+nsource_b);
tmp_delta_V = fnorm(tmp_delta_V_(1+[0,1]));
tmp_omega_V = atan2(tmp_delta_V_(1+1),tmp_delta_V_(1+0));
I_form_sub = ...
plane_bessel_plane_integral_0( ...
 k_p_r_max ...
,tmp_delta_U ...
,tmp_omega_U ...
,tmp_delta_V ...
,tmp_omega_V ...
,CTF_alpha ...
);
I_form = I_form + I_form_sub;
end;%for nsource_b=0:n_source-1;
end;%for nsource_a=0:n_source-1;
I_quad_ST__(1+nnS_sub,1+nnT_sub) = I_quad;
I_form_ST__(1+nnS_sub,1+nnT_sub) = I_form;
end;%for nnT_sub=0:n_nT_sub-1;
end;%for nnS_sub=0:n_nS_sub-1;
if (flag_verbose>0); disp(sprintf(' %% I_form_ST__ vs I_quad_ST__: %0.16f',fnorm(I_form_ST__-I_quad_ST__)/fnorm(I_form_ST__))); end;
%%%%%%%%;
% Now calculate ssnll. ;
% This does not test anisotropic CTF. ;
% Nor does this test anisotropic eta. (indeed, here we set eta to 1). ;
%%%%%%%%;
n_alpha = 3; CTF_alpha_ = [0.1;0.3;0.5];
n_power = 2; eta_power_ = [0.5;0.75]*0; %<-- turn off eta for volumetric calculation. ;
n_CTF = n_alpha*n_power;
n_eta = n_alpha*n_power;
CTF_k_p_r_kC__ = zeros(n_k_p_r,n_CTF);
CTF_k_p_wkC__ = zeros(n_w_sum,n_CTF);
eta_k_p_r_ke__ = zeros(n_k_p_r,n_eta);
eta_k_p_wke__ = zeros(n_w_sum,n_eta);
for nalpha=0:n_alpha-1;
CTF_alpha = CTF_alpha_(1+nalpha);
for npower=0:n_power-1;
eta_power = eta_power_(1+npower);
nCTF = nalpha+npower*n_alpha;
neta = nalpha+npower*n_alpha;
CTF_k_p_r_k_ = reshape(besselj(0,CTF_alpha*k_p_r_),[n_k_p_r,1]).^(1-eta_power);
eta_k_p_r_k_ = reshape(besselj(0,CTF_alpha*k_p_r_),[n_k_p_r,1]).^(0+eta_power);
CTF_k_p_wk_ = (reshape(repmat(reshape(CTF_k_p_r_k_,[1,n_k_p_r]),[n_w_max,1]),[n_w_sum,1]));
CTF_k_p_r_kC__(:,1+nCTF) = CTF_k_p_r_k_;
CTF_k_p_wkC__(:,1+nCTF) = CTF_k_p_wk_;
eta_k_p_wk_ = (reshape(repmat(reshape(eta_k_p_r_k_,[1,n_k_p_r]),[n_w_max,1]),[n_w_sum,1]));
eta_k_p_r_ke__(:,1+neta) = eta_k_p_r_k_;
eta_k_p_wke__(:,1+neta) = eta_k_p_wk_;
end;%for npower=0:n_power-1;
end;%for nalpha=0:n_alpha-1;
%%%%;

%%%%%%%%;
% testing full on-grid ssnll. ;
%%%%%%%%;
n_M = n_S; M_k_p_wkM__ = T_k_p_wkS__ ;
index_nCTF_from_nM_ = zeros(n_M,1); for nM=0:n_M-1; index_nCTF_from_nM_(1+nM) = mod(nM,n_CTF); end;%for nM=0:n_M-1;
index_neta_from_nM_ = zeros(n_M,1); for nM=0:n_M-1; index_neta_from_nM_(1+nM) = mod(nM,n_eta); end;%for nM=0:n_M-1;
euler_polar_a_M_ = viewing_polar_a_S_;
euler_azimu_b_M_ = viewing_azimu_b_S_;
rng(0); euler_gamma_z_M_ = 2*pi*rand(n_M,1);
for nM=0:n_M-1;
M_k_p_wkM__(:,1+nM) = rotate_p_to_p_fftw(n_k_p_r,n_w_,n_w_sum,T_k_p_wkS__(:,1+nM),+euler_gamma_z_M_(1+nM));
end;%for nM=0:n_M-1;
%%%%;
ssnll_frm = 0.0d0;
for nM=0:n_M-1;
nS = nM;
S_k_p_wk_ = S_k_p_wkS__(:,1+nS);
T_k_p_wk_ = T_k_p_wkS__(:,1+nM);
nCTF = index_nCTF_from_nM_(1+nM);
CTF_k_p_wk_ = CTF_k_p_wkC__(:,1+nCTF);
neta = index_neta_from_nM_(1+nM);
eta_k_p_wk_ = eta_k_p_wke__(:,1+neta);
tmp_polar_a = euler_polar_a_M_(1+nM);
tmp_azimu_b = euler_azimu_b_M_(1+nM);
tmp_gamma_z = 0.0;
tmp_R__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
tmp_R_a__ = tmp_R__; tmp_R_b__ = tmp_R__;
U_k_p_wk_ = zeros(n_w_sum,1);
for nsource_a=0:n_source-1;
tmp_delta_U_ = tmp_R_a__*delta_a_c__(:,1+nsource_a);
tmp_delta_U = fnorm(tmp_delta_U_(1+[0,1]));
tmp_omega_U = atan2(tmp_delta_U_(1+1),tmp_delta_U_(1+0));
U_k_p_wk_ = U_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_U_(1+0) + k_c_1_wk_*tmp_delta_U_(1+1)));
end;%for nsource_a=0:n_source-1;
if (flag_verbose>1); disp(sprintf(' %% S_k_p_wk_ vs U_k_p_wk_: %0.16f',fnorm(S_k_p_wk_ - U_k_p_wk_)/fnorm(S_k_p_wk_))); end;
V_k_p_wk_ = zeros(n_w_sum,1);
for nsource_b=0:n_source-1;
tmp_delta_V_ = tmp_R_b__*delta_b_c__(:,1+nsource_b);
tmp_delta_V = fnorm(tmp_delta_V_(1+[0,1]));
tmp_omega_V = atan2(tmp_delta_V_(1+1),tmp_delta_V_(1+0));
V_k_p_wk_ = V_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_V_(1+0) + k_c_1_wk_*tmp_delta_V_(1+1)));
end;%for nsource_b=0:n_source-1;
if (flag_verbose>1); disp(sprintf(' %% T_k_p_wk_ vs V_k_p_wk_: %0.16f',fnorm(T_k_p_wk_ - V_k_p_wk_)/fnorm(T_k_p_wk_))); end;
ssnll_frm = ssnll_frm + 0.5*sum(abs(U_k_p_wk_.*CTF_k_p_wk_ - V_k_p_wk_).^2.*eta_k_p_wk_.*weight_2d_wk_,'all')*(4*pi^2);
end;%for nM=0:n_M-1;
%%%%;
parameter_ssnll = struct('type','parameter');
[ ...
 ~ ...
,ssnll_q2d_M_ ...
,ssnll_q2d ...
] = ...
ssnll_from_a_k_Y_12( ...
 parameter_ssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_form_yk_ ...
,[] ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,S_k_p_wkS__ ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,[] ...
,[] ...
,[] ...
);
%%%%;
if (flag_verbose>0); disp(sprintf(' %% ssnll_frm vs ssnll_q2d: %0.16f',fnorm(ssnll_frm-ssnll_q2d)/fnorm(ssnll_frm))); end;
%%%%%%%%;

%%%%%%%%;
% Now creating dvol_a_k_Y_form_. ;
%%%%%%%%;
n_source = 4;
rng(1);
delta_dvol_a_c__ = zeros(3,n_source);
for nsource=0:n_source-1;
rng(1024+1+nsource);
delta_dvol_a_c_ = 2*rand(3,1)-1; delta_dvol_a_c_ = delta_dvol_a_c_*0.5/k_p_r_max/max(1e-12,fnorm(delta_dvol_a_c_)); %<-- ensure small in magnitude. ;
delta_dvol_a_c__(:,1+nsource) = delta_dvol_a_c_;
end;%for nsource=0:n_source-1;
dvol_a_k_p_form_ = zeros(n_k_all,1);
for nsource=0:n_source-1;
delta_dvol_a_c_ = delta_dvol_a_c__(:,1+nsource);
dvol_a_k_p_form_ = dvol_a_k_p_form_ + exp(+i*2*pi*(k_c_0_all_*delta_dvol_a_c_(1+0) + k_c_1_all_*delta_dvol_a_c_(1+1) + k_c_2_all_*delta_dvol_a_c_(1+2)));
end;%for nsource=0:n_source-1;
%%%%;
I_dvol_a_quad = sum(dvol_a_k_p_form_.*weight_3d_k_all_);
I_dvol_a_form = 0;
for nsource=0:n_source-1;
delta_dvol_a_c_ = delta_dvol_a_c__(:,1+nsource);
tmp_kd = 2*pi*k_p_r_max*fnorm(delta_dvol_a_c_);
I_dvol_a_form = I_dvol_a_form + h3d_(tmp_kd)*k_p_r_max^3;
end;%for nsource=0:n_source-1;
disp(sprintf(' %% I_a_form vs I_a_quad %0.16f %%<-- should be <1e-6',fnorm(I_a_form-I_a_quad)/fnorm(I_a_form)));
%%%%;
dvol_a_k_Y_form_ = zeros(n_lm_sum,1);
for nsource=0:n_source-1;
dvol_a_k_Y_form_ = dvol_a_k_Y_form_ + plane_wave_expansion_1(n_k_p_r,k_p_r_,delta_dvol_a_c__(:,1+nsource),l_max_);
end;%for nsource=0:n_source-1;
%%%%;
tmp_t = tic;
[ ...
 dvol_a_k_Y_quad_ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,dvol_a_k_p_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% dvol_a_k_Y_quad_ time %0.2fs',tmp_t));
disp(sprintf(' %% dvol_a_k_Y_form_ vs dvol_a_k_Y_quad_: %0.16f %%<-- should be <1e-2',fnorm(dvol_a_k_Y_form_-dvol_a_k_Y_quad_)/fnorm(dvol_a_k_Y_form_)));
%%%%;
tmp_t = tic;
[ ...
 dvol_a_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,dvol_a_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% dvol_a_k_p_quad_ time %0.2fs',tmp_t));
disp(sprintf(' %% dvol_a_k_p_form_ vs dvol_a_k_p_quad_: %0.16f %%<-- should be <1e-2',fnorm(dvol_a_k_p_form_-dvol_a_k_p_quad_)/fnorm(dvol_a_k_p_form_)));
%%%%%%%%;
% prepare dvol_a_k_Y_form__ ;
%%%%%%%%;
dvol_a_k_Y_form_yk_ = dvol_a_k_Y_form_;
dvol_a_k_Y_form_yk__ = zeros(n_lm_max,n_k_p_r);
tmp_t = tic();
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
dvol_a_k_Y_form_yk__(1:n_lm,1+nk_p_r) = dvol_a_k_Y_form_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% dvol_a_k_Y_form_yk__: time %0.6fs',tmp_t)); end;
%%%%%%%%;
% generate templates. ;
%%%%%%%%;
tmp_t = tic();
[ ...
 dvol_S_k_p_wkS__ ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
pm_template_2( ...
 0*flag_verbose ...
,l_max ...
,n_k_p_r ...
,dvol_a_k_Y_form_yk__ ...
,[] ...
,-1 ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
);
dvol_S_k_p_wkS__ = reshape(dvol_S_k_p_wkS__,[n_w_sum,n_S]);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% dvol_S_k_p_wkS__: time %0.6fs',tmp_t)); end;
%%%%%%%%;
% Now step through and reconstitute the templates. ;
%%%%%%%%;
dvol_R_k_p_wkS__ = zeros(n_w_sum,n_S);
for nS=0:n_S-1;
dvol_S_k_p_wk_ = dvol_S_k_p_wkS__(:,1+nS);
tmp_azimu_b = viewing_azimu_b_S_(1+nS);
tmp_polar_a = viewing_polar_a_S_(1+nS);
tmp_gamma_z = 0.0;
tmp_dvol_R__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
dvol_R_k_p_wk_ = zeros(n_w_sum,1);
for nsource=0:n_source-1;
tmp_delta_ = tmp_dvol_R__*delta_dvol_a_c__(:,1+nsource);
dvol_R_k_p_wk_ = dvol_R_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_(1+0) + k_c_1_wk_*tmp_delta_(1+1)));
end;%for nsource=0:n_source-1;
dvol_R_k_p_wkS__(:,1+nS) = dvol_R_k_p_wk_;
end;%for nS=0:n_S-1;
disp(sprintf(' %% dvol_R_k_p_wkS__ vs dvol_S_k_p_wkS__: %0.16f %%<-- should be <1e-2',fnorm(dvol_R_k_p_wkS__-dvol_S_k_p_wkS__)/fnorm(dvol_R_k_p_wkS__)));
%%%%%%%%;

%%%%%%%%;
% Set up test with some 'on-grid' images. ;
% Note that these are on the tensor grid from sample_shell above. ;
% For this test we explicitly *exclude* those templates near the pole. ;
% This is because ssnll_from_a_k_Y_12 has difficulty interpolating across the poles. ;
%%%%%%%%;
n_M = 64;
index_nCTF_from_nM_ = transpose(mod(0:n_M-1,n_CTF));
index_neta_from_nM_ = transpose(mod(0:n_M-1,n_eta));
nS_pole_south = max(efind(abs(viewing_polar_a_S_-1*pi)<1e-12)) + 1;
nS_pole_north = min(efind(abs(viewing_polar_a_S_-0*pi)<1e-12)) - 1;
index_nS_from_nM_ = transpose(round(linspace(nS_pole_south,nS_pole_north,n_M)));
M_k_p_wkM__ = zeros(n_w_sum,n_M);
fromb_polar_a_M_ = viewing_polar_a_S_(1+index_nS_from_nM_);
fromb_azimu_b_M_ = viewing_azimu_b_S_(1+index_nS_from_nM_);
fromb_gamma_z_M_ = pi./transpose(3 + mod(0:n_M-1,4));
for nM=0:n_M-1;
M_k_p_wkM__(:,1+nM) = rotate_p_to_p_fftw(n_k_p_r,n_w_,n_w_sum,T_k_p_wkS__(:,1+index_nS_from_nM_(1+nM)),+fromb_gamma_z_M_(1+nM));
end;%for nM=0:n_M-1;
%%%%;
euler_polar_a_M_ = viewing_polar_a_S_(1+index_nS_from_nM_);
euler_azimu_b_M_ = viewing_azimu_b_S_(1+index_nS_from_nM_);
euler_gamma_z_M_ = fromb_gamma_z_M_;
%%%%;
rng(7);
dtau_euler_polar_a_M_ = 2*pi*rand(n_M,1);
dtau_euler_azimu_b_M_ = 2*pi*rand(n_M,1);
dtau_euler_gamma_z_M_ = 2*pi*rand(n_M,1);
%dtau_fnorm = fnorm([ dtau_euler_polar_a_M_ , dtau_euler_azimu_b_M_ , dtau_euler_gamma_z_M_ ]);
%dtau_euler_polar_a_M_ = dtau_euler_polar_a_M_/max(1e-12,dtau_fnorm);
%dtau_euler_azimu_b_M_ = dtau_euler_azimu_b_M_/max(1e-12,dtau_fnorm);
%dtau_euler_gamma_z_M_ = dtau_euler_gamma_z_M_/max(1e-12,dtau_fnorm);
dtau_M3__ = [ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
] ;
dtau = 1e-3;
%%%%;
ssnll_frm = 0.0d0;
for nM=0:n_M-1;
nS = index_nS_from_nM_(1+nM);
T_k_p_wk_ = T_k_p_wkS__(:,1+nS);
nCTF = index_nCTF_from_nM_(1+nM);
CTF_k_p_wk_ = CTF_k_p_wkC__(:,1+nCTF);
neta = index_neta_from_nM_(1+nM);
eta_k_p_wk_ = eta_k_p_wke__(:,1+neta);
tmp_polar_a = +euler_polar_a_M_(1+nM);
tmp_azimu_b = +euler_azimu_b_M_(1+nM);
tmp_gamma_z = -euler_gamma_z_M_(1+nM);
tmp_R_a__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
U_k_p_wk_ = zeros(n_w_sum,1);
for nsource_a=0:n_source-1;
tmp_delta_U_ = tmp_R_a__*delta_a_c__(:,1+nsource_a);
tmp_delta_U = fnorm(tmp_delta_U_(1+[0,1]));
tmp_omega_U = atan2(tmp_delta_U_(1+1),tmp_delta_U_(1+0));
U_k_p_wk_ = U_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_U_(1+0) + k_c_1_wk_*tmp_delta_U_(1+1)));
end;%for nsource_a=0:n_source-1;
tmp_polar_a = +fromb_polar_a_M_(1+nM);
tmp_azimu_b = +fromb_azimu_b_M_(1+nM);
tmp_gamma_z = -fromb_gamma_z_M_(1+nM);
tmp_R_b__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
V_k_p_wk_ = zeros(n_w_sum,1);
for nsource_b=0:n_source-1;
tmp_delta_V_ = tmp_R_b__*delta_b_c__(:,1+nsource_b);
tmp_delta_V = fnorm(tmp_delta_V_(1+[0,1]));
tmp_omega_V = atan2(tmp_delta_V_(1+1),tmp_delta_V_(1+0));
V_k_p_wk_ = V_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_V_(1+0) + k_c_1_wk_*tmp_delta_V_(1+1)));
end;%for nsource_b=0:n_source-1;
if (flag_verbose>0); disp(sprintf(' %% T_k_p_wk_ vs R(V_k_p_wk_): %0.16f',fnorm(T_k_p_wk_ - rotate_p_to_p_fftw(n_k_p_r,n_w_,n_w_sum,V_k_p_wk_,+tmp_gamma_z))/fnorm(T_k_p_wk_))); end;
M_k_p_wk_ = M_k_p_wkM__(:,1+nM);
if (flag_verbose>0); disp(sprintf(' %% M_k_p_wk_ vs V_k_p_wk_: %0.16f',fnorm(M_k_p_wk_ - V_k_p_wk_)/fnorm(M_k_p_wk_))); end;
ssnll_frm = ssnll_frm + 0.5*sum(abs(U_k_p_wk_.*CTF_k_p_wk_ - V_k_p_wk_).^2.*eta_k_p_wk_.*weight_2d_wk_,'all')*(4*pi^2);
end;%for nM=0:n_M-1;
%%%%%%%%;

%%%%%%%%;
% Calculate derivative using ssnll_from_plane_wave_expansion_1. ;
%%%%%%%%;
n_source_a = n_source; v_source_a_ = ones(n_source_a,1);
n_source_b = n_source; v_source_b_ = ones(n_source_b,1);
n_source_dvol_a = n_source; v_source_dvol_a_ = ones(n_source_dvol_a,1);
viewing_gamma_z_S_ = zeros(n_S,1);
parameter_ssnll = struct('type','parameter');
[ ...
 ~ ...
,ssnll_pw1_M_ ...
,ssnll_pw1 ...
,S_k_p_pw1_wkS__ ...
,dvol_ssnll_pw1_M_ ...
,dvol_ssnll_pw1 ...
,dvol_S_k_p_pw1_wkS__ ...
,dvol_dvol_ssnll_pw1 ...
,dtau_ssnll_pw1_M3__ ...
,dtau_ssnll_pw1 ...
,dtau_S_k_p_pw1_wkS3___ ...
,dtau_dvol_ssnll_pw1_M3__ ...
,dtau_dvol_ssnll_pw1 ...
,dtau_dvol_S_k_p_pw1_wkS3___ ...
,dtau_dtau_ssnll_pw1_M33___ ...
,dtau_dtau_ssnll_pw1 ...
,dtau_dtau_S_k_p_pw1_wkS33____ ...
] = ...
ssnll_from_plane_wave_expansion_1( ...
 parameter_ssnll ...
,n_source_a ...
,v_source_a_ ...
,delta_a_c__ ...
,n_source_b ...
,v_source_b_ ...
,delta_b_c__ ...
,n_source_dvol_a ...
,v_source_dvol_a_ ...
,delta_dvol_a_c__ ...
,n_k_p_r ...
,k_p_r_ ...
,n_w_max ...
,weight_2d_wk_ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,n_M ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
,fromb_polar_a_M_ ...
,fromb_azimu_b_M_ ...
,fromb_gamma_z_M_ ...
,n_S ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_gamma_z_S_ ...
);
%%%%%%%%;

%%%%%%%%;
% Calculate derivative using ssnll_from_a_k_Y_12. ;
%%%%%%%%;
[ ...
 ~ ...
,ssnll_q2d_M_ ...
,ssnll_q2d ...
,S_k_p_q2d_wkS__ ...
,dvol_ssnll_q2d_M_ ...
,dvol_ssnll_q2d ...
,dvol_S_k_p_q2d_wkS__ ...
,dvol_dvol_ssnll_q2d ...
,dtau_ssnll_q2d_M3__ ...
,dtau_ssnll_q2d ...
,dtau_S_k_p_q2d_wkS3___ ...
,dtau_dvol_ssnll_q2d_M3__ ...
,dtau_dvol_ssnll_q2d ...
,dtau_dvol_S_k_p_q2d_wkS3___ ...
,dtau_dtau_ssnll_q2d_M33___ ...
,dtau_dtau_ssnll_q2d ...
,dtau_dtau_S_k_p_q2d_wkS33____ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
] = ...
ssnll_from_a_k_Y_12( ...
 parameter_ssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_form_yk__ ...
,dvol_a_k_Y_form_yk__ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
);
%%%%%%%%;

%%%%%%%%;
% tabulate results. ;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %%%%%%%%%%%%%%%% : ')); end;
if (flag_verbose>0); disp(sprintf(' %% on-grid test: ')); end;
if (flag_verbose>0); disp(sprintf(' %%%%%%%%%%%%%%%% : ')); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_frm vs ssnll_pw1: %0.16f',fnorm(ssnll_frm - ssnll_pw1)/max(1e-12,fnorm(ssnll_frm)))); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_pw1_M_ vs ssnll_q2d_M_: %0.16f',fnorm(ssnll_pw1_M_ - ssnll_q2d_M_)/max(1e-12,fnorm(ssnll_pw1_M_)))); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_pw1 vs ssnll_q2d: %0.16f',fnorm(ssnll_pw1 - ssnll_q2d)/max(1e-12,fnorm(ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% S_k_p_pw1_wkS__ vs S_k_p_q2d_wkS__: %0.16f',fnorm(S_k_p_pw1_wkS__ - S_k_p_q2d_wkS__)/max(1e-12,fnorm(S_k_p_pw1_wkS__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_pw1_M_ vs dvol_ssnll_q2d_M_: %0.16f',fnorm(dvol_ssnll_pw1_M_ - dvol_ssnll_q2d_M_)/max(1e-12,fnorm(dvol_ssnll_pw1_M_)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_pw1 vs dvol_ssnll_q2d: %0.16f',fnorm(dvol_ssnll_pw1 - dvol_ssnll_q2d)/max(1e-12,fnorm(dvol_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_S_k_p_pw1_wkS__ vs dvol_S_k_p_q2d_wkS__: %0.16f',fnorm(dvol_S_k_p_pw1_wkS__ - dvol_S_k_p_q2d_wkS__)/max(1e-12,fnorm(dvol_S_k_p_pw1_wkS__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_dvol_ssnll_pw1 vs dvol_dvol_ssnll_q2d: %0.16f',fnorm(dvol_dvol_ssnll_pw1 - dvol_dvol_ssnll_q2d)/max(1e-12,fnorm(dvol_dvol_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_ssnll_pw1_M3__ vs dtau_ssnll_q2d_M3__: %0.16f',fnorm(dtau_ssnll_pw1_M3__ - dtau_ssnll_q2d_M3__)/max(1e-12,fnorm(dtau_ssnll_pw1_M3__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_ssnll_pw1 vs dtau_ssnll_q2d: %0.16f',fnorm(dtau_ssnll_pw1 - dtau_ssnll_q2d)/max(1e-12,fnorm(dtau_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_S_k_p_pw1_wkS3___ vs dtau_S_k_p_q2d_wkS3___: %0.16f',fnorm(dtau_S_k_p_pw1_wkS3___ - dtau_S_k_p_q2d_wkS3___)/max(1e-12,fnorm(dtau_S_k_p_pw1_wkS3___)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dvol_ssnll_pw1_M3__ vs dtau_dvol_ssnll_q2d_M3__: %0.16f',fnorm(dtau_dvol_ssnll_pw1_M3__ - dtau_dvol_ssnll_q2d_M3__)/max(1e-12,fnorm(dtau_dvol_ssnll_pw1_M3__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dvol_ssnll_pw1 vs dtau_dvol_ssnll_q2d: %0.16f',fnorm(dtau_dvol_ssnll_pw1 - dtau_dvol_ssnll_q2d)/max(1e-12,fnorm(dtau_dvol_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dvol_S_k_p_pw1_wkS3___ vs dtau_dvol_S_k_p_q2d_wkS3___: %0.16f',fnorm(dtau_dvol_S_k_p_pw1_wkS3___ - dtau_dvol_S_k_p_q2d_wkS3___)/max(1e-12,fnorm(dtau_dvol_S_k_p_pw1_wkS3___)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_ssnll_pw1_M33___ vs dtau_dtau_ssnll_q2d_M33___: %0.16f',fnorm(dtau_dtau_ssnll_pw1_M33___ - dtau_dtau_ssnll_q2d_M33___)/max(1e-12,fnorm(dtau_dtau_ssnll_pw1_M33___)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_ssnll_pw1 vs dtau_dtau_ssnll_q2d: %0.16f',fnorm(dtau_dtau_ssnll_pw1 - dtau_dtau_ssnll_q2d)/max(1e-12,fnorm(dtau_dtau_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_S_k_p_pw1_wkS33____ vs dtau_dtau_S_k_p_q2d_wkS33____: %0.16f',fnorm(dtau_dtau_S_k_p_pw1_wkS33____ - dtau_dtau_S_k_p_q2d_wkS33____)/max(1e-12,fnorm(dtau_dtau_S_k_p_pw1_wkS33____)))); end;

%%%%%%%%;
% We construct the riesz integration-weights on the sphere. ;
% These are associated with the riesz-potential 1/k^2.5, ;
% or a weighting-function (for the squared-L2-norm) of 1/k. ;
%%%%%%%%;
weight_3d_riesz_k_p_r_ = weight_3d_k_p_r_;
weight_3d_riesz_k_all_ = weight_3d_k_all_;
for nk_p_r=0:n_k_p_r-1;
k_p_r = k_p_r_(1+nk_p_r);
weight_3d_k_p_r = weight_3d_k_p_r_(1+nk_p_r);
weight_2d_k_p_r = weight_2d_k_p_r_(1+nk_p_r);
weight_3d_riesz_k_p_r_(1+nk_p_r) = weight_3d_k_p_r_(1+nk_p_r) * weight_2d_k_p_r / max(1e-16,weight_3d_k_p_r);
tmp_index_ = n_k_all_csum_(1+nk_p_r):n_k_all_csum_(1+nk_p_r+1)-1;
if (flag_verbose> 1); disp(sprintf(' %% k_p_r %0.6f: sum(weight_3d_k_all_(1+tmp_index_))/(weight_3d_k_p_r * 4*pi): %0.16f',k_p_r,sum(weight_3d_k_all_(1+tmp_index_))/(4*pi*weight_3d_k_p_r))); end;
weight_3d_riesz_k_all_(1+tmp_index_) = weight_3d_k_all_(1+tmp_index_) * weight_2d_k_p_r / max(1e-16,weight_3d_k_p_r);
if (flag_verbose> 1); disp(sprintf(' %% k_p_r %0.6f: sum(weight_3d_riesz_k_all_(1+tmp_index_))/(weight_2d_k_p_r * 4*pi): %0.16f',k_p_r,sum(weight_3d_riesz_k_all_(1+tmp_index_))/(4*pi*weight_2d_k_p_r))); end;
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;

%%%%%%%%;
% Calibrate scaling factor. ;
%%%%%%%%;
term_deltafunc = sqrt(2*pi);
term_2 = (pi*k_p_r_max^2)/(4*pi^2);
if (flag_verbose>0); disp(sprintf(' %% sum(weight_2d_wk_) vs (pi*k_p_r_max^2)/(4*pi^2): %0.16f',fnorm(sum(weight_2d_wk_) - term_2))); end;
term_3 = (4/3)*pi*k_p_r_max^3;
if (flag_verbose>0); disp(sprintf(' %% sum(weight_3d_k_all_) vs (4/3)*pi*k_p_r_max^3: %0.16f',fnorm(sum(weight_3d_k_all_) - term_3))); end;
term_3r = (4*pi^2*k_p_r_max^2);
if (flag_verbose>0); disp(sprintf(' %% sum(weight_3d_riesz__all_) vs 4*pi^2*k_p_r_max^2: %0.16f',fnorm(sum(weight_3d_riesz_k_all_) - term_3r))); end;
scaling_volumetric = term_3r / term_2 / term_deltafunc ;

%%%%%%%%;
% Calculate volumetric terms. ;
%%%%%%%%;
tmp_t = tic();
parameter_KAPPA = struct('type','KAPPA');
parameter_KAPPA.flag_kernel_qpro_d0 = 1;
parameter_KAPPA.flag_kernel_qpro_d1 = 1;
parameter_KAPPA.kernel_qpro_polar_a_pole_north=KAPPA_pole_north_double;
parameter_KAPPA.kernel_qpro_polar_a_pole_south=KAPPA_pole_south_double;
parameter_KAPPA.kernel_qpro_l_max_use = l_max;
parameter_KAPPA.kernel_qpro_qref_k_eq_d_double = KAPPA_qref_k_eq_d_double;
parameter_KAPPA.flag_kernel_full = KAPPA_flag_kernel_full;
KAPPA = [];
[ ...
 parameter_KAPPA ...
,KAPPA ...
,a_restore_C2M0_k_Y_yk__ ...
,a_restore_C1M1_k_Y_yk__ ...
,a_restore_C0M2_k_Y_yk__ ...
] = ...
kappa_qpro_apply_2( ...
 parameter_KAPPA ...
,KAPPA ...
,n_w_max ...
,n_M ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,[] ...
,[] ...
,[] ...
,n_k_p_r ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_r_kC__ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% kappa_qpro_apply_2 (not derivatives) time %0.2fs',tmp_t)); end;
%%%%%%%%;

%%%%%%%%;
% Convert volumetric terms. ;
%%%%%%%%;
for n_type = 0:3-1;
if n_type==0; tmp_yk__ = a_restore_C2M0_k_Y_yk__; end;
if n_type==1; tmp_yk__ = a_restore_C1M1_k_Y_yk__; end;
if n_type==2; tmp_yk__ = a_restore_C0M2_k_Y_yk__; end;
%%%%;
tmp_yk_ = zeros(n_lm_sum,1);
tmp_t = tic();
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
tmp_yk_(1+tmp_index_) = tmp_yk__(1:n_lm,1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% tmp_yk_: time %0.6fs',tmp_t)); end;
%%%%;
tmp_t = tic;
[ ...
 tmp_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,tmp_yk_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% tmp_quad_ time %0.2fs',tmp_t));
if n_type==0; a_restore_C2M0_k_p_quad_ = tmp_quad_; end;
if n_type==1; a_restore_C1M1_k_p_quad_ = tmp_quad_; end;
if n_type==2; a_restore_C0M2_k_p_quad_ = tmp_quad_; end;
end;%for n_type = 0:3-1;
%%%%%%%%;

%%%%%%%%;
% determine expansion for abs(a).^2. ;
%%%%%%%%;
[ ...
 aa_k_Y_quad_yk_ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,abs(a_k_p_form_).^2 ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%;
aa_k_Y_quad_yk__ = zeros(n_lm_max,n_k_p_r);
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
aa_k_Y_quad_yk__(1:n_lm,1+nk_p_r) = aa_k_Y_quad_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;

%%%%%%%%;
% determine expansion for abs(dvol_a).^2. ;
%%%%%%%%;
[ ...
 dvol_a_dvol_a_k_Y_quad_yk_ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,abs(dvol_a_k_p_form_).^2 ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%;
dvol_a_dvol_a_k_Y_quad_yk__ = zeros(n_lm_max,n_k_p_r);
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
dvol_a_dvol_a_k_Y_quad_yk__(1:n_lm,1+nk_p_r) = dvol_a_dvol_a_k_Y_quad_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;

%%%%%%%%;
% Collect terms into ssnll. ;
%%%%%%%%;
ssnll_q3d = ...
 + 0.5 * sum( (conj(aa_k_Y_quad_yk__) .* a_restore_C2M0_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) ) ...
 - 0.5 * 2*real(sum( (conj(a_k_Y_form_yk__).^1 .* a_restore_C1M1_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) )) ...
 + 0.5 * sum( a_restore_C0M2_k_Y_yk__(1+0,:) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1])*sqrt(4*pi) ) ...
;
ssnll_q3d = ssnll_q3d / scaling_volumetric ;
if (flag_verbose>0); disp(sprintf(' %% ssnll_pw1 vs ssnll_q3d: %0.16f',fnorm(ssnll_pw1-ssnll_q3d)/fnorm(ssnll_pw1))); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_q2d vs ssnll_q3d: %0.16f',fnorm(ssnll_q2d-ssnll_q3d)/fnorm(ssnll_q2d))); end;
%%%%%%%%;
ssnll_q3d = ...
 + 0.5 * sum( abs(a_k_p_quad_).^2 .* a_restore_C2M0_k_p_quad_ .* weight_3d_riesz_k_all_ ) ...
 - 0.5 * 2*real(sum( conj(a_k_p_quad_).^1 .* a_restore_C1M1_k_p_quad_ .* weight_3d_riesz_k_all_ )) ...
 + 0.5 * sum( a_restore_C0M2_k_p_quad_ .* weight_3d_riesz_k_all_ ) ...
;
ssnll_q3d = ssnll_q3d / scaling_volumetric ;
if (flag_verbose>0); disp(sprintf(' %% ssnll_pw1 vs ssnll_q3d: %0.16f',fnorm(ssnll_pw1-ssnll_q3d)/fnorm(ssnll_pw1))); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_q2d vs ssnll_q3d: %0.16f',fnorm(ssnll_q2d-ssnll_q3d)/fnorm(ssnll_q2d))); end;
%%%%%%%%;
ssnll_q3d = ...
 + 0.5 * sum( conj(a_k_p_quad_) .* (a_k_p_quad_) .* a_restore_C2M0_k_p_quad_ .* weight_3d_riesz_k_all_ ) ...
 - 0.5 * sum( conj(a_k_p_quad_) .* a_restore_C1M1_k_p_quad_ .* weight_3d_riesz_k_all_ ) ...
 - 0.5 * sum( conj(a_restore_C1M1_k_p_quad_) .* (a_k_p_quad_) .* weight_3d_riesz_k_all_ ) ...
 + 0.5 * sum( a_restore_C0M2_k_p_quad_ .* weight_3d_riesz_k_all_ ) ...
;
ssnll_q3d = ssnll_q3d / scaling_volumetric ;
if (flag_verbose>0); disp(sprintf(' %% ssnll_pw1 vs ssnll_q3d: %0.16f',fnorm(ssnll_pw1-ssnll_q3d)/fnorm(ssnll_pw1))); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_q2d vs ssnll_q3d: %0.16f',fnorm(ssnll_q2d-ssnll_q3d)/fnorm(ssnll_q2d))); end;
%%%%%%%%;

%%%%%%%%%%%%%%%%;
% Calculate volumetric terms with derivatives. ;
%%%%%%%%;
tmp_t = tic();
[ ...
 parameter_KAPPA ...
,KAPPA ...
,a_restore_C2M0_k_Y_yk__ ...
,a_restore_C1M1_k_Y_yk__ ...
,a_restore_C0M2_k_Y_yk__ ...
,dtau_a_restore_C2M0_k_Y_yk__ ...
,dtau_a_restore_C1M1_k_Y_yk__ ...
,dtau_a_restore_C0M2_k_Y_yk__ ...
,dtau_dtau_a_restore_C2M0_k_Y_yk__ ...
,dtau_dtau_a_restore_C1M1_k_Y_yk__ ...
,dtau_dtau_a_restore_C0M2_k_Y_yk__ ...
] = ...
kappa_qpro_apply_2( ...
 parameter_KAPPA ...
,KAPPA ...
,n_w_max ...
,n_M ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
,n_k_p_r ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_r_kC__ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% kappa_qpro_apply_2 (yes derivatives) time %0.2fs',tmp_t)); end;
%%%%%%%%;

%%%%%%%%;
% Convert volumetric terms. ;
%%%%%%%%;
for n_type = 0:3*3-1;
ntype = 0;
if n_type==ntype; tmp_yk__ = a_restore_C2M0_k_Y_yk__; end; ntype = ntype + 1;
if n_type==ntype; tmp_yk__ = a_restore_C1M1_k_Y_yk__; end; ntype = ntype + 1;
if n_type==ntype; tmp_yk__ = a_restore_C0M2_k_Y_yk__; end; ntype = ntype + 1;
if n_type==ntype; tmp_yk__ = dtau_a_restore_C2M0_k_Y_yk__; end; ntype = ntype + 1;
if n_type==ntype; tmp_yk__ = dtau_a_restore_C1M1_k_Y_yk__; end; ntype = ntype + 1;
if n_type==ntype; tmp_yk__ = dtau_a_restore_C0M2_k_Y_yk__; end; ntype = ntype + 1;
if n_type==ntype; tmp_yk__ = dtau_dtau_a_restore_C2M0_k_Y_yk__; end; ntype = ntype + 1;
if n_type==ntype; tmp_yk__ = dtau_dtau_a_restore_C1M1_k_Y_yk__; end; ntype = ntype + 1;
if n_type==ntype; tmp_yk__ = dtau_dtau_a_restore_C0M2_k_Y_yk__; end; ntype = ntype + 1;
%%%%;
tmp_yk_ = zeros(n_lm_sum,1);
tmp_t = tic();
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
tmp_yk_(1+tmp_index_) = tmp_yk__(1:n_lm,1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% tmp_yk_: time %0.6fs',tmp_t)); end;
%%%%;
tmp_t = tic;
[ ...
 tmp_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,tmp_yk_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% tmp_quad_ time %0.2fs',tmp_t));
ntype = 0;
if n_type==ntype; a_restore_C2M0_k_p_quad_ = tmp_quad_; end; ntype = ntype + 1;
if n_type==ntype; a_restore_C1M1_k_p_quad_ = tmp_quad_; end; ntype = ntype + 1;
if n_type==ntype; a_restore_C0M2_k_p_quad_ = tmp_quad_; end; ntype = ntype + 1;
if n_type==ntype; dtau_a_restore_C2M0_k_p_quad_ = tmp_quad_; end; ntype = ntype + 1;
if n_type==ntype; dtau_a_restore_C1M1_k_p_quad_ = tmp_quad_; end; ntype = ntype + 1;
if n_type==ntype; dtau_a_restore_C0M2_k_p_quad_ = tmp_quad_; end; ntype = ntype + 1;
if n_type==ntype; dtau_dtau_a_restore_C2M0_k_p_quad_ = tmp_quad_; end; ntype = ntype + 1;
if n_type==ntype; dtau_dtau_a_restore_C1M1_k_p_quad_ = tmp_quad_; end; ntype = ntype + 1;
if n_type==ntype; dtau_dtau_a_restore_C0M2_k_p_quad_ = tmp_quad_; end; ntype = ntype + 1;
end;%for n_type = 0:3*3-1;
%%%%%%%%;

%%%%%%%%;
% determine expansion for a_times_a_restore_C2M0_k_Y_yk__. ;
%%%%%%%%;
[ ...
 a_times_a_restore_C2M0_k_Y_yk_ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_p_form_.*a_restore_C2M0_k_p_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%;
a_times_a_restore_C2M0_k_Y_yk__ = zeros(n_lm_max,n_k_p_r);
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
a_times_a_restore_C2M0_k_Y_yk__(1:n_lm,1+nk_p_r) = a_times_a_restore_C2M0_k_Y_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;

%%%%%%%%;
% Collect terms into ssnll. ;
%%%%%%%%;
ssnll_q3d = ...
 + 0.5 * sum( (conj(a_k_Y_form_yk__) .* a_times_a_restore_C2M0_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) ) ...
 - 0.5 * 2*real(sum( (conj(a_k_Y_form_yk__).^1 .* a_restore_C1M1_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) )) ...
 + 0.5 * sum( a_restore_C0M2_k_Y_yk__(1+0,:) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1])*sqrt(4*pi) ) ...
;
ssnll_q3d = ssnll_q3d / scaling_volumetric ;
if (flag_verbose>0); disp(sprintf(' %% ssnll_pw1 vs ssnll_q3d: %0.16f',fnorm(ssnll_pw1-ssnll_q3d)/fnorm(ssnll_pw1))); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_q2d vs ssnll_q3d: %0.16f',fnorm(ssnll_q2d-ssnll_q3d)/fnorm(ssnll_q2d))); end;

%%%%%%%%;
% determine expansion for a_times_dtau_a_restore_C2M0_k_Y_yk__. ;
%%%%%%%%;
[ ...
 a_times_dtau_a_restore_C2M0_k_Y_yk_ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_p_form_.*dtau_a_restore_C2M0_k_p_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%;
a_times_dtau_a_restore_C2M0_k_Y_yk__ = zeros(n_lm_max,n_k_p_r);
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
a_times_dtau_a_restore_C2M0_k_Y_yk__(1:n_lm,1+nk_p_r) = a_times_dtau_a_restore_C2M0_k_Y_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;

%%%%%%%%;
% determine expansion for dvol_a_times_a_restore_C2M0_k_Y_yk__. ;
%%%%%%%%;
[ ...
 dvol_a_times_a_restore_C2M0_k_Y_yk_ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,dvol_a_k_p_quad_.*a_restore_C2M0_k_p_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
%%%%;
dvol_a_times_a_restore_C2M0_k_Y_yk__ = zeros(n_lm_max,n_k_p_r);
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
dvol_a_times_a_restore_C2M0_k_Y_yk__(1:n_lm,1+nk_p_r) = dvol_a_times_a_restore_C2M0_k_Y_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;

%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% comparing Hvv (reasonably accurate): ')); end;
%%%%%%%%;
Hvv_q3d = ...
 + 1.0 * sum( (conj(dvol_a_dvol_a_k_Y_quad_yk__) .* a_restore_C2M0_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) ) ...
;
if (flag_verbose>0); disp(sprintf(' %% Hvv_q3d: %0.16f',Hvv_q3d)); end;
Hvv_q3d = ...
 + 1.0 * sum( (conj(dvol_a_k_Y_form_yk__) .* dvol_a_times_a_restore_C2M0_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) ) ...
;
if (flag_verbose>0); disp(sprintf(' %% Hvv_q3d: %0.16f',Hvv_q3d)); end;
Hvv_q3d = ...
 + 1.0 * sum( conj(dvol_a_k_Y_form_yk__) .* bsxfun(@times,dvol_a_times_a_restore_C2M0_k_Y_yk__,reshape(weight_3d_riesz_k_p_r_,[1,n_k_p_r])) , 'all' ) ...
;
if (flag_verbose>0); disp(sprintf(' %% Hvv_q3d: %0.16f',Hvv_q3d)); end;
Hvv_q3d = ...
 + 1.0 * sum( (conj(dvol_a_k_p_quad_) .* dvol_a_k_p_quad_ .* a_restore_C2M0_k_p_quad_) .* weight_3d_riesz_k_all_ ) ...
;
if (flag_verbose>0); disp(sprintf(' %% Hvv_q3d: %0.16f',Hvv_q3d)); end;

%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% comparing first-derivative (reasonably accurate): ')); end;
%%%%%%%%;
dvol_ssnll_q2d = dvol_ssnll_q2d; %<-- calculated via ssnll_from_a_k_Y_12;
if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_pw1 vs dvol_ssnll_q2d: %0.16f',fnorm(dvol_ssnll_pw1 - dvol_ssnll_q2d)/max(1e-12,fnorm(dvol_ssnll_pw1)))); end;
%%%%%%%%;
dvol_ssnll_q3d = + 1.0 * sum( ( conj(a_k_p_quad_) .* (a_restore_C2M0_k_p_quad_) - conj(a_restore_C1M1_k_p_quad_) ) .* dvol_a_k_p_quad_ .* weight_3d_riesz_k_all_ );
dvol_ssnll_q3d = dvol_ssnll_q3d / scaling_volumetric ;
if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_pw1 vs dvol_ssnll_q3d: %0.16f',fnorm(dvol_ssnll_pw1 - dvol_ssnll_q3d)/max(1e-12,fnorm(dvol_ssnll_pw1)))); end;
%%%%%%%%;
dvol_ssnll_q3d = + 1.0 * sum( ( conj(a_times_a_restore_C2M0_k_Y_yk__) - conj(a_restore_C1M1_k_Y_yk__) ) .* dvol_a_k_Y_form_yk__ * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) );
dvol_ssnll_q3d = dvol_ssnll_q3d / scaling_volumetric ;
if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_pw1 vs dvol_ssnll_q3d: %0.16f',fnorm(dvol_ssnll_pw1 - dvol_ssnll_q3d)/max(1e-12,fnorm(dvol_ssnll_pw1)))); end;
%%%%%%%%;
dtau_ssnll_q2d = sum(dtau_ssnll_q2d_M3__.*dtau_M3__,'all');
if (flag_verbose>0); disp(sprintf(' %% dtau_ssnll_pw1 vs dtau_ssnll_q2d: %0.16f',fnorm(dtau_ssnll_pw1 - dtau_ssnll_q2d)/max(1e-12,fnorm(dtau_ssnll_pw1)))); end;
%%%%%%%%;
dtau_ssnll_q3d = ...
 + 0.5 * sum( (conj(aa_k_Y_quad_yk__) .* dtau_a_restore_C2M0_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) ) ...
 - 0.5 * 2*real(sum( (conj(a_k_Y_form_yk__).^1 .* dtau_a_restore_C1M1_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) )) ...
 + 0.5 * sum( dtau_a_restore_C0M2_k_Y_yk__(1+0,:) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1])*sqrt(4*pi) ) ...
;
dtau_ssnll_q3d = dtau_ssnll_q3d / scaling_volumetric ;
if (flag_verbose>0); disp(sprintf(' %% dtau_ssnll_pw1 vs dtau_ssnll_q3d: %0.16f',fnorm(dtau_ssnll_pw1 - dtau_ssnll_q3d)/max(1e-12,fnorm(dtau_ssnll_pw1)))); end;
%%%%%%%%;
dtau_ssnll_q3d = ...
 + 0.5 * sum( abs(a_k_p_quad_).^2 .* dtau_a_restore_C2M0_k_p_quad_ .* weight_3d_riesz_k_all_ ) ...
 - 0.5 * 2*real(sum( conj(a_k_p_quad_).^1 .* dtau_a_restore_C1M1_k_p_quad_ .* weight_3d_riesz_k_all_ )) ...
 + 0.5 * sum( dtau_a_restore_C0M2_k_p_quad_ .* weight_3d_riesz_k_all_ ) ...
  ;
dtau_ssnll_q3d = dtau_ssnll_q3d / scaling_volumetric ;
if (flag_verbose>0); disp(sprintf(' %% dtau_ssnll_pw1 vs dtau_ssnll_q3d: %0.16f',fnorm(dtau_ssnll_pw1 - dtau_ssnll_q3d)/max(1e-12,fnorm(dtau_ssnll_pw1)))); end;
%%%%%%%%;
dtau_ssnll_q3d = ...
 + 0.5 * sum( (conj(a_k_Y_form_yk__).^1 .* a_times_dtau_a_restore_C2M0_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) ) ...
 - 0.5 * 2*real(sum( (conj(a_k_Y_form_yk__).^1 .* dtau_a_restore_C1M1_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) )) ...
 + 0.5 * sum( dtau_a_restore_C0M2_k_Y_yk__(1+0,:) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1])*sqrt(4*pi) ) ...
;
dtau_ssnll_q3d = dtau_ssnll_q3d / scaling_volumetric ;
if (flag_verbose>0); disp(sprintf(' %% dtau_ssnll_pw1 vs dtau_ssnll_q3d: %0.16f',fnorm(dtau_ssnll_pw1 - dtau_ssnll_q3d)/max(1e-12,fnorm(dtau_ssnll_pw1)))); end;
%%%%%%%%;

%%%%%%%%;
% Now repeat the same calculations within dssnll_1. ;
%%%%%%%%;
parameter_dssnll = struct('type','parameter');
parameter_dssnll.flag_verbose = flag_verbose;
parameter_dssnll.flag_disp = 0;
parameter_dssnll.flag_check = 0;
parameter_dssnll.flag_kernel_qpro_d0 = parameter_KAPPA.flag_kernel_qpro_d0;
parameter_dssnll.flag_kernel_qpro_d1 = parameter_KAPPA.flag_kernel_qpro_d1;
parameter_dssnll.kernel_qpro_polar_a_pole_north = parameter_KAPPA.kernel_qpro_polar_a_pole_north;
parameter_dssnll.kernel_qpro_polar_a_pole_south = parameter_KAPPA.kernel_qpro_polar_a_pole_south;
parameter_dssnll.kernel_qpro_l_max_use = parameter_KAPPA.kernel_qpro_l_max_use;
parameter_dssnll.kernel_qpro_qref_k_eq_d_double = parameter_KAPPA.kernel_qpro_qref_k_eq_d_double;
parameter_dssnll.flag_kernel_full = parameter_KAPPA.flag_kernel_full;
a_k_Y_quad_yk_ = a_k_Y_form_yk_;
a_k_Y_quad_yk__ = a_k_Y_form_yk__;
[ ...
 parameter_dssnll ...
,G_bar_ykabc_ ...
,dvol_ssnll_q3d_k_Y_yk_ ...
,dtau_ssnll_q2d_M3__ ...
] = ...
dssnll_1( ...
 parameter_dssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_quad_yk_ ...
,a_k_Y_quad_yk__ ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,weight_3d_k_p_r_ ...
,a_k_p_quad_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,S_k_p_q2d_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_r_kC__ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_r_ke__ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,KAPPA ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
);

%%%%%%%%;
% Now calculate the difference-quotient and compare. ;
%%%%%%%%;
dvt_ykabc_ = local_ykabc_from_yk_a_b_c_(n_k_p_r,l_max_,n_M,dvol_a_k_Y_form_yk_,dtau_euler_polar_a_M_,dtau_euler_azimu_b_M_,dtau_euler_gamma_z_M_);
dvt_ykabc_l2 = local_f_bar_dot_g_(n_k_p_r,weight_3d_riesz_k_p_r_,l_max_,n_M,dvt_ykabc_,dvt_ykabc_);
dssnll_mid_q2d = local_f_bar_dot_g_(n_k_p_r,weight_3d_riesz_k_p_r_,l_max_,n_M,G_bar_ykabc_,dvt_ykabc_);
if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_pw1 + dtau_ssnll_pw1 vs dssnll_mid_q2d: %0.16f',fnorm(dvol_ssnll_pw1 + dtau_ssnll_pw1 -dssnll_mid_q2d)/max(1e-12,fnorm(dvol_ssnll_pw1 + dtau_ssnll_pw1)))); end;
%%%%;
dvt = 1e-3;
dvt_ = transpose(-8:+8);
n_dvt = numel(dvt_);
ssnll_tmp_q2d_dvt_ = zeros(n_dvt,1);
%%%%;
for ndvt=0:n_dvt-1;
if (flag_verbose>0); disp(sprintf(' %% ndvt %d/%d',ndvt,n_dvt)); end;
[ ...
 ~ ...
,~ ...
,ssnll_tmp_q2d_dvt_(1+ndvt) ...
] = ...
ssnll_from_a_k_Y_12( ...
 parameter_ssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_form_yk__ + 1.0*dvt*dvt_(1+ndvt)*dvol_a_k_Y_form_yk__...
,[] ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ + 1.0*dvt*dvt_(1+ndvt)*dtau_euler_polar_a_M_ ...
,euler_azimu_b_M_ + 1.0*dvt*dvt_(1+ndvt)*dtau_euler_azimu_b_M_...
,euler_gamma_z_M_ + 1.0*dvt*dvt_(1+ndvt)*dtau_euler_gamma_z_M_...
,[] ...
,[] ...
,[] ...
);
end;%for ndvt=0:n_dvt-1;
%%%%;
ssnll_mid_q2d = ssnll_tmp_q2d_dvt_((1+n_dvt)/2);
ssnll_pos_q2d = ssnll_tmp_q2d_dvt_((1+n_dvt)/2+1);
ssnll_neg_q2d = ssnll_tmp_q2d_dvt_((1+n_dvt)/2-1);
dssnll_dif_q2d = (ssnll_pos_q2d - ssnll_neg_q2d)/max(1e-12,2*dvt);
if (flag_verbose>0); disp(sprintf(' %% dssnll_dif_q2d vs dssnll_mid_q2d: %0.16f',fnorm(dssnll_dif_q2d -dssnll_mid_q2d)/max(1e-12,fnorm(dssnll_dif_q2d)))); end;
%%%%;
tmp_x_ = dvt*dvt_;
tmp_y_ = real(ssnll_tmp_q2d_dvt_);
tmp_x4 = sum(tmp_x_.^4);
tmp_x3 = sum(tmp_x_.^3);
tmp_x2 = sum(tmp_x_.^2);
tmp_x1 = sum(tmp_x_.^1);
tmp_x0 = sum(tmp_x_.^0);
tmp_yx2 = sum(tmp_y_.*tmp_x_.^2);
tmp_yx1 = sum(tmp_y_.*tmp_x_.^1);
tmp_yx0 = sum(tmp_y_.*tmp_x_.^0);
tmp_lhs_ = [ ...
 tmp_x4 tmp_x3 tmp_x2 ...
;tmp_x3 tmp_x2 tmp_x1 ...
;tmp_x2 tmp_x1 tmp_x0 ...
];
tmp_rhs_ = [ tmp_yx2 ; tmp_yx1 ; tmp_yx0 ];
tmp_p_ = tmp_lhs_\tmp_rhs_;
tmp_p_x_ = polyval(tmp_p_,tmp_x_);
%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figsml;
markersize_use = 12;
linewidth_use = 2;
hold on;
plot(tmp_x_,tmp_p_x_,'k-','LineWidth',linewidth_use);
plot(tmp_x_,ssnll_tmp_q2d_dvt_,'ko','MarkerSize',markersize_use,'MarkerFaceColor','c');
xlabel('dvt_','Interpreter','none');
ylabel('ssnll_tmp_q2d_dvt_','Interpreter','none');
end;%if flag_disp;
%%%%;
dssnll_lsq_q2d = 1.0*tmp_p_(1+1);
if (flag_verbose>0); disp(sprintf(' %% dssnll_lsq_q2d vs dssnll_mid_q2d: %0.16f',fnorm(dssnll_lsq_q2d -dssnll_mid_q2d)/max(1e-12,fnorm(dssnll_lsq_q2d)))); end;
%%%%%%%%;

n_M_expand = 2*n_M;
weight_imagecount_M_ = rand(n_M,1);
weight_imagecount_M_expand_ = [weight_imagecount_M_;1-weight_imagecount_M_];
M_expand_k_p_wkM__ = repmat(M_k_p_wkM__,[1,2]);
index_nCTF_from_nM_expand_ = repmat(index_nCTF_from_nM_,[2,1]);
index_neta_from_nM_expand_ = repmat(index_neta_from_nM_,[2,1]);
euler_polar_a_M_expand_ = repmat(euler_polar_a_M_,[2,1]);
euler_azimu_b_M_expand_ = repmat(euler_azimu_b_M_,[2,1]);
euler_gamma_z_M_expand_ = repmat(euler_gamma_z_M_,[2,1]);
dtau_euler_polar_a_M_expand_ = repmat(dtau_euler_polar_a_M_,[2,1]);
dtau_euler_azimu_b_M_expand_ = repmat(dtau_euler_azimu_b_M_,[2,1]);
dtau_euler_gamma_z_M_expand_ = repmat(dtau_euler_gamma_z_M_,[2,1]);

%%%%%%%%;
% Now repeat the same calculations within dssnll_2. ;
%%%%%%%%;
parameter_dssnll = struct('type','parameter');
parameter_dssnll.flag_verbose = flag_verbose;
parameter_dssnll.flag_disp = 0;
parameter_dssnll.flag_check = 0;
parameter_dssnll.flag_kernel_qpro_d0 = parameter_KAPPA.flag_kernel_qpro_d0;
parameter_dssnll.flag_kernel_qpro_d1 = parameter_KAPPA.flag_kernel_qpro_d1;
parameter_dssnll.kernel_qpro_polar_a_pole_north = parameter_KAPPA.kernel_qpro_polar_a_pole_north;
parameter_dssnll.kernel_qpro_polar_a_pole_south = parameter_KAPPA.kernel_qpro_polar_a_pole_south;
parameter_dssnll.kernel_qpro_l_max_use = parameter_KAPPA.kernel_qpro_l_max_use;
parameter_dssnll.kernel_qpro_qref_k_eq_d_double = parameter_KAPPA.kernel_qpro_qref_k_eq_d_double;
parameter_dssnll.flag_kernel_full = parameter_KAPPA.flag_kernel_full;
a_k_Y_quad_yk_ = a_k_Y_form_yk_;
a_k_Y_quad_yk__ = a_k_Y_form_yk__;
[ ...
 parameter_dssnll ...
,G_expand_bar_ykabc_ ...
,dvol_expand_ssnll_q3d_k_Y_yk_ ...
,dtau_expand_ssnll_q2d_M3__ ...
] = ...
dssnll_2( ...
 parameter_dssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_quad_yk_ ...
,a_k_Y_quad_yk__ ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,weight_3d_k_p_r_ ...
,a_k_p_quad_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,S_k_p_q2d_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M_expand ...
,weight_imagecount_M_expand_ ...
,M_expand_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_expand_ ...
,CTF_k_p_r_kC__ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_expand_ ...
,eta_k_p_r_ke__ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_expand_ ...
,euler_azimu_b_M_expand_ ...
,euler_gamma_z_M_expand_ ...
,KAPPA ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
);

dvt_expand_ykabc_ = local_ykabc_from_yk_a_b_c_(n_k_p_r,l_max_,n_M_expand,dvol_a_k_Y_form_yk_,dtau_euler_polar_a_M_expand_,dtau_euler_azimu_b_M_expand_,dtau_euler_gamma_z_M_expand_);
dvt_expand_ykabc_l2 = local_imagecount_f_bar_dot_g_(n_k_p_r,weight_3d_riesz_k_p_r_,l_max_,n_M_expand,weight_imagecount_M_expand_,dvt_expand_ykabc_,dvt_expand_ykabc_);
dssnll_expand_mid_q2d = local_imagecount_f_bar_dot_g_(n_k_p_r,weight_3d_riesz_k_p_r_,l_max_,n_M_expand,weight_imagecount_M_expand_,G_expand_bar_ykabc_,dvt_expand_ykabc_);
if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_q3d_k_Y_yk_ vs dvol_expand_ssnll_q3d_k_Y_yk_: %0.16f',fnorm(dvol_ssnll_q3d_k_Y_yk_-dvol_expand_ssnll_q3d_k_Y_yk_)/max(1e-12,fnorm(dvol_ssnll_q3d_k_Y_yk_)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvt_ykabc_l2 vs dvt_expand_ykabc_l2: %0.16f',fnorm(dvt_ykabc_l2-dvt_expand_ykabc_l2)/max(1e-12,fnorm(dvt_ykabc_l2)))); end;
if (flag_verbose>0); disp(sprintf(' %% dssnll_mid_q2d vs dssnll_expand_mid_q2d: %0.16f',fnorm(dssnll_mid_q2d-dssnll_expand_mid_q2d)/max(1e-12,fnorm(dssnll_mid_q2d)))); end;

%disp(sprintf(' %% returning prior to testing second-derivative')); return;

%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% comparing second-derivative (not as accurate): ')); end;
%%%%%%%%;
dtau_dtau_ssnll_q3d = ...
 + 0.5 * sum( (conj(aa_k_Y_quad_yk__) .* dtau_dtau_a_restore_C2M0_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) ) ...
 - 0.5 * 2*real(sum( (conj(a_k_Y_form_yk__).^1 .* dtau_dtau_a_restore_C1M1_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) )) ...
 + 0.5 * sum( dtau_dtau_a_restore_C0M2_k_Y_yk__(1+0,:) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1])*sqrt(4*pi) ) ...
;
dtau_dtau_ssnll_q3d = dtau_dtau_ssnll_q3d / scaling_volumetric ;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_ssnll_pw1 vs dtau_dtau_ssnll_q3d: %0.16f',fnorm(dtau_dtau_ssnll_pw1 - dtau_dtau_ssnll_q3d)/max(1e-12,fnorm(dtau_dtau_ssnll_pw1)))); end;
%%%%%%%%;
dtau_dtau_ssnll_q3d = ...
 + 0.5 * sum( abs(a_k_p_quad_).^2 .* dtau_dtau_a_restore_C2M0_k_p_quad_ .* weight_3d_riesz_k_all_ ) ...
 - 0.5 * 2*real(sum( conj(a_k_p_quad_).^1 .* dtau_dtau_a_restore_C1M1_k_p_quad_ .* weight_3d_riesz_k_all_ )) ...
 + 0.5 * sum( dtau_dtau_a_restore_C0M2_k_p_quad_ .* weight_3d_riesz_k_all_ ) ...
  ;
dtau_dtau_ssnll_q3d = dtau_dtau_ssnll_q3d / scaling_volumetric ;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_ssnll_pw1 vs dtau_dtau_ssnll_q3d: %0.16f',fnorm(dtau_dtau_ssnll_pw1 - dtau_dtau_ssnll_q3d)/max(1e-12,fnorm(dtau_dtau_ssnll_pw1)))); end;
%%%%%%%%;

%%%%%%%%;
% Now construct hessian. ;
%%%%%%%%;
%{
  % As indicated via the above calculation: ;
  ssnll_q3d = ...
    + 0.5 * sum( conj(a_k_p_quad_) .* (a_k_p_quad_) .* a_restore_C2M0_k_p_quad_ .* weight_3d_riesz_k_all_ ) ...
    - 0.5 * sum( conj(a_k_p_quad_) .* a_restore_C1M1_k_p_quad_ .* weight_3d_riesz_k_all_ ) ...
    - 0.5 * sum( conj(a_restore_C1M1_k_p_quad_) .* (a_k_p_quad_) .* weight_3d_riesz_k_all_ ) ...
    + 0.5 * sum( a_restore_C0M2_k_p_quad_ .* weight_3d_riesz_k_all_ ) ...
    ;
  ssnll_q3d = ssnll_q3d / scaling_volumetric ;
  % rewriting this as: ;
  ssnll_q3d = ...
    + 0.5 * sum( conj(a_) .* (a_) .* C2M0_ .* w_ ) ...
    - 0.5 * sum( conj(a_) .* C1M1_ .* w_ ) ...
    - 0.5 * sum( conj(C1M1_) .* (a_) .* w_ ) ...
    + 0.5 * sum( C0M2_ .* w_ ) ...
    ;
  ssnll_q3d = ssnll_q3d / scaling_volumetric ;
  % we have: ;
  ssnll_q3d = ...
    + 0.5 * sum( conj(a_ + dvol_) .* (a_ + dvol_) .* (C2M0_ + dtau_C2M0_*dtau_ + 0.5*ctranspose(dtau_)*dtau_dtau_C2M0__*(dtau_)) .* w_ ) ...
    - 0.5 * sum( conj(a_ + dvol_) .* (C1M1_ + dtau_C1M1_*dtau_ + 0.5*ctranspose(dtau_)*dtau_dtau_C1M1__*(dtau_)) .* w_ ) ...
    - 0.5 * sum( conj(C1M1_ + dtau_C1M1_*dtau_ + 0.5*ctranspose(dtau_)*dtau_dtau_C1M1__*(dtau_)) .* (a_ + dvol_) .* w_ ) ...
    + 0.5 * sum( (C0M2_ + dtau_C0M2_*dtau_ + 0.5*ctranspose(dtau_)*dtau_dtau_C0M2__*(dtau_)) .* w_ ) ...
    ;
  ssnll_q3d = ssnll_q3d / scaling_volumetric ;
  % where we assume: ;
  % 1. dvol_ is a perturbation of the form dvol_k_p_quad_, ;
  % 2. dtau_ is a perturbation of the form dtau_M3__, ;
  % 3. dtau_CXMX_ is a jacobian (i.e., of the form dtau_CXMX_M3__), and ;
  % 4. dtau_dtau_CXMX__ is a hessian (i.e., of the form dtau_dtau_CXMX_M33__). ;
  % Using this notation, we can expand and retain terms of order 2 and lower: ;
  ssnll_q3d = ...
    ...
    + 0.5 * sum( conj(a_) .* (a_) .* (C2M0_) .* w_ ) ...
    + 0.5 * sum( conj(dvol_) .* (a_) .* (C2M0_) .* w_ ) ...
    + 0.5 * sum( conj(a_) .* (dvol_) .* (C2M0_) .* w_ ) ...
    + 0.5 * sum( conj(a_) .* (a_) .* (dtau_C2M0_*dtau_) .* w_ ) ...
    + 0.5 * sum( conj(dvol_) .* (dvol_) .* (C2M0_) .* w_ ) ...
    + 0.5 * sum( conj(dvol_) .* (a_) .* (dtau_C2M0_*dtau_) .* w_ ) ...
    + 0.5 * sum( conj(a_) .* (dvol_) .* (dtau_C2M0_*dtau_) .* w_ ) ...
    + 0.5 * sum( conj(a_) .* (a_ ) .* (0.5*ctranspose(dtau_)*dtau_dtau_C2M0__*(dtau_)) .* w_ ) ...
    ...
    - 0.5 * sum( conj(a_) .* (C1M1_) .* w_ ) ...
    - 0.5 * sum( conj(dvol_) .* (C1M1_) .* w_ ) ...
    - 0.5 * sum( conj(a_) .* (dtau_C1M1_*dtau_) .* w_ ) ...
    - 0.5 * sum( conj(dvol_) .* (dtau_C1M1_*dtau_) .* w_ ) ...
    - 0.5 * sum( conj(a_) .* (0.5*ctranspose(dtau_)*dtau_dtau_C1M1__*(dtau_)) .* w_ ) ...
    ...
    - 0.5 * sum( conj(C1M1_) .* (a_) .* w_ ) ...
    - 0.5 * sum( conj(C1M1_) .* (dvol_) .* w_ ) ...
    - 0.5 * sum( conj(dtau_C1M1_*dtau_) .* (a_) .* w_ ) ...
    - 0.5 * sum( conj(dtau_C1M1_*dtau_) .* (dvol_) .* w_ ) ...
    - 0.5 * sum( conj(0.5*ctranspose(dtau_)*dtau_dtau_C1M1__*(dtau_)) .* (a_) .* w_ ) ...
    ...
    + 0.5 * sum( (C0M2_) .* w_ ) ...
    + 0.5 * sum( (dtau_C0M2_*dtau_) .* w_ ) ...
    + 0.5 * sum( (0.5*ctranspose(dtau_)*dtau_dtau_C0M2__*(dtau_)) .* w_ ) ...
    ...
    ;
  ssnll_q3d = ssnll_q3d / scaling_volumetric ;
  % Combining terms of like order: ;
  ssnll_q3d = ...
    ...
    + 0.5 * sum( conj(a_) .* (a_) .* (C2M0_) .* w_ ) ...
    - 0.5 * sum( conj(a_) .* (C1M1_) .* w_ ) ...
    - 0.5 * sum( conj(C1M1_) .* (a_) .* w_ ) ...
    + 0.5 * sum( (C0M2_) .* w_ ) ...
    ...
    + 0.5 * sum( conj(dvol_) .* (a_) .* (C2M0_) .* w_ ) ...
    + 0.5 * sum( conj(a_) .* (dvol_) .* (C2M0_) .* w_ ) ...
    + 0.5 * sum( conj(a_) .* (a_) .* (dtau_C2M0_*dtau_) .* w_ ) ...
    - 0.5 * sum( conj(dvol_) .* (C1M1_) .* w_ ) ...
    - 0.5 * sum( conj(a_) .* (dtau_C1M1_*dtau_) .* w_ ) ...
    - 0.5 * sum( conj(C1M1_) .* (dvol_) .* w_ ) ...
    - 0.5 * sum( conj(dtau_C1M1_*dtau_) .* (a_) .* w_ ) ...
    + 0.5 * sum( (dtau_C0M2_*dtau_) .* w_ ) ...
    ...
    + 0.5 * sum( conj(dvol_) .* (dvol_) .* (C2M0_) .* w_ ) ...
    + 0.5 * sum( conj(dvol_) .* (a_) .* (dtau_C2M0_*dtau_) .* w_ ) ...
    + 0.5 * sum( conj(a_) .* (dvol_) .* (dtau_C2M0_*dtau_) .* w_ ) ...
    + 0.5 * sum( conj(a_) .* (a_ ) .* (0.5*ctranspose(dtau_)*dtau_dtau_C2M0__*(dtau_)) .* w_ ) ...
    - 0.5 * sum( conj(dvol_) .* (dtau_C1M1_*dtau_) .* w_ ) ...
    - 0.5 * sum( conj(a_) .* (0.5*ctranspose(dtau_)*dtau_dtau_C1M1__*(dtau_)) .* w_ ) ...
    - 0.5 * sum( conj(dtau_C1M1_*dtau_) .* (dvol_) .* w_ ) ...
    - 0.5 * sum( conj(0.5*ctranspose(dtau_)*dtau_dtau_C1M1__*(dtau_)) .* (a_) .* w_ ) ...
    + 0.5 * sum( (0.5*ctranspose(dtau_)*dtau_dtau_C0M2__*(dtau_)) .* w_ ) ...
    ...
    ;
  ssnll_q3d = ssnll_q3d / scaling_volumetric ;
  % From this expansion we can extract the gradient as a linear-operator acting on [dvol_;dtau_]: ;
  Gradient of ssnll_q3d = ...
      + 1.0 * real(sum( [ conj(a_) .* (C2M0_) - conj(C1M1) ] .* (dvol_) .* w_ )) ...
      - 1.0 * real(sum( [ conj(a_).*dtau_C1M1_ - 0.5*conj(a_).*a_.*dtau_C2M0_ - 0.5*dtau_C0M2_ ] * (dtau_) .* w_ )) ...
    ;
  Gradient of ssnll_q3d = Gradient of ssnll_q3d / scaling_volumetric ;
  % Similarly, we can extract the hessian as a quadratic-kernel acting on [dvol_;dtau_]: ;
  Hessian of ssnll_q3d = ...
    [ctranspose(dvol_) , ctranspose(dtau_)] * [ H ] * [dvol_;dtau_] ...
    ;
  % where the matrix H is a block-matrix with components: ;
  %      [ Hvv | Hvt ]  ;
  %  H = [-----+-----]  ;
  %      [ Htv | Htt ]  ;
  % Such That: ;
  Hvv = Quadratic-Kernel acting on dvol_ = + 1.0 * sum( conj(dvol_) .* (C2M0_) .* (dvol_) .* w_ ) / scaling_volumetric ;
  Htt = quadratic-kernel acting on dtau_ = ...
    + 1.0 * sum( conj(a_) .* (a_ ) .* (0.5*ctranspose(dtau_)*dtau_dtau_C2M0__*(dtau_)) .* w_ ) ...
    - 1.0 * sum( conj(a_) .* (0.5*ctranspose(dtau_)*dtau_dtau_C1M1__*(dtau_)) .* w_ ) ...
    - 1.0 * sum( conj(0.5*ctranspose(dtau_)*dtau_dtau_C1M1__*(dtau_)) .* (a_) .* w_ ) ...
    + 1.0 * sum( (0.5*ctranspose(dtau_)*dtau_dtau_C0M2__*(dtau_)) .* w_ ) ...
    ;
  Htt = Htt / scaling_volumetric ;
  % Note that, via ssnll_from_a_k_Y_12, Htt can be rewritten in the simpler form: ;
  Htt = sum( dtau_M3__(1+nM,1+ntau0) * dtau_dtau_ssnll_q2d_M33___(1+nM,1+ntau0,1+ntau1) * dtau_M3__(1+nM,1+ntau1) ). ;
  % The operator Hvt has a domain compatible with dtau_ and a range compatible with dvol_. ;
  Hvt = ...
    + 1.0 * sum( conj(dvol_) .* (a_) .* (dtau_C2M0_*dtau_) .* w_ ) ...
    - 1.0 * sum( conj(dvol_) .* (dtau_C1M1_*dtau_) .* w_ ) ...
    ;
  Hvt = Hvt / scaling_volumetric ;
  % Note that, given the output of kappa_qpro_apply_2, we can rewrite Hvt as:
  Hvt = ...
      + 1.0 * sum( conj(dvol_) .* (a_) .* (|dtau| * dtau_a_restore_C2M0_k_p_quad_) .* w_ ) ...
      - 1.0 * sum( conj(dvol_) .* (|dtau| * dtau_a_restore_C1M1_k_p_quad_) .* w_ ) ...
      ;
  Hvt = Hvt / scaling_volumetric ;
  % The operator Htv has a domain compatible with dvol_ and a range compatible with dtau_. ;
  Htv = ...
    + 1.0 * sum( conj(dtau_C2M0_*dtau_) .* conj(a_) .* (dvol_) .* w_ ) ...
    - 1.0 * sum( conj(dtau_C1M1_*dtau_) .* (dvol_) .* w_ ) ...
    ;
  Htv = Htv / scaling_volumetric ;
  % Note that, via ssnll_from_a_k_Y_12, Htv can be rewritten in the simpler form: ;
  Htv = sum( dtau_M3__(1+nM,1+ntau1) * dtau_dvol_ssnll_q2d_M3__(1+nM,1+ntau1) ). ;
 %}
%%%%%%%%;
dtau_M33___ = bsxfun(@times,reshape(dtau_M3__,[n_M,3,1]),reshape(dtau_M3__,[n_M,1,3]));
Htt_q2d = sum( dtau_dtau_ssnll_q2d_M33___ .* dtau_M33___ , 'all' ) ;
Htt_q3d = ...
  + 1.0 * sum( conj(a_k_p_quad_) .* (a_k_p_quad_ ) .* (0.5*dtau_dtau_a_restore_C2M0_k_p_quad_) .* weight_3d_riesz_k_all_ ) ...
  - 1.0 * sum( conj(a_k_p_quad_) .* (0.5*dtau_dtau_a_restore_C1M1_k_p_quad_) .* weight_3d_riesz_k_all_ ) ...
  - 1.0 * sum( conj(0.5*dtau_dtau_a_restore_C1M1_k_p_quad_) .* (a_k_p_quad_) .* weight_3d_riesz_k_all_ ) ...
  + 1.0 * sum( (0.5*dtau_dtau_a_restore_C0M2_k_p_quad_) .* weight_3d_riesz_k_all_ ) ...
  ;
Htt_q3d = Htt_q3d / scaling_volumetric ;
if (flag_verbose>0); disp(sprintf(' %% Htt_q2d vs Htt_q3d: %0.16f',fnorm(Htt_q2d - Htt_q3d)/max(1e-12,fnorm(Htt_q2d)))); end;
%%%%%%%%;
Htv_q3d = ...
  + 1.0 * sum( conj(dtau_a_restore_C2M0_k_p_quad_) .* conj(a_k_p_quad_) .* (dvol_a_k_p_quad_) .* weight_3d_riesz_k_all_ ) ...
  - 1.0 * sum( conj(dtau_a_restore_C1M1_k_p_quad_) .* (dvol_a_k_p_quad_) .* weight_3d_riesz_k_all_ ) ...
  ;
Htv_q3d = Htv_q3d / scaling_volumetric ;
Htv_q2d = sum( dtau_M3__ .* dtau_dvol_ssnll_q2d_M3__ , 'all' );
if (flag_verbose>0); disp(sprintf(' %% Htv_q2d vs Htv_q3d: %0.16f',fnorm(Htv_q2d - Htv_q3d)/max(1e-12,fnorm(Htv_q2d)))); end;
%%%%%%%%;
Hvt_q3d = ...
  + 1.0 * sum( conj(dvol_a_k_p_quad_) .* (a_k_p_quad_) .* (dtau_a_restore_C2M0_k_p_quad_) .* weight_3d_riesz_k_all_ ) ...
  - 1.0 * sum( conj(dvol_a_k_p_quad_) .* (dtau_a_restore_C1M1_k_p_quad_) .* weight_3d_riesz_k_all_ ) ...
  ;
Hvt_q3d = Hvt_q3d / scaling_volumetric ;
Hvt_q2d = Htv_q2d ; %<-- due to symmetry. ;
if (flag_verbose>0); disp(sprintf(' %% Hvt_q2d vs Hvt_q3d: %0.16f',fnorm(Hvt_q2d - Hvt_q3d)/max(1e-12,fnorm(Hvt_q2d)))); end;
%%%%%%%%;
dvol_a_k_Y_form_yk__ = zeros(n_lm_max,n_k_p_r);
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
dvol_a_k_Y_form_yk__(1:n_lm,1+nk_p_r) = dvol_a_k_Y_form_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%;
Hvt_q3d = ...
  + 1.0 * sum( (conj(dvol_a_k_Y_form_yk__) .* a_times_dtau_a_restore_C2M0_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) ) ...
  - 1.0 * sum( (conj(dvol_a_k_Y_form_yk__) .* dtau_a_restore_C1M1_k_Y_yk__) * reshape(weight_3d_riesz_k_p_r_,[n_k_p_r,1]) ) ...
  ;
Hvt_q3d = Hvt_q3d / scaling_volumetric ;
Hvt_q2d = Htv_q2d ; %<-- due to symmetry. ;
if (flag_verbose>0); disp(sprintf(' %% Hvt_q2d vs Hvt_q3d: %0.16f',fnorm(Hvt_q2d - Hvt_q3d)/max(1e-12,fnorm(Hvt_q2d)))); end;
%%%%%%%%;

%%%%%%%%;
% Now repeat the same calculations within ddssnll_1. ;
%%%%%%%%;
parameter_ddssnll = struct('type','parameter');
parameter_ddssnll.flag_verbose = flag_verbose;
parameter_ddssnll.flag_disp = 1;
parameter_ddssnll.flag_check = 1;
parameter_ddssnll.flag_kernel_qpro_d0 = parameter_KAPPA.flag_kernel_qpro_d0;
parameter_ddssnll.flag_kernel_qpro_d1 = parameter_KAPPA.flag_kernel_qpro_d1;
parameter_ddssnll.kernel_qpro_polar_a_pole_north = parameter_KAPPA.kernel_qpro_polar_a_pole_north;
parameter_ddssnll.kernel_qpro_polar_a_pole_south = parameter_KAPPA.kernel_qpro_polar_a_pole_south;
parameter_ddssnll.kernel_qpro_l_max_use = parameter_KAPPA.kernel_qpro_l_max_use;
parameter_ddssnll.kernel_qpro_qref_k_eq_d_double = parameter_KAPPA.kernel_qpro_qref_k_eq_d_double;
parameter_ddssnll.flag_kernel_full = parameter_KAPPA.flag_kernel_full;
a_k_Y_quad_yk_ = a_k_Y_form_yk_;
a_k_Y_quad_yk__ = a_k_Y_form_yk__;
dvol_a_k_Y_quad_yk_ = dvol_a_k_Y_form_yk_;
dvol_a_k_Y_quad_yk__ = dvol_a_k_Y_form_yk__;
[ ...
 ~ ...
,Hvt_ykabc_ ...
,Hv_q3d_k_Y_quad_yk_ ...
,Hv_q3d_k_Y_quad_yk__ ...
,Hv_q3d_k_p_quad_ ...
,Ht_q2d_M3__ ...
] = ...
ddssnll_1( ...
 parameter_ddssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_quad_yk_ ...
,a_k_Y_quad_yk__ ...
,dvol_a_k_Y_quad_yk_ ...
,dvol_a_k_Y_quad_yk__ ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,weight_3d_k_p_r_ ...
,a_k_p_quad_ ...
,dvol_a_k_p_quad_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,S_k_p_q2d_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_r_kC__ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_r_ke__ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
,KAPPA ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
);

%%%%%%%%;
% Now calculate the difference-quotient and compare. ;
%%%%%%%%;
dvt_ykabc_ = local_ykabc_from_yk_a_b_c_(n_k_p_r,l_max_,n_M,dvol_a_k_Y_quad_yk_,dtau_euler_polar_a_M_,dtau_euler_azimu_b_M_,dtau_euler_gamma_z_M_);
dvt_ykabc_l2 = local_f_bar_dot_g_(n_k_p_r,weight_3d_riesz_k_p_r_,l_max_,n_M,dvt_ykabc_,dvt_ykabc_);
ddssnll_mid_q2d = local_f_bar_dot_g_(n_k_p_r,weight_3d_riesz_k_p_r_,l_max_,n_M,Hvt_ykabc_,dvt_ykabc_);
%%%%;
dvt = 1e-3;
dvt_ = transpose(-8:+8);
n_dvt = numel(dvt_);
ssnll_tmp_q2d_dvt_ = zeros(n_dvt,1);
%%%%;
for ndvt=0:n_dvt-1;
if (flag_verbose>0); disp(sprintf(' %% ndvt %d/%d',ndvt,n_dvt)); end;
[ ...
 ~ ...
,~ ...
,ssnll_tmp_q2d_dvt_(1+ndvt) ...
] = ...
ssnll_from_a_k_Y_12( ...
 parameter_ssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_form_yk__ + 1.0*dvt*dvt_(1+ndvt)*dvol_a_k_Y_form_yk__...
,[] ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ + 1.0*dvt*dvt_(1+ndvt)*dtau_euler_polar_a_M_ ...
,euler_azimu_b_M_ + 1.0*dvt*dvt_(1+ndvt)*dtau_euler_azimu_b_M_...
,euler_gamma_z_M_ + 1.0*dvt*dvt_(1+ndvt)*dtau_euler_gamma_z_M_...
,[] ...
,[] ...
,[] ...
);
end;%for ndvt=0:n_dvt-1;
%%%%;
ssnll_mid_q2d = ssnll_tmp_q2d_dvt_((1+n_dvt)/2);
ssnll_pos_q2d = ssnll_tmp_q2d_dvt_((1+n_dvt)/2+1);
ssnll_neg_q2d = ssnll_tmp_q2d_dvt_((1+n_dvt)/2-1);
ddssnll_dif_q2d = (ssnll_pos_q2d - 2*ssnll_mid_q2d + ssnll_neg_q2d)/max(1e-12,dvt^2);
if (flag_verbose>0); disp(sprintf(' %% ddssnll_dif_q2d vs ddssnll_mid_q2d: %0.16f',fnorm(ddssnll_dif_q2d -ddssnll_mid_q2d)/max(1e-12,fnorm(ddssnll_dif_q2d)))); end;
%%%%;
tmp_x_ = dvt*dvt_;
tmp_y_ = real(ssnll_tmp_q2d_dvt_);
tmp_x4 = sum(tmp_x_.^4);
tmp_x3 = sum(tmp_x_.^3);
tmp_x2 = sum(tmp_x_.^2);
tmp_x1 = sum(tmp_x_.^1);
tmp_x0 = sum(tmp_x_.^0);
tmp_yx2 = sum(tmp_y_.*tmp_x_.^2);
tmp_yx1 = sum(tmp_y_.*tmp_x_.^1);
tmp_yx0 = sum(tmp_y_.*tmp_x_.^0);
tmp_lhs_ = [ ...
 tmp_x4 tmp_x3 tmp_x2 ...
;tmp_x3 tmp_x2 tmp_x1 ...
;tmp_x2 tmp_x1 tmp_x0 ...
];
tmp_rhs_ = [ tmp_yx2 ; tmp_yx1 ; tmp_yx0 ];
tmp_p_ = tmp_lhs_\tmp_rhs_;
tmp_p_x_ = polyval(tmp_p_,tmp_x_);
%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figsml;
markersize_use = 12;
linewidth_use = 2;
hold on;
plot(tmp_x_,tmp_p_x_,'k-','LineWidth',linewidth_use);
plot(tmp_x_,ssnll_tmp_q2d_dvt_,'ko','MarkerSize',markersize_use,'MarkerFaceColor','c');
xlabel('dvt_','Interpreter','none');
ylabel('ssnll_tmp_q2d_dvt_','Interpreter','none');
end;%if flag_disp;
%%%%;
ddssnll_lsq_q2d = 2.0*tmp_p_(1+0);
if (flag_verbose>0); disp(sprintf(' %% ddssnll_lsq_q2d vs ddssnll_mid_q2d: %0.16f',fnorm(ddssnll_lsq_q2d -ddssnll_mid_q2d)/max(1e-12,fnorm(ddssnll_lsq_q2d)))); end;
%%%%%%%%;

n_M_expand = 2*n_M;
weight_imagecount_M_ = rand(n_M,1);
weight_imagecount_M_expand_ = [weight_imagecount_M_;1-weight_imagecount_M_];
M_expand_k_p_wkM__ = repmat(M_k_p_wkM__,[1,2]);
index_nCTF_from_nM_expand_ = repmat(index_nCTF_from_nM_,[2,1]);
index_neta_from_nM_expand_ = repmat(index_neta_from_nM_,[2,1]);
euler_polar_a_M_expand_ = repmat(euler_polar_a_M_,[2,1]);
euler_azimu_b_M_expand_ = repmat(euler_azimu_b_M_,[2,1]);
euler_gamma_z_M_expand_ = repmat(euler_gamma_z_M_,[2,1]);
dtau_euler_polar_a_M_expand_ = repmat(dtau_euler_polar_a_M_,[2,1]);
dtau_euler_azimu_b_M_expand_ = repmat(dtau_euler_azimu_b_M_,[2,1]);
dtau_euler_gamma_z_M_expand_ = repmat(dtau_euler_gamma_z_M_,[2,1]);

%%%%%%%%;
% Now repeat the same calculations within ddssnll_2 and ddssnll_3. ;
%%%%%%%%;
parameter_ddssnll = struct('type','parameter');
parameter_ddssnll.flag_verbose = flag_verbose;
parameter_ddssnll.flag_disp = 1;
parameter_ddssnll.flag_check = 1;
parameter_ddssnll.flag_kernel_qpro_d0 = parameter_KAPPA.flag_kernel_qpro_d0;
parameter_ddssnll.flag_kernel_qpro_d1 = parameter_KAPPA.flag_kernel_qpro_d1;
parameter_ddssnll.kernel_qpro_polar_a_pole_north = parameter_KAPPA.kernel_qpro_polar_a_pole_north;
parameter_ddssnll.kernel_qpro_polar_a_pole_south = parameter_KAPPA.kernel_qpro_polar_a_pole_south;
parameter_ddssnll.kernel_qpro_l_max_use = parameter_KAPPA.kernel_qpro_l_max_use;
parameter_ddssnll.kernel_qpro_qref_k_eq_d_double = parameter_KAPPA.kernel_qpro_qref_k_eq_d_double;
parameter_ddssnll.flag_kernel_full = parameter_KAPPA.flag_kernel_full;
a_k_Y_quad_yk_ = a_k_Y_form_yk_;
a_k_Y_quad_yk__ = a_k_Y_form_yk__;
dvol_a_k_Y_quad_yk_ = dvol_a_k_Y_form_yk_;
dvol_a_k_Y_quad_yk__ = dvol_a_k_Y_form_yk__;
%%%%;
[ ...
 ~ ...
,Hvt_expand2_ykabc_ ...
,Hv_expand2_q3d_k_Y_quad_yk_ ...
,Hv_expand2_q3d_k_Y_quad_yk__ ...
,Hv_expand2_q3d_k_p_quad_ ...
,Ht_expand2_q2d_M3__ ...
] = ...
ddssnll_2( ...
 parameter_ddssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_quad_yk_ ...
,a_k_Y_quad_yk__ ...
,dvol_a_k_Y_quad_yk_ ...
,dvol_a_k_Y_quad_yk__ ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,weight_3d_k_p_r_ ...
,a_k_p_quad_ ...
,dvol_a_k_p_quad_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,S_k_p_q2d_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M_expand ...
,weight_imagecount_M_expand_ ...
,M_expand_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_expand_ ...
,CTF_k_p_r_kC__ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_expand_ ...
,eta_k_p_r_ke__ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_expand_ ...
,euler_azimu_b_M_expand_ ...
,euler_gamma_z_M_expand_ ...
,dtau_euler_polar_a_M_expand_ ...
,dtau_euler_azimu_b_M_expand_ ...
,dtau_euler_gamma_z_M_expand_ ...
,KAPPA ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
);
%%%%;
[ ...
 ~ ...
,Hvt_expand3_ykabc_ ...
,Hv_expand3_q3d_k_Y_quad_yk_ ...
,Hv_expand3_q3d_k_Y_quad_yk__ ...
,Hv_expand3_q3d_k_p_quad_ ...
,Ht_expand3_q2d_M3__ ...
] = ...
ddssnll_3( ...
 parameter_ddssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_quad_yk_ ...
,a_k_Y_quad_yk__ ...
,dvol_a_k_Y_quad_yk_ ...
,dvol_a_k_Y_quad_yk__ ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,weight_3d_k_p_r_ ...
,a_k_p_quad_ ...
,dvol_a_k_p_quad_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,S_k_p_q2d_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M_expand ...
,weight_imagecount_M_expand_ ...
,M_expand_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_expand_ ...
,CTF_k_p_r_kC__ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_expand_ ...
,eta_k_p_r_ke__ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_expand_ ...
,euler_azimu_b_M_expand_ ...
,euler_gamma_z_M_expand_ ...
,dtau_euler_polar_a_M_expand_ ...
,dtau_euler_azimu_b_M_expand_ ...
,dtau_euler_gamma_z_M_expand_ ...
,KAPPA ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
);

fnorm_disp(flag_verbose,'Hvt_expand3_ykabc_',Hvt_expand3_ykabc_,'Hvt_expand2_ykabc_',Hvt_expand2_ykabc_);
fnorm_disp(flag_verbose,'Hv_expand3_q3d_k_Y_quad_yk_',Hv_expand3_q3d_k_Y_quad_yk_,'Hv_expand2_q3d_k_Y_quad_yk_',Hv_expand2_q3d_k_Y_quad_yk_);
fnorm_disp(flag_verbose,'Hv_expand3_q3d_k_Y_quad_yk__',Hv_expand3_q3d_k_Y_quad_yk__,'Hv_expand2_q3d_k_Y_quad_yk__',Hv_expand2_q3d_k_Y_quad_yk__);
fnorm_disp(flag_verbose,'Hv_expand3_q3d_k_p_quad_',Hv_expand3_q3d_k_p_quad_,'Hv_expand2_q3d_k_p_quad_',Hv_expand2_q3d_k_p_quad_);
fnorm_disp(flag_verbose,'Ht_expand3_q2d_M3__',Ht_expand3_q2d_M3__,'Ht_expand2_q2d_M3__',Ht_expand2_q2d_M3__);

dvt_expand_ykabc_ = local_ykabc_from_yk_a_b_c_(n_k_p_r,l_max_,n_M_expand,dvol_a_k_Y_quad_yk_,dtau_euler_polar_a_M_expand_,dtau_euler_azimu_b_M_expand_,dtau_euler_gamma_z_M_expand_);
dvt_expand_ykabc_l2 = local_imagecount_f_bar_dot_g_(n_k_p_r,weight_3d_riesz_k_p_r_,l_max_,n_M_expand,weight_imagecount_M_expand_,dvt_expand_ykabc_,dvt_expand_ykabc_);
ddssnll_expand_mid_q2d = local_imagecount_f_bar_dot_g_(n_k_p_r,weight_3d_riesz_k_p_r_,l_max_,n_M_expand,weight_imagecount_M_expand_,Hvt_expand3_ykabc_,dvt_expand_ykabc_);

if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_q3d_k_Y_yk_ vs dvol_expand_ssnll_q3d_k_Y_yk_: %0.16f',fnorm(dvol_ssnll_q3d_k_Y_yk_-dvol_expand_ssnll_q3d_k_Y_yk_)/max(1e-12,fnorm(dvol_ssnll_q3d_k_Y_yk_)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvt_ykabc_l2 vs dvt_expand_ykabc_l2: %0.16f',fnorm(dvt_ykabc_l2-dvt_expand_ykabc_l2)/max(1e-12,fnorm(dvt_ykabc_l2)))); end;
if (flag_verbose>0); disp(sprintf(' %% ddssnll_mid_q2d vs ddssnll_expand_mid_q2d: %0.16f',fnorm(ddssnll_mid_q2d-ddssnll_expand_mid_q2d)/max(1e-12,fnorm(ddssnll_mid_q2d)))); end;
if (flag_verbose>0); disp(sprintf(' %% Hv_q3d_k_Y_quad_yk_ vs Hv_expand3_q3d_k_Y_quad_yk_: %0.16f',fnorm(Hv_q3d_k_Y_quad_yk_-Hv_expand3_q3d_k_Y_quad_yk_)/max(1e-12,fnorm(Hv_q3d_k_Y_quad_yk_)))); end;
if (flag_verbose>0); disp(sprintf(' %% Hv_q3d_k_Y_quad_yk__ vs Hv_expand3_q3d_k_Y_quad_yk__: %0.16f',fnorm(Hv_q3d_k_Y_quad_yk__-Hv_expand3_q3d_k_Y_quad_yk__)/max(1e-12,fnorm(Hv_q3d_k_Y_quad_yk__)))); end;
if (flag_verbose>0); disp(sprintf(' %% Hv_q3d_k_p_quad_ vs Hv_expand3_q3d_k_p_quad_: %0.16f',fnorm(Hv_q3d_k_p_quad_-Hv_expand3_q3d_k_p_quad_)/max(1e-12,fnorm(Hv_q3d_k_p_quad_)))); end;

%disp(sprintf(' %% returning prior to testing first-order implicit dtau')); return;

%%%%%%%%;
% Now testing first-order implicit dtau. ;
%%%%%%%%;
n_3 = 3;
tolerance_pinv = 1e-6;
dtau_ssnll_q2d_3M__ = permute(dtau_ssnll_q2d_M3__,[2,1]);
dtau_dtau_ssnll_q2d_33M___ = permute(dtau_dtau_ssnll_q2d_M33___,[2,3,1]);
dtau_dtau_inv_ssnll_q2d_33M___ = zeros(n_3,n_3,n_M);
for nM=0:n_M-1;
dtau_dtau_inv_ssnll_q2d_33M___(:,:,1+nM) = ...
pinv( ...
      sqrt(weight_imagecount_M_(1+nM)) ...
      *squeeze(dtau_dtau_ssnll_q2d_33M___(:,:,1+nM)) ...
      *sqrt(weight_imagecount_M_(1+nM)) ...
      ,tolerance_pinv ...
    ) ...
;
end;%for nM=0:n_M-1;
dtau_dvol_ssnll_q2d_3M__ = permute(dtau_dvol_ssnll_q2d_M3__,[2,1]);
dtau_firstorder_3M__ = zeros(n_3,n_M);
dtau_firstorder_3M__ = ...
reshape( ...
	 pagemtimes( ...
		     -real(dtau_dtau_inv_ssnll_q2d_33M___) ...
		     ,bsxfun(@plus ...
			     ,reshape( ...
				       real(bsxfun(@times ...
						   ,dtau_dvol_ssnll_q2d_3M__ ...
						   ,transpose(weight_imagecount_M_)) ...
					   ) ...
				       ,[n_3,1,n_M] ...
				     ) ...
			     ,reshape( ...
				       bsxfun(@times ...
					       ,dtau_ssnll_q2d_3M__ ...
					       ,transpose(weight_imagecount_M_) ...
					     ) ...
				       ,[n_3,1,n_M] ...
				     ) ...
			    ) ...
		   ) ...
	 ,[n_3,n_M] ...
       ) ...
;
dtau_firstorder_M3__ = permute(dtau_firstorder_3M__,[2,1]);
%%%%;
tmp_H = @(dtau_3M__) ... 
 + 1.0*ssnll_q2d ...
 + 1.0*dvol_ssnll_q2d ...
 + 1.0*sum( ...
	    bsxfun(@times ...
		    ,dtau_ssnll_q2d_3M__ ...
		    ,bsxfun(@times ...
			     ,dtau_3M__ ...
			     ,transpose(weight_imagecount_M_) ...
			   ) ...
		  ) ...
	    ,'all' ...
	  ) ...
 + 0.5*dvol_dvol_ssnll_q2d ...
 + 1.0*sum(real(bsxfun(@times ...
			,dtau_dvol_ssnll_q2d_3M__ ...
			,bsxfun(@times ...
				,dtau_3M__ ...
				,transpose(weight_imagecount_M_) ...
			       ) ...
		      ) ...
	       ) ...
	   ,'all' ...
	  ) ...
 + 0.5*sum( ...
	    bsxfun(@times ...
		   ,reshape( ...
			     conj( ...
				   bsxfun(@times ...
					  ,dtau_3M__ ...
					  ,transpose(sqrt(weight_imagecount_M_)) ...
					 ) ...
				 ) ...
			     ,[n_3,1,n_M] ...
			   ) ...
		   ,bsxfun(@times ...
			   ,reshape( ...
				     bsxfun(@times ...
					    ,dtau_3M__ ...
					    ,transpose(sqrt(weight_imagecount_M_)) ...
					   ) ...
				     ,[1,n_3,n_M]...
				   ) ...
			   ,real(dtau_dtau_ssnll_q2d_33M___) ...
			  ) ...
		  ) ...
	    ,'all' ...
	  ) ...
;
if (flag_disp>0);
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,3,1)
dtau_randn_3M__ = randn(n_3,n_M);
hold on;
for ntmp=-20:+20;
plot(ntmp,tmp_H(dtau_firstorder_3M__ + dtau_randn_3M__*ntmp/20),'ko');
end;%for ntmp=-20:+20;
xlabel('abitrary step'); ylabel('value of tmp_H','Interpreter','none');
title('criticality of dtau_firstorder_3M__','Interpreter','none');
subplot(1,3,2);
hold on;
plot(1:n_M,dtau_firstorder_M3__(:,1+0),'ro');
plot(1:n_M,dtau_firstorder_M3__(:,1+1),'go');
plot(1:n_M,dtau_firstorder_M3__(:,1+2),'bo');
hold off;
xlim([0,n_M+1]); xlabel('nM','Interpreter','none');
ylabel('dtau_firstorder_M3__','Interpreter','none');
title('dtau_firstorder_M3__','Interpreter','none');
subplot(1,3,3);
hold on;
plot(euler_polar_a_M_,dtau_firstorder_M3__(:,1+0),'ro');
plot(euler_polar_a_M_,dtau_firstorder_M3__(:,1+1),'go');
plot(euler_polar_a_M_,dtau_firstorder_M3__(:,1+2),'bo');
hold off;
xlim([0,pi]); xlabel('euler_polar_a_M_','Interpreter','none');
ylabel('dtau_firstorder_M3__','Interpreter','none');
title('dtau_firstorder_M3__','Interpreter','none');
drawnow();
end;%if (flag_disp>0);
%%%%%%%%;

%{
%%%%%%%%;
% Now testing subset of first-order implicit dtau. ;
%%%%%%%%;
n_3 = 3;
tolerance_pinv = 1e-6;
dtau_dtau_ssnll_q2d_33M___ = permute(dtau_dtau_ssnll_q2d_M33___,[2,3,1]);
dtau_dtau_inv_ssnll_q2d_33M___ = zeros(n_3,n_3,n_M);
for nM=0:n_M-1;
dtau_dtau_inv_ssnll_q2d_33M___(:,:,1+nM) = pinv(squeeze(dtau_dtau_ssnll_q2d_33M___(:,:,1+nM)),tolerance_pinv);
end;%for nM=0:n_M-1;
dtau_dvol_ssnll_q2d_3M__ = permute(dtau_dvol_ssnll_q2d_M3__,[2,1]);
dtau_firstorder_3M__ = zeros(n_3,n_M);
dtau_firstorder_3M__ = reshape(pagemtimes(-real(dtau_dtau_inv_ssnll_q2d_33M___),reshape(real(dtau_dvol_ssnll_q2d_3M__),[n_3,1,n_M])),[n_3,n_M]);
tmp_H = @(dtau_3M__) dvol_dvol_ssnll_q2d + 2*real(sum(dtau_3M__.*dtau_dvol_ssnll_q2d_3M__,'all')) + sum(bsxfun(@times,reshape(conj(dtau_3M__),[n_3,1,n_M]),bsxfun(@times,reshape(dtau_3M__,[1,n_3,n_M]),real(dtau_dtau_ssnll_q2d_33M___))),'all');
dtau_dtau_ssnll_q2d_33M_expand___ = repmat(dtau_dtau_ssnll_q2d_33M___,[1,1,2]);
dtau_dtau_inv_ssnll_q2d_33M_expand___ = zeros(n_3,n_3,n_M_expand);
%dtau_dtau_inv_ssnll_q2d_33M_expand___ = repmat(dtau_dtau_inv_ssnll_q2d_33M___,[1,1,2]);
for nM_expand=0:n_M_expand-1;
dtau_dtau_inv_ssnll_q2d_33M_expand___(:,:,1+nM_expand) = pinv(sqrt(weight_imagecount_M_expand_(1+nM_expand))*squeeze(dtau_dtau_ssnll_q2d_33M_expand___(:,:,1+nM_expand))*sqrt(weight_imagecount_M_expand_(1+nM_expand)),tolerance_pinv);
end;%for nM_expand=0:n_M_expand-1;
dtau_dvol_ssnll_q2d_3M_expand__ = repmat(dtau_dvol_ssnll_q2d_3M__,[1,2]);
dtau_firstorder_3M_expand__ = zeros(n_3,n_M_expand);
dtau_firstorder_3M_expand__ = reshape(pagemtimes(-real(dtau_dtau_inv_ssnll_q2d_33M_expand___),reshape(real(bsxfun(@times,dtau_dvol_ssnll_q2d_3M_expand__,transpose(weight_imagecount_M_expand_))),[n_3,1,n_M_expand])),[n_3,n_M_expand]);
tmp_H_expand = @(dtau_3M_expand__) dvol_dvol_ssnll_q2d + 2*real(sum(bsxfun(@times,dtau_3M_expand__,transpose(weight_imagecount_M_expand_)).*dtau_dvol_ssnll_q2d_3M_expand__,'all')) + sum(bsxfun(@times,reshape(conj(bsxfun(@times,dtau_3M_expand__,transpose(sqrt(weight_imagecount_M_expand_)))),[n_3,1,n_M_expand]),bsxfun(@times,reshape(bsxfun(@times,dtau_3M_expand__,transpose(sqrt(weight_imagecount_M_expand_))),[1,n_3,n_M_expand]),real(dtau_dtau_ssnll_q2d_33M_expand___))),'all');
if flag_disp;
figure(1+nf);nf=nf+1;clf;figsml;
dtau_randn_3M__ = randn(n_3,n_M);
dtau_randn_3M_expand__ = repmat(dtau_randn_3M__,[1,2]);
hold on;
for ntmp=-20:+20;
plot(ntmp,tmp_H(dtau_firstorder_3M__ + dtau_randn_3M__*ntmp/20),'ko');
plot(ntmp,tmp_H_expand(dtau_firstorder_3M_expand__ + dtau_randn_3M_expand__*ntmp/20),'rx');
end;%for ntmp=-20:+20;
xlabel('abitrary step'); ylabel('value of tmp_H','Interpreter','none');
title('criticality of dtau_firstorder_3M__','Interpreter','none');
end;%if flag_disp;
%%%%%%%%;
%}

disp(sprintf(' %% returning prior to testing fixed-point-iteration')); return;

%%%%%%%%;
% Now apply fixed-point-iteration. ;
%%%%%%%%;
parameter_polish = struct('type','parameter');
parameter_polish.flag_verbose = flag_verbose;
parameter_polish.flag_kernel_qpro_d0 = parameter_KAPPA.flag_kernel_qpro_d0;
parameter_polish.flag_kernel_qpro_d1 = parameter_KAPPA.flag_kernel_qpro_d1;
parameter_polish.kernel_qpro_polar_a_pole_north = parameter_KAPPA.kernel_qpro_polar_a_pole_north;
parameter_polish.kernel_qpro_polar_a_pole_south = parameter_KAPPA.kernel_qpro_polar_a_pole_south;
parameter_polish.kernel_qpro_l_max_use = parameter_KAPPA.kernel_qpro_l_max_use;
parameter_polish.kernel_qpro_qref_k_eq_d_double = parameter_KAPPA.kernel_qpro_qref_k_eq_d_double;
parameter_polish.flag_kernel_full = parameter_KAPPA.flag_kernel_full;
parameter_polish.flag_polish_update_volume = 1;
parameter_polish.polish_dssnll_fpi_tolerance = 1e-2;
parameter_polish.polish_dssnll_fpi_stepsize = 1e-3;
parameter_polish.polish_dssnll_fpi_n_iteration = 8;
a_k_Y_init_yk_ = a_k_Y_form_yk_;
a_k_Y_init_yk_ = []; %<-- calculate using kappa_qpro_apply_2. ;
[ ...
 parameter_polish ...
,a_k_Y_crit_yk_ ...
,euler_polar_a_crit_M_ ...
,euler_azimu_b_crit_M_ ...
,euler_gamma_z_crit_M_ ...
,G_fnorm_crit ...
] = ...
polish_dssnll_fpi_0( ...
 parameter_polish ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_init_yk_ ...
,[] ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,weight_3d_k_p_r_ ...
,[] ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_r_kC__ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_r_ke__ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,KAPPA ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
);

%%%%%%%%;
% Now apply fminunc. ;
% Verdict: This is significantly slower than polish_dssnll_fpi_1 above. ;
%%%%%%%%;
parameter_polish = struct('type','parameter');
parameter_polish.flag_verbose = flag_verbose;
parameter_polish.flag_kernel_qpro_d0 = parameter_KAPPA.flag_kernel_qpro_d0;
parameter_polish.flag_kernel_qpro_d1 = parameter_KAPPA.flag_kernel_qpro_d1;
parameter_polish.kernel_qpro_polar_a_pole_north = parameter_KAPPA.kernel_qpro_polar_a_pole_north;
parameter_polish.kernel_qpro_polar_a_pole_south = parameter_KAPPA.kernel_qpro_polar_a_pole_south;
parameter_polish.kernel_qpro_l_max_use = parameter_KAPPA.kernel_qpro_l_max_use;
parameter_polish.kernel_qpro_qref_k_eq_d_double = parameter_KAPPA.kernel_qpro_qref_k_eq_d_double;
parameter_polish.flag_kernel_full = parameter_KAPPA.flag_kernel_full;
parameter_polish.flag_polish_update_volume = 1;
parameter_polish.polish_dssnll_fminunc_tolerance = 1e-2;
parameter_polish.polish_dssnll_fminunc_n_iteration = 8;
a_k_Y_init_yk_ = a_k_Y_form_yk_;
a_k_Y_init_yk_ = []; %<-- calculate using kappa_qpro_apply_2. ;
[ ...
 parameter_polish ...
,a_k_Y_crit_yk_ ...
,euler_polar_a_crit_M_ ...
,euler_azimu_b_crit_M_ ...
,euler_gamma_z_crit_M_ ...
,ssnll_q2d_crit ...
] = ...
polish_dssnll_fminunc_1( ...
 parameter_polish ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_init_yk_ ...
,[] ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,weight_3d_k_p_r_ ...
,[] ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_r_kC__ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_r_ke__ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,KAPPA ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
);

disp(sprintf(' %% returning prior to testing eig_ddssnll_lanczos_1')); return;

test_slice_vs_volume_integral_helper_eig_ignore_tau_0;

%%%%%%%%;
% Now establish the relationship between rigid rotations of the volume a_k_Y_form_, ;
% the corresponding perturbation to the volume dvol_a_k_Y_form_, ;
% and the induced perturbation to the viewing-angles dtau_M3__. ;
%%%%%%%%;
parameter_SmallRotation = struct('type','parameter');
parameter_SmallRotation.flag_verbose = flag_verbose;
parameter_SmallRotation.flag_check = 1;
a_k_Y_quad_yk_ = a_k_Y_form_yk_;
a_k_Y_quad_yk__ = a_k_Y_form_yk__;
[ ...
 ~ ...
,U_tilde_SmallRotation_Delta_ykabcs__ ...
,U_SmallRotation_Delta_ykabcs__ ...
,S_SmallRotation_Delta_s_ ...
,V_SmallRotation_Delta_ss__ ...
] = ...
U_SmallRotation_1( ...
 parameter_SmallRotation ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_quad_yk_ ...
,a_k_Y_quad_yk__ ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,weight_3d_k_p_r_ ...
,a_k_p_quad_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,S_k_p_q2d_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_r_kC__ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_r_ke__ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
);

%%%%%%%%;
% Now try to find eigenvectors of full hessian. ;
%%%%%%%%;
parameter_eig = struct('type','eig');
parameter_eig.flag_verbose = flag_verbose;
parameter_eig.flag_check = 1;
parameter_eig.flag_disp = 1;
parameter_eig.flag_kernel_qpro_d0 = parameter_KAPPA.flag_kernel_qpro_d0;
parameter_eig.flag_kernel_qpro_d1 = parameter_KAPPA.flag_kernel_qpro_d1;
parameter_eig.kernel_qpro_polar_a_pole_north = parameter_KAPPA.kernel_qpro_polar_a_pole_north;
parameter_eig.kernel_qpro_polar_a_pole_south = parameter_KAPPA.kernel_qpro_polar_a_pole_south;
parameter_eig.kernel_qpro_l_max_use = parameter_KAPPA.kernel_qpro_l_max_use;
parameter_eig.kernel_qpro_qref_k_eq_d_double = parameter_KAPPA.kernel_qpro_qref_k_eq_d_double;
parameter_eig.flag_kernel_full = parameter_KAPPA.flag_kernel_full;
parameter_eig.lanczos_n_iteration_max = 16;
U_tilde_SmallRotation_Delta_ykabc3__ = U_tilde_SmallRotation_Delta_ykabcs__(:,1:3);
a_k_Y_quad_yk_ = a_k_Y_form_yk_;
KAPPA = [];
v_tilde_0_ykabci__ = [];
w_tilde_0_ykabc_ = [];
alph_tilde_0_i_ = [];
beta_tilde_0_i_ = [];
[ ...
 parameter_eig ...
,U_tilde_0_SmallRotation_Delta_ykabc3__ ...
,v_tilde_0_ykabci__  ...
,w_tilde_0_ykabc_  ...
,alph_tilde_0_i_ ...
,beta_tilde_0_i_ ... 
] = ...
eig_ddssnll_lanczos_1( ...
 parameter_eig ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_quad_yk_ ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,weight_3d_k_p_r_ ...
,a_k_p_quad_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,S_k_p_q2d_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_r_kC__ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_r_ke__ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,KAPPA ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
,U_tilde_SmallRotation_Delta_ykabc3__ ...
,v_tilde_0_ykabci__  ...
,w_tilde_0_ykabc_  ...
,alph_tilde_0_i_ ...
,beta_tilde_0_i_ ... 
);
%%%%%%%%;
n_image_0 = n_M;
n_iteration = size(v_tilde_0_ykabci__,2); T_0__ = real(spdiags([circshift(beta_tilde_0_i_,-1),alph_tilde_0_i_,beta_tilde_0_i_],[-1,0,+1],n_iteration,n_iteration));
vv_0_i4__ = zeros(n_iteration,4);
for niteration=0:n_iteration-1;
tmp_v_ykabc_ = v_tilde_0_ykabci__(:,1+niteration);
[tmp_v_dvol_yk_,tmp_v_polar_a_M_,tmp_v_azimu_b_M_,tmp_v_euler_gamma_z_M_] = local_yk_a_b_c_from_ykabc_(n_k_p_r,l_max_,n_image_0,tmp_v_ykabc_);
[tmp_vv,tmp_vv_dvol,tmp_vv_a,tmp_vv_b,tmp_vv_c] = local_weightless_f_bar_dot_g_(n_k_p_r,l_max_,n_image_0,tmp_v_ykabc_,tmp_v_ykabc_);
vv_0_i4__(1+niteration,:) = [tmp_vv_dvol,tmp_vv_a,tmp_vv_b,tmp_vv_c]/max(1e-12,tmp_vv);
end;%for niteration=0:n_iteration-1;
if (flag_verbose>0);
disp(sprintf(' %% vv_0_i4__:'));
disp(num2str(vv_0_i4__,'%.6f '));
end;%if (flag_verbose>0);
%%%%%%%%;
lambda_0_xi__ = -Inf*ones(n_iteration,n_iteration);
for niteration=0:n_iteration-1;
T_0_sub__ = T_0__(1:1+niteration,1:1+niteration);
lambda_0_sub_ = eigs(T_0_sub__,[],1+niteration);
lambda_0_xi__(1:1+niteration,1+niteration) = sort(lambda_0_sub_,'ascend');
end;%for niteration=0:n_iteration-1;
S_0_x_ = sort(eigs(T_0__,[],n_iteration),'ascend');
n_iteration = n_iteration;
S_0_x_ = S_0_x_;
S_0_x_min = min(S_0_x_);
S_0_x_max = max(S_0_x_);
lambda_0_xi__ = lambda_0_xi__;
%%%%;
ee_0_ns4___ = zeros(n_iteration,n_iteration,4);
for niteration=0:n_iteration-1;
T_0_sub__ = T_0__(1:1+niteration,1:1+niteration);
[TV_sub__,lambda_sub__] = eigs(T_0_sub__,[],1+niteration);
lambda_sub_ = diag(lambda_sub__);
[lambda_srt_,ij_srt_] = sort(lambda_sub_,'ascend');
for index_lambda=0:1+niteration-1;
ij_use = ij_srt_(1+index_lambda);
lambda_use = lambda_srt_(1+index_lambda);
TV_eig_ = TV_sub__(:,ij_use);
v_eig_ykabc_ = v_tilde_0_ykabci__(:,1:1+niteration)*TV_eig_;
[v_eig_dvol_yk_,v_eig_polar_a_M_use_,v_eig_azimu_b_M_use_,v_eig_gamma_z_M_use_] = local_yk_a_b_c_from_ykabc_(n_k_p_r,l_max_,n_image_0,v_eig_ykabc_);
[tmp_ee_0,tmp_ee_0_dvol,tmp_ee_0_a,tmp_ee_0_b,tmp_ee_0_c] = local_weightless_f_bar_dot_g_(n_k_p_r,l_max_,n_image_0,v_eig_ykabc_,v_eig_ykabc_);
str_ee_0 = sprintf('tmp_ee_0 %0.2f,tmp_ee_0_dvol %0.2f,tmp_ee_0_a %0.2f,tmp_ee_0_b %0.2f,tmp_ee_0_c %0.2f',tmp_ee_0,tmp_ee_0_dvol,tmp_ee_0_a,tmp_ee_0_b,tmp_ee_0_c);
if (flag_verbose>1); disp(sprintf(' %% %s',str_ee_0)); end;
ee_0_ns4___(1+niteration,1+index_lambda,:) = [tmp_ee_0_dvol;tmp_ee_0_a;tmp_ee_0_b;tmp_ee_0_c];
end;%for index_lambda=0:1+niteration-1;
end;%for niteration=0:n_iteration-1;
%%%%%%%%;

%%%%%%%%;
% Note that the vectors v_tilde_0_ykabci__ ;
% have energy distributed across both ;
% the volumetric and angular component. ;
%%%%%%%%;

%%%%%%%%;
% Now repeat, but use properly aligned templates as images. ;
%%%%%%%%;
parameter_eig = struct('type','eig');
parameter_eig.flag_verbose = flag_verbose;
parameter_eig.flag_check = 1;
parameter_eig.flag_disp = 1;
parameter_eig.flag_kernel_qpro_d0 = parameter_KAPPA.flag_kernel_qpro_d0;
parameter_eig.flag_kernel_qpro_d1 = parameter_KAPPA.flag_kernel_qpro_d1;
parameter_eig.kernel_qpro_polar_a_pole_north = parameter_KAPPA.kernel_qpro_polar_a_pole_north;
parameter_eig.kernel_qpro_polar_a_pole_south = parameter_KAPPA.kernel_qpro_polar_a_pole_south;
parameter_eig.kernel_qpro_l_max_use = parameter_KAPPA.kernel_qpro_l_max_use;
parameter_eig.kernel_qpro_qref_k_eq_d_double = parameter_KAPPA.kernel_qpro_qref_k_eq_d_double;
parameter_eig.flag_kernel_full = parameter_KAPPA.flag_kernel_full;
parameter_eig.lanczos_n_iteration_max = 16;
U_tilde_SmallRotation_Delta_ykabc3__ = [];
a_k_Y_quad_yk_ = a_k_Y_form_yk_;
tmp_index_ = efind(viewing_polar_a_S_>=pi/12 & viewing_polar_a_S_<=pi-pi/12);
n_S_use = 64;
tmp_p_= randperm(numel(tmp_index_),n_S_use); tmp_index_ = tmp_index_(tmp_p_);
S_k_p_use_wkS__ = S_k_p_wkS__(:,1+tmp_index_);
viewing_polar_a_use_S_ = viewing_polar_a_S_(1+tmp_index_);
viewing_azimu_b_use_S_ = viewing_azimu_b_S_(1+tmp_index_);
viewing_gamma_z_use_S_ = viewing_gamma_z_S_(1+tmp_index_);
KAPPA = [];
v_tilde_1_ykabci__ = [];
w_tilde_1_ykabc_ = [];
alph_tilde_1_i_ = [];
beta_tilde_1_i_ = [];
[ ...
 parameter_eig ...
,U_tilde_1_SmallRotation_Delta_ykabc3__ ...
,v_tilde_1_ykabci__  ...
,w_tilde_1_ykabc_  ...
,alph_tilde_1_i_ ...
,beta_tilde_1_i_ ... 
] = ...
eig_ddssnll_lanczos_1( ...
 parameter_eig ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_quad_yk_ ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,weight_3d_k_p_r_ ...
,a_k_p_quad_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,S_k_p_q2d_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_S_use ...
,S_k_p_use_wkS__ ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_use_S_ ...
,viewing_azimu_b_use_S_ ...
,viewing_gamma_z_use_S_ ...
,KAPPA ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
,U_tilde_SmallRotation_Delta_ykabc3__ ...
,v_tilde_1_ykabci__  ...
,w_tilde_1_ykabc_  ...
,alph_tilde_1_i_ ...
,beta_tilde_1_i_ ... 
);
%%%%%%%%;
n_image_1 = n_S_use;
n_iteration = size(v_tilde_1_ykabci__,2); T_1__ = real(spdiags([circshift(beta_tilde_1_i_,-1),alph_tilde_1_i_,beta_tilde_1_i_],[-1,0,+1],n_iteration,n_iteration));
vv_1_i4__ = zeros(n_iteration,4);
for niteration=0:n_iteration-1;
tmp_v_ykabc_ = v_tilde_1_ykabci__(:,1+niteration);
[tmp_v_dvol_yk_,tmp_v_polar_a_M_,tmp_v_azimu_b_M_,tmp_v_euler_gamma_z_M_] = local_yk_a_b_c_from_ykabc_(n_k_p_r,l_max_,n_image_1,tmp_v_ykabc_);
[tmp_vv,tmp_vv_dvol,tmp_vv_a,tmp_vv_b,tmp_vv_c] = local_weightless_f_bar_dot_g_(n_k_p_r,l_max_,n_image_1,tmp_v_ykabc_,tmp_v_ykabc_);
vv_1_i4__(1+niteration,:) = [tmp_vv_dvol,tmp_vv_a,tmp_vv_b,tmp_vv_c]/max(1e-12,tmp_vv);
end;%for niteration=0:n_iteration-1;
if (flag_verbose>0);
disp(sprintf(' %% vv_1_i4__:'));
disp(num2str(vv_1_i4__,'%.6f '));
end;%if (flag_verbose>0);
%%%%%%%%;
lambda_1_xi__ = -Inf*ones(n_iteration,n_iteration);
for niteration=0:n_iteration-1;
T_1_sub__ = T_1__(1:1+niteration,1:1+niteration);
lambda_1_sub_ = eigs(T_1_sub__,[],1+niteration);
lambda_1_xi__(1:1+niteration,1+niteration) = sort(lambda_1_sub_,'ascend');
end;%for niteration=0:n_iteration-1;
S_1_x_ = sort(eigs(T_1__,[],n_iteration),'ascend');
n_iteration = n_iteration;
S_1_x_ = S_1_x_;
S_1_x_min = min(S_1_x_);
S_1_x_max = max(S_1_x_);
lambda_1_xi__ = lambda_1_xi__;
%%%%;
ee_1_ns4___ = zeros(n_iteration,n_iteration,4);
for niteration=0:n_iteration-1;
T_1_sub__ = T_1__(1:1+niteration,1:1+niteration);
[TV_sub__,lambda_sub__] = eigs(T_1_sub__,[],1+niteration);
lambda_sub_ = diag(lambda_sub__);
[lambda_srt_,ij_srt_] = sort(lambda_sub_,'ascend');
for index_lambda=0:1+niteration-1;
ij_use = ij_srt_(1+index_lambda);
lambda_use = lambda_srt_(1+index_lambda);
TV_eig_ = TV_sub__(:,ij_use);
v_eig_ykabc_ = v_tilde_1_ykabci__(:,1:1+niteration)*TV_eig_;
[v_eig_dvol_yk_,v_eig_polar_a_M_use_,v_eig_azimu_b_M_use_,v_eig_gamma_z_M_use_] = local_yk_a_b_c_from_ykabc_(n_k_p_r,l_max_,n_image_1,v_eig_ykabc_);
[tmp_ee_1,tmp_ee_1_dvol,tmp_ee_1_a,tmp_ee_1_b,tmp_ee_1_c] = local_weightless_f_bar_dot_g_(n_k_p_r,l_max_,n_image_1,v_eig_ykabc_,v_eig_ykabc_);
str_ee_1 = sprintf('tmp_ee_1 %0.2f,tmp_ee_1_dvol %0.2f,tmp_ee_1_a %0.2f,tmp_ee_1_b %0.2f,tmp_ee_1_c %0.2f',tmp_ee_1,tmp_ee_1_dvol,tmp_ee_1_a,tmp_ee_1_b,tmp_ee_1_c);
if (flag_verbose>1); disp(sprintf(' %% %s',str_ee_1)); end;
ee_1_ns4___(1+niteration,1+index_lambda,:) = [tmp_ee_1_dvol;tmp_ee_1_a;tmp_ee_1_b;tmp_ee_1_c];
end;%for index_lambda=0:1+niteration-1;
end;%for niteration=0:n_iteration-1;
%%%%%%%%;

%%%%%%%%;
% Note that the vectors v_tilde_1_ykabci__ ;
% have energy concentrated in the ;
% volumetric component. ;
%%%%%%%%;

%%%%%%%%;
% Now repeat once more, using multiple poorly aligned images. ;
%%%%%%%%;
parameter_eig = struct('type','eig');
parameter_eig.flag_verbose = flag_verbose;
parameter_eig.flag_check = 1;
parameter_eig.flag_disp = 1;
parameter_eig.flag_kernel_qpro_d0 = parameter_KAPPA.flag_kernel_qpro_d0;
parameter_eig.flag_kernel_qpro_d1 = parameter_KAPPA.flag_kernel_qpro_d1;
parameter_eig.kernel_qpro_polar_a_pole_north = parameter_KAPPA.kernel_qpro_polar_a_pole_north;
parameter_eig.kernel_qpro_polar_a_pole_south = parameter_KAPPA.kernel_qpro_polar_a_pole_south;
parameter_eig.kernel_qpro_l_max_use = parameter_KAPPA.kernel_qpro_l_max_use;
parameter_eig.kernel_qpro_qref_k_eq_d_double = parameter_KAPPA.kernel_qpro_qref_k_eq_d_double;
parameter_eig.flag_kernel_full = parameter_KAPPA.flag_kernel_full;
parameter_eig.lanczos_n_iteration_max = 16;
U_tilde_SmallRotation_Delta_ykabc3__ = [];
a_k_Y_quad_yk_ = a_k_Y_form_yk_;
tmp_index_ = efind(viewing_polar_a_S_>=pi/12 & viewing_polar_a_S_<=pi-pi/12);
n_M_use = 64;
tmp_p_= randperm(numel(tmp_index_),n_M_use); tmp_index_p_ = tmp_index_(tmp_p_);
tmp_q_= randperm(numel(tmp_index_),n_M_use); tmp_index_q_ = tmp_index_(tmp_q_);
M_k_p_use_wkM__ = 0.5*S_k_p_wkS__(:,1+tmp_index_p_) + 0.5*S_k_p_wkS__(:,1+flip(tmp_index_p_)); %<-- use jumbled templates as images. ;
viewing_polar_a_use_M_ = viewing_polar_a_S_(1+tmp_index_q_);
viewing_azimu_b_use_M_ = viewing_azimu_b_S_(1+tmp_index_q_);
viewing_gamma_z_use_M_ = viewing_gamma_z_S_(1+tmp_index_q_);
index_nCTF_from_nM_use_ = mod(transpose(0:n_M_use-1),n_CTF);
KAPPA = [];
v_tilde_2_ykabci__ = [];
w_tilde_2_ykabc_ = [];
alph_tilde_2_i_ = [];
beta_tilde_2_i_ = [];
[ ...
 parameter_eig ...
,U_tilde_2_SmallRotation_Delta_ykabc3__ ...
,v_tilde_2_ykabci__  ...
,w_tilde_2_ykabc_  ...
,alph_tilde_2_i_ ...
,beta_tilde_2_i_ ... 
] = ...
eig_ddssnll_lanczos_1( ...
 parameter_eig ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_quad_yk_ ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,weight_3d_k_p_r_ ...
,a_k_p_quad_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,S_k_p_q2d_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M_use ...
,M_k_p_use_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_use_ ...
,CTF_k_p_r_kC__ ...
,CTF_k_p_wkC__ ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_use_M_ ...
,viewing_azimu_b_use_M_ ...
,viewing_gamma_z_use_M_ ...
,KAPPA ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
,U_tilde_SmallRotation_Delta_ykabc3__ ...
,v_tilde_2_ykabci__  ...
,w_tilde_2_ykabc_  ...
,alph_tilde_2_i_ ...
,beta_tilde_2_i_ ... 
);
%%%%%%%%;
n_image_2 = n_M_use;
n_iteration = size(v_tilde_2_ykabci__,2); T_2__ = real(spdiags([circshift(beta_tilde_2_i_,-1),alph_tilde_2_i_,beta_tilde_2_i_],[-1,0,+1],n_iteration,n_iteration));
vv_2_i4__ = zeros(n_iteration,4);
for niteration=0:n_iteration-1;
tmp_v_ykabc_ = v_tilde_2_ykabci__(:,1+niteration);
[tmp_v_dvol_yk_,tmp_v_polar_a_M_,tmp_v_azimu_b_M_,tmp_v_euler_gamma_z_M_] = local_yk_a_b_c_from_ykabc_(n_k_p_r,l_max_,n_image_2,tmp_v_ykabc_);
[tmp_vv,tmp_vv_dvol,tmp_vv_a,tmp_vv_b,tmp_vv_c] = local_weightless_f_bar_dot_g_(n_k_p_r,l_max_,n_image_2,tmp_v_ykabc_,tmp_v_ykabc_);
vv_2_i4__(1+niteration,:) = [tmp_vv_dvol,tmp_vv_a,tmp_vv_b,tmp_vv_c]/max(1e-12,tmp_vv);
end;%for niteration=0:n_iteration-1;
if (flag_verbose>0);
disp(sprintf(' %% vv_2_i4__:'));
disp(num2str(vv_2_i4__,'%.6f '));
end;%if (flag_verbose>0);
%%%%%%%%;
lambda_2_xi__ = -Inf*ones(n_iteration,n_iteration);
for niteration=0:n_iteration-1;
T_2_sub__ = T_2__(1:1+niteration,1:1+niteration);
lambda_2_sub_ = eigs(T_2_sub__,[],1+niteration);
lambda_2_xi__(1:1+niteration,1+niteration) = sort(lambda_2_sub_,'ascend');
end;%for niteration=0:n_iteration-1;
S_2_x_ = sort(eigs(T_2__,[],n_iteration),'ascend');
n_iteration = n_iteration;
S_2_x_ = S_2_x_;
S_2_x_min = min(S_2_x_);
S_2_x_max = max(S_2_x_);
lambda_2_xi__ = lambda_2_xi__;
%%%%;
ee_2_ns4___ = zeros(n_iteration,n_iteration,4);
for niteration=0:n_iteration-1;
T_2_sub__ = T_2__(1:1+niteration,1:1+niteration);
[TV_sub__,lambda_sub__] = eigs(T_2_sub__,[],1+niteration);
lambda_sub_ = diag(lambda_sub__);
[lambda_srt_,ij_srt_] = sort(lambda_sub_,'ascend');
for index_lambda=0:1+niteration-1;
ij_use = ij_srt_(1+index_lambda);
lambda_use = lambda_srt_(1+index_lambda);
TV_eig_ = TV_sub__(:,ij_use);
v_eig_ykabc_ = v_tilde_2_ykabci__(:,1:1+niteration)*TV_eig_;
[v_eig_dvol_yk_,v_eig_polar_a_M_use_,v_eig_azimu_b_M_use_,v_eig_gamma_z_M_use_] = local_yk_a_b_c_from_ykabc_(n_k_p_r,l_max_,n_image_2,v_eig_ykabc_);
[tmp_ee_2,tmp_ee_2_dvol,tmp_ee_2_a,tmp_ee_2_b,tmp_ee_2_c] = local_weightless_f_bar_dot_g_(n_k_p_r,l_max_,n_image_2,v_eig_ykabc_,v_eig_ykabc_);
str_ee_2 = sprintf('tmp_ee_2 %0.2f,tmp_ee_2_dvol %0.2f,tmp_ee_2_a %0.2f,tmp_ee_2_b %0.2f,tmp_ee_2_c %0.2f',tmp_ee_2,tmp_ee_2_dvol,tmp_ee_2_a,tmp_ee_2_b,tmp_ee_2_c);
if (flag_verbose>1); disp(sprintf(' %% %s',str_ee_2)); end;
ee_2_ns4___(1+niteration,1+index_lambda,:) = [tmp_ee_2_dvol;tmp_ee_2_a;tmp_ee_2_b;tmp_ee_2_c];
end;%for index_lambda=0:1+niteration-1;
end;%for niteration=0:n_iteration-1;
%%%%%%%%;

%%%%%%%%;
% Note that the vectors v_tilde_2_ykabci__ ;
% have energy that is mostly (but not entirely) ;
% concentrated in the volumetric component. ;
%%%%%%%%;

%%%%%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figbig; figbeach();
markersize_use = 8;
linewidth_sml = 0.5;
linewidth_big = 2;
p_row = 3; p_col = 1+4; np=0;
for prow=0:3-1;
if prow==0; tmp_ee_ns4___ = ee_0_ns4___; tmp_S_x_ = S_0_x_; tmp_lambda_xi__ = lambda_0_xi__; str_title = 'images'; end;
if prow==1; tmp_ee_ns4___ = ee_1_ns4___; tmp_S_x_ = S_1_x_; tmp_lambda_xi__ = lambda_1_xi__; str_title = 'templates'; end;
if prow==2; tmp_ee_ns4___ = ee_2_ns4___; tmp_S_x_ = S_2_x_; tmp_lambda_xi__ = lambda_2_xi__; str_title = 'jumbled'; end;
subplot(p_row,p_col,1+np);np=np+1;
tmp_S_x_min = min(tmp_S_x_); tmp_S_x_max = max(tmp_S_x_);
hold on;
plot(repmat([0;n_iteration],[1,n_iteration]),repmat(reshape(tmp_S_x_,[1,n_iteration]),[2,1]),'-','Color',0.85*[1,1,1],'LineWidth',linewidth_sml);
ni_xi__ = repmat([1:n_iteration],[n_iteration,1]);
tmp_index_ = efind(isfinite(tmp_lambda_xi__));
plot(ni_xi__(1+tmp_index_),tmp_lambda_xi__(1+tmp_index_),'r.','MarkerSize',markersize_use);
hold off;
xlabel('iteration'); ylabel('sigma');
xlim([0,1+n_iteration]);
ylim([tmp_S_x_min-0.25,tmp_S_x_max+0.25]);
title(str_title,'Interpreter','none');
for pcol=0:4-1;
if pcol==0; str_col = 'dvol'; end;
if pcol==1; str_col = 'a'; end;
if pcol==2; str_col = 'b'; end;
if pcol==3; str_col = 'c'; end;
subplot(p_row,p_col,1+np);np=np+1;
imagesc(tmp_ee_ns4___(:,:,1+pcol),[0,1]);
title(sprintf('%s: %s',str_title,str_col),'Interpreter','none');
end;%for pcol=0:4-1;
end;%for prow=0:3-1;
end;%if flag_disp;
%%%%%%%%;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%{

dvt = 1e-3;
tmp_index_ = efind(viewing_polar_a_S_>=pi/12 & viewing_polar_a_S_<=pi-pi/12);
n_S_use = min(1024,numel(tmp_index_));
tmp_p_= randperm(numel(tmp_index_),n_S_use); tmp_index_ = tmp_index_(tmp_p_);
S_k_p_use_wkS__ = S_k_p_q2d_wkS__(:,1+tmp_index_);
viewing_polar_a_use_S_ = viewing_polar_a_S_(1+tmp_index_);
viewing_azimu_b_use_S_ = viewing_azimu_b_S_(1+tmp_index_);
viewing_gamma_z_use_S_ = viewing_gamma_z_S_(1+tmp_index_);
dtau_viewing_polar_a_use_S_ = 1*pi*rand(n_S_use,1);
dtau_viewing_azimu_b_use_S_ = 2*pi*rand(n_S_use,1);
dtau_viewing_gamma_z_use_S_ = 2*pi*rand(n_S_use,1);
dv_ = transpose(-5:+5); n_dv = numel(dv_);
dt_ = transpose(-4:+4); n_dt = numel(dt_);
ssnll_q2d_dvdt__ = zeros(n_dv,n_dt);
for ndv=0:n_dv-1;
for ndt=0:n_dt-1;
if (flag_verbose>1); disp(sprintf(' %% ndv %d/%d ndt %d/%d',ndv,n_dv,ndt,n_dt)); end;
[ ...
 ~ ...
,~ ...
,ssnll_q2d_dvdt__(1+ndv,1+ndt) ...
] = ...
ssnll_from_a_k_Y_12( ...
 parameter_ssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_form_yk__ + 1.0*dvt*dv_(1+ndv)*a_k_Y_form_yk__...
,[] ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,S_k_p_q2d_wkS__ + 1.0*dvt*dv_(1+ndv)*S_k_p_q2d_wkS__ ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_S_use ...
,S_k_p_use_wkS__ ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_use_S_ + 1.0*dvt*dt_(1+ndt)*dtau_viewing_polar_a_use_S_ ...
,viewing_azimu_b_use_S_ + 1.0*dvt*dt_(1+ndt)*dtau_viewing_azimu_b_use_S_ ...
,viewing_gamma_z_use_S_ + 1.0*dvt*dt_(1+ndt)*dtau_viewing_gamma_z_use_S_ ...
,[] ...
,[] ...
,[] ...
);
if (flag_verbose>0); disp(sprintf(' %% ndv %d/%d ndt %d/%d: ssnll: %+0.6fs',ndv,n_dv,ndt,n_dt,ssnll_q2d_dvdt__(1+ndv,1+ndt))); end;
end;%for ndt=0:n_dt-1;
end;%for ndv=0:n_dv-1;
%%%%;
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,2,1);
imagesc(ssnll_q2d_dvdt__);colorbar;
xlabel('dt'); ylabel('dv');
subplot(1,2,2);
surfl(ssnll_q2d_dvdt__);colorbar;
xlabel('dt'); ylabel('dv');
%%%%%%%%;

%}
