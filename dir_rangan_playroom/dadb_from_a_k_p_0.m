%{
if ~exist('ba_from_single_shell_baba__','var'); ba_from_single_shell_baba__=[]; end;
%}
function ...
[ ...
 parameter ...
,dadb_k_p_qk_ ...
,ddadbdb_k_p_qk_ ...
] = ...
dadb_from_a_k_p_0( ...
 parameter ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
);
% uses fourier-series to calculate derivatives in azimu_b direction. ;

str_thisfunction = 'dadb_from_a_k_p_0';

if (nargin<1);
%%%%%%%%;
flag_verbose = 1; flag_disp = 1; nf=0;
if (flag_verbose); disp(sprintf(' %% testing dadb_from_a_k_p_0')); end;
%%%%%%%%;
k_int = 24;
k_eq_d_double = 0.250;
t_eq_d_double = 0.500;
n_order = 9;
%%%%;
k_p_r_max = k_int/(2*pi); k_eq_d = k_eq_d_double/(2*pi); str_C2 = 'C2';
flag_uniform_over_n_k_p_r = 1;
flag_uniform_over_polar_a = 0; %<-- This is set to match test_ssnll_from_a_k_p_14 ;
[ ...
 n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,~ ...
,~ ...
,~ ...
,~ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
] = ...
sample_sphere_7( ...
 0*flag_verbose ...
,k_p_r_max ...
,k_eq_d ...
,str_C2 ...
,flag_uniform_over_n_k_p_r ...
,flag_uniform_over_polar_a ...
) ;
%%%%;
qref_k_eq_d = k_eq_d_double/(2*pi)/max(1e-12,k_p_r_max);
[ ...
 qref_n_shell ...
,qref_azimu_b_shell_ ...
,qref_polar_a_shell_ ...
,qref_weight_shell_ ...
,qref_k_c_0_shell_ ...
,qref_k_c_1_shell_ ...
,qref_k_c_2_shell_ ...
,qref_n_polar_a ...
,qref_polar_a_ ...
,qref_n_azimu_b_ ...
] = ...
sample_shell_6( ...
 1.0 ...
,qref_k_eq_d ...
,str_C2 ...
,flag_uniform_over_polar_a ...
) ;
%%%%;
assert(fnorm(qref_azimu_b_shell_-k_p_azimu_b_qk_(1:qref_n_shell))<1e-12);
assert(fnorm(qref_polar_a_shell_-k_p_polar_a_qk_(1:qref_n_shell))<1e-12);
assert(fnorm(sum(qref_weight_shell_)-4*pi)<1e-12);
n_q = qref_n_shell;
weight_3d_k_p_qk__ = reshape(weight_3d_k_p_qk_,[n_q,n_k_p_r]);
weight_shell_qk__ = reshape(weight_shell_qk_,[n_q,n_k_p_r]);
assert(fnorm(4*pi*weight_3d_k_p_r_ - reshape(sum(weight_3d_k_p_qk__,1),[1,n_k_p_r]))<1e-12);
%%%%;
%%%%%%%%;
% collapse to single shell. ;
%%%%%%%%;
%%%%;
n_k_p_r = 1;
n_q = qref_n_shell;
n_qk = n_q;
n_qk_csum_ = [0;n_q];
k_p_r_qk_ = k_p_r_max*ones(n_q,1);
k_p_azimu_b_qk_ = qref_azimu_b_shell_;
k_p_polar_a_qk_ = qref_polar_a_shell_;
weight_3d_k_p_qk_ = qref_weight_shell_;
weight_shell_qk_ = qref_weight_shell_;
k_p_r_ = k_p_r_max;
weight_3d_k_p_r_ = (4/3)*pi*k_p_r_max^3;
k_c_0_qk_ = qref_k_c_0_shell_;
k_c_1_qk_ = qref_k_c_1_shell_;
k_c_2_qk_ = qref_k_c_2_shell_;
%%%%%%%%;
l_max_upb = 36;
l_max_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
l_max_(1+nk_p_r) = max(0,min(l_max_upb,1+ceil(2*pi*k_p_r_(1+nk_p_r))));
end;%for nk_p_r=0:n_k_p_r-1;
n_lm_ = (l_max_+1).^2;
n_lm_max = max(n_lm_);
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
l_max_max = max(l_max_);
m_max_ = -l_max_max : +l_max_max;
n_m_max = length(m_max_);
Y_l_val_ = zeros(n_lm_sum,1);
Y_m_val_ = zeros(n_lm_sum,1);
Y_k_val_ = zeros(n_lm_sum,1);
for nk_p_r=0:n_k_p_r-1;
l_max = l_max_(1+nk_p_r);
tmp_l_val_ = zeros(n_lm_(1+nk_p_r),1);
tmp_m_val_ = zeros(n_lm_(1+nk_p_r),1);
na=0; 
for l_val=0:l_max;
for m_val=-l_val:+l_val;
tmp_l_val_(1+na) = l_val;
tmp_m_val_(1+na) = m_val;
na=na+1;
end;%for m_val=-l_val:+l_val;
end;%for l_val=0:l_max;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
Y_l_val_(1+tmp_index_) = tmp_l_val_;
Y_m_val_(1+tmp_index_) = tmp_m_val_;
Y_k_val_(1+tmp_index_) = k_p_r_(1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
weight_Y_ = zeros(n_lm_sum,1);
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
weight_Y_(1+tmp_index_) = weight_3d_k_p_r_(1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;
if (flag_verbose); disp(sprintf(' %% n_qk %d, l_max_max %d',n_qk,l_max_max)); end;
%%%%%%%%;
rng(0); a_k_Y_true_ = ( randn(n_lm_sum,1) + i*randn(n_lm_sum,1) ).*exp(-(Y_l_val_+abs(Y_m_val_)).^2/(2*(l_max_max/2)^2));
tmp_t = tic;
[a_k_p_quad_] = real(convert_spharm_to_k_p_1(0*flag_verbose,n_qk,n_qk_csum_,k_p_r_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,weight_3d_k_p_qk_,weight_shell_qk_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_Y_true_))*k_p_r_max^1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_Y_true_ --> a_k_p_quad_ time %0.2fs',tmp_t)); end;
tmp_t = tic;
[a_k_Y_reco_] = convert_k_p_to_spharm_1(0*flag_verbose,n_qk,n_qk_csum_,k_p_r_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,weight_3d_k_p_qk_,weight_shell_qk_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_p_quad_)*k_p_r_max^1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_Y_reco_ time %0.2fs',tmp_t)); end;
fnorm_disp(flag_verbose,'a_k_Y_true_',a_k_Y_true_,'a_k_Y_reco_',a_k_Y_reco_,' %<-- should be large');
a_k_Y_true_ = a_k_Y_reco_;
tmp_t = tic;
[a_k_p_quad_] = real(convert_spharm_to_k_p_1(0*flag_verbose,n_qk,n_qk_csum_,k_p_r_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,weight_3d_k_p_qk_,weight_shell_qk_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_Y_true_))*k_p_r_max^1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_Y_true_ --> a_k_p_quad_ time %0.2fs',tmp_t)); end;
tmp_t = tic;
[a_k_Y_reco_] = convert_k_p_to_spharm_1(0*flag_verbose,n_qk,n_qk_csum_,k_p_r_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,weight_3d_k_p_qk_,weight_shell_qk_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_p_quad_)*k_p_r_max^1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_Y_reco_ time %0.2fs',tmp_t)); end;
fnorm_disp(flag_verbose,'a_k_Y_true_',a_k_Y_true_,'a_k_Y_reco_',a_k_Y_reco_,' %<-- should be small');
%%%%%%%%;
dadb_k_Y_true_ = a_k_Y_true_.*(+i).*Y_m_val_;
ddadbdb_k_Y_true_ = dadb_k_Y_true_.*(+i).*Y_m_val_;
[dadb_k_p_quad_] = real(convert_spharm_to_k_p_1(0*flag_verbose,n_qk,n_qk_csum_,k_p_r_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,weight_3d_k_p_qk_,weight_shell_qk_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,dadb_k_Y_true_))*k_p_r_max^1;
[ddadbdb_k_p_quad_] = real(convert_spharm_to_k_p_1(0*flag_verbose,n_qk,n_qk_csum_,k_p_r_qk_,k_p_azimu_b_qk_,k_p_polar_a_qk_,weight_3d_k_p_qk_,weight_shell_qk_,n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,ddadbdb_k_Y_true_))*k_p_r_max^1;
%%%%%%%%;
a_k_p_qk_ = a_k_p_quad_;
tmp_t = tic();
[ ...
 ~ ...
,dadb_k_p_qk_ ...
,ddadbdb_k_p_qk_ ...
] = ...
dadb_from_a_k_p_0( ...
 [] ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_p_qk_ --> dadb_k_p_qk_ time %0.2fs',tmp_t)); end;
fnorm_disp(flag_verbose,'dadb_k_p_quad_',dadb_k_p_quad_,'dadb_k_p_qk_',dadb_k_p_qk_,' %<-- should be small');
fnorm_disp(flag_verbose,'ddadbdb_k_p_quad_',ddadbdb_k_p_quad_,'ddadbdb_k_p_qk_',ddadbdb_k_p_qk_,' %<-- should be small');
%%%%%%%%;
disp('returning'); return;
end;%if (nargin<1);

flag_verbose=0;

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;
if (nargin<1+na); n_order=[]; end; na=na+1;
if (nargin<1+na); n_qk=[]; end; na=na+1;
if (nargin<1+na); n_qk_csum_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_qk_=[]; end; na=na+1;
if (nargin<1+na); k_p_azimu_b_qk_=[]; end; na=na+1;
if (nargin<1+na); k_p_polar_a_qk_=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_p_qk_=[]; end; na=na+1;
if (nargin<1+na); weight_shell_qk_=[]; end; na=na+1;
if (nargin<1+na); n_k_p_r=[]; end; na=na+1;
if (nargin<1+na); k_p_r_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_max=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_p_r_=[]; end; na=na+1;
if (nargin<1+na); k_c_0_qk_=[]; end; na=na+1;
if (nargin<1+na); k_c_1_qk_=[]; end; na=na+1;
if (nargin<1+na); k_c_2_qk_=[]; end; na=na+1;
if (nargin<1+na); n_polar_a_k_=[]; end; na=na+1;
if (nargin<1+na); polar_a_ka__=[]; end; na=na+1;
if (nargin<1+na); n_azimu_b_ka__=[]; end; na=na+1;
if (nargin<1+na); a_k_p_qk_=[]; end; na=na+1;

if (flag_verbose>0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;

%%%%%%%%;
% Check spherical-grid for consistency. ;
% For efficiency the spherical-grid should be generated using: ;
% flag_uniform_over_n_k_p_r = 1;
% flag_uniform_over_polar_a = 0;
% str_T_vs_L = 'C2';
% For accuracy one might consider increasing the angular-resolution (on each shell) ;
% without necessarily increasing the radial-resolution (i.e., the distance between shells). ;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% Check spherical-grid for consistency.')); end;
%%%%%%%%;
[ ...
 parameter ...
,polar_a_single_shell_ ...
,n_azimu_b_single_shell_ ...
,n_polar_a_single_shell ...
,polar_a_single_shell_lim_ ...
,n_q_single_shell ...
,k_c_0_single_shell_ ...
,k_c_1_single_shell_ ...
,k_c_2_single_shell_ ...
,k_p_azimu_b_single_shell_ ...
,k_p_polar_a_single_shell_ ...
,weight_3d_k_single_shell_ ...
,weight_shell_qk_single_shell_ ...
,weight_shell_qk_unit_shell_ ...
] = ...
interpolate_template_consistency_check_0( ...
 parameter ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
);
%%%%%%%%;
n_q = n_q_single_shell;

tmp_t = tic();
%%%%%%%%;
a_k_p_qk__ = reshape(a_k_p_qk_,[n_q,n_k_p_r]);
dadb_k_p_qk__ = zeros(n_q,n_k_p_r);
ddadbdb_k_p_qk__ = zeros(n_q,n_k_p_r);
for nk_p_r=0:n_k_p_r-1;
a_k_p_q_ = a_k_p_qk__(:,1+nk_p_r);
dadb_k_p_q_ = zeros(n_q,1);
ddadbdb_k_p_q_ = zeros(n_q,1);
nq=0;
for npolar_a=0:n_polar_a_single_shell-1;
n_azimu_b = n_azimu_b_single_shell_(1+npolar_a);
q_ = transpose(0:n_azimu_b-1); 
if mod(n_azimu_b,2)==0; tmp_index_pos_ = [0:n_azimu_b/2-1]; tmp_index_zer_ = n_azimu_b/2; tmp_index_neg_ = [n_azimu_b/2+1:n_azimu_b-1]; end;
if mod(n_azimu_b,2)==1; tmp_index_pos_ = [0:(n_azimu_b-1)/2]; tmp_index_zer_ = []; tmp_index_neg_ = [(n_azimu_b-1)/2+1:n_azimu_b-1]; end;
q_(1+tmp_index_zer_) = 0;
q_(1+tmp_index_neg_) = q_(1+tmp_index_neg_)-n_azimu_b;
tmp_index_b_ = nq + [0:n_azimu_b-1];
a_k_p_b_ = a_k_p_q_(1+tmp_index_b_);
a_k_q_b_ = fft(a_k_p_b_)/max(1,sqrt(n_azimu_b));
dadb_k_q_b_ = a_k_q_b_.*(+i).*q_;
ddadbdb_k_q_b_ = dadb_k_q_b_.*(+i).*q_;
dadb_k_p_b_ = ifft(dadb_k_q_b_)*sqrt(n_azimu_b);
ddadbdb_k_p_b_ = ifft(ddadbdb_k_q_b_)*sqrt(n_azimu_b);
dadb_k_p_q_(1+tmp_index_b_) = dadb_k_p_b_;
ddadbdb_k_p_q_(1+tmp_index_b_) = ddadbdb_k_p_b_;
nq = nq + n_azimu_b;
end;%for npolar_a=0:n_polar_a_single_shell-1;
assert(nq==n_q);
dadb_k_p_qk__(:,1+nk_p_r) = dadb_k_p_q_;
ddadbdb_k_p_qk__(:,1+nk_p_r) = ddadbdb_k_p_q_;
end;%for nk_p_r=0:n_k_p_r-1;
dadb_k_p_qk_ = reshape(dadb_k_p_qk__,[n_qk,1]);
ddadbdb_k_p_qk_ = reshape(ddadbdb_k_p_qk__,[n_qk,1]);
%%%%%%%%;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% dadb_k_p_qk_: %0.6fs',tmp_t)); end;

if (flag_verbose>0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;
