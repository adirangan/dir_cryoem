%{
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('n_R','var'); n_R = []; end;
if ~exist('R_use_R___','var'); R_use_R___ = []; end;
if ~exist('a_R_k_p_Rqk__','var'); a_R_k_p_Rqk__=[]; end;
if ~exist('ba_from_single_shell_Rbaba___','var'); ba_from_single_shell_Rbaba___=[]; end;
if ~exist('wS_from_R_single_shell_Rsba___','var'); wS_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSda_from_R_single_shell_Rsba___','var'); dwSda_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSdb_from_R_single_shell_Rsba___','var'); dwSdb_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_Rsba___','var'); ddwSdaa_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdab_from_R_single_shell_Rsba___','var'); ddwSdab_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_Rsba___','var'); ddwSdbb_from_R_single_shell_Rsba___=[]; end;
if ~exist('KAPPA','var'); KAPPA = []; end;
%}
function ...
[ ...
 parameter ...
,U_tilde_SmallRotation_Delta_qkabc3__ ...
,v_tilde_qkabci__  ...
,w_tilde_qkabc_  ...
,alph_tilde_i_ ...
,beta_tilde_i_ ... 
,dvol_a_k_p_qki__ ...
,dtau_euler_polar_a_Mi__ ...
,dtau_euler_azimu_b_Mi__ ...
,dtau_euler_gamma_z_Mi__ ...
] = ...
eig_ddssnll_lanczos_from_a_k_p_4( ...
 parameter ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,qref_k_eq_d ...
,a_k_p_qk_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_viewing_S ...
,S_k_p_q2d_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,n_M ...
,weight_imagecount_M_ ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,KAPPA ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_R ...
,R_use_R___ ...
,a_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
,U_tilde_SmallRotation_Delta_qkabc3__ ...
,v_tilde_qkabci__  ...
,w_tilde_qkabc_  ...
,alph_tilde_i_ ...
,beta_tilde_i_ ... 
,dvol_a_k_p_qki__ ...
,dtau_euler_polar_a_Mi__ ...
,dtau_euler_azimu_b_Mi__ ...
,dtau_euler_gamma_z_Mi__ ...
);

str_thisfunction = 'eig_ddssnll_lanczos_from_a_k_p_4';

%%%%%%%%;
if (nargin<1);
%%%%%%%%;
disp(sprintf(' %% need to test %s',str_thisfunction)); return;
disp(sprintf(' %% returning')); return;
%%%%%%%%;
end;%if (nargin<1);
%%%%%%%%;

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;
if (nargin<1+na); n_qk=[]; end; na=na+1;
if (nargin<1+na); n_qk_csum_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_qk_=[]; end; na=na+1;
if (nargin<1+na); k_p_azimu_b_qk_=[]; end; na=na+1;
if (nargin<1+na); k_p_polar_a_qk_=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_p_qk_=[]; end; na=na+1;
if (nargin<1+na); weight_shell_qk_=[]; end; na=na+1;
if (nargin<1+na); n_k_p_r=[]; end; na=na+1;
if (nargin<1+na); k_p_r_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_max=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_p_r_=[]; end; na=na+1;
if (nargin<1+na); k_c_0_qk_=[]; end; na=na+1;
if (nargin<1+na); k_c_1_qk_=[]; end; na=na+1;
if (nargin<1+na); k_c_2_qk_=[]; end; na=na+1;
if (nargin<1+na); n_polar_a_k_=[]; end; na=na+1;
if (nargin<1+na); polar_a_ka__=[]; end; na=na+1;
if (nargin<1+na); n_azimu_b_ka__=[]; end; na=na+1;
if (nargin<1+na); qref_k_eq_d=[]; end; na=na+1;
if (nargin<1+na); a_k_p_qk_=[]; end; na=na+1;
if (nargin<1+na); n_w_=[]; end; na=na+1;
if (nargin<1+na); weight_2d_k_p_r_=[]; end; na=na+1;
if (nargin<1+na); weight_2d_wk_=[]; end; na=na+1;
if (nargin<1+na); n_viewing_S=[]; end; na=na+1;
if (nargin<1+na); S_k_p_q2d_wkS__=[]; end; na=na+1;
if (nargin<1+na); viewing_polar_a_S_=[]; end; na=na+1;
if (nargin<1+na); viewing_azimu_b_S_=[]; end; na=na+1;
if (nargin<1+na); viewing_weight_S_=[]; end; na=na+1;
if (nargin<1+na); n_viewing_polar_a=[]; end; na=na+1;
if (nargin<1+na); viewing_polar_a_=[]; end; na=na+1;
if (nargin<1+na); n_viewing_azimu_b_=[]; end; na=na+1;
if (nargin<1+na); viewing_gamma_z_S_=[]; end; na=na+1;
if (nargin<1+na); n_M=[]; end; na=na+1;
if (nargin<1+na); weight_imagecount_M_=[]; end; na=na+1;
if (nargin<1+na); M_k_p_wkM__=[]; end; na=na+1;
if (nargin<1+na); n_CTF=[]; end; na=na+1;
if (nargin<1+na); index_nCTF_from_nM_=[]; end; na=na+1;
if (nargin<1+na); CTF_k_p_wkC__=[]; end; na=na+1;
if (nargin<1+na); n_eta=[]; end; na=na+1;
if (nargin<1+na); index_neta_from_nM_=[]; end; na=na+1;
if (nargin<1+na); eta_k_p_wke__=[]; end; na=na+1;
if (nargin<1+na); euler_polar_a_M_=[]; end; na=na+1;
if (nargin<1+na); euler_azimu_b_M_=[]; end; na=na+1;
if (nargin<1+na); euler_gamma_z_M_=[]; end; na=na+1;
if (nargin<1+na); KAPPA=[]; end; na=na+1;
if (nargin<1+na); wS_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); dwSda_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); dwSdb_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdaa_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdab_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdbb_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); n_R=[]; end; na=na+1;
if (nargin<1+na); R_use_R___=[]; end; na=na+1;
if (nargin<1+na); a_R_k_p_Rqk__=[]; end; na=na+1;
if (nargin<1+na); ba_from_single_shell_Rbaba___=[]; end; na=na+1;
if (nargin<1+na); wS_from_R_single_shell_Rsba___=[]; end; na=na+1;
if (nargin<1+na); dwSda_from_R_single_shell_Rsba___=[]; end; na=na+1;
if (nargin<1+na); dwSdb_from_R_single_shell_Rsba___=[]; end; na=na+1;
if (nargin<1+na); ddwSdaa_from_R_single_shell_Rsba___=[]; end; na=na+1;
if (nargin<1+na); ddwSdab_from_R_single_shell_Rsba___=[]; end; na=na+1;
if (nargin<1+na); ddwSdbb_from_R_single_shell_Rsba___=[]; end; na=na+1;
if (nargin<1+na); U_tilde_SmallRotation_Delta_qkabc3__=[]; end; na=na+1;
if (nargin<1+na); v_tilde_qkabci__ =[]; end; na=na+1;
if (nargin<1+na); w_tilde_qkabc_ =[]; end; na=na+1;
if (nargin<1+na); alph_tilde_i_=[]; end; na=na+1;
if (nargin<1+na); beta_tilde_i_=[]; end; na=na+1; 
if (nargin<1+na); dvol_a_k_p_qki__=[]; end; na=na+1;
if (nargin<1+na); dtau_euler_polar_a_Mi__=[]; end; na=na+1;
if (nargin<1+na); dtau_euler_azimu_b_Mi__=[]; end; na=na+1;
if (nargin<1+na); dtau_euler_gamma_z_Mi__=[]; end; na=na+1;

if isempty(parameter);
parameter = struct('type','parameter');
end;%if isempty(parameter);
%%%%%%%%;
if (~isfield(parameter,'flag_verbose')); parameter.flag_verbose = 0; end; %<-- parameter_bookmark. ;
flag_verbose = parameter.flag_verbose;
if (~isfield(parameter,'flag_surrogate')); parameter.flag_surrogate = 0; end; %<-- parameter_bookmark. ;
flag_surrogate = parameter.flag_surrogate;
if (~isfield(parameter,'flag_ignore_U')); parameter.flag_ignore_U = 0; end; %<-- parameter_bookmark. ;
flag_ignore_U = parameter.flag_ignore_U;
if (~isfield(parameter,'flag_implicit_dtau')); parameter.flag_implicit_dtau = 1; end; %<-- parameter_bookmark. ;
flag_implicit_dtau = parameter.flag_implicit_dtau; %<-- use first-order implicit dtau. ;
if (~isfield(parameter,'flag_check')); parameter.flag_check = 0; end; %<-- parameter_bookmark. ;
flag_check = parameter.flag_check;
if (~isfield(parameter,'flag_disp')); parameter.flag_disp = 0; end; %<-- parameter_bookmark. ;
flag_disp = parameter.flag_disp; nf=0;
if (~isfield(parameter,'randseed')); parameter.randseed = 1; end; %<-- parameter_bookmark. ;
randseed = parameter.randseed; rng(randseed);
if (~isfield(parameter,'tolerance_master')); parameter.tolerance_master = 1e-2; end; %<-- parameter_bookmark. ;
tolerance_master = parameter.tolerance_master;
if (~isfield(parameter,'viewing_k_eq_d')); parameter.viewing_k_eq_d = []; end; %<-- parameter_bookmark. ;
viewing_k_eq_d = parameter.viewing_k_eq_d;
if (~isfield(parameter,'template_k_eq_d')); parameter.template_k_eq_d = -1; end; %<-- parameter_bookmark. ;
template_k_eq_d = parameter.template_k_eq_d;
if (~isfield(parameter,'n_order')); parameter.n_order = 5; end; %<-- parameter_bookmark. ;
n_order = parameter.n_order;
%%%%;
if ~isfield(parameter,'kernel_basic_qref_k_eq_d_double'); parameter.kernel_basic_qref_k_eq_d_double=[]; end;
kernel_basic_qref_k_eq_d_double=parameter.kernel_basic_qref_k_eq_d_double;
if (~isfield(parameter,'kernel_basic_l_max_use')); parameter.kernel_basic_l_max_use = round(2*pi*k_p_r_max); end; %<-- parameter_bookmark. ;
kernel_basic_l_max_use = parameter.kernel_basic_l_max_use;
if (~isfield(parameter,'kernel_basic_l_max_ext')); parameter.kernel_basic_l_max_ext = ceil(1.25*kernel_basic_l_max_use); end; %<-- parameter_bookmark. ;
kernel_basic_l_max_ext = parameter.kernel_basic_l_max_ext;
if (~isfield(parameter,'kernel_basic_l_max_band')); parameter.kernel_basic_l_max_band = +Inf; end; %<-- parameter_bookmark. ;
kernel_basic_l_max_band = parameter.kernel_basic_l_max_band;
if (~isfield(parameter,'tolerance_pinv')); parameter.tolerance_pinv = 1e-6; end; %<-- parameter_bookmark. ;
tolerance_pinv = parameter.tolerance_pinv;
%%%%;
if (~isfield(parameter,'lanczos_n_iteration_max')); parameter.lanczos_n_iteration_max = 8; end; %<-- parameter_bookmark. ;
lanczos_n_iteration_max = parameter.lanczos_n_iteration_max;
lanczos_n_iteration_pre = size(v_tilde_qkabci__,2);
lanczos_n_iteration_cur = max(0,lanczos_n_iteration_max-lanczos_n_iteration_pre);
%%%%%%%%;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% ')); end;
if (flag_verbose>0); disp(sprintf(' %% setting indices')); end;
%%%%%%%%;
ddssnll_from_a_k_p_helper_n_w_4; %<-- set indices. ;
ddssnll_from_a_k_p_helper_qref_4; %<-- set indices and check for consistency. ;
ddssnll_from_a_k_p_helper_n_qk_4; %<-- set indices (some redundant definitions). ;
ddssnll_from_a_k_p_helper_weight_3d_riesz_4; %<-- set weights. ;
%%%%%%%%;

if isempty(weight_imagecount_M_); weight_imagecount_M_ = ones(n_M,1); end;
n_M_use = n_M;
weight_imagecount_M_use_ = weight_imagecount_M_;
if flag_implicit_dtau;
if (flag_verbose>0); disp(sprintf(' %% flag_implicit_dtau %d, setting n_M_use = 0',flag_implicit_dtau)); end;
n_M_use = 0;
weight_imagecount_M_use_ = [];
end;%if flag_implicit_dtau;

%%%%%%%%;
if isempty(v_tilde_qkabci__); v_tilde_qkabci__ = zeros(n_qk + n_M_use*n_3,0); end;
if isempty(w_tilde_qkabc_); w_tilde_qkabc_ = zeros(n_qk + n_M_use*n_3,0); end;
if isempty(alph_tilde_i_); alph_tilde_i_ = zeros(0,1); end;
if isempty(beta_tilde_i_); beta_tilde_i_ = zeros(0,1); end;
if isempty(dvol_a_k_p_qki__); dvol_a_k_p_qki__ = zeros(n_qk,0); end;
if isempty(dtau_euler_polar_a_Mi__); dtau_euler_polar_a_Mi__ = zeros(n_M,0); end;
if isempty(dtau_euler_azimu_b_Mi__); dtau_euler_azimu_b_Mi__ = zeros(n_M,0); end;
if isempty(dtau_euler_gamma_z_Mi__); dtau_euler_gamma_z_Mi__ = zeros(n_M,0); end;

%%%%%%%%;
if isempty(n_CTF);
n_CTF = 1;
CTF_k_p_wkC__ = ones(n_w_sum,n_CTF);
index_nCTF_from_nM_ = zeros(n_M,1);
end;%if isempty(n_CTF);
%%%%;
if isempty(n_eta);
n_eta = 1;
eta_k_p_r_wke__ = ones(n_w_sum,n_eta);
index_neta_from_nM_ = zeros(n_M,1);
end;%if isempty(n_eta);
%%%%%%%%;

%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% ')); end;
if (flag_verbose>0); disp(sprintf(' %% set weight_3d_riesz_weight_imagecount_qkabc_')); end;
%%%%%%%%;
n_qkabc = n_qk + n_M_use*n_3; index_qk_ = [0:n_qk-1]; index_abc_ = n_qk + [0:n_M_use*n_3-1]; n_abc = numel(index_abc_);
weight_3d_riesz_weight_imagecount_qkabc_ = cat(1,weight_3d_riesz_qk_/scaling_volumetric,repmat(weight_imagecount_M_use_,[3,1]));
numerator_root_weight_3d_riesz_weight_imagecount_qkabc_ = reshape(sqrt(weight_3d_riesz_weight_imagecount_qkabc_),[n_qkabc,1]);
denomator_root_weight_3d_riesz_weight_imagecount_qkabc_ = 1./max(1e-12,reshape(sqrt(weight_3d_riesz_weight_imagecount_qkabc_),[n_qkabc,1]));
if (flag_verbose>0); disp(sprintf(' %% flag_implicit_dtau %d, setting n_qk %d n_qkabc %d n_abc %d',flag_implicit_dtau,n_qk,n_qkabc,n_abc)); end;

%%%%%%%%;
a_k_p_qk__ = [];
if (size(a_k_p_qk_,1)==n_q & size(a_k_p_qk_,2)==n_k_p_r); a_k_p_qk__ = a_k_p_qk_; a_k_p_qk_ = []; end;
if isempty(a_k_p_qk__); a_k_p_qk__ = local_qk__from_qk_(n_q,n_k_p_r,a_k_p_qk_); end;
if isempty(a_k_p_qk_); a_k_p_qk_ = local_qk_from_qk__(n_q,n_k_p_r,a_k_p_qk__); end;
%%%%%%%%;

if isempty(U_tilde_SmallRotation_Delta_qkabc3__) & ~flag_ignore_U;
%%%%%%%%;
tmp_t = tic();
if (flag_verbose>0); disp(sprintf(' %% ')); end;
if (flag_verbose>0); disp(sprintf(' %% set U_tilde_SmallRotation_Delta_qkabc3__')); end;
parameter_SmallRotation = parameter;
parameter_SmallRotation.flag_verbose = max(0,flag_verbose-1);
parameter_SmallRotation.flag_check = 0 & flag_implicit_dtau; %<-- cannot check if n_M_use==0;
[ ...
 ~ ...
,U_tilde_SmallRotation_Delta_qkabcs__ ...
,U_SmallRotation_Delta_qkabcs__ ...
,S_SmallRotation_Delta_s_ ...
,V_SmallRotation_Delta_ss__ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_R ...
,R_use_R___ ...
,a_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
] = ...
U_SmallRotation_from_a_k_p_3( ...
 parameter_SmallRotation ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,qref_k_eq_d ...
,a_k_p_qk_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_viewing_S ...
,S_k_p_q2d_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,n_M_use ...
,weight_imagecount_M_use_ ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_R ...
,R_use_R___ ...
,a_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
);
U_SmallRotation_Delta_qkabc3__ = U_SmallRotation_Delta_qkabcs__(:,1:n_3);
tmp_t = toc(tmp_t); disp(sprintf(' %% U_SmallRotation_Delta_qkabc3__: time %0.2fs',tmp_t));
U_SmallRotation_Delta_qkabc3__ = local_qkabc_imagecount_normalize_fn__(n_q,n_k_p_r,weight_3d_riesz_qk_,n_M_use,weight_imagecount_M_use_,U_SmallRotation_Delta_qkabc3__);
[tmp_UU_33__] = local_qkabc_imagecount_fm__bar_dot_gn__(n_q,n_k_p_r,weight_3d_riesz_qk_,n_M_use,weight_imagecount_M_use_,U_SmallRotation_Delta_qkabc3__,U_SmallRotation_Delta_qkabc3__);
if (flag_verbose>1); disp(sprintf(' %% abs(tmp_UU_33__): \n %s',num2str(transpose(abs(tmp_UU_33__(:))),' %+0.16f %+0.16f %+0.16f\n'))); end;
U_tilde_SmallRotation_Delta_qkabc3__ = U_tilde_SmallRotation_Delta_qkabcs__(:,1:n_3);
%%%%%%%%;
end;%if isempty(U_tilde_SmallRotation_Delta_qkabc3__) & ~flag_ignore_U;
%%%%%%%%;
if ~flag_ignore_U;
[tmp_UU_33__] = local_qkabc_imagecount_fm__bar_dot_gn__(n_q,n_k_p_r,[],n_M_use,[],U_tilde_SmallRotation_Delta_qkabc3__,U_tilde_SmallRotation_Delta_qkabc3__);
if (flag_verbose>1); disp(sprintf(' %% abs(tmp_UU_33__): \n %s',num2str(transpose(abs(tmp_UU_33__(:))),' %+0.16f %+0.16f %+0.16f\n'))); end;
end;%if ~flag_ignore_U;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% ')); end;
if (flag_verbose>0); disp(sprintf(' %% perform lanczos iteration ')); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
lanczos_n_iteration_sum = lanczos_n_iteration_pre + lanczos_n_iteration_cur;
v_tilde_qkabci__ = cat(2,v_tilde_qkabci__,zeros(n_qkabc,lanczos_n_iteration_cur));
alph_tilde_i_ = cat(1,alph_tilde_i_,zeros(lanczos_n_iteration_cur,1));
beta_tilde_i_ = cat(1,beta_tilde_i_,zeros(lanczos_n_iteration_cur,1));
dvol_a_k_p_qki__ = cat(2,dvol_a_k_p_qki__,zeros(n_qk,lanczos_n_iteration_cur));
dtau_euler_polar_a_Mi__ = cat(2,dtau_euler_polar_a_Mi__,zeros(n_M,lanczos_n_iteration_cur));
dtau_euler_azimu_b_Mi__ = cat(2,dtau_euler_azimu_b_Mi__,zeros(n_M,lanczos_n_iteration_cur));
dtau_euler_gamma_z_Mi__ = cat(2,dtau_euler_gamma_z_Mi__,zeros(n_M,lanczos_n_iteration_cur));

%%%%%%%%%%%%%%%%;
for niteration=lanczos_n_iteration_pre:lanczos_n_iteration_sum-1;
%%%%%%%%%%%%%%%%;
if niteration==0;
if (flag_verbose>0); disp(sprintf(' %% %% ni %.2d, setting beta to zero ',niteration)); end;
beta_tilde_i_(1+niteration)=0;
end;%if niteration==0;
if niteration> 0;
beta_tilde_i_(1+niteration) = sqrt(local_qkabc_f_bar_dot_g_(n_q,n_k_p_r,[],n_M_use,w_tilde_qkabc_,w_tilde_qkabc_));
if (flag_verbose>0); disp(sprintf(' %% %% ni %.2d, beta_tilde_i_(1+niteration) = %0.6f',niteration,beta_tilde_i_(1+niteration))); end;
end;%if niteration> 0;
%%%%%%%%;
if abs(beta_tilde_i_(1+niteration))>=1e-12;
v_tilde_qkabc_ = w_tilde_qkabc_/beta_tilde_i_(1+niteration);
end;%if abs(beta_tilde_i_(1+niteration))>=1e-12;
if abs(beta_tilde_i_(1+niteration))< 1e-12;
if (flag_verbose>0); disp(sprintf(' %% %% ni %.2d, beta close to zero, generating new v_tilde_qkabc_',niteration)); end;
[~,dvol_qk_] = ...
dadb_from_a_k_p_0( ...
 [] ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
);
dtau_euler_polar_a_M_use_ = 1*pi*rand(n_M_use,1);
dtau_euler_azimu_b_M_use_ = 2*pi*rand(n_M_use,1);
dtau_euler_gamma_z_M_use_ = 2*pi*rand(n_M_use,1);
v_tilde_qkabc_ = bsxfun(@times,numerator_root_weight_3d_riesz_weight_imagecount_qkabc_,local_qkabc_from_qk_a_b_c_(n_q,n_k_p_r,n_M_use,dvol_qk_,dtau_euler_polar_a_M_use_,dtau_euler_azimu_b_M_use_,dtau_euler_gamma_z_M_use_));
clear dvol_qk_ dtau_euler_polar_a_M_use_ dtau_euler_azimu_b_M_use_ dtau_euler_gamma_z_M_use_ ;
if niteration>=1;
v_tilde_qkabc_ = local_qkabc_orthogonalcomplement_gperpfn(n_q,n_k_p_r,[],n_M_use,v_tilde_qkabci__(:,1+[0:niteration-1]),v_tilde_qkabc_);
v_tilde_qkabc_ = local_qkabc_normalize_f_(n_q,n_k_p_r,[],n_M_use,v_tilde_qkabc_);
end;%if niteration>=1;
if ~flag_ignore_U; 
v_tilde_qkabc_ = local_qkabc_orthogonalcomplement_gperpfn(n_q,n_k_p_r,[],n_M_use,U_tilde_SmallRotation_Delta_qkabc3__,v_tilde_qkabc_); 
end;%if ~flag_ignore_U; 
v_tilde_qkabc_ = local_qkabc_normalize_f_(n_q,n_k_p_r,[],n_M_use,v_tilde_qkabc_);
tmp_vv = local_qkabc_f_bar_dot_g_(n_q,n_k_p_r,[],n_M_use,v_tilde_qkabc_,v_tilde_qkabc_);
if (flag_verbose>0); disp(sprintf(' %% %% ni %.2d, new v_tilde_qkabc_: numel %d; tmp_vv: %0.16f',niteration,numel(v_tilde_qkabc_),tmp_vv)); end;
if ~flag_ignore_U;
[tmp_Uv_3_] = local_qkabc_fm__bar_dot_gn__(n_q,n_k_p_r,[],n_M_use,U_tilde_SmallRotation_Delta_qkabc3__,v_tilde_qkabc_);
if (flag_verbose>1); disp(sprintf(' %% abs(tmp_Uv_3_): %s',num2str(transpose(abs(tmp_Uv_3_)),' %+0.16f'))); end;
end;%if ~flag_ignore_U;
end;%if abs(beta_tilde_i_(1+niteration))< 1e-12;
%%%%%%%%;
v_tilde_qkabci__(:,1+niteration) = v_tilde_qkabc_;
%%%%;
% calculate w_tilde_qkabc_ = PHP * v_tilde_qkabci__(:,1+niteration) ;
%%%%;
w_tilde_qkabc_ = v_tilde_qkabci__(:,1+niteration);
if ~flag_ignore_U; w_tilde_qkabc_ = local_qkabc_orthogonalcomplement_gperpfn(n_q,n_k_p_r,[],n_M_use,U_tilde_SmallRotation_Delta_qkabc3__,w_tilde_qkabc_); end; %<-- Projection. ;
eig_ddssnll_lanczos_from_a_k_p_helper_4; %<-- apply weighted version of H. ;
if ~flag_ignore_U; w_tilde_qkabc_ = local_qkabc_orthogonalcomplement_gperpfn(n_q,n_k_p_r,[],n_M_use,U_tilde_SmallRotation_Delta_qkabc3__,w_tilde_qkabc_); end; %<-- Projection. ;
%%%%;
alph_tilde_i_(1+niteration) = local_qkabc_f_bar_dot_g_(n_q,n_k_p_r,[],n_M_use,w_tilde_qkabc_,v_tilde_qkabci__(:,1+niteration));
if (flag_verbose>0); disp(sprintf(' %% %% ni %.2d, upd w_tilde_qkabc_: numel %d; alph_tilde_i_(1+niteration) = %0.6f',niteration,numel(w_tilde_qkabc_),alph_tilde_i_(1+niteration))); end;
w_tilde_qkabc_ = w_tilde_qkabc_ - alph_tilde_i_(1+niteration)*v_tilde_qkabci__(:,1+niteration+0);
if niteration>=1; w_tilde_qkabc_ = w_tilde_qkabc_ - beta_tilde_i_(1+niteration)*v_tilde_qkabci__(:,1+niteration-1); end;
%%%%%%%%;
% This next step seems necessary for stability. ;
%%%%%%%%;
w_tilde_qkabc_ = local_qkabc_orthogonalcomplement_gperpfn(n_q,n_k_p_r,[],n_M_use,v_tilde_qkabci__(:,1:niteration),w_tilde_qkabc_); %<-- should be unnecessary in exact arithmetic with a perfectly hermitian matrix. ;
%%%%%%%%;
if (flag_verbose>1);
[tmp_VV_ii__] = local_qkabc_fm__bar_dot_gn__(n_q,n_k_p_r,[],n_M_use,v_tilde_qkabci__(:,1:1+niteration),v_tilde_qkabci__(:,1:1+niteration));
tmp_str_format = ' %% %%'; for ni=0:niteration; tmp_str_format = sprintf('%s %%+0.4f',tmp_str_format); end; tmp_str_format = sprintf('%s\\n',tmp_str_format);
disp(sprintf(' %% abs(tmp_VV_ii__): \n %s',num2str(transpose(abs(tmp_VV_ii__(:))),tmp_str_format)));
end;%if (flag_verbose>1);
%%%%%%%%%%%%%%%%;
end;%for niteration=lanczos_n_iteration_pre:lanczos_n_iteration_sum-1;
%%%%%%%%%%%%%%%%;

%%%%%%%%;
if (flag_disp>0);
%%%%%%%%;
n_iteration = numel(alph_tilde_i_); T__ = real(spdiags([circshift(beta_tilde_i_,-1),alph_tilde_i_,beta_tilde_i_],[-1,0,+1],n_iteration,n_iteration));
lambda_xi__ = -Inf*ones(n_iteration,n_iteration);
for niteration=0:n_iteration-1;
T_sub__ = T__(1:1+niteration,1:1+niteration);
lambda_sub_ = eigs(T_sub__,[],1+niteration);
lambda_xi__(1:1+niteration,1+niteration) = sort(lambda_sub_,'ascend');
end;%for niteration=0:n_iteration-1;
S_x_ = sort(eigs(T__,[],n_iteration),'ascend');
Slim_ = [min(0,min(S_x_)),max(S_x_)];
%%%%%%%%;
figure(1+nf);nf=nf+1;clf;figbig; fig81s;
c_use__ = colormap_beach(); n_c_use = size(c_use__,1);
niteration_step = 16;
markersize_use = 8;
linewidth_sml = 0.5;
linewidth_big = 2;
fontsize_use = 16;
p_row = 2; p_col = 2; np=0;
%%%%;
subplot(p_row,p_col,1+np);np=np+1;
hold on;
plot(repmat([0;n_iteration],[1,n_iteration]),repmat(reshape(S_x_,[1,n_iteration]),[2,1]),'-','Color',0.85*[1,1,1],'LineWidth',linewidth_sml);
ni_xi__ = repmat([1:n_iteration],[n_iteration,1]);
for niteration=0:n_iteration-1;
tmp_lambda_x_ = lambda_xi__(1:1+niteration,1+niteration);
nc_use = max(0,min(n_c_use-1,floor(n_c_use*niteration/max(1,n_iteration-1))));
tmp_index_ = efind(isfinite(tmp_lambda_x_));
ni_x_ = (1+niteration)*ones(1+niteration,1);
plot(ni_x_(1+tmp_index_),tmp_lambda_x_(1+tmp_index_),'.','MarkerSize',markersize_use,'Color',c_use__(1+nc_use,:));
end;%for niteration=0:n_iteration-1;
hold off;
xlabel('iteration'); ylabel('sigma');
xlim([0,1+n_iteration]);
ylim([min(S_x_)-0.25,max(S_x_)+0.25]);
title('lanczos iterates');
set(gca,'FontSize',fontsize_use);
%%%%;
subplot(p_row,p_col,1+np);np=np+1;
hold on;
for niteration=0:niteration_step:n_iteration-1;
tmp_lambda_x_ = lambda_xi__(1:1+niteration,1+niteration);
nc_use = max(0,min(n_c_use-1,floor(n_c_use*niteration/max(1,n_iteration-1))));
stairs(linspace(0,1,1+niteration),tmp_lambda_x_,'-','LineWidth',linewidth_big,'Color',c_use__(1+nc_use,:));
end;%for niteration=0:n_iteration-1;
hold off;
xlim([0,1]); xlabel('rank');
ylim([min(S_x_)-0.25,max(S_x_)+0.25]); ylabel('S_x_','Interpreter','none');
title('lambda CDF');
set(gca,'FontSize',fontsize_use);
%%%%;
subplot(p_row,p_col,1+np);np=np+1;
hold on;
n_h = 32; tmp_s_ = linspace(min(Slim_),max(Slim_),n_h);
for niteration=0:niteration_step:n_iteration-1;
tmp_lambda_x_ = lambda_xi__(1:1+niteration,1+niteration);
nc_use = max(0,min(n_c_use-1,floor(n_c_use*niteration/max(1,n_iteration-1))));
tmp_h_ = hist(tmp_lambda_x_,tmp_s_); tmp_h_ = tmp_h_/max(1,sum(tmp_h_));
stairs(tmp_s_,tmp_h_,'-','LineWidth',linewidth_big,'Color',c_use__(1+nc_use,:));
end;%for niteration=0:n_iteration-1;
hold off;
xlim(Slim_); xlabel('S_x_','Interpreter','none');
ylim([0,max(tmp_h_)*1.25]); ylabel('hist','Interpreter','none');
title('lambda PDF');
set(gca,'FontSize',fontsize_use);
%%%%;
subplot(p_row,p_col,1+np);np=np+1;
hold on;
for niteration=0:niteration_step:n_iteration-1;
tmp_lambda_x_ = lambda_xi__(1:1+niteration,1+niteration);
nc_use = max(0,min(n_c_use-1,floor(n_c_use*niteration/max(1,n_iteration-1))));
stairs(linspace(0,1,1+niteration),log10(max(1e-12,abs(tmp_lambda_x_))),'-','LineWidth',linewidth_big,'Color',c_use__(1+nc_use,:));
end;%for niteration=0:n_iteration-1;
hold off;
xlim([0,1]); xlabel('rank');
ylim([prctile(log10(max(1e-12,abs(S_x_))),0),prctile(log10(max(1e-12,abs(S_x_))),100)]); ylabel('log10(S_x_)','Interpreter','none');
title('log10(lambda) CDF');
set(gca,'FontSize',fontsize_use);
%%%%%%%%;
end;%if (flag_disp>0);
%%%%%%%%;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;




