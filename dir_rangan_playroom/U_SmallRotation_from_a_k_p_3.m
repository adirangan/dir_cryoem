%{
if ~exist('wS_from_single_shell_sba__','var'); wS_from_single_shell_sba__=[]; end;
if ~exist('dwSda_from_single_shell_sba__','var'); dwSda_from_single_shell_sba__=[]; end;
if ~exist('dwSdb_from_single_shell_sba__','var'); dwSdb_from_single_shell_sba__=[]; end;
if ~exist('ddwSdaa_from_single_shell_sba__','var'); ddwSdaa_from_single_shell_sba__=[]; end;
if ~exist('ddwSdab_from_single_shell_sba__','var'); ddwSdab_from_single_shell_sba__=[]; end;
if ~exist('ddwSdbb_from_single_shell_sba__','var'); ddwSdbb_from_single_shell_sba__=[]; end;
if ~exist('n_R','var'); n_R = []; end;
if ~exist('R_use_R___','var'); R_use_R___ = []; end;
if ~exist('a_R_k_p_Rqk__','var'); a_R_k_p_Rqk__=[]; end;
if ~exist('ba_from_single_shell_Rbaba___','var'); ba_from_single_shell_Rbaba___=[]; end;
if ~exist('wS_from_R_single_shell_Rsba___','var'); wS_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSda_from_R_single_shell_Rsba___','var'); dwSda_from_R_single_shell_Rsba___=[]; end;
if ~exist('dwSdb_from_R_single_shell_Rsba___','var'); dwSdb_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdaa_from_R_single_shell_Rsba___','var'); ddwSdaa_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdab_from_R_single_shell_Rsba___','var'); ddwSdab_from_R_single_shell_Rsba___=[]; end;
if ~exist('ddwSdbb_from_R_single_shell_Rsba___','var'); ddwSdbb_from_R_single_shell_Rsba___=[]; end;
%}
function ...
[ ...
 parameter ...
,U_tilde_SmallRotation_Delta_qkabcs__ ...
,U_SmallRotation_Delta_qkabcs__ ...
,S_SmallRotation_Delta_s_ ...
,V_SmallRotation_Delta_ss__ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_R ...
,R_use_R___ ...
,a_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
] = ...
U_SmallRotation_from_a_k_p_3( ...
 parameter ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,qref_k_eq_d ...
,a_k_p_qk_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_viewing_S ...
,S_k_p_q2d_wkS__ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,n_M ...
,weight_imagecount_M_ ...
,M_k_p_wkM__ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_R ...
,R_use_R___ ...
,a_R_k_p_Rqk__ ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
);

str_thisfunction = 'U_SmallRotation_from_a_k_p_3';

if nargin<1;
disp(sprintf(' %% testing %s',str_thisfunction));

disp('returning'); return;
end;%if nargin<1;

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;
if (nargin<1+na); n_qk=[]; end; na=na+1;
if (nargin<1+na); n_qk_csum_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_qk_=[]; end; na=na+1;
if (nargin<1+na); k_p_azimu_b_qk_=[]; end; na=na+1;
if (nargin<1+na); k_p_polar_a_qk_=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_p_qk_=[]; end; na=na+1;
if (nargin<1+na); weight_shell_qk_=[]; end; na=na+1;
if (nargin<1+na); n_k_p_r=[]; end; na=na+1;
if (nargin<1+na); k_p_r_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_max=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_p_r_=[]; end; na=na+1;
if (nargin<1+na); k_c_0_qk_=[]; end; na=na+1;
if (nargin<1+na); k_c_1_qk_=[]; end; na=na+1;
if (nargin<1+na); k_c_2_qk_=[]; end; na=na+1;
if (nargin<1+na); n_polar_a_k_=[]; end; na=na+1;
if (nargin<1+na); polar_a_ka__=[]; end; na=na+1;
if (nargin<1+na); n_azimu_b_ka__=[]; end; na=na+1;
if (nargin<1+na); qref_k_eq_d=[]; end; na=na+1;
if (nargin<1+na); a_k_p_qk_=[]; end; na=na+1;
if (nargin<1+na); n_w_=[]; end; na=na+1;
if (nargin<1+na); weight_2d_k_p_r_=[]; end; na=na+1;
if (nargin<1+na); weight_2d_wk_=[]; end; na=na+1;
if (nargin<1+na); n_viewing_S=[]; end; na=na+1;
if (nargin<1+na); S_k_p_q2d_wkS__=[]; end; na=na+1;
if (nargin<1+na); viewing_polar_a_S_=[]; end; na=na+1;
if (nargin<1+na); viewing_azimu_b_S_=[]; end; na=na+1;
if (nargin<1+na); viewing_weight_S_=[]; end; na=na+1;
if (nargin<1+na); n_viewing_polar_a=[]; end; na=na+1;
if (nargin<1+na); viewing_polar_a_=[]; end; na=na+1;
if (nargin<1+na); n_viewing_azimu_b_=[]; end; na=na+1;
if (nargin<1+na); viewing_gamma_z_S_=[]; end; na=na+1;
if (nargin<1+na); n_M=[]; end; na=na+1;
if (nargin<1+na); weight_imagecount_M_=[]; end; na=na+1;
if (nargin<1+na); M_k_p_wkM__=[]; end; na=na+1;
if (nargin<1+na); n_CTF=[]; end; na=na+1;
if (nargin<1+na); index_nCTF_from_nM_=[]; end; na=na+1;
if (nargin<1+na); CTF_k_p_wkC__=[]; end; na=na+1;
if (nargin<1+na); n_eta=[]; end; na=na+1;
if (nargin<1+na); index_neta_from_nM_=[]; end; na=na+1;
if (nargin<1+na); eta_k_p_wke__=[]; end; na=na+1;
if (nargin<1+na); euler_polar_a_M_=[]; end; na=na+1;
if (nargin<1+na); euler_azimu_b_M_=[]; end; na=na+1;
if (nargin<1+na); euler_gamma_z_M_=[]; end; na=na+1;
if (nargin<1+na); wS_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); dwSda_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); dwSdb_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdaa_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdab_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); ddwSdbb_from_single_shell_sba__=[]; end; na=na+1;
if (nargin<1+na); n_R=[]; end; na=na+1;
if (nargin<1+na); R_use_R___=[]; end; na=na+1;
if (nargin<1+na); a_R_k_p_Rqk__=[]; end; na=na+1;
if (nargin<1+na); ba_from_single_shell_Rbaba___=[]; end; na=na+1;
if (nargin<1+na); wS_from_R_single_shell_Rsba___=[]; end; na=na+1;
if (nargin<1+na); dwSda_from_R_single_shell_Rsba___=[]; end; na=na+1;
if (nargin<1+na); dwSdb_from_R_single_shell_Rsba___=[]; end; na=na+1;
if (nargin<1+na); ddwSdaa_from_R_single_shell_Rsba___=[]; end; na=na+1;
if (nargin<1+na); ddwSdab_from_R_single_shell_Rsba___=[]; end; na=na+1;
if (nargin<1+na); ddwSdbb_from_R_single_shell_Rsba___=[]; end; na=na+1;

if isempty(parameter);
parameter = struct('type','parameter');
end;%if isempty(parameter);
%%%%%%%%;
if (~isfield(parameter,'flag_verbose')); parameter.flag_verbose = 0; end; %<-- parameter_bookmark. ;
flag_verbose = parameter.flag_verbose;
if (~isfield(parameter,'flag_check')); parameter.flag_check = 0; end; %<-- parameter_bookmark. ;
flag_check = parameter.flag_check;
if (~isfield(parameter,'tolerance_master')); parameter.tolerance_master = 1e-2; end; %<-- parameter_bookmark. ;
tolerance_master = parameter.tolerance_master;
if (~isfield(parameter,'viewing_k_eq_d')); parameter.viewing_k_eq_d = []; end; %<-- parameter_bookmark. ;
viewing_k_eq_d = parameter.viewing_k_eq_d;
if (~isfield(parameter,'template_k_eq_d')); parameter.template_k_eq_d = -1; end; %<-- parameter_bookmark. ;
template_k_eq_d = parameter.template_k_eq_d;
if (~isfield(parameter,'n_order')); parameter.n_order = 5; end; %<-- parameter_bookmark. ;
n_order = parameter.n_order;
%%%%;
if ~isfield(parameter,'kernel_basic_qref_k_eq_d_double'); parameter.kernel_basic_qref_k_eq_d_double=[]; end;
kernel_basic_qref_k_eq_d_double=parameter.kernel_basic_qref_k_eq_d_double;
if (~isfield(parameter,'kernel_basic_l_max_use')); parameter.kernel_basic_l_max_use = round(2*pi*k_p_r_max); end; %<-- parameter_bookmark. ;
kernel_basic_l_max_use = parameter.kernel_basic_l_max_use;
if (~isfield(parameter,'kernel_basic_l_max_ext')); parameter.kernel_basic_l_max_ext = ceil(1.25*kernel_basic_l_max_use); end; %<-- parameter_bookmark. ;
kernel_basic_l_max_ext = parameter.kernel_basic_l_max_ext;
if (~isfield(parameter,'kernel_basic_l_max_band')); parameter.kernel_basic_l_max_band = +Inf; end; %<-- parameter_bookmark. ;
kernel_basic_l_max_band = parameter.kernel_basic_l_max_band;
if (~isfield(parameter,'tolerance_pinv')); parameter.tolerance_pinv = 1e-6; end; %<-- parameter_bookmark. ;
tolerance_pinv = parameter.tolerance_pinv;
%%%%%%%%;

if (flag_verbose> 0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;

if isempty(weight_imagecount_M_); weight_imagecount_M_ = ones(n_M,1); end;

%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% ')); end;
if (flag_verbose>0); disp(sprintf(' %% setting indices')); end;
%%%%%%%%;
ddssnll_from_a_k_p_helper_n_w_4; %<-- set indices. ;
ddssnll_from_a_k_p_helper_qref_4; %<-- set indices and check for consistency. ;
ddssnll_from_a_k_p_helper_n_qk_4; %<-- set indices (some redundant definitions). ;
ddssnll_from_a_k_p_helper_weight_3d_riesz_4; %<-- set weights. ;
%%%%%%%%;

%%%%%%%%;
n_qkabc = n_qk + n_M*3;
weight_3d_riesz_weight_imagecount_qkabc_ = cat(1,weight_3d_riesz_qk_/scaling_volumetric,repmat(weight_imagecount_M_,[3,1]));
numerator_root_weight_3d_riesz_weight_imagecount_qkabc_ = reshape(sqrt(weight_3d_riesz_weight_imagecount_qkabc_),[n_qkabc,1]);
denomator_root_weight_3d_riesz_weight_imagecount_qkabc_ = 1./max(1e-12,reshape(sqrt(weight_3d_riesz_weight_imagecount_qkabc_),[n_qkabc,1]));
%%%%%%%%;

%%%%%%%%;
% Now determine space of all such alignments (should have dimension of so3). ;
%%%%%%%%;
n_SmallRotation = 9;
SmallRotation_dvol_a_k_p_qks__ = zeros(n_qk,n_SmallRotation);
SmallRotation_dtau_euler_polar_a_Ms__ = zeros(n_M,n_SmallRotation);
SmallRotation_dtau_euler_azimu_b_Ms__ = zeros(n_M,n_SmallRotation);
SmallRotation_dtau_euler_gamma_z_Ms__ = zeros(n_M,n_SmallRotation);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
for nSmallRotation=0:n_SmallRotation-1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% nSmallRotation = %d/%d',nSmallRotation,n_SmallRotation)); end;
rng(1+nSmallRotation);
SmallRotation_polar_a = 1*pi*rand();
SmallRotation_azimu_b = 2*pi*rand();
SmallRotation_gamma_z = 2*pi*rand();
SmallRotation_euler_ = [-SmallRotation_azimu_b,-SmallRotation_polar_a,+SmallRotation_gamma_z]; %<-- note the reversal in ordering. ;
SmallRotation_R__ = euler_to_R(SmallRotation_euler_);
euler_azimu_b_one_ = [+1,+0,+0];
tmp_f = +cos(SmallRotation_polar_a);
tmp_g = -sin(SmallRotation_polar_a)*sin(-SmallRotation_gamma_z); %<-- note flipped sign of SmallRotation_gamma_z. ;
tmp_h = -sin(SmallRotation_polar_a)*cos(-SmallRotation_gamma_z);
SmallRotation_Delta_R__ = [ 0 , -tmp_f , -tmp_g ; +tmp_f , 0 , -tmp_h ; +tmp_g , +tmp_h , 0 ];
%%%%;
[ ...
 ~ ...
,~ ...
,a_R_k_p_qk_ ...
,~ ...
] = ...
rotate_a_k_p_to_a_k_p_4( ...
 parameter ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
,[] ...
,+SmallRotation_euler_ ...
);
%%;
[ ...
 ~ ...
,dadb_R_k_p_qk_ ...
] = ...
dadb_from_a_k_p_0( ...
 parameter ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_R_k_p_qk_ ...
);
%%;
[ ...
 ~ ...
,~ ...
,dadb_k_p_qk_ ...
,~ ...
] = ...
rotate_a_k_p_to_a_k_p_4( ...
 parameter ...
,n_order ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,dadb_R_k_p_qk_ ...
,[] ...
,-flip(SmallRotation_euler_) ...
);
SmallRotation_dvol_a_k_p_qk_ = dadb_k_p_qk_;
%%%%;
tmp_f = +SmallRotation_Delta_R__(1+1,1+0);
tmp_g = +SmallRotation_Delta_R__(1+2,1+0);
tmp_h = +SmallRotation_Delta_R__(1+2,1+1);
SmallRotation_dtau_euler_polar_a_M_ = zeros(n_M,1);
SmallRotation_dtau_euler_azimu_b_M_ = zeros(n_M,1);
SmallRotation_dtau_euler_gamma_z_M_ = zeros(n_M,1);
for nM=0:n_M-1;
tmp_polar_a_ori = +euler_polar_a_M_(1+nM);
tmp_azimu_b_ori = +euler_azimu_b_M_(1+nM);
tmp_gamma_z_ori = -euler_gamma_z_M_(1+nM);
%tmp_da_mid = +(sin(tmp_polar_a_ori)*(tmp_g*cos(tmp_azimu_b_ori) + tmp_h*sin(tmp_azimu_b_ori)))/(1 - cos(tmp_polar_a_ori)^2)^(1/2); %<-- cancel out. ;
tmp_da_mid = +(tmp_g*cos(tmp_azimu_b_ori) + tmp_h*sin(tmp_azimu_b_ori));
%tmp_db_mid = -(cos(tmp_azimu_b_ori)*(tmp_f*sin(tmp_polar_a_ori) - tmp_h*cos(tmp_polar_a_ori)*cos(tmp_azimu_b_ori) + tmp_g*cos(tmp_polar_a_ori)*sin(tmp_azimu_b_ori)))/(cos(tmp_azimu_b_ori)*sin(tmp_polar_a_ori)); %<-- remove lower order terms from denominator. ;
tmp_db_mid = -(tmp_f*sin(tmp_polar_a_ori) - tmp_h*cos(tmp_polar_a_ori)*cos(tmp_azimu_b_ori) + tmp_g*cos(tmp_polar_a_ori)*sin(tmp_azimu_b_ori))/sin(tmp_polar_a_ori); %<-- remove lower order terms from denominator. ;
%tmp_dc_mid = -(cos(tmp_gamma_z_ori)*(tmp_h*cos(tmp_azimu_b_ori) - tmp_g*sin(tmp_azimu_b_ori)))/(cos(tmp_gamma_z_ori)*sin(tmp_polar_a_ori)); %<-- remove lower order terms from denominator. ;
tmp_dc_mid = -(tmp_h*cos(tmp_azimu_b_ori) - tmp_g*sin(tmp_azimu_b_ori))/sin(tmp_polar_a_ori); %<-- remove lower order terms from denominator. ;
SmallRotation_dtau_euler_polar_a_M_(1+nM) = +tmp_da_mid;
SmallRotation_dtau_euler_azimu_b_M_(1+nM) = +tmp_db_mid;
SmallRotation_dtau_euler_gamma_z_M_(1+nM) = -tmp_dc_mid;
end;%for nM=0:n_M-1;
%%%%;
SmallRotation_dvol_a_k_p_qks__(:,1+nSmallRotation) = SmallRotation_dvol_a_k_p_qk_;
SmallRotation_dtau_euler_polar_a_Ms__(:,1+nSmallRotation) = SmallRotation_dtau_euler_polar_a_M_;
SmallRotation_dtau_euler_azimu_b_Ms__(:,1+nSmallRotation) = SmallRotation_dtau_euler_azimu_b_M_;
SmallRotation_dtau_euler_gamma_z_Ms__(:,1+nSmallRotation) = SmallRotation_dtau_euler_gamma_z_M_;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%for nSmallRotation=0:n_SmallRotation-1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
SmallRotation_Delta_qkabcs__ = cat( ...
 1 ...
,SmallRotation_dvol_a_k_p_qks__ ...
,SmallRotation_dtau_euler_polar_a_Ms__ ...
,SmallRotation_dtau_euler_azimu_b_Ms__ ...
,SmallRotation_dtau_euler_gamma_z_Ms__ ...
);
[U_SmallRotation_Delta_qkabcs__,S_SmallRotation_Delta_ss__,V_SmallRotation_Delta_ss__] = svds(bsxfun(@times,numerator_root_weight_3d_riesz_weight_imagecount_qkabc_,SmallRotation_Delta_qkabcs__),n_SmallRotation);
S_SmallRotation_Delta_s_ = diag(S_SmallRotation_Delta_ss__);
%ctranspose(U_SmallRotation_Delta_qkabcs__)*U_SmallRotation_Delta_qkabcs__,;
U_SmallRotation_Delta_qkabcs__ = bsxfun(@times,denomator_root_weight_3d_riesz_weight_imagecount_qkabc_,U_SmallRotation_Delta_qkabcs__);
if (flag_verbose>0); disp(sprintf(' %% S_SmallRotation_Delta_s_: %s',num2str(transpose(S_SmallRotation_Delta_s_),' %+0.6f'))); end;
U_tilde_SmallRotation_Delta_qkabcs__ = bsxfun(@times,numerator_root_weight_3d_riesz_weight_imagecount_qkabc_,U_SmallRotation_Delta_qkabcs__);

if flag_check;
for ns=0:3-1;
tmp_t = tic();
viewing_gamma_z_S_ = zeros(n_S,1);
SmallRotation_dvol_a_k_p_qk_ = U_SmallRotation_Delta_qkabcs__(1:n_qk,1+ns);
SmallRotation_dtau_euler_polar_a_M_ = U_SmallRotation_Delta_qkabcs__(1*n_qk + 0*n_M + [1:n_M],1+ns);
SmallRotation_dtau_euler_azimu_b_M_ = U_SmallRotation_Delta_qkabcs__(1*n_qk + 1*n_M + [1:n_M],1+ns);
SmallRotation_dtau_euler_gamma_z_M_ = U_SmallRotation_Delta_qkabcs__(1*n_qk + 2*n_M + [1:n_M],1+ns);
parameter_ssnll = struct('type','parameter');
[ ...
 ~ ...
,ssnll_q2d_M_ ...
,ssnll_q2d ...
,S_k_p_q2d_q2d_wkS__ ...
,dvol_ssnll_q2d_M_ ...
,dvol_ssnll_q2d ...
,dvol_S_k_p_q2d_wkS__ ...
,dvol_dvol_ssnll_q2d ...
,dtau_ssnll_q2d_M3__ ...
,dtau_ssnll_q2d ...
,dtau_S_k_p_q2d_wkS3___ ...
] = ...
ssnll_from_a_k_p_15( ...
 parameter_ssnll ...
,n_qk ...
,n_qk_csum_ ...
,k_p_r_qk_ ...
,k_p_azimu_b_qk_ ...
,k_p_polar_a_qk_ ...
,weight_3d_k_p_qk_ ...
,weight_shell_qk_ ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,k_c_0_qk_ ...
,k_c_1_qk_ ...
,k_c_2_qk_ ...
,n_polar_a_k_ ...
,polar_a_ka__ ...
,n_azimu_b_ka__ ...
,a_k_p_qk_ ...
,SmallRotation_dvol_a_k_p_qk_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_viewing_S ...
,S_k_p_wkS__ ...
,[] ...
,dtau_S_k_p_wkS3___ ...
,[] ...
,dtau_dtau_S_k_p_wkS33____ ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,viewing_gamma_z_S_ ...
,n_M ...
,weight_imagecount_M_ ...
,M_k_p_wkM__ ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,SmallRotation_dtau_euler_polar_a_M_ ...
,SmallRotation_dtau_euler_azimu_b_M_ ...
,SmallRotation_dtau_euler_gamma_z_M_ ...
,wS_from_single_shell_sba__ ...
,dwSda_from_single_shell_sba__ ...
,dwSdb_from_single_shell_sba__ ...
,ddwSdaa_from_single_shell_sba__ ...
,ddwSdab_from_single_shell_sba__ ...
,ddwSdbb_from_single_shell_sba__ ...
,n_R ...
,R_use_R___ ...
,a_R_k_p_Rqk__ ...
,[] ...
,ba_from_single_shell_Rbaba___ ...
,wS_from_R_single_shell_Rsba___ ...
,dwSda_from_R_single_shell_Rsba___ ...
,dwSdb_from_R_single_shell_Rsba___ ...
,ddwSdaa_from_R_single_shell_Rsba___ ...
,ddwSdab_from_R_single_shell_Rsba___ ...
,ddwSdbb_from_R_single_shell_Rsba___ ...
);
tmp_t = toc(tmp_t);
if (flag_verbose>0); disp(sprintf(' %% ssnll_from_a_k_p_15 (yes derivative): %0.6fs',tmp_t)); end;
%%%%%%%%;
SmallRotation_dtau_M3__ = [ ...
,SmallRotation_dtau_euler_polar_a_M_ ...
,SmallRotation_dtau_euler_azimu_b_M_ ...
,SmallRotation_dtau_euler_gamma_z_M_ ...
] ;
dtau_ssnll_q2d_M_ = sum( bsxfun(@times,dtau_ssnll_q2d_M3__.*SmallRotation_dtau_M3__,weight_imagecount_M_),[2]);
if (flag_verbose>0); disp(sprintf(' %% ns=%d/3 dtau_ssnll_q2d + dvol_ssnll_q2d = %0.6f',ns,dtau_ssnll_q2d + dvol_ssnll_q2d)); end;
end;%for ns=0:3-1;
end;%if flag_check;
%%%%%%%%;

if (flag_verbose> 0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;

