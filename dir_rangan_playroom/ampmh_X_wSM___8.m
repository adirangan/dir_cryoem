function ...
[ ...
 parameter ...
,X_wSM___ ...
,delta_x_wSM___ ...
,delta_y_wSM___ ...
,gamma_z_wSM___ ...
,I_value_wSM___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_ ...
,n_M ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
);
%%%%%%%%;
% Uses the templates provided in CTF_UX_S_k_q_wnS__. ;
% Calculates correlations between principal-templates and principal-images across translations. ;
% Generally speaking, the output X_wSM___(1+nw,1+nS,1+nM) calculates the correlation between: ;
% Rz(+gamma_z) * S_k_p__(:,1+nS) = S_k_p__(Rz(-gamma_z)*k_p_ , 1+nS), ;
% and ;
% exp(-2*pi*i*dot(k_,delta_)) .* M_k_p__(:,1+nM), ;
% where gamma_z = 2*pi*nw/n_w, ;
% and delta_ = [ delta_x ; delta_y ], ;
% where delta_? = delta_?_wSM___(1+nw,1+nS,1+nM). ;
% Put more succinctly, up to normalization we have: ;
% X_wSM___(1+nw,1+nS,1+nM) = dot( rotate(S,+gamma_z) , transf(M,+delta_) );
%                          = sum( conj(rotate(S,+gamma_z)) .* transf(M,+delta_) .* weight_2d_ );
% Note that we project X_wSM___ onto its real component. ;
%%%%%%%%;
% Note that ampmh_X_wSM___8 assumes an isotropic CTF. ;
% I.e., the inputs CTF_UX_S_k_q_wnS__ and CTF_UX_S_l2_ ;
% combine an angularly-independent CTF with the templates S_k_q_wnS__. ;
%%%%%%%%
% If requested, the I_value is calculated as follows: ;
% I_value = <M,S> / <M,M> ;
% X = -<IM-S,IM-S> ;
%   = -I*I*<M,M> + 2*I*<M,S> - <S,S> ;
%   = -<M,S><M,S>/<M,M> + 2*<M,S><M,S>/<M,M> - <S,S> ;
%   = <M,S><M,S>/<M,M> - <S,S> ;
%   = <S,S>*(<M,S><M,S>/<M,M>/<S,S> - 1) ;
%   = <S,S>*(correlation^2 - 1) ;
%%%%%%%%;
% Batches images and templates. ;
% Batch sizes are given by: ;
% parameter.n_M_per_Mbatch and parameter.n_S_per_Sbatch. ;
% Default values are 24 and 24. ;
%%%%%%%%;
% Note that the formulae above allow for negative intensities (i.e., I_value can be < 0). ;
% Consequently, image-template pairs exhibiting a negative correlation can actually be quite likely matches, ;
% since the corresponding (negative) intensity produces a large log-likelihood. ;
% Therefore, these formulae should only be used as long as this 'feature' is acceptable. ;
% In this particular function we threshold I_value to be nonnegative. ;
%%%%%%%%;
% extra fields in the 'parameter' structure can be passed in: ;
%%%%%%%%;
% The user can limit the number of principal-modes by setting pm_n_UX_rank_use>0. ;
% by default, the principal-modes used are those with the largest singular-values (i.e., principal-modes 0:pm_n_UX_rank_use-1). ;
%%%%%%%%;
% The user can limit the number of svd-modes by setting either svd_eps_use>0 or n_svd_l_use>0. ;
% by default, the svd-modes used are those with the largest singular-values (i.e., largest FTK.svd_s_). ;
%%%%%%%%;
% The user can limit the number of delta_v values by setting n_delta_v_use>0. ;
% by default, the delta_x and delta_y used are generated by ampmh_FTK_subselect_1.m (guaranteed to include the zero-point). ;
%%%%%%%%;
% The user can limit the output to maximize over gamma_z as well as delta_v by setting flag_optimize_over_gamma_z. ;
% In this case the output arrays are of the form X_SM__, delta_x_SM__, delta_y_SM__, etc. ;
%%%%%%%%;

if nargin<1;
%%%%%%%%;
% First define integral of <f,f>. ;
%%%%%%%%;
h2d_ = @(kd) 4*pi^2*(besselj(0,kd) + besselj(2,kd)); % calculates <f_j,f_k>, normalized so that <f,f> = (4*pi^2);
dh2d_ = @(kd) 4*pi^3*(besselj(-1,kd) - besselj(+3,kd));
h3d_ = @(kd) 4*pi*( sin(kd) - (kd).*cos(kd) ) ./ kd.^3 ; % calculates <f_j,f_k>, normalized so that <f,f> = 4*pi/3;
dh3d_ = @(kd) 12*pi*( (kd.^2/3 - 1) .* sin(kd) + (kd).*cos(kd) ) ./ kd.^4 ;
%%%%%%%%;
verbose=2;
k_p_r_max = 48/(2*pi); k_eq_d = 1.0/max(1e-12,k_p_r_max); TorL = 'L';
if (verbose); disp(sprintf(' %% [testing ampmh_X_wSM___8.m]')); end;
%%%%%%%%;
tmp_t = tic();
[ ...
 n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,k_c_0_all_ ...
,k_c_1_all_ ...
,k_c_2_all_ ...
,J_node_ ...
,J_weight_ ...
,J_chebfun_ ...
,J_polyval_ ...
] = ...
sample_sphere_7( ...
 verbose ...
,k_p_r_max ...
,k_eq_d ...
,TorL ...
) ;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% sample_sphere_7: %0.2fs',tmp_t)); end;
if (verbose); disp(sprintf(' %% k_p_r_max %0.2f k_eq_d %0.2f n_k_all %d n_k_p_r %d',k_p_r_max,k_eq_d,n_k_all,n_k_p_r)); end;
%%%%%%%%;
l_max_upb = 36;
l_max_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
l_max_(1+nk_p_r) = max(0,min(l_max_upb,1+ceil(2*pi*k_p_r_(1+nk_p_r))));
end;%for nk_p_r=0:n_k_p_r-1;
n_lm_ = (l_max_+1).^2;
n_lm_max = max(n_lm_);
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
l_max_max = max(l_max_); dWtdkd__l_max_max = 2*l_max_max;
m_max_ = -l_max_max : +l_max_max;
n_m_max = length(m_max_);
%%%%%%%%;
delta_orig_ = [+0.12;-0.3;+0.23];
a_k_p_orig_ = exp(+2*pi*i*(k_c_0_all_*delta_orig_(1+0) + k_c_1_all_*delta_orig_(1+1) + k_c_2_all_*delta_orig_(1+2)));
tmp_t = tic;
[a_k_Y_quad_] = ...
convert_k_p_to_spharm_1( ...
 verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_p_orig_ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% a_k_Y_quad_ time %0.2fs',tmp_t)); end;
%%%%%%%%;
template_k_eq_d = k_eq_d*2;
viewing_k_eq_d = k_eq_d*128;
tmp_t = tic();
[ ...
 S_k_p__ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_k_all_ ...
,n_viewing_all ...
,viewing_azimu_b_all_ ...
,viewing_polar_a_all_ ...
,viewing_weight_all_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,template_k_c_0__ ...
,template_k_c_1__ ...
,template_k_c_2__ ...
] = ...
get_template_1( ...
 verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_Y_quad_ ...
,viewing_k_eq_d ...
,template_k_eq_d ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% get_template_1: %0.2fs',tmp_t)); end;
if (verbose); disp(sprintf(' %% n_viewing_all %d n_viewing_polar_a %d n_w_max %d',n_viewing_all,n_viewing_polar_a,max(n_w_))); end;
n_S = n_viewing_all; n_w_max = max(n_w_); n_w_sum = sum(n_w_); n_w_csum_ = cumsum([0;n_w_]);
%%%%%%%%;
a_k_Y_quad__ = zeros(n_lm_max,n_k_p_r);
for nk_p_r=0:n_k_p_r-1;
tmp_index_0in_ = n_lm_csum_(1+nk_p_r) + [0:n_lm_(1+nk_p_r)-1];
tmp_index_out_ = [0:n_lm_(1+nk_p_r)-1];
a_k_Y_quad__(1+tmp_index_out_,1+nk_p_r) = a_k_Y_quad_(1+tmp_index_0in_);
end;%for nk_p_r=0:n_k_p_r-1;
[ ...
 tmp_template_waS___ ...
,~ ...
,tmp_n_viewing_all ...
,~ ...
,~ ...
] = ...
pm_template_2( ...
 verbose ...
,l_max_max ...
,n_k_p_r ...
,a_k_Y_quad__ ...
,viewing_k_eq_d/k_p_r_max ...
,-1 ...
,n_w_max ...
);
flag_plot=0;
if flag_plot;
figure(1);clf;figbig;
p_row = 8; p_col = ceil(n_S*2/p_row); p_col = p_col + mod(p_col,2); np=0;
for nS=0:n_S-1;
subplot(p_row,p_col,1+np);np=np+1;
imagesc_p(n_k_p_r,k_p_r_,n_w_max*ones(n_k_p_r,1),n_w_max*n_k_p_r,reshape(real(tmp_template_waS___(:,:,1+nS)),[n_w_max*n_k_p_r,1]));
axis image; axisnotick; title(sprintf('%d',nS));
subplot(p_row,p_col,1+np);np=np+1;
imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(S_k_p__(:,1+nS)));
axis image; axisnotick; title(sprintf('%d',nS));
end;%for nS=0:n_S-1;
end;%if flag_plot;
%%%%%%%%;
pole_k_c_0_ = zeros(n_w_sum,1);
pole_k_c_1_ = zeros(n_w_sum,1);
pole_k_c_2_ = zeros(n_w_sum,1);
na=0;
for nk_p_r=0:n_k_p_r-1;
k_p_r = k_p_r_(1+nk_p_r);
n_w = n_w_(1+nk_p_r);
for nw=0:n_w-1;
gamma_z = 2*pi*nw/n_w;
cc = cos(gamma_z); sc = sin(gamma_z);
pole_k_c_0_(1+na) = k_p_r*cc;
pole_k_c_1_(1+na) = k_p_r*sc;
pole_k_c_2_(1+na) = 0;
na=na+1;
end;%for nw=0:n_w-1;
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;
% after calling get_template_1: ;
% A template with viewing angle viewing_polar_a and viewing_azimu_b corresponds to the evaluations: ;
% let sa and ca be sin(polar_a) and cos(polar_a), respectively. ;
% let sb and cb be sin(azimu_b) and cos(azimu_b), respectively. ;
% let sc and cc be sin(gamma_z) and cos(gamma_z), respectively. ;
% [ template_k_c_0 ; template_k_c_1 ; template_k_c_2 ] = [ +cb*ca*cc - sb*sc ; +sb*ca*cc + cb*sc ; -sa*cc ] ;
% for gamma_z = 2*pi*[0:n_gamma_z-1]/n_gamma_z. ;
% Given that the original function is a plane-wave defined as: ;
% a_k_p_ = exp(+2*pi*i*( delta_orig_(1+0)*template_k_c_0 + delta_orig_(1+1)*template_k_c_1 + delta_orig_(1+2)*template_k_c_2 )) ;
% we have that the template evaluates to: ;
% S_k_p_ = exp(+2*pi*i*( delta_orig_ * Rz(azimu_b) * Ry(polar_a) * Rz(gamma_z) * [1;0;0]*k_p_r )) ;
% S_k_p_ = exp(+2*pi*i*( (Ry(-polar_a) * Rz(-azimu_b) * delta_orig_) * Rz(gamma_z) * [1;0;0]*k_p_r )) ;
%%%%%%%%;
nS=max(0,min(n_S-1,floor(n_S*rand())));
S_k_p_quad_ = S_k_p__(:,1+nS);
S_k_p_orig_ = exp(+2*pi*i*(template_k_c_0__(:,1+nS)*delta_orig_(1+0) + template_k_c_1__(:,1+nS)*delta_orig_(1+1) + template_k_c_2__(:,1+nS)*delta_orig_(1+2)));
viewing_azimu_b = viewing_azimu_b_all_(1+nS);
cb = cos(+viewing_azimu_b); sb = sin(+viewing_azimu_b);
Rz = [ +cb , -sb , 0 ; +sb , +cb , 0 ; 0 , 0 , 1 ]; %<-- rotation about the positive z-axis. ;
viewing_polar_a = viewing_polar_a_all_(1+nS);
ca = cos(+viewing_polar_a); sa = sin(+viewing_polar_a);
Ry = [ +ca , 0 , +sa ; 0 , 1 , 0 ; -sa , 0 , +ca ]; %<-- rotation about the positive y-axis. ;
delta_temp_ = transpose(Ry)*transpose(Rz)*delta_orig_;
S_k_p_form_ = exp(+2*pi*i*(pole_k_c_0_*delta_temp_(1+0) + pole_k_c_1_*delta_temp_(1+1) + pole_k_c_2_*delta_temp_(1+2)));
flag_plot=0;
if flag_plot;
figure(1);clf;
subplot(2,3,1+0); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(S_k_p_orig_),[-1,+1],colormap_beach()); title('real orig'); axisnotick; axis image;
subplot(2,3,1+3); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,imag(S_k_p_orig_),[-1,+1],colormap_beach()); title('imag orig'); axisnotick; axis image;
subplot(2,3,2+0); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(S_k_p_quad_),[-1,+1],colormap_beach()); title('real quad'); axisnotick; axis image;
subplot(2,3,2+3); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,imag(S_k_p_quad_),[-1,+1],colormap_beach()); title('imag quad'); axisnotick; axis image;
subplot(2,3,3+0); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(S_k_p_form_),[-1,+1],colormap_beach()); title('real form'); axisnotick; axis image;
subplot(2,3,3+3); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,imag(S_k_p_form_),[-1,+1],colormap_beach()); title('imag form'); axisnotick; axis image;
figbig;
end;%if flag_plot;
error_orig_vs_quad = fnorm(S_k_p_orig_ - S_k_p_quad_)/fnorm(S_k_p_orig_);
disp(sprintf(' %% error_orig_vs_quad: %0.16f',error_orig_vs_quad));
error_orig_vs_form = fnorm(S_k_p_orig_ - S_k_p_form_)/fnorm(S_k_p_orig_);
disp(sprintf(' %% error_orig_vs_form: %0.16f',error_orig_vs_form));
%%%%%%%%;
n_w_uni_ = n_w_max*ones(n_k_p_r,1);
n_w_uni_csum_ = [0;cumsum(n_w_uni_)];
n_w_uni_sum = sum(n_w_uni_);
weight_uni_2d_k_all_ = zeros(n_w_uni_sum,1);
weight_uni_2d_k_all_ = reshape(ones(n_w_max,1)*transpose(weight_2d_k_p_r_)/n_w_max,[n_w_uni_sum,1]);
%%%%%%%%;
pole_uni_k_c_0_ = zeros(n_w_uni_sum,1);
pole_uni_k_c_1_ = zeros(n_w_uni_sum,1);
pole_uni_k_c_2_ = zeros(n_w_uni_sum,1);
na=0;
for nk_p_r=0:n_k_p_r-1;
k_p_r = k_p_r_(1+nk_p_r);
n_w_uni = n_w_uni_(1+nk_p_r);
for nw=0:n_w_uni-1;
gamma_z = 2*pi*nw/n_w_uni;
cc = cos(gamma_z); sc = sin(gamma_z);
pole_uni_k_c_0_(1+na) = k_p_r*cc;
pole_uni_k_c_1_(1+na) = k_p_r*sc;
pole_uni_k_c_2_(1+na) = 0;
na=na+1;
end;%for nw=0:n_w_uni-1;
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;
tmp_t = tic();
S_uni_k_q__ = zeros(n_w_uni_sum,n_S);
for nS=0:n_S-1;
viewing_azimu_b = viewing_azimu_b_all_(1+nS);
cb = cos(+viewing_azimu_b); sb = sin(+viewing_azimu_b);
Rz = [ +cb , -sb , 0 ; +sb , +cb , 0 ; 0 , 0 , 1 ]; %<-- rotation about the positive z-axis. ;
viewing_polar_a = viewing_polar_a_all_(1+nS);
ca = cos(+viewing_polar_a); sa = sin(+viewing_polar_a);
Ry = [ +ca , 0 , +sa ; 0 , 1 , 0 ; -sa , 0 , +ca ]; %<-- rotation about the positive y-axis. ;
delta_temp_ = transpose(Ry)*transpose(Rz)*delta_orig_;
S_uni_k_p_form_ = exp(+2*pi*i*(pole_uni_k_c_0_*delta_temp_(1+0) + pole_uni_k_c_1_*delta_temp_(1+1) + pole_uni_k_c_2_*delta_temp_(1+2)));
S_uni_k_q__(:,1+nS) = ...
interp_p_to_q( ...
 n_k_p_r ...
,n_w_uni_ ...
,n_w_uni_sum ...
,S_uni_k_p_form_ ...
);
end;%for nS=0:n_S-1;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% S_uni_k_q__: %0.3fs',tmp_t)); end;
%%%%%%%%;
delta_r_max = 0.05; n_delta_v_requested = 64;
%delta_r_max = 0.00; n_delta_v_requested = 1;
delta_r_p = 0.05;
delta_r_s = delta_r_max/sqrt(2*log(1/delta_r_p));
delta_r_N = delta_r_max * (2*pi*k_p_r_max) / (pi*sqrt(2));
svd_eps = 1e-12;
tmp_t = tic();
FTK = ampmh_FTK_1(n_k_p_r,k_p_r_,k_p_r_max,delta_r_max,svd_eps,n_delta_v_requested);
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% FTK: %0.3fs',tmp_t)); end;
disp(sprintf(' %% p-val %0.4f delta_r_max %0.6f sigma %0.4f N_pixel %0.4f --> FTK.n_svd_l %d, n_delta_v_requested %d',delta_r_p,delta_r_max,delta_r_s,delta_r_N,FTK.n_svd_l,n_delta_v_requested));
%%%%%%%%;
% Now calculate the inner-products. ;
%%%%%%%%;
n_UX_rank = n_k_p_r;
tmp_t = tic();
svd_VUXS_lwnS____ = tpmh_VUXM_lwnM____0(FTK,n_k_p_r,n_w_uni_,n_S,S_uni_k_q__,n_UX_rank,eye(n_UX_rank,n_UX_rank),sqrt(weight_2d_k_p_r_));
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_VUXS_lwnS____: %0.3fs',tmp_t)); end;
%%%%%%%%;
% Now calculate norms of the non-translated images. ;
%%%%%%%%;
tmp_t = tic();
UX_S_l2_dS__ = ampmh_UX_M_l2_dM__1(FTK,n_w_uni_,n_S,n_UX_rank,svd_VUXS_lwnS____);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UX_S_l2_dS__: %0.3fs',tmp_t)); end;
disp(sprintf(' %% average l2-norm of templates (should be 1): %0.16f',mean(UX_S_l2_dS__(:))/(pi*k_p_r_max^2)));
flag_plot=0;
if flag_plot;
plot(UX_S_l2_dS__(:)/(pi*k_p_r_max^2),'.');
end;%if flag_plot;
%%%%%%%%;
tmp_t = tic();
[UX_S_k_q_wnS___,UX_S_k_p_wnS___] = ampmh_UX_M_k_p_wnM___0(FTK,n_w_uni_,n_UX_rank,n_S,svd_VUXS_lwnS____,zeros(n_S,1),zeros(n_S,1));
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UX_S_k_q_wnS___: %0.6fs',tmp_t)); end;
UX_S_k_p_wnS__ = reshape(UX_S_k_p_wnS___(:,1:n_k_p_r,:),[n_w_max*n_k_p_r,n_S]);
UX_S_k_q_wnS__ = reshape(UX_S_k_q_wnS___(:,1:n_k_p_r,:),[n_w_max*n_k_p_r,n_S]);
%%%%%%%%;
% Visualize: ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
figure(3);clf;figbig;fig80s;
subplot(2,2,1);imagesc(reshape(permute(log10(abs(svd_VUXS_lwnS____)),[1,3,4,2]),[FTK.n_svd_l*n_k_p_r*n_S,n_w_max]));axisnotick; colorbar;
subplot(2,2,2);plot(0:n_w_max-1,log10(sqrt(mean(reshape(permute(abs(svd_VUXS_lwnS____).^2,[1,3,4,2]),[FTK.n_svd_l*n_k_p_r*n_S,n_w_max]),1))));
subplot(2,2,3);imagesc(reshape(permute(reshape(log10(abs(UX_S_k_q_wnS__)),[n_w_max,n_k_p_r,n_S]),[2,3,1]),[n_k_p_r*n_S,n_w_max]));axisnotick;colorbar;
subplot(2,2,4);plot(0:n_w_max-1,log10(sqrt(mean(reshape(permute(reshape(abs(UX_S_k_q_wnS__).^2,[n_w_max,n_k_p_r,n_S]),[2,3,1]),[n_k_p_r*n_S,n_w_max]),1))));
end;%if flag_plot;
%%%%%%%%;
% Calculate ampmh_X_wSS___8. ;
%%%%%%%%;
tmp_t = tic();
SS_k_q_ = svd(UX_S_k_q_wnS__);
n_S_rank = min(find(SS_k_q_/SS_k_q_(1)<1e-3)); if isempty(n_S_rank); n_S_rank = min(size(UX_S_k_q_wnS__)); end;
[US_k_q__,SS_k_q__,VS_k_q__] = svds(UX_S_k_q_wnS__,n_S_rank);
if (verbose>1); disp(sprintf(' %% n_S %d --> n_S_rank %d',n_S,n_S_rank)); end;
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
tmp_t = tic();
[ ...
 parameter ...
,X_wSS___ ...
,delta_x_wSS___ ...
,delta_y_wSS___ ...
,gamma_z_wSS___ ...
,I_value_wSS___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSS___: %0.3fs',tmp_t)); end;
X_wSS___ = real(X_wSS___);
%%%%%%%%;
% Calculate true landscape of innerproducts for the same set of translations. ;
%%%%%%%%;
X_wSS_form___ = zeros(n_w_max,n_S,n_S);
for nS0=0:n_S-1;
viewing_azimu_b = viewing_azimu_b_all_(1+nS0);
cb = cos(+viewing_azimu_b); sb = sin(+viewing_azimu_b);
Rz = [ +cb , -sb , 0 ; +sb , +cb , 0 ; 0 , 0 , 1 ]; %<-- rotation about the positive z-axis. ;
viewing_polar_a = viewing_polar_a_all_(1+nS0);
ca = cos(+viewing_polar_a); sa = sin(+viewing_polar_a);
Ry = [ +ca , 0 , +sa ; 0 , 1 , 0 ; -sa , 0 , +ca ]; %<-- rotation about the positive y-axis. ;
delta_temp_0_ = transpose(Ry)*transpose(Rz)*delta_orig_;
S_0_uni_k_p_form_ = exp(+2*pi*i*(pole_uni_k_c_0_*delta_temp_0_(1+0) + pole_uni_k_c_1_*delta_temp_0_(1+1) + pole_uni_k_c_2_*delta_temp_0_(1+2)));
for nS1=0:n_S-1;
viewing_azimu_b = viewing_azimu_b_all_(1+nS1);
cb = cos(+viewing_azimu_b); sb = sin(+viewing_azimu_b);
Rz = [ +cb , -sb , 0 ; +sb , +cb , 0 ; 0 , 0 , 1 ]; %<-- rotation about the positive z-axis. ;
viewing_polar_a = viewing_polar_a_all_(1+nS1);
ca = cos(+viewing_polar_a); sa = sin(+viewing_polar_a);
Ry = [ +ca , 0 , +sa ; 0 , 1 , 0 ; -sa , 0 , +ca ]; %<-- rotation about the positive y-axis. ;
delta_temp_1_ = transpose(Ry)*transpose(Rz)*delta_orig_;
S_1_uni_k_p_form_ = exp(+2*pi*i*(pole_uni_k_c_0_*delta_temp_1_(1+0) + pole_uni_k_c_1_*delta_temp_1_(1+1) + pole_uni_k_c_2_*delta_temp_1_(1+2)));
%%%%;
X_form_ = zeros(n_w_max,1);
for nw=0:n_w_max-1;
gamma_z = gamma_z_wSS___(1+nw,1+nS0,1+nS1);%gamma_z = 2*pi*nw/n_w_max;
cc = cos(+gamma_z); sc = sin(+gamma_z);
Rz = [+cc , -sc ; +sc , +cc];
delta_x = delta_x_wSS___(1+nw,1+nS0,1+nS1);
delta_y = delta_y_wSS___(1+nw,1+nS0,1+nS1);
delta_temp_0b_ = Rz*delta_temp_0_(1+[0:1]); %<-- rotate delta_temp_0_ by +gamma_z = rotate k by -gamma_z = rotate S_0 by +gamma_z. ;
delta_temp_1b_ = delta_temp_1_(1+[0:1]) - [delta_x;delta_y]; %<-- translate delta_temp_1_ by -delta_ = multiply S_1 by exp(-2*pi*i*dot(k_,delta_)). ;
X_form_(1+nw) = h2d_(2*pi*k_p_r_max*fnorm(delta_temp_0b_ - delta_temp_1b_))/(2*pi)^2 * (pi*k_p_r_max^2); %<-- note sign of translation. ;
end;%for nw=0:n_w_max-1;
X_wSS_form___(:,1+nS0,1+nS1) = X_form_;
%%%%;
end;%for nS1=0:n_S-1;
end;%for nS0=0:n_S-1;
%%%%%%%%;
% Now calculate similar quantities at a reduced accuracy. ;
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.flag_compress_S = 1;
tmp_t = tic();
[ ...
 parameter ...
,X_wSS_cmps___ ...
,delta_x_wSS_cmps___ ...
,delta_y_wSS_cmps___ ...
,gamma_z_wSS_cmps___ ...
,I_value_wSS_cmps___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSS_cmps___: %0.3fs',tmp_t)); end;
X_wSS_cmps___ = real(X_wSS_cmps___);
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.svd_eps_use = 0.1;
parameter.n_svd_l_use = 14;
tmp_t = tic();
[ ...
 parameter ...
,X_wSS_rsvd___ ...
,delta_x_wSS_rsvd___ ...
,delta_y_wSS_rsvd___ ...
,gamma_z_wSS_rsvd___ ...
,I_value_wSS_rsvd___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSS_rsvd___: %0.3fs',tmp_t)); end;
X_wSS_rsvd___ = real(X_wSS_rsvd___);
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.n_delta_v_use = 48;
tmp_t = tic();
[ ...
 parameter ...
,X_wSS_rdvu___ ...
,delta_x_wSS_rdvu___ ...
,delta_y_wSS_rdvu___ ...
,gamma_z_wSS_rdvu___ ...
,I_value_wSS_rdvu___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSS_rdvu___: %0.3fs',tmp_t)); end;
X_wSS_rdvu___ = real(X_wSS_rdvu___);
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.pm_n_UX_rank_use = floor(6*n_k_p_r/7);
tmp_t = tic();
[ ...
 parameter ...
,X_wSS_rpmn___ ...
,delta_x_wSS_rpmn___ ...
,delta_y_wSS_rpmn___ ...
,gamma_z_wSS_rpmn___ ...
,I_value_wSS_rpmn___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSS_rpmn___: %0.3fs',tmp_t)); end;
X_wSS_rpmn___ = real(X_wSS_rpmn___);
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.n_w_max_use = floor(3*n_w_max/4);
tmp_t = tic();
[ ...
 parameter ...
,X_wSS_rnwm___ ...
,delta_x_wSS_rnwm___ ...
,delta_y_wSS_rnwm___ ...
,gamma_z_wSS_rnwm___ ...
,I_value_wSS_rnwm___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSS_rnwm___: %0.3fs',tmp_t)); end;
X_wSS_rnwm___ = real(X_wSS_rnwm___);
%%%%%%%%;
% Now visualize landscape of innerproducts X_wSS___. ;
%%%%%%%%;
figure(1);clf;figbig;figbeach(); X_max = max(abs(X_wSS_form___(:)));
nw = 1; %nw = max(0,min(n_w_max-1,floor(n_w_max*rand())));
nS = max(0,min(n_S-1,floor(n_S*rand())));
np=0;
subplot(2,6,1+np);np=np+1;
imagesc((squeeze(X_wSS_form___(1+nw,:,:) - X_wSS___(1+nw,:,:)*(pi*k_p_r_max^2))),X_max*[-1,+1]);
title('form - calc'); xlabel('S0');ylabel('S1');
subplot(2,6,1+np);np=np+1;
imagesc((squeeze(X_wSS_form___(:,:,1+nS) - X_wSS___(:,:,1+nS)*(pi*k_p_r_max^2))),X_max*[-1,+1]);
title('form - calc'); ylabel('nw');xlabel('S0');
%%%%%%%%;
subplot(2,6,1+np);np=np+1;
imagesc((squeeze(X_wSS_form___(1+nw,:,:) - X_wSS_cmps___(1+nw,:,:)*(pi*k_p_r_max^2))),X_max*[-1,+1]);
title('form - cmps'); xlabel('S0');ylabel('S1');
subplot(2,6,1+np);np=np+1;
imagesc((squeeze(X_wSS_form___(:,:,1+nS) - X_wSS_cmps___(:,:,1+nS)*(pi*k_p_r_max^2))),X_max*[-1,+1]);
title('form - cmps'); ylabel('nw');xlabel('S0');
%%%%%%%%;
subplot(2,6,1+np);np=np+1;
imagesc((squeeze(X_wSS_form___(1+nw,:,:) - X_wSS_rsvd___(1+nw,:,:)*(pi*k_p_r_max^2))),X_max*[-1,+1]);
title('form - rsvd'); xlabel('S0');ylabel('S1');
subplot(2,6,1+np);np=np+1;
imagesc((squeeze(X_wSS_form___(:,:,1+nS) - X_wSS_rsvd___(:,:,1+nS)*(pi*k_p_r_max^2))),X_max*[-1,+1]);
title('form - rsvd'); ylabel('nw');xlabel('S0');
%%%%%%%%;
subplot(2,6,1+np);np=np+1;
imagesc((squeeze(X_wSS_form___(1+nw,:,:) - X_wSS_rdvu___(1+nw,:,:)*(pi*k_p_r_max^2))),X_max*[-1,+1]);
title('form - rdvu'); xlabel('S0');ylabel('S1');
subplot(2,6,1+np);np=np+1;
imagesc((squeeze(X_wSS_form___(:,:,1+nS) - X_wSS_rdvu___(:,:,1+nS)*(pi*k_p_r_max^2))),X_max*[-1,+1]);
title('form - rdvu'); ylabel('nw');xlabel('S0');
%%%%%%%%;
subplot(2,6,1+np);np=np+1;
imagesc((squeeze(X_wSS_form___(1+nw,:,:) - X_wSS_rpmn___(1+nw,:,:)*(pi*k_p_r_max^2))),X_max*[-1,+1]);
title('form - rpmn'); xlabel('S0');ylabel('S1');
subplot(2,6,1+np);np=np+1;
imagesc((squeeze(X_wSS_form___(:,:,1+nS) - X_wSS_rpmn___(:,:,1+nS)*(pi*k_p_r_max^2))),X_max*[-1,+1]);
title('form - rpmn'); ylabel('nw');xlabel('S0');
%%%%%%%%;
subplot(2,6,1+np);np=np+1;
imagesc((squeeze(X_wSS_form___(1+nw,:,:) - X_wSS_rnwm___(1+nw,:,:)*(pi*k_p_r_max^2))),X_max*[-1,+1]);
title('form - rnwm'); xlabel('S0');ylabel('S1');
%subplot(2,6,1+np);np=np+1;
%imagesc((squeeze(X_wSS_form___(:,:,1+nS) - X_wSS_rnwm___(:,:,1+nS)*(pi*k_p_r_max^2))),X_max*[-1,+1]);
%title('form - rnwm'); ylabel('nw');xlabel('S0');
%%%%%%%%;
% Now optimize over gamma. ;
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
tmp_t = tic();
[ ...
 parameter ...
,X_wSS___ ...
,delta_x_wSS___ ...
,delta_y_wSS___ ...
,gamma_z_wSS___ ...
,I_value_wSS___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSS___: %0.3fs',tmp_t)); end;
X_wSS___ = real(X_wSS___);
%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.flag_optimize_over_gamma_z = 1;
tmp_t = tic();
[ ...
 parameter ...
,X_SS__ ...
,delta_x_SS__ ...
,delta_y_SS__ ...
,gamma_z_SS__ ...
,I_value_SS__ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_SS__: %0.3fs',tmp_t)); end;
X_SS__ = real(X_SS__);
%%%%;
tmp_error = 0;
for nS0=0:n_S-1;
for nS1=0:n_S-1;
[tmp_X,tmp_ij] = max(X_wSS___(:,1+nS0,1+nS1));
if (tmp_X~=X_SS__(1+nS0,1+nS1)); disp(sprintf(' %% Warning: %d,%d',nS0,nS1)); end;
tmp_error = tmp_error + fnorm(tmp_X - X_SS__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(delta_x_wSS___(tmp_ij,1+nS0,1+nS1) - delta_x_SS__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(delta_y_wSS___(tmp_ij,1+nS0,1+nS1) - delta_y_SS__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(gamma_z_wSS___(tmp_ij,1+nS0,1+nS1) - gamma_z_SS__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(I_value_wSS___(tmp_ij,1+nS0,1+nS1) - I_value_SS__(1+nS0,1+nS1));
end;%for nS1=0:n_S-1;
end;%for nS0=0:n_S-1;
disp(sprintf(' %% optimize_over_gamma_z : error %0.16f',tmp_error));
%%%%%%%%
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.flag_compress_S = 1;
tmp_t = tic();
[ ...
 parameter ...
,X_wSS_cmps___ ...
,delta_x_wSS_cmps___ ...
,delta_y_wSS_cmps___ ...
,gamma_z_wSS_cmps___ ...
,I_value_wSS_cmps___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSS_cmps___: %0.3fs',tmp_t)); end;
X_wSS_cmps___ = real(X_wSS_cmps___);
%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.flag_compress_S = 1;
parameter.flag_optimize_over_gamma_z = 1;
tmp_t = tic();
[ ...
 parameter ...
,X_SS_cmps__ ...
,delta_x_SS_cmps__ ...
,delta_y_SS_cmps__ ...
,gamma_z_SS_cmps__ ...
,I_value_SS_cmps__ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_SS_cmps__: %0.3fs',tmp_t)); end;
X_SS_cmps__ = real(X_SS_cmps__);
%%%%;
tmp_error = 0;
for nS0=0:n_S-1;
for nS1=0:n_S-1;
[tmp_X,tmp_ij] = max(X_wSS_cmps___(:,1+nS0,1+nS1));
if (tmp_X~=X_SS_cmps__(1+nS0,1+nS1)); disp(sprintf(' %% Warning: %d,%d',nS0,nS1)); end;
tmp_error = tmp_error + fnorm(tmp_X - X_SS_cmps__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(delta_x_wSS_cmps___(tmp_ij,1+nS0,1+nS1) - delta_x_SS_cmps__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(delta_y_wSS_cmps___(tmp_ij,1+nS0,1+nS1) - delta_y_SS_cmps__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(gamma_z_wSS_cmps___(tmp_ij,1+nS0,1+nS1) - gamma_z_SS_cmps__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(I_value_wSS_cmps___(tmp_ij,1+nS0,1+nS1) - I_value_SS_cmps__(1+nS0,1+nS1));
end;%for nS1=0:n_S-1;
end;%for nS0=0:n_S-1;
disp(sprintf(' %% optimize_over_gamma_z cmps: error %0.16f',tmp_error));
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.svd_eps_use = 0.1;
parameter.n_svd_l_use = 14;
tmp_t = tic();
[ ...
 parameter ...
,X_wSS_rsvd___ ...
,delta_x_wSS_rsvd___ ...
,delta_y_wSS_rsvd___ ...
,gamma_z_wSS_rsvd___ ...
,I_value_wSS_rsvd___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSS_rsvd___: %0.3fs',tmp_t)); end;
X_wSS_rsvd___ = real(X_wSS_rsvd___);
%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.svd_eps_use = 0.1;
parameter.n_svd_l_use = 14;
parameter.flag_optimize_over_gamma_z = 1;
tmp_t = tic();
[ ...
 parameter ...
,X_SS_rsvd__ ...
,delta_x_SS_rsvd__ ...
,delta_y_SS_rsvd__ ...
,gamma_z_SS_rsvd__ ...
,I_value_SS_rsvd__ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_SS_rsvd__: %0.3fs',tmp_t)); end;
X_SS_rsvd__ = real(X_SS_rsvd__);
%%%%;
tmp_error = 0;
for nS0=0:n_S-1;
for nS1=0:n_S-1;
[tmp_X,tmp_ij] = max(X_wSS_rsvd___(:,1+nS0,1+nS1));
if (tmp_X~=X_SS_rsvd__(1+nS0,1+nS1)); disp(sprintf(' %% Warning: %d,%d',nS0,nS1)); end;
tmp_error = tmp_error + fnorm(tmp_X - X_SS_rsvd__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(delta_x_wSS_rsvd___(tmp_ij,1+nS0,1+nS1) - delta_x_SS_rsvd__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(delta_y_wSS_rsvd___(tmp_ij,1+nS0,1+nS1) - delta_y_SS_rsvd__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(gamma_z_wSS_rsvd___(tmp_ij,1+nS0,1+nS1) - gamma_z_SS_rsvd__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(I_value_wSS_rsvd___(tmp_ij,1+nS0,1+nS1) - I_value_SS_rsvd__(1+nS0,1+nS1));
end;%for nS1=0:n_S-1;
end;%for nS0=0:n_S-1;
disp(sprintf(' %% optimize_over_gamma_z rsvd: error %0.16f',tmp_error));
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.n_delta_v_use = 48;
tmp_t = tic();
[ ...
 parameter ...
,X_wSS_rdvu___ ...
,delta_x_wSS_rdvu___ ...
,delta_y_wSS_rdvu___ ...
,gamma_z_wSS_rdvu___ ...
,I_value_wSS_rdvu___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSS_rdvu___: %0.3fs',tmp_t)); end;
X_wSS_rdvu___ = real(X_wSS_rdvu___);
%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.n_delta_v_use = 48;
parameter.flag_optimize_over_gamma_z = 1;
tmp_t = tic();
[ ...
 parameter ...
,X_SS_rdvu__ ...
,delta_x_SS_rdvu__ ...
,delta_y_SS_rdvu__ ...
,gamma_z_SS_rdvu__ ...
,I_value_SS_rdvu__ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_SS_rdvu__: %0.3fs',tmp_t)); end;
X_SS_rdvu__ = real(X_SS_rdvu__);
%%%%;
tmp_error = 0;
for nS0=0:n_S-1;
for nS1=0:n_S-1;
[tmp_X,tmp_ij] = max(X_wSS_rdvu___(:,1+nS0,1+nS1));
if (tmp_X~=X_SS_rdvu__(1+nS0,1+nS1)); disp(sprintf(' %% Warning: %d,%d',nS0,nS1)); end;
tmp_error = tmp_error + fnorm(tmp_X - X_SS_rdvu__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(delta_x_wSS_rdvu___(tmp_ij,1+nS0,1+nS1) - delta_x_SS_rdvu__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(delta_y_wSS_rdvu___(tmp_ij,1+nS0,1+nS1) - delta_y_SS_rdvu__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(gamma_z_wSS_rdvu___(tmp_ij,1+nS0,1+nS1) - gamma_z_SS_rdvu__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(I_value_wSS_rdvu___(tmp_ij,1+nS0,1+nS1) - I_value_SS_rdvu__(1+nS0,1+nS1));
end;%for nS1=0:n_S-1;
end;%for nS0=0:n_S-1;
disp(sprintf(' %% optimize_over_gamma_z rdvu: error %0.16f',tmp_error));
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.pm_n_UX_rank_use = floor(6*n_k_p_r/7);
tmp_t = tic();
[ ...
 parameter ...
,X_wSS_rpmn___ ...
,delta_x_wSS_rpmn___ ...
,delta_y_wSS_rpmn___ ...
,gamma_z_wSS_rpmn___ ...
,I_value_wSS_rpmn___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSS_rpmn___: %0.3fs',tmp_t)); end;
X_wSS_rpmn___ = real(X_wSS_rpmn___);
%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.pm_n_UX_rank_use = floor(6*n_k_p_r/7);
parameter.flag_optimize_over_gamma_z = 1;
tmp_t = tic();
[ ...
 parameter ...
,X_SS_rpmn__ ...
,delta_x_SS_rpmn__ ...
,delta_y_SS_rpmn__ ...
,gamma_z_SS_rpmn__ ...
,I_value_SS_rpmn__ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_SS_rpmn__: %0.3fs',tmp_t)); end;
X_SS_rpmn__ = real(X_SS_rpmn__);
%%%%;
tmp_error = 0;
for nS0=0:n_S-1;
for nS1=0:n_S-1;
[tmp_X,tmp_ij] = max(X_wSS_rpmn___(:,1+nS0,1+nS1));
if (tmp_X~=X_SS_rpmn__(1+nS0,1+nS1)); disp(sprintf(' %% Warning: %d,%d',nS0,nS1)); end;
tmp_error = tmp_error + fnorm(tmp_X - X_SS_rpmn__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(delta_x_wSS_rpmn___(tmp_ij,1+nS0,1+nS1) - delta_x_SS_rpmn__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(delta_y_wSS_rpmn___(tmp_ij,1+nS0,1+nS1) - delta_y_SS_rpmn__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(gamma_z_wSS_rpmn___(tmp_ij,1+nS0,1+nS1) - gamma_z_SS_rpmn__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(I_value_wSS_rpmn___(tmp_ij,1+nS0,1+nS1) - I_value_SS_rpmn__(1+nS0,1+nS1));
end;%for nS1=0:n_S-1;
end;%for nS0=0:n_S-1;
disp(sprintf(' %% optimize_over_gamma_z rpmn: error %0.16f',tmp_error)); 
%%%%%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.n_w_max_use = floor(3*n_w_max/4);
tmp_t = tic();
[ ...
 parameter ...
,X_wSS_rnwm___ ...
,delta_x_wSS_rnwm___ ...
,delta_y_wSS_rnwm___ ...
,gamma_z_wSS_rnwm___ ...
,I_value_wSS_rnwm___ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSS_rnwm___: %0.3fs',tmp_t)); end;
X_wSS_rnwm___ = real(X_wSS_rnwm___);
%%%%;
parameter = struct('type','parameter');
parameter.flag_compute_I_value = 1;
parameter.n_w_max_use = floor(3*n_w_max/4);
parameter.flag_optimize_over_gamma_z = 1;
tmp_t = tic();
[ ...
 parameter ...
,X_SS_rnwm__ ...
,delta_x_SS_rnwm__ ...
,delta_y_SS_rnwm__ ...
,gamma_z_SS_rnwm__ ...
,I_value_SS_rnwm__ ...
] = ...
ampmh_X_wSM___8( ...
 parameter ...
,FTK ...
,n_w_max ...
,n_UX_rank ...
,n_S ...
,UX_S_k_q_wnS__ ...
,transpose(UX_S_l2_dS__(1+efind((FTK.delta_x_.^2+FTK.delta_y_.^2)<1e-6),:)) ...
,n_S ...
,svd_VUXS_lwnS____ ...
,UX_S_l2_dS__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_SS_rnwm__: %0.3fs',tmp_t)); end;
X_SS_rnwm__ = real(X_SS_rnwm__);
%%%%;
tmp_error = 0;
for nS0=0:n_S-1;
for nS1=0:n_S-1;
[tmp_X,tmp_ij] = max(X_wSS_rnwm___(:,1+nS0,1+nS1));
if (tmp_X~=X_SS_rnwm__(1+nS0,1+nS1)); disp(sprintf(' %% Warning: %d,%d',nS0,nS1)); end;
tmp_error = tmp_error + fnorm(tmp_X - X_SS_rnwm__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(delta_x_wSS_rnwm___(tmp_ij,1+nS0,1+nS1) - delta_x_SS_rnwm__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(delta_y_wSS_rnwm___(tmp_ij,1+nS0,1+nS1) - delta_y_SS_rnwm__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(gamma_z_wSS_rnwm___(tmp_ij,1+nS0,1+nS1) - gamma_z_SS_rnwm__(1+nS0,1+nS1));
tmp_error = tmp_error + fnorm(I_value_wSS_rnwm___(tmp_ij,1+nS0,1+nS1) - I_value_SS_rnwm__(1+nS0,1+nS1));
end;%for nS1=0:n_S-1;
end;%for nS0=0:n_S-1;
disp(sprintf(' %% optimize_over_gamma_z rnwm: error %0.16f',tmp_error)); 
%%%%%%%%;
% Finally, check ampmh_X_wSM___8 to see how the rotations and translations are implemented. ;
%%%%%%%%;
error_form_vs_quad_max = 0;
error_form_vs_calc_max = 0;
for nS0=0:n_S-1;
viewing_azimu_b = viewing_azimu_b_all_(1+nS0);
cb = cos(+viewing_azimu_b); sb = sin(+viewing_azimu_b);
Rz = [ +cb , -sb , 0 ; +sb , +cb , 0 ; 0 , 0 , 1 ]; %<-- rotation about the positive z-axis. ;
viewing_polar_a = viewing_polar_a_all_(1+nS0);
ca = cos(+viewing_polar_a); sa = sin(+viewing_polar_a);
Ry = [ +ca , 0 , +sa ; 0 , 1 , 0 ; -sa , 0 , +ca ]; %<-- rotation about the positive y-axis. ;
delta_temp_0_ = transpose(Ry)*transpose(Rz)*delta_orig_;
S_0_uni_k_p_form_ = exp(+2*pi*i*(pole_uni_k_c_0_*delta_temp_0_(1+0) + pole_uni_k_c_1_*delta_temp_0_(1+1) + pole_uni_k_c_2_*delta_temp_0_(1+2)));
for nS1=0:n_S-1;
viewing_azimu_b = viewing_azimu_b_all_(1+nS1);
cb = cos(+viewing_azimu_b); sb = sin(+viewing_azimu_b);
Rz = [ +cb , -sb , 0 ; +sb , +cb , 0 ; 0 , 0 , 1 ]; %<-- rotation about the positive z-axis. ;
viewing_polar_a = viewing_polar_a_all_(1+nS1);
ca = cos(+viewing_polar_a); sa = sin(+viewing_polar_a);
Ry = [ +ca , 0 , +sa ; 0 , 1 , 0 ; -sa , 0 , +ca ]; %<-- rotation about the positive y-axis. ;
delta_temp_1_ = transpose(Ry)*transpose(Rz)*delta_orig_;
S_1_uni_k_p_form_ = exp(+2*pi*i*(pole_uni_k_c_0_*delta_temp_1_(1+0) + pole_uni_k_c_1_*delta_temp_1_(1+1) + pole_uni_k_c_2_*delta_temp_1_(1+2)));
%%%%;
X_form_ = zeros(n_w_max,1);
X_quad_ = zeros(n_w_max,1);
X_calc_ = zeros(n_w_max,1);
for nw=0:n_w_max-1;
gamma_z = gamma_z_wSS___(1+nw,1+nS0,1+nS1);%gamma_z = 2*pi*nw/n_w_max;
cc = cos(+gamma_z); sc = sin(+gamma_z);
Rz = [+cc , -sc ; +sc , +cc];
delta_x = delta_x_wSS___(1+nw,1+nS0,1+nS1);
delta_y = delta_y_wSS___(1+nw,1+nS0,1+nS1);
delta_temp_0b_ = Rz*delta_temp_0_(1+[0:1]); %<-- rotate delta_temp_0_ by +gamma_z = rotate k by -gamma_z = rotate S_0 by +gamma_z. ;
delta_temp_1b_ = delta_temp_1_(1+[0:1]) - [delta_x;delta_y]; %<-- translate delta_temp_1_ by -delta_ = multiply S_1 by exp(-2*pi*i*dot(k_,delta_)). ;
X_form_(1+nw) = h2d_(2*pi*k_p_r_max*fnorm(delta_temp_0b_ - delta_temp_1b_))/(2*pi)^2 * (pi*k_p_r_max^2); %<-- note sign of translation. ;
T_0_uni_k_p_form_ = rotate_p_to_p_fftw(n_k_p_r,n_w_uni_,n_w_uni_sum,S_0_uni_k_p_form_,+gamma_z); %<-- rotate S_0 by +gamma_z. ;
T_1_uni_k_p_form_ = transf_p_to_p(n_k_p_r,k_p_r_,n_w_uni_,n_w_uni_sum,S_1_uni_k_p_form_,+delta_x,+delta_y); %<-- multiply S_1 by exp(-2*pi*i*dot(k_,delta_)). ;
X_quad_(1+nw) = real(sum(conj(T_0_uni_k_p_form_).*T_1_uni_k_p_form_.*weight_uni_2d_k_all_));
X_calc_(1+nw) = X_wSS___(1+nw,1+nS0,1+nS1)*(pi*k_p_r_max^2);
end;%for nw=0:n_w_max-1;
flag_plot=0;
if flag_plot;
gamma_z_ = 2*pi*transpose([0:n_w_max-1])/n_w_max;
plot(gamma_z_,X_form_,'k.-',gamma_z_,X_quad_,'ro-',gamma_z_,X_calc_,'bx'); xlim([0,2*pi]); legend({'form','quad','calc'});
end;%if flag_plot;
error_form_vs_quad = fnorm(X_form_ - X_quad_)/fnorm(X_form_);
if (verbose>0); disp(sprintf(' %% nS0 %.2d nS1 %.2d / %.2d error_form_vs_quad: %0.16f',nS0,nS1,n_S,error_form_vs_quad)); end;
error_form_vs_calc = fnorm(X_form_ - X_calc_)/fnorm(X_form_);
if (verbose>0); disp(sprintf(' %% nS0 %.2d nS1 %.2d / %.2d error_form_vs_calc: %0.16f',nS0,nS1,n_S,error_form_vs_calc)); end;
error_form_vs_quad_max = max(error_form_vs_quad_max,error_form_vs_quad);
error_form_vs_calc_max = max(error_form_vs_calc_max,error_form_vs_calc);
%%%%;
end;%for nS1=0:n_S-1;
end;%for nS0=0:n_S-1;
if (verbose); disp(sprintf(' %% error_form_vs_calc_max: %0.16f',error_form_vs_calc_max)); end;
if (verbose); disp(sprintf(' %% error_form_vs_quad_max: %0.16f',error_form_vs_quad_max)); end;
%%%%%%%%;
disp('returning'); return;
end;% if nargin<1;

verbose = 0;
if (verbose>0); disp(sprintf(' %% [entering ampmh_X_wSM___8]')); end;

if isempty(parameter);
parameter = struct('type','parameter');
end;%if isempty(parameter);
%%%%%%%%;
if (~isfield(parameter,'n_M_per_Mbatch')); parameter.n_M_per_Mbatch = 24; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'n_S_per_Sbatch')); parameter.n_S_per_Sbatch = 24; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'flag_optimize_over_gamma_z')); parameter.flag_optimize_over_gamma_z = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'flag_compute_I_value')); parameter.flag_compute_I_value = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'flag_compress_S')); parameter.flag_compress_S = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'tolerance_master')); parameter.tolerance_master = 1e-2; end; %<-- parameter_bookmark. ;
%%%%%%%%;
n_M_per_Mbatch = parameter.n_M_per_Mbatch;
n_S_per_Sbatch = parameter.n_S_per_Sbatch;
flag_optimize_over_gamma_z = parameter.flag_optimize_over_gamma_z;
flag_compute_I_value = parameter.flag_compute_I_value;
flag_compress_S = parameter.flag_compress_S;
tolerance_master = parameter.tolerance_master;

tmp_t = tic(); nop=0;
[ ...
 parameter ...
,FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_use_ ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM_use__ ...
] = ...
ampmh_X_wSM_reduce_1( ...
 parameter ...
,FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_ ...
,n_M ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
);
nop = nop + numel(svd_VUXM_lwnM____);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% reduce: %0.6f',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM___8: reduce',tmp_t,1,nop);

%{
[ ...
 X_wSM___ ...
,delta_x_wSM___...
,delta_y_wSM___...
,gamma_z_wSM___...
,I_value_wSM___...
] = ...
mex_ampmh_X_wSM___9( ...
 n_M_per_Mbatch ...
,n_S_per_Sbatch ...
,flag_optimize_over_gamma_z ...
,flag_compute_I_value ...
,tolerance_master ...
,FTK.n_svd_l ...
,FTK.n_delta_v ...
,FTK.svd_U_d_expiw_s__ ...
,FTK.delta_x_ ...
,FTK.delta_y_ ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_ ...
,n_M ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
);
error('stop');
 %}

I_value_wSM___ = [];
if (flag_optimize_over_gamma_z == 0);
X_wSM___ = zeros(n_w_max,n_S,n_M);
delta_x_wSM___ = zeros(n_w_max,n_S,n_M);
delta_y_wSM___ = zeros(n_w_max,n_S,n_M);
gamma_z_wSM___ = zeros(n_w_max,n_S,n_M);
I_value_wSM___ = [];
if (flag_compute_I_value); I_value_wSM___ = zeros(n_w_max,n_S,n_M); end;
end;%if (flag_optimize_over_gamma_z == 0);
if (flag_optimize_over_gamma_z == 1);
X_SM__ = zeros(n_S,n_M);
delta_x_SM__ = zeros(n_S,n_M);
delta_y_SM__ = zeros(n_S,n_M);
gamma_z_SM__ = zeros(n_S,n_M);
I_value_SM__ = [];
if (flag_compute_I_value); I_value_SM__ = zeros(n_S,n_M); end;
end;%if (flag_optimize_over_gamma_z == 1);

if (flag_compress_S==0);
CTF_UX_S_k_q_wnS___ = reshape(CTF_UX_S_k_q_wnS__(:,1:n_S),[n_w_max,pm_n_UX_rank,n_S]); %<-- used later. ;
CTF_UX_S_k_q_nSw___ = permute(CTF_UX_S_k_q_wnS___,[2,3,1]);
if (verbose>0);
tmp_str = 'CTF_UX_S_k_q_nSw___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
end;%if (verbose>0);
end;%if (flag_compress_S==0);
if (flag_compress_S==1);
SS_k_q_ = svds(CTF_UX_S_k_q_wnS__,min(n_w_max*pm_n_UX_rank,n_S));
n_S_rank = min(efind(cumsum(SS_k_q_)/sum(SS_k_q_)>1-tolerance_master));
if (verbose>0); disp(sprintf(' %% n_S_rank %d/%d',n_S_rank,min(n_w_max*pm_n_UX_rank,n_S))); end;
[US_k_q__,SS_k_q__,VS_k_q__] = svds(CTF_UX_S_k_q_wnS__,n_S_rank);
US_CTF_UX_S_k_q_nSw___ = permute(reshape(US_k_q__,[n_w_max,pm_n_UX_rank,n_S_rank]),[2,3,1]);
end;%if (flag_compress_S==1);

if (verbose>0); 
if (flag_optimize_over_gamma_z == 0);
tmp_str = 'X_wSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'delta_x_wSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'delta_y_wSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'gamma_z_wSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
if (flag_compute_I_value); tmp_str = 'I_value_wSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9)); end;
end;%if (flag_optimize_over_gamma_z == 0);
if (flag_optimize_over_gamma_z == 1);
tmp_str = 'X_SM__'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'delta_x_SM__'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'delta_y_SM__'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'gamma_z_SM__'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
if (flag_compute_I_value); tmp_str = 'I_value_SM__'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9)); end;
end;%if (flag_optimize_over_gamma_z == 1);
end;%if (verbose>0); 
n_Mbatch = ceil(n_M/n_M_per_Mbatch);
if (verbose>1); disp(sprintf(' %% n_Mbatch %d',n_Mbatch)); end;
n_Sbatch = ceil(n_S/n_S_per_Sbatch);
if (verbose>1); disp(sprintf(' %% n_Sbatch %d',n_Sbatch)); end;
for nMbatch=0:n_Mbatch-1;
index_M_in_Mbatch_ = nMbatch*n_M_per_Mbatch + (0:n_M_per_Mbatch-1);
index_M_in_Mbatch_ = index_M_in_Mbatch_(find(index_M_in_Mbatch_<n_M)); n_M_sub = numel(index_M_in_Mbatch_);
if (verbose>1); disp(sprintf(' %% nMbatch %d/%d index_M_in_Mbatch_ %d-->%d',nMbatch,n_Mbatch,index_M_in_Mbatch_(1+0),index_M_in_Mbatch_(1+n_M_sub-1))); end;
if (verbose>0 & mod(nMbatch,1)==0); disp(sprintf(' %% nMbatch %d/%d index_M_in_Mbatch_ %d-->%d',nMbatch,n_Mbatch,index_M_in_Mbatch_(1+0),index_M_in_Mbatch_(1+n_M_sub-1))); end;
if (n_M_sub>0);
tmp_t = tic(); nop=0;
svd_VUXM_nMwl____ = zeros(pm_n_UX_rank,n_M_sub,n_w_max,FTK.n_svd_l);
svd_VUXM_nMwl____ = permute(svd_VUXM_lwnM____(:,:,:,1+index_M_in_Mbatch_),[3,4,2,1]);
nop = nop + numel(svd_VUXM_nMwl____);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_VUXM_nMwl____: %0.6f',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM___8: svd_VUXM_nMwl____',tmp_t,1,nop);
%%%%%%%%;
if (flag_compress_S==0);
tmp_t = tic(); nop=0;
svd_SVUXM_SMwl____ = zeros(n_S,n_M_sub,n_w_max,FTK.n_svd_l);
for nl=0:FTK.n_svd_l-1;
for nw=0:n_w_max-1;
svd_SVUXM_SMwl____(:,:,1+nw,1+nl) = ctranspose(CTF_UX_S_k_q_nSw___(:,:,1+nw))*svd_VUXM_nMwl____(:,:,1+nw,1+nl);
end;%for nw=0:n_w_max-1;
end;%for nl=0:FTK.n_svd_l-1;
nop = nop + FTK.n_svd_l*n_w_max*n_S*pm_n_UX_rank*n_M_sub;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_SVUXM_SMwl____: %0.6f',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM___8: svd_VUXM_SMwl____',tmp_t,1,nop);
tmp_t = tic(); nop=0;
svd_SVUXM_lwSM____ = permute(ifft(permute(svd_SVUXM_SMwl____,[3,4,1,2]),[],1)*n_w_max,[2,1,3,4]);
nop = nop + numel(svd_SVUXM_lwSM____);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_SVUXM_lwSM____: %0.6f',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM___8: svd_VUXM_lwSM____',tmp_t,1,nop);
end;%if (flag_compress_S==0);
%%%%%%%%;
if (flag_compress_S==1);
tmp_t = tic(); nop=0;
svd_USVUXM_SMwl____ = zeros(n_S_rank,n_M_sub,n_w_max,FTK.n_svd_l);
for nl=0:FTK.n_svd_l-1;
for nw=0:n_w_max-1;
svd_USVUXM_SMwl____(:,:,1+nw,1+nl) = ctranspose(US_CTF_UX_S_k_q_nSw___(:,:,1+nw))*svd_VUXM_nMwl____(:,:,1+nw,1+nl);
end;%for nw=0:n_w_max-1;
end;%for nl=0:FTK.n_svd_l-1;
nop = nop + FTK.n_svd_l*n_w_max*n_S_rank*pm_n_UX_rank*n_M_sub;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_USVUXM_SMwl____: %0.6f',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM___8: svd_USVUXM_SMwl____',tmp_t,1,nop);
tmp_t = tic(); nop=0;
svd_USVUXM_SMwl____ = permute(ifft(permute(svd_USVUXM_SMwl____,[3,4,1,2]),[],1)*n_w_max,[3,4,1,2]);
nop = nop + numel(svd_USVUXM_SMwl____);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_USVUXM_lwSM____: %0.6f',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM___8: svd_USVUXM_SMwl____ (permute)',tmp_t,1,nop);
end;%if (flag_compress_S==1);
%%%%%%%%;
for nSbatch=0:n_Sbatch-1;
index_S_in_Sbatch_ = nSbatch*n_S_per_Sbatch + (0:n_S_per_Sbatch-1);
index_S_in_Sbatch_ = index_S_in_Sbatch_(find(index_S_in_Sbatch_<n_S)); n_S_sub = numel(index_S_in_Sbatch_);
if (verbose>1); disp(sprintf(' %% nSbatch %d/%d index_S_in_Sbatch_ %d-->%d',nSbatch,n_Sbatch,index_S_in_Sbatch_(1+0),index_S_in_Sbatch_(1+n_S_sub-1))); end;
if (verbose>0 & mod(nSbatch,32)==0); disp(sprintf(' %% nSbatch %d/%d index_S_in_Sbatch_ %d-->%d',nSbatch,n_Sbatch,index_S_in_Sbatch_(1+0),index_S_in_Sbatch_(1+n_S_sub-1))); end;
if (n_S_sub>0);
%%%%%%%%;
if (flag_compress_S==0);
svd_SVUXM_lwsM____ = svd_SVUXM_lwSM____(:,:,1+index_S_in_Sbatch_,:);
end;%if (flag_compress_S==0);
if (flag_compress_S==1);
tmp_t = tic(); nop=0;
svd_SVUXM_lwsM____ = permute(reshape(VS_k_q__(1+index_S_in_Sbatch_,:)*SS_k_q__*reshape(svd_USVUXM_SMwl____,[n_S_rank,n_M_sub*n_w_max*FTK.n_svd_l]),[n_S_sub,n_M_sub,n_w_max,FTK.n_svd_l]),[4,3,1,2]);
nop = nop + n_S_sub*n_S_rank*n_S_rank + n_S_sub*n_S_rank*n_M_sub*n_w_max*FTK.n_svd_l;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_SVUXM_lwsM____: %0.6f',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM___8: svd_SVUXM_lwsM____',tmp_t,1,nop);
end;%if (flag_compress_S==1);
%%%%%%%%;
tmp_t = tic(); nop=0;
svd_USESVUXM_dwSM____ = real(reshape(FTK.svd_U_d_expiw_s__*reshape(svd_SVUXM_lwsM____,[FTK.n_svd_l,n_w_max*n_S_sub*n_M_sub]),[FTK.n_delta_v,n_w_max,n_S_sub,n_M_sub]));
%%%%%%%%;
l2_dSM___ = permute(reshape(reshape(sqrt(CTF_UX_S_l2_use_(1+index_S_in_Sbatch_)),[n_S_sub,1])*reshape(sqrt(UX_M_l2_dM_use__(:,1+index_M_in_Mbatch_)),[1,FTK.n_delta_v*n_M_sub]),[n_S_sub,FTK.n_delta_v,n_M_sub]),[2,1,3]);
n2_dSM___ = 1./max(1e-14,l2_dSM___);
f2_dSM___ = permute(reshape(reshape(sqrt(CTF_UX_S_l2_use_(1+index_S_in_Sbatch_)),[n_S_sub,1])*reshape(1./max(1e-14,sqrt(UX_M_l2_dM_use__(:,1+index_M_in_Mbatch_))),[1,FTK.n_delta_v*n_M_sub]),[n_S_sub,FTK.n_delta_v,n_M_sub]),[2,1,3]);
ss_S_ = reshape(CTF_UX_S_l2_use_(1+index_S_in_Sbatch_),[n_S_sub,1]);
nop = nop + FTK.n_delta_v*FTK.n_svd_l*n_w_max*n_S_sub*n_M_sub + n_S_sub*FTK.n_delta_v*n_M_sub + n_S_sub*FTK.n_delta_v*n_M_sub;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_USESVUXM_dwSM____: %0.6f',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM___8: svd_USESVUXM_dwSM____',tmp_t,1,nop);
if (nMbatch==0 && nSbatch==0 && verbose>0); 
tmp_str = 'svd_VUXM_nMwl____'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'svd_SVUXM_SMwl____'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'svd_SVUXM_lwsM____'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'svd_USESVUXM_dwSM____'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'l2_dSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'n2_dSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
tmp_str = 'f2_dSM___'; disp(sprintf(' %% memory: %s --> %0.6f GB',tmp_str,whos(tmp_str).bytes/1e9));
end;%if (verbose>1); 
tmp_t = tic(); nop=0;
X_sub_dwSM____ = repmat(reshape(n2_dSM___,[FTK.n_delta_v,1,n_S_sub,n_M_sub]),[1,n_w_max,1,1]) .* svd_USESVUXM_dwSM____; %<-- correlation. ;
%X_sub_dwSM____ = bsxfun(@times,reshape(real(n2_dSM___),[FTK.n_delta_v,1,n_S_sub,n_M_sub]),real(svd_USESVUXM_dwSM____)); %<-- correlation. ;
if (flag_compute_I_value);
I_value_sub_dwSM____ = repmat(reshape(f2_dSM___,[FTK.n_delta_v,1,n_S_sub,n_M_sub]),[1,n_w_max,1,1]) .* X_sub_dwSM____; %<-- I_value. ;
I_value_use_dwSM____ = max(0,real(I_value_sub_dwSM____));
end;%if (flag_compute_I_value);
nop = nop + numel(X_sub_dwSM____);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_sub_dwSM____: %0.6f',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM___8: X_sub_dwSM____',tmp_t,1,nop);
%%%%%%%%;
flag_check=0;
if flag_check;
[tmp_X_wSM___,tmp_delta_ij___] = max(reshape(X_sub_dwSM____,[FTK.n_delta_v,n_w_max*n_S_sub*n_M_sub]),[],1); %<-- maximize correlation. ;
tmp_X_wSM___ = reshape(tmp_X_wSM___,[n_w_max,n_S_sub,n_M_sub]);
tmp_delta_ij___ = reshape(tmp_delta_ij___,[n_w_max,n_S_sub,n_M_sub]);
[tmp_X_SM__,tmp_dw_ij__] = max(reshape(X_sub_dwSM____,[FTK.n_delta_v*n_w_max,n_S_sub*n_M_sub]),[],1); %<-- maximize correlation. ;
[tmp_delta_ij__,tmp_gamma_ij__] = ind2sub([FTK.n_delta_v,n_w_max],tmp_dw_ij__);
tmp_X_SM__ = reshape(tmp_X_SM__,[n_S_sub,n_M_sub]);
tmp_delta_ij__ = reshape(tmp_delta_ij__,[n_S_sub,n_M_sub]);
tmp_gamma_ij__ = reshape(tmp_gamma_ij__,[n_S_sub,n_M_sub]);
for nS=0:n_S_sub-1;
for nM=0:n_M_sub-1;
[tmp_X,tmp_gamma_ij] = max(tmp_X_wSM___(:,1+nS,1+nM));
assert(tmp_X_wSM___(tmp_gamma_ij,1+nS,1+nM)==tmp_X_SM__(1+nS,1+nM));
assert(tmp_gamma_ij==tmp_gamma_ij__(1+nS,1+nM));
assert(tmp_delta_ij___(tmp_gamma_ij,1+nS,1+nM)==tmp_delta_ij__(1+nS,1+nM));
end;%for nM=0:n_M_sub-1;
end;%for nS=0:n_S_sub-1;
end;%if flag_check;
%%%%%%%%;
if (flag_optimize_over_gamma_z == 0);
tmp_t = tic(); nop=0;
[tmp_X_wSM___,tmp_delta_ij___] = max(reshape(X_sub_dwSM____,[FTK.n_delta_v,n_w_max*n_S_sub*n_M_sub]),[],1); %<-- maximize correlation. ;
assert(min(tmp_delta_ij___)>=1); assert(max(tmp_delta_ij___)<=FTK.n_delta_v);
tmp_X_wSM___ = reshape(tmp_X_wSM___,[n_w_max,n_S_sub,n_M_sub]);
tmp_delta_ij___ = reshape(tmp_delta_ij___,[n_w_max,n_S_sub,n_M_sub]);
tmp_delta_x___ = FTK.delta_x_(tmp_delta_ij___);
tmp_delta_y___ = FTK.delta_y_(tmp_delta_ij___);
tmp_gamma_z___ = 2*pi*(0:n_w_max-1)/n_w_max;
X_wSM___(:,1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = tmp_X_wSM___;
delta_x_wSM___(:,1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_delta_x___,[n_w_max,n_S_sub,n_M_sub]);
delta_y_wSM___(:,1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_delta_y___,[n_w_max,n_S_sub,n_M_sub]);
gamma_z_wSM___(:,1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = repmat(tmp_gamma_z___(:),[1,n_S_sub,n_M_sub]);
if (flag_compute_I_value);
tmp_I_value_use_dwSM__ = reshape(I_value_use_dwSM____,[FTK.n_delta_v,n_w_max*n_S_sub*n_M_sub]);
tmp_I_value_use_wSM_ = zeros(n_w_max*n_S_sub*n_M_sub,1);
tmp_t2=tic();
for nl=0:n_w_max*n_S_sub*n_M_sub-1;
tmp_I_value_use_wSM_(1+nl) = tmp_I_value_use_dwSM__(tmp_delta_ij___(1+nl),1+nl);
end;%for nl=0:n_w_max*n_S_sub*n_M_sub-1;
I_value_wSM___(:,1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_I_value_use_wSM_,[n_w_max,n_S_sub,n_M_sub]);
tmp_t2 = toc(tmp_t2); if (verbose>1); disp(sprintf(' %% I_value_wSM___ %0.6fs',tmp_t2)); end;
end;%if (flag_compute_I_value);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSM___: %0.6f',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM___8: X_wSM___',tmp_t,1,nop);
end;%if (flag_optimize_over_gamma_z == 0);
%%%%%%%%;
if (flag_optimize_over_gamma_z == 1);
tmp_t = tic(); nop=0;
[tmp_X_SM__,tmp_dw_ij__] = max(reshape(X_sub_dwSM____,[FTK.n_delta_v*n_w_max,n_S_sub*n_M_sub]),[],1); %<-- maximize correlation. ;
[tmp_delta_ij__,tmp_gamma_ij__] = ind2sub([FTK.n_delta_v,n_w_max],tmp_dw_ij__);
assert(min(tmp_delta_ij__)>=1); assert(max(tmp_delta_ij__)<=FTK.n_delta_v);
assert(min(tmp_gamma_ij__)>=1); assert(max(tmp_gamma_ij__)<=n_w_max);
tmp_X_SM__ = reshape(tmp_X_SM__,[n_S_sub,n_M_sub]);
tmp_delta_ij__ = reshape(tmp_delta_ij__,[n_S_sub,n_M_sub]);
tmp_gamma_ij__ = reshape(tmp_gamma_ij__,[n_S_sub,n_M_sub]);
tmp_delta_x__ = FTK.delta_x_(tmp_delta_ij__);
tmp_delta_y__ = FTK.delta_y_(tmp_delta_ij__);
tmp_gamma_z__ = 2*pi*(tmp_gamma_ij__-1)/n_w_max;
X_SM__(1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = tmp_X_SM__;
delta_x_SM__(1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_delta_x__,[n_S_sub,n_M_sub]);
delta_y_SM__(1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_delta_y__,[n_S_sub,n_M_sub]);
gamma_z_SM__(1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_gamma_z__,[n_S_sub,n_M_sub]);
if (flag_compute_I_value);
tmp_I_value_use_dwSM___ = reshape(I_value_use_dwSM____,[FTK.n_delta_v,n_w_max,n_S_sub*n_M_sub]);
tmp_I_value_use_SM_ = zeros(n_S_sub*n_M_sub,1);
tmp_t2=tic();
for nl=0:n_S_sub*n_M_sub-1;
tmp_I_value_use_SM_(1+nl) = tmp_I_value_use_dwSM___(tmp_delta_ij__(1+nl),tmp_gamma_ij__(1+nl),1+nl);
end;%for nl=0:n_S_sub*n_M_sub-1;
I_value_SM__(1+index_S_in_Sbatch_,1+index_M_in_Mbatch_) = reshape(tmp_I_value_use_SM_,[n_S_sub,n_M_sub]);
tmp_t2 = toc(tmp_t2); if (verbose>1); disp(sprintf(' %% I_value_SM__ %0.6fs',tmp_t2)); end;
end;%if (flag_compute_I_value);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_wSM___: %0.6f',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wSM___8: X_wSM___',tmp_t,1,nop);
end;%if (flag_optimize_over_gamma_z == 1);
%%%%%%%%;
end;%if (n_S_sub>0);
end;%for nSbatch=0:n_Sbatch-1;
end;%if (n_M_sub>0);
end;%for nMbatch=0:n_Mbatch-1;

if (flag_optimize_over_gamma_z == 1);
X_wSM___ = X_SM__;
delta_x_wSM___ = delta_x_SM__;
delta_y_wSM___ = delta_y_SM__;
gamma_z_wSM___ = gamma_z_SM__;
if (flag_compute_I_value); I_value_wSM___ = I_value_SM__; end;
end;%if (flag_optimize_over_gamma_z == 1);

if ( (nargout>5) & (isempty(I_value_wSM___)) ); I_value_wSM___ = ones(size(X_wSM___)); end;

if (verbose>1); disp(sprintf(' %% [finished ampmh_X_wSM___8]')); end;


