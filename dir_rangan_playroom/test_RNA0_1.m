%%%%%%%%;
% Testing RNA molecule from Pilar (20240813). ;
% This time building a path between open and closed. ;
%%%%%%%%;

platform = 'rusty';%platform = 'access1';
if (exist('platform.type','file')); fp=fopen('platform.type'); platform = fscanf(fp,'%s'); fclose(fp); end;
if (strcmp(platform,'access1')); setup_access1; string_root = 'data/rangan'; end;
if (strcmp(platform,'eval1')); setup_eval1; string_root = 'home/rangan'; end;
if (strcmp(platform,'OptiPlex')); setup_OptiPlex; string_root = 'home/rangan'; end;
if (strcmp(platform,'rusty')); setup_rusty; string_root = 'mnt/home/rangan'; end;
if (strcmp(platform,'ceph')); setup_ceph; string_root = 'mnt/home/rangan/ceph'; end;

str_thisfunction = 'test_RNA0_1';
flag_recalc=0; flag_replot=1;
flag_verbose=1; flag_disp=1; nf=0;
flag_center = 1;
tolerance_master = 1e-2;

[~,str_hostname] = system('hostname');
flag_256G = 0 ...
| ~isempty(strfind(str_hostname,'crunchy')) ...
| ~isempty(strfind(str_hostname,'linserv')) ...
;
flag_128G = 0 ...
| ~isempty(strfind(str_hostname,'crunchy')) ...
| ~isempty(strfind(str_hostname,'linserv')) ...
| ~isempty(strfind(str_hostname,'xcalibr8')) ...
| ~isempty(strfind(str_hostname,'snappy')) ...
;
%%;
if ~exist('k_int','var'); k_int = 32; if flag_256G; k_int = 48; end; end;
%%;
if k_int==8;
sigma_angstrom = 48.0; %<-- low resolution. ;
k_eq_d_double = 0.50;
t_eq_d_double = 0.50;
n_w_int = 2;
KAPPA_flag_kernel_full = 1;
KAPPA_pole_north_double = 12*pi/24;
KAPPA_pole_south_double = 12*pi/24;
KAPPA_qref_k_eq_d_double = 1.0;
pm_n_UX_rank_max = 3;
lanczos_n_iteration_max = pm_n_UX_rank_max*(k_int+1)^2; %<-- This should be a full calculation with 3 principal-modes. ;
end;%if k_int==16;
%%;
if k_int==16;
sigma_angstrom = 32.0; %<-- low resolution. ;
k_eq_d_double = 0.50;
t_eq_d_double = 0.50;
n_w_int = 2;
KAPPA_flag_kernel_full = 1;
KAPPA_pole_north_double = 12*pi/24;
KAPPA_pole_south_double = 12*pi/24;
KAPPA_qref_k_eq_d_double = 1.0;
pm_n_UX_rank_max = +Inf;
lanczos_n_iteration_max = 256;
end;%if k_int==16;
%%;
if k_int==32;
sigma_angstrom = 24.0; %<-- low resolution. ;
k_eq_d_double = 0.50;
t_eq_d_double = 0.50;
n_w_int = 2;
KAPPA_flag_kernel_full = 1;
KAPPA_pole_north_double = 12*pi/24;
KAPPA_pole_south_double = 12*pi/24;
KAPPA_qref_k_eq_d_double = 1.00;
pm_n_UX_rank_max = +Inf;
lanczos_n_iteration_max = 64;
end;%if k_int==32;
%%;
if k_int==48;
sigma_angstrom = 16.0; %<-- low resolution. ;
k_eq_d_double = 1.00;
t_eq_d_double = 1.00;
n_w_int = 1;
KAPPA_flag_kernel_full = 1;
KAPPA_pole_north_double = 12*pi/24;
KAPPA_pole_south_double = 12*pi/24;
KAPPA_qref_k_eq_d_double = 1.00;
pm_n_UX_rank_max = +Inf;
lanczos_n_iteration_max = 32;
end;%if k_int==48;
%%;
flag_calc = flag_256G | (k_int<=32 & flag_128G);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

fname_prefix = 'RNA0';
fname_prefix_xfix = sprintf('%s',fname_prefix);
dir_pm = sprintf('/%s/dir_cryoem/dir_RNA0/dir_pm',string_root);
if (~exist(sprintf('%s_mat',dir_pm),'dir')); disp(sprintf(' %% mkdir %s_mat',dir_pm)); mkdir(sprintf('%s_mat',dir_pm)); end;
if (~exist(sprintf('%s_jpg',dir_pm),'dir')); disp(sprintf(' %% mkdir %s_jpg',dir_pm)); mkdir(sprintf('%s_jpg',dir_pm)); end;
dir_data = sprintf('/%s/dir_cryoem/dir_RNA0',string_root);
dir_ssnll = sprintf('/%s/dir_cryoem/dir_%s/dir_ssnll_k%d',string_root,fname_prefix_xfix,k_int);
if (~exist(sprintf('%s_mat',dir_ssnll),'dir')); disp(sprintf(' %% mkdir %s_mat',dir_ssnll)); mkdir(sprintf('%s_mat',dir_ssnll)); end;
if (~exist(sprintf('%s_jpg',dir_ssnll),'dir')); disp(sprintf(' %% mkdir %s_jpg',dir_ssnll)); mkdir(sprintf('%s_jpg',dir_ssnll)); end;
Pixel_Spacing = 2.676; %<-- in angstroms. ;
%%%%%%%%;
n_x_u = 128; %<-- box diameter in pixels. ;
%sigma_angstrom = 8.0; %<-- low resolution. ;
str_name_waypoint_ = {'WT_Folded','MUT_Open'};
fname_nopath_waypoint_ = {,'models/folded.pdb','models/open.pdb'};
n_waypoint = numel(fname_nopath_waypoint_);
fname_waypoint_ = cell(n_waypoint,1);
for nwaypoint=0:n_waypoint-1;
fname_waypoint_{1+nwaypoint} = sprintf('%s/%s',dir_data,fname_nopath_waypoint_{1+nwaypoint});
end;%for nwaypoint=0:n_waypoint-1;
fname_nopath_star_ = {'J738_passthrough_particles.star','J737_passthrough_particles.star'};
n_star = numel(fname_nopath_star_);
fname_star_ = cell(n_star,1);
for nstar=0:n_star-1;
fname_star_{1+nstar} = sprintf('%s/%s',dir_data,fname_nopath_star_{1+nstar});
end;%for nstar=0:n_star-1;

%%%%%%%%;
% extract atomic positions. ;
%%%%%%%%;
n_Atom_v_ = zeros(n_waypoint,1);
Atom_centered_X_vA__ = cell(n_waypoint,1);
Atom_centered_Y_vA__ = cell(n_waypoint,1);
Atom_centered_Z_vA__ = cell(n_waypoint,1);
for nwaypoint=0:n_waypoint-1;
fname_pdb = fname_waypoint_{1+nwaypoint};
if (flag_verbose>0); disp(sprintf(' %% nwaypoint %d/%d: %s',nwaypoint,n_waypoint,fname_pdb)); end;
parameter = struct('type','parameter');
parameter.sigma_angstrom = sigma_angstrom;
parameter.flag_center = flag_center;
[ ...
 parameter ...
,n_Atom_v_(1+nwaypoint) ...
,Atom_centered_X_vA__{1+nwaypoint} ...
,Atom_centered_Y_vA__{1+nwaypoint} ...
,Atom_centered_Z_vA__{1+nwaypoint} ...
,Atom_occupancy_vA__{1+nwaypoint} ...
] = ...
Atom_from_pdb_0( ...
 parameter ...
,fname_pdb ...
);
end;%for nwaypoint=0:n_waypoint-1;
%%%%%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figmed;
markersize_use = 12;
c_use__ = colormap('hsv'); n_c_use = size(c_use__,1);
for nwaypoint=0:n_waypoint-1;
subplot(1,n_waypoint,1+nwaypoint);
n_atom = n_Atom_v_(1+nwaypoint);
tmp_X_a_ = Atom_centered_X_vA__{1+nwaypoint};
tmp_Y_a_ = Atom_centered_Y_vA__{1+nwaypoint};
tmp_Z_a_ = Atom_centered_Z_vA__{1+nwaypoint};
tmp_O_a_ = Atom_occupancy_vA__{1+nwaypoint};
surfline_0(tmp_X_a_,tmp_Y_a_,tmp_Z_a_,1:n_atom);
axisnotick3d; axis vis3d;
title(str_name_waypoint_{1+nwaypoint},'Interpreter','none');
end;%for nwaypoint=0:n_waypoint-1;
fname_fig_pre = sprintf('%s_jpg/Atom_v_FIGA',dir_ssnll);
fname_fig_jpg = sprintf('%s.jpg',fname_fig_pre);
if (flag_replot | ~exist(fname_fig_jpg,'file'));
disp(sprintf(' %% %s not found, creating',fname_fig_pre));
print('-djpeg',fname_fig_jpg);
end;%if (flag_replot | ~exist(fname_fig_jpg,'file'));
close(gcf);
end;%if flag_disp;
%%%%%%%%;

%%%%%%%%;
n_atom = n_Atom_v_(1+0);
n_volume = 12;
Atom_3as___ = zeros(3,n_atom,n_volume);
for natom=0:n_atom-1;
Atom_3as___(1+0,1+natom,:) = linspace(Atom_centered_X_vA__{1+0}(1+natom),Atom_centered_X_vA__{1+1}(1+natom),n_volume);
Atom_3as___(1+1,1+natom,:) = linspace(Atom_centered_Y_vA__{1+0}(1+natom),Atom_centered_Y_vA__{1+1}(1+natom),n_volume);
Atom_3as___(1+2,1+natom,:) = linspace(Atom_centered_Z_vA__{1+0}(1+natom),Atom_centered_Z_vA__{1+1}(1+natom),n_volume);
end;%for natom=0:n_atom-1;
%%%%%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figbig;
markersize_use = 12;
c_use__ = colormap('hsv'); n_c_use = size(c_use__,1);
n_volume_sub = 12;
p_row = 3; p_col = ceil(n_volume_sub/p_row); np=0;
for nvolume_sub=0:n_volume_sub-1;
subplot(p_row,p_col,1+nvolume_sub);
nvolume = max(0,min(n_volume-1,round((n_volume-1)*nvolume_sub/max(1,n_volume_sub-1))));
Atom_3a__ = Atom_3as___(:,:,1+nvolume);
surfline_0(Atom_3a__(1,:),Atom_3a__(2,:),Atom_3a__(3,:),1:n_atom);
axisnotick3d; axis vis3d;
title(sprintf('nvolume %d/%d',nvolume,n_volume));
end;%for nvolume_sub=0:n_volume_sub-1;
fname_fig_pre = sprintf('%s_jpg/Atom_v_FIGB',dir_ssnll);
fname_fig_jpg = sprintf('%s.jpg',fname_fig_pre);
if (flag_replot | ~exist(fname_fig_jpg,'file'));
disp(sprintf(' %% %s not found, creating',fname_fig_pre));
print('-djpeg',fname_fig_jpg);
end;%if (flag_replot | ~exist(fname_fig_jpg,'file'));
close(gcf);
end;%if flag_disp;

%%%%%%%%;
% Now create volumes. ;
%%%%%%%%;
fname_mat = sprintf('%s_mat/a_x_u_base_xxxv__.mat',dir_ssnll);
if (flag_recalc | ~exist(fname_mat,'file'));
disp(sprintf(' %% %s not found, creating',fname_mat));
half_diameter_x_c = 1.0d0;
diameter_x_c = 2.0d0*half_diameter_x_c;
x_p_r_max = 1.0;
n_x_u_pack = 64;
n_pack = n_x_u/n_x_u_pack;
pack_row_ij_ = zeros(n_x_u_pack,1);
pack_col_ij_ = zeros(n_x_u_pack,1);
pack_val_ij_ = zeros(n_x_u_pack,1);
na=0;
for nx_u=0:n_x_u-1;
pack_row_ij_(1+na) = 1+nx_u;
pack_col_ij_(1+na) = 1+floor(nx_u/n_pack);
pack_val_ij_(1+na) = 1/n_pack;
na=na+1;
end;%for nx_u=0:n_x_u-1;
x_u_pack_ = sparse(pack_row_ij_,pack_col_ij_,pack_val_ij_,n_x_u,n_x_u_pack);
x_u_0_ = linspace(-x_p_r_max,+x_p_r_max,n_x_u_pack);
x_u_1_ = linspace(-x_p_r_max,+x_p_r_max,n_x_u_pack);
x_u_2_ = linspace(-x_p_r_max,+x_p_r_max,n_x_u_pack);
[x_u_0___,x_u_1___,x_u_2___] = ndgrid(x_u_0_,x_u_1_,x_u_2_); n_xxx_u = n_x_u_pack^3;
xxx_u_weight_ = (2*x_p_r_max/n_x_u_pack)^3;
dx = diameter_x_c/max(1,n_x_u_pack);
%%%%%%%%;
a_x_u_base_xxxv__ = zeros(n_xxx_u,n_volume);
for nvolume=0:n_volume-1;
if (flag_verbose>0); disp(sprintf(' %% nvolume %d/%d',nvolume,n_volume)); end;
parameter = struct('type','parameter');
parameter.sigma_angstrom = sigma_angstrom;
[ ...
 parameter ...
,a_x_u_load_ ...
] = ...
a_x_u___from_Atom_2( ...
 parameter ...
,n_atom ...
,Atom_3as___(1+0,:,1+nvolume) ...
,Atom_3as___(1+1,:,1+nvolume) ...
,Atom_3as___(1+2,:,1+nvolume) ...
,[] ...
,n_x_u ...
,Pixel_Spacing ...
);
%%%%%%%%;
a_x_u_pack_ = reshape(a_x_u_load_,[n_x_u*n_x_u,n_x_u])*x_u_pack_;
a_x_u_pack_ = reshape(permute(reshape(a_x_u_pack_,[n_x_u,n_x_u,n_x_u_pack]),[3,1,2]),[n_x_u*n_x_u_pack,n_x_u])*x_u_pack_;
a_x_u_pack_ = reshape(permute(reshape(a_x_u_pack_,[n_x_u_pack,n_x_u,n_x_u_pack]),[3,1,2]),[n_x_u_pack*n_x_u_pack,n_x_u])*x_u_pack_;
a_x_u_pack_ = permute(reshape(a_x_u_pack_,[n_x_u_pack,n_x_u_pack,n_x_u_pack]),[3,1,2]);
a_x_u_pack_ = a_x_u_pack_ - mean(a_x_u_pack_,'all');
a_x_u_pack_ = a_x_u_pack_/max(1e-12,sum(a_x_u_pack_,'all')*dx^3);
clear a_x_u_load_;
%%%%%%%%;
% Calculate moments. ;
%%%%%%%%;
a_rho_x_u_pack_ = a_x_u_pack_ + min(a_x_u_pack_,[],'all');
a_rho_x_c_0_avg = sum(x_u_0___.^1.*a_rho_x_u_pack_/sum(a_rho_x_u_pack_,'all'),'all');
a_rho_x_c_1_avg = sum(x_u_1___.^1.*a_rho_x_u_pack_/sum(a_rho_x_u_pack_,'all'),'all');
a_rho_x_c_2_avg = sum(x_u_2___.^1.*a_rho_x_u_pack_/sum(a_rho_x_u_pack_,'all'),'all');
a_rho_x_c_0_std = sum((x_u_0___ - a_rho_x_c_0_avg).^2.*a_rho_x_u_pack_/sum(a_rho_x_u_pack_,'all'),'all');
a_rho_x_c_1_std = sum((x_u_1___ - a_rho_x_c_1_avg).^2.*a_rho_x_u_pack_/sum(a_rho_x_u_pack_,'all'),'all');
a_rho_x_c_2_std = sum((x_u_2___ - a_rho_x_c_2_avg).^2.*a_rho_x_u_pack_/sum(a_rho_x_u_pack_,'all'),'all');
a_rho_x_c_avg_ = [a_rho_x_c_0_avg ; a_rho_x_c_1_avg ; a_rho_x_c_2_avg];
a_rho_x_c_std_ = [a_rho_x_c_0_std ; a_rho_x_c_1_std ; a_rho_x_c_2_std];
disp(sprintf(' %% a_rho_x_c_std_ vs a_rho_x_c_avg_: %0.2f',fnorm(a_rho_x_c_std_)/fnorm(a_rho_x_c_avg_)));
if (max(abs(a_rho_x_c_avg_))> diameter_x_c/n_x_u_pack);
disp(sprintf(' %% Warning, molecule may not be well centered. Consider recentering.'));
end;%if (max(abs(a_rho_x_c_avg_))> diameter_x_c/n_x_u_pack);
a_x_u_base_xxxv__(:,1+nvolume) = a_x_u_pack_(:);
clear a_x_u_pack_ a_rho_x_u_pack_ a_rho_x_c_0_avg a_rho_x_c_1_avg a_rho_x_c_2_avg a_rho_x_c_0_std a_rho_x_c_1_std a_rho_x_c_2_std a_rho_x_c_avg_ a_rho_x_c_std_ ;
%%%%%%%%;
end;%for nvolume=0:n_volume-1;
%%%%%%%%;
if flag_disp;
fname_fig_pre = sprintf('%s_jpg/a_x_u_base_xxxv__',dir_ssnll);
fname_fig_jpg = sprintf('%s.jpg',fname_fig_pre);
disp(sprintf(' %% %s not found, creating',fname_fig_pre));
figure(1+nf);nf=nf+1;clf;figbig;
p_row = 3; p_col = ceil(n_volume_sub/p_row);
prct_use = 99.5;
for nvolume_sub=0:n_volume_sub-1;
subplot(p_row,p_col,1+nvolume_sub);
nvolume = max(0,min(n_volume-1,round((n_volume-1)*nvolume_sub/max(1,n_volume_sub-1))));
isosurface_f_x_u_1(struct('percent_threshold_',prct_use),a_x_u_base_xxxv__(:,1+nvolume));
title(sprintf('nvolume %d/%d',nvolume,n_volume),'Interpreter','none');
end;%for nvolume=0:n_volume-1;
sgtitle(fname_fig_pre,'Interpreter','none');
if (flag_replot | ~exist(fname_fig_jpg,'file'));
disp(sprintf(' %% writing %s',fname_fig_pre));
print('-djpeg',fname_fig_jpg);
end;%if (~exist(fname_fig_jpg,'file'));
close(gcf);
end;%if flag_disp;
%%%%%%%%;
save(fname_mat ...
     ,'half_diameter_x_c' ...
     ,'diameter_x_c' ...
     ,'x_p_r_max' ...
     ,'n_x_u_pack' ...
     ,'n_pack' ...
     ,'pack_row_ij_' ...
     ,'pack_col_ij_' ...
     ,'pack_val_ij_' ...
     ,'x_u_pack_' ...
     ,'x_u_0_' ...
     ,'x_u_1_' ...
     ,'x_u_2_' ...
     ,'x_u_0___' ...
     ,'x_u_1___' ...
     ,'x_u_2___' ...
     ,'n_x_u' ...
     ,'n_xxx_u' ...
     ,'xxx_u_weight_' ...
     ,'n_volume' ...
     ,'a_x_u_base_xxxv__' ...
     );
end;%if (flag_recalc | ~exist(fname_mat,'file'));
%%%%%%%%;
if ( exist(fname_mat,'file'));
disp(sprintf(' %% %s found, not creating',fname_mat));
load(fname_mat);
end;%if ( exist(fname_mat,'file'));

%%%%%%%%;
% Now set up k-quadrature on sphere. ;
%%%%%%%%;
k_p_r_max = k_int/(2*pi); k_eq_d = k_eq_d_double/(2*pi); str_T_vs_L = 'C';
flag_unif_vs_adap = 0; flag_tensor_vs_adap = 0; %<-- This is set to match test_ssnll_from_a_k_Y_12 ;
[ ...
 n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,k_c_0_all_ ...
,k_c_1_all_ ...
,k_c_2_all_ ...
] = ...
sample_sphere_7( ...
 0*flag_verbose ...
,k_p_r_max ...
,k_eq_d ...
,str_T_vs_L ...
,flag_unif_vs_adap ...
,flag_tensor_vs_adap ...
) ; %<-- sum(weight_3d_k_p_r_)*(4*pi) = (4/3)*pi*k_p_r_max^3 --> sum(weight_3d_k_p_r_) = (1/3)*k_p_r_max^3 ;
%%%%;
if (flag_disp>1);
figure(1+nf);nf=nf+1;clf;figbig;
p_row = 2; p_col = 4; n_plot = p_row*p_col;
for nplot=0:n_plot-1;
nk_p_r = max(0,min(n_k_p_r-1,round(n_k_p_r*nplot/n_plot)));
tmp_index_ = n_k_all_csum_(1+nk_p_r):n_k_all_csum_(1+nk_p_r+1)-1;
subplot(p_row,p_col,1+nplot);
plot3(k_c_0_all_(1+tmp_index_),k_c_1_all_(1+tmp_index_),k_c_2_all_(1+tmp_index_),'.');
axis equal; axis vis3d; axisnotick3d;
title(sprintf('nk_p_r %d/%d',nk_p_r,n_k_p_r),'Interpreter','none');
end;%for nplot=0:n_plot-1;
end;%if flag_disp;
%%%%;
%%%%%%%%;
% Now set up polar-quadrature-weights on disk. ;
%%%%%%%%;
l_max_upb = round(2*pi*k_p_r_max);
l_max_max = min(l_max_upb,1+ceil(2*pi*k_p_r_(end)));
n_w_max = n_w_int*2*(l_max_max+1); n_w_0in_ = n_w_max*ones(n_k_p_r,1);
[ ...
 n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,k_p_r_wk_ ...
,k_p_w_wk_ ...
,k_c_0_wk_ ...
,k_c_1_wk_ ...
] = ...
get_weight_2d_2( ...
 0*flag_verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,-1 ...
,n_w_0in_ ...
); %<-- sum(weight_2d_k_p_r_) = pi*k_p_r_max^2, sum(weight_2d_wk_) = pi*k_p_r_max^2/(4*pi^2) ;
n_w_sum = sum(n_w_); n_w_csum_ = cumsum([0;n_w_]);
%%%%%%%%;
% Now set up spherical-harmonics. ;
%%%%%%%%;
l_max_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
l_max_(1+nk_p_r) = max(0,min(l_max_upb,1+ceil(2*pi*k_p_r_(1+nk_p_r))));
end;%for nk_p_r=0:n_k_p_r-1;
n_lm_ = (l_max_+1).^2;
n_lm_max = max(n_lm_);
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
l_max_max = max(l_max_);
m_max_ = -l_max_max : +l_max_max;
n_m_max = length(m_max_);
%%%%;
Y_l_val_ = zeros(n_lm_sum,1);
Y_m_val_ = zeros(n_lm_sum,1);
Y_k_val_ = zeros(n_lm_sum,1);
for nk_p_r=0:n_k_p_r-1;
l_max = l_max_(1+nk_p_r);
tmp_l_val_ = zeros(n_lm_(1+nk_p_r),1);
tmp_m_val_ = zeros(n_lm_(1+nk_p_r),1);
na=0; 
for l_val=0:l_max;
for m_val=-l_val:+l_val;
tmp_l_val_(1+na) = l_val;
tmp_m_val_(1+na) = m_val;
na=na+1;
end;%for m_val=-l_val:+l_val;
end;%for l_val=0:l_max;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
Y_l_val_(1+tmp_index_) = tmp_l_val_;
Y_m_val_(1+tmp_index_) = tmp_m_val_;
Y_k_val_(1+tmp_index_) = k_p_r_(1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
weight_Y_ = zeros(n_lm_sum,1);
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
weight_Y_(1+tmp_index_) = weight_3d_k_p_r_(1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;

%%%%%%%%;
% Now convert to a_k_p_ ;
%%%%%%%%;
fname_mat = sprintf('%s_mat/a_k_p_quad_v__.mat',dir_ssnll);
if (flag_recalc | ~exist(fname_mat,'file'));
disp(sprintf(' %% %s not found, creating',fname_mat));
%%%%;
a_k_p_quad_v__ = zeros(n_k_all,n_volume);
for nvolume=0:n_volume-1;
if (flag_verbose>0); disp(sprintf(' %% nvolume %d/%d',nvolume,n_volume)); end;
a_x_u_base_ = a_x_u_base_xxxv__(:,1+nvolume);
%%%%;
eta = pi/x_p_r_max; tmp_t = tic;
a_k_p_quad_ = xxnufft3d3(n_xxx_u,x_u_0___(:)*eta,x_u_1___(:)*eta,x_u_2___(:)*eta,a_x_u_base_(:).*xxx_u_weight_(:),-1,1e-12,n_k_all,2*pi*k_c_0_all_/eta,2*pi*k_c_1_all_/eta,2*pi*k_c_2_all_/eta)/sqrt(2*pi)/sqrt(2*pi)/sqrt(2*pi);
tmp_t = toc(tmp_t); disp(sprintf(' %% xxnufft3d3: a_k_p_quad_ time %0.2fs',tmp_t));
%%%%;
eta = pi/k_p_r_max; tmp_t = tic;
a_x_u_reco_ = xxnufft3d3(n_k_all,2*pi*k_c_0_all_*eta,2*pi*k_c_1_all_*eta,2*pi*k_c_2_all_*eta,a_k_p_quad_.*(2*pi)^3.*weight_3d_k_all_,+1,1e-12,n_xxx_u,x_u_0___(:)/eta,x_u_1___(:)/eta,x_u_2___(:)/eta)/sqrt(2*pi)/sqrt(2*pi)/sqrt(2*pi);
tmp_t = toc(tmp_t); disp(sprintf(' %% xxnufft3d3: a_x_u_reco_ time %0.2fs',tmp_t));
%%%%;
disp(sprintf(' %% xxnufft3d3: a_x_u_reco error: %0.16f',fnorm(a_x_u_base_(:)-a_x_u_reco_)/fnorm(a_x_u_base_(:))));
a_k_p_quad_v__(:,1+nvolume) = a_k_p_quad_;
clear a_x_u_base_ a_k_p_quad_ a_x_u_reco_ ;
end;%for nvolume=0:n_volume-1;
save(fname_mat ...
     ,'k_p_r_max','k_eq_d' ...
     ,'n_k_all','n_k_all_csum_' ...
     ,'k_p_r_all_','k_p_azimu_b_all_','k_p_polar_a_all_' ...
     ,'weight_3d_k_all_','weight_shell_k_' ...
     ,'n_k_p_r','k_p_r_' ...
     ,'weight_3d_k_p_r_' ...
     ,'k_c_0_all_','k_c_1_all_','k_c_2_all_' ...
     ,'n_volume' ...
     ,'a_k_p_quad_v__' ...
     );
end;%if (~exist(fname_mat,'file'));
%%%%%%%%;
if ( exist(fname_mat,'file'));
disp(sprintf(' %% %s found, not creating',fname_mat));
load(fname_mat);
end;%if ( exist(fname_mat,'file'));
%%%%%%%%;
fname_fig_pre = sprintf('%s_jpg/a_k_p_quad_v__',dir_ssnll);
fname_fig_jpg = sprintf('%s.jpg',fname_fig_pre);
fname_fig_eps = sprintf('%s.eps',fname_fig_pre);
if (flag_replot | ~exist(fname_fig_jpg,'file'));
disp(sprintf(' %% %s not found, creating',fname_fig_pre));
figure(1+nf);nf=nf+1;clf;figbig;
p_row = 3; p_col = ceil(n_volume_sub/p_row);
prct_use = 99.5;
for nvolume_sub=0:n_volume_sub-1;
subplot(p_row,p_col,1+nvolume_sub);
nvolume = max(0,min(n_volume-1,round((n_volume-1)*nvolume_sub/max(1,n_volume_sub-1))));
plot(k_p_r_all_,log10(abs(a_k_p_quad_v__(:,1+nvolume))),'.'); xlabel('k'); ylabel('log10(|a(k)|)');
title(sprintf('nvolume %d/%d',nvolume,n_volume),'Interpreter','none');
end;%for nvolume_sub=0:n_volume_sub-1;
disp(sprintf(' %% writing %s',fname_fig_pre));
sgtitle(fname_fig_pre,'Interpreter','none');
print('-djpeg',fname_fig_jpg);
print('-depsc',fname_fig_eps);
close(gcf);
end;%if (~exist(fname_fig_jpg,'file'));
if ( exist(fname_fig_jpg,'file'));
disp(sprintf(' %% %s found, not creating',fname_fig_pre));
end;%if ( exist(fname_fig_jpg,'file'));
%%%%%%%%;

%%%%%%%%;
% Now convert to a_k_Y_ ; 
%%%%%%%%;
fname_mat = sprintf('%s_mat/a_k_Y_quad_ykv__.mat',dir_ssnll);
if (flag_recalc | ~exist(fname_mat,'file'));
disp(sprintf(' %% %s not found, creating',fname_mat));
%%%%%%%%;
if ~exist('Ylm_uklma___','var'); Ylm_uklma___ = []; end;
if ~exist('k_p_azimu_b_sub_uka__','var'); k_p_azimu_b_sub_uka__ = []; end;
if ~exist('k_p_polar_a_sub_uka__','var'); k_p_polar_a_sub_uka__ = []; end;
if ~exist('l_max_uk_','var'); l_max_uk_ = []; end;
if ~exist('index_nu_n_k_per_shell_from_nk_p_r_','var'); index_nu_n_k_per_shell_from_nk_p_r_ = []; end;
if ~exist('index_k_per_shell_uka__','var'); index_k_per_shell_uka__ = []; end;
a_k_Y_quad_ykv__ = zeros(n_lm_sum,n_volume);
for nvolume=0:n_volume-1;
tmp_t = tic;
if (flag_verbose>0); disp(sprintf(' %% nvolume %d/%d',nvolume,n_volume)); end;
[ ...
 a_k_Y_quad_ykv__(:,1+nvolume) ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_p_quad_v__(:,1+nvolume) ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% a_k_Y_quad_yk_ time %0.2fs',tmp_t));
tmp_t = tic;
[ ...
 a_k_p_reco_v__(:,1+nvolume) ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
] = ...
convert_spharm_to_k_p_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_Y_quad_ykv__(:,1+nvolume) ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% a_k_p_reco_ time %0.2fs',tmp_t));
disp(sprintf(' %% convert_spharm_to_k_p_4: a_k_p_reco error: %0.16f',fnorm(a_k_p_quad_v__(:,1+nvolume)-a_k_p_reco_v__(:,1+nvolume))/fnorm(a_k_p_quad_v__(:,1+nvolume)))); %<-- this should be 2-3 digits. ;
end;%for nvolume=0:n_volume-1;
%%%%%%%%;
a_k_Y_quad_ykv___ = zeros(n_lm_max,n_k_p_r,1+nvolume);
for nvolume=0:n_volume-1;
a_k_Y_quad_ykv___(:,:,1+nvolume) = local_yk__from_yk_(n_k_p_r,l_max_,a_k_Y_quad_ykv__(:,1+nvolume));
end;%for nvolume=0:n_volume-1;
%%%%%%%%;
save(fname_mat ...
     ,'l_max_' ...
     ,'n_lm_','n_lm_max','n_lm_sum','n_lm_csum_','l_max_max','m_max_','n_m_max' ...
     ,'Y_l_val_','Y_m_val_','Y_k_val_','weight_Y_' ...
     ,'n_volume' ...
     ,'a_k_Y_quad_ykv__' ...
     ,'a_k_p_reco_v__' ...
     ,'a_k_Y_quad_ykv___' ...
     );
end;%if (~exist(fname_mat,'file'));
%%%%%%%%;
if ( exist(fname_mat,'file'));
disp(sprintf(' %% %s found, not creating',fname_mat));
load(fname_mat);
end;%if ( exist(fname_mat,'file'));
%%%%%%%%;
fname_fig_pre = sprintf('%s_jpg/a_k_Y_quad_v__',dir_ssnll);
fname_fig_jpg = sprintf('%s.jpg',fname_fig_pre);
fname_fig_eps = sprintf('%s.eps',fname_fig_pre);
if (flag_replot | ~exist(fname_fig_jpg,'file'));
disp(sprintf(' %% %s not found, creating',fname_fig_pre));
figure(1+nf);nf=nf+1;clf;figbig;
p_row = 3; p_col = ceil(n_volume_sub/p_row);
prct_use = 99.5;
for nvolume_sub=0:n_volume_sub-1;
subplot(p_row,p_col,1+nvolume_sub);
nvolume = max(0,min(n_volume-1,round((n_volume-1)*nvolume_sub/max(1,n_volume_sub-1))));
plot(Y_l_val_,log10(abs(a_k_Y_quad_ykv__(:,1+nvolume))),'.'); xlabel('Y_l_val_','Interpreter','none'); ylabel('log10(abs(a))');
title(sprintf('nvolume %d/%d',nvolume,n_volume),'Interpreter','none');
end;%for nvolume_sub=0:n_volume_sub-1;
disp(sprintf(' %% writing %s',fname_fig_pre));
sgtitle(fname_fig_pre,'Interpreter','none');
print('-djpeg',fname_fig_jpg);
print('-depsc',fname_fig_eps);
close(gcf);
end;%if (~exist(fname_fig_jpg,'file'));
if ( exist(fname_fig_jpg,'file'));
disp(sprintf(' %% %s found, not creating',fname_fig_pre));
end;%if ( exist(fname_fig_jpg,'file'));
%%%%%%%%;

%%%%%%%%;
% Now calculate the idealized principal-modes for all the volumes ;
% using a uniform weight across volumes, a unit CTF and delta_sigma==0. ;
%%%%%%%%;
fname_mat = sprintf('%s_mat/X_2d_x1_d0_kk__.mat',dir_ssnll);
if (flag_recalc | ~exist(fname_mat,'file'));
disp(sprintf(' %% %s not found, creating',fname_mat));
[X_2d_x1_d0_kk__,X_2d_x1_d0_weight_r_] = principled_marching_cost_matrix_6(n_k_p_r,k_p_r_,weight_2d_k_p_r_,l_max_,n_volume,[],a_k_Y_quad_ykv__);
save(fname_mat ...
     ,'X_2d_x1_d0_kk__','X_2d_x1_d0_weight_r_' ...
     );
end;%if (~exist(fname_mat,'file'));
%%%%%%%%;
if ( exist(fname_mat,'file'));
disp(sprintf(' %% %s found, not creating',fname_mat));
load(fname_mat);
end;%if ( exist(fname_mat,'file'));

%%%%%%%%;
% Now determine principal-modes. ;
%%%%%%%%;
if ~exist('tolerance_pm','var'); tolerance_pm = 1e-6; end;
n_UX_rank = n_k_p_r-1; %<-- just to check dimensions. ;
X_kk__ = X_2d_x1_d0_kk__;
[tmp_UX__,tmp_SX__,tmp_VX__] = svds(X_kk__,n_UX_rank); tmp_SX_ = diag(tmp_SX__);
pm_n_UX_rank = max(find(tmp_SX_/max(tmp_SX_)> tolerance_pm));
if pm_n_UX_rank_max < pm_n_UX_rank;
tolerance_pm_max = sqrt(tmp_SX_(pm_n_UX_rank_max)/max(tmp_SX_) * tmp_SX_(min(n_UX_rank,pm_n_UX_rank_max+1))/max(tmp_SX_));
disp(sprintf(' %% raising tolerance_pm %0.6f to tolerance_pm_max %0.6f',tolerance_pm,tolerance_pm_max));
tolerance_pm = tolerance_pm_max;
pm_n_UX_rank = max(find(tmp_SX_/max(tmp_SX_)> tolerance_pm));
end;%if pm_n_UX_rank_max < pm_n_UX_rank;
UX_kn__ = zeros(n_k_p_r,n_UX_rank); SX_k_ = zeros(n_UX_rank,1);
UX_kn__(:,:) = tmp_UX__(:,1+[0:n_UX_rank-1]);
SX_k_(:) = tmp_SX_(1+[0:n_UX_rank-1]);
nlt = -log10(tolerance_pm);
str_tolerance_pm = sprintf('nlt%.2dpm%d',round(10*nlt),pm_n_UX_rank);
if (flag_verbose>0); disp(sprintf(' %% tolerance_pm %0.6f: pm_n_UX_rank %d/%d --> %s',tolerance_pm,pm_n_UX_rank,n_UX_rank,str_tolerance_pm)); end;
%%%%%%%%;
[ ...
 ~ ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_k_p_r_max ...
,pm_l_max_ ...
,pm_n_k_all ...
,pm_n_k_all_csum_ ...
,pm_k_p_r_all_ ...
,pm_k_p_azimu_b_all_ ...
,pm_k_p_polar_a_all_ ...
,pm_weight_3d_k_all_ ...
,pm_weight_shell_k_ ...
,pm_weight_3d_k_p_r_ ...
,pm_n_w_ ...
,pm_weight_2d_k_p_r_ ...
,pm_weight_2d_wk_ ...
] = ...
get_weight_pm_3( ...
 parameter ...
,pm_n_UX_rank ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,weight_3d_k_p_r_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
);
pm_n_w_max = max(pm_n_w_);
pm_n_w_sum = sum(pm_n_w_);
pm_n_w_csum_ = cumsum([0;pm_n_w_]);
pm_n_lm_ = (pm_l_max_+1).^2;
pm_n_lm_max = max(pm_n_lm_);
pm_n_lm_sum = sum(pm_n_lm_);
pm_n_lm_csum_ = cumsum([0;pm_n_lm_]);
pm_l_max_max = max(pm_l_max_);
%%%%%%%%;

%%%%%%%%;
% Now form a_x1_UX_Y_quad_ynv___ ;
%%%%%%%%;
X_weight_r_ = X_2d_x1_d0_weight_r_;
a_x1_UX_Y_quad_ynv___ = zeros(n_lm_max,pm_n_UX_rank,n_volume);
for nvolume=0:n_volume-1;
for nUX_rank=0:pm_n_UX_rank-1;
for nk_p_r=0:n_k_p_r-1;
tmp_l_max = l_max_(1+nk_p_r);
tmp_n_lm = (tmp_l_max+1).^2;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:tmp_n_lm-1);
a_x1_UX_Y_quad_ynv___(1:tmp_n_lm,1+nUX_rank,1+nvolume) = a_x1_UX_Y_quad_ynv___(1:tmp_n_lm,1+nUX_rank,1+nvolume) + UX_kn__(1+nk_p_r,1+nUX_rank)*X_weight_r_(1+nk_p_r)*a_k_Y_quad_ykv__(1+tmp_index_,1+nvolume);
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nUX_rank=0:pm_n_UX_rank-1;
end;%for nvolume=0:n_volume-1;
for nvolume=0:n_volume-1;
a_x1_UX_Y_quad_ynv__(:,1+nvolume) = local_yk_from_yk__(pm_n_k_p_r,pm_l_max_,a_x1_UX_Y_quad_ynv___(:,:,1+nvolume));
end;%for nvolume=0:n_volume-1;
if (flag_verbose>0); disp(sprintf(' %% a_x1_UX_Y_quad_ynv__(:) vs a_x1_UX_Y_quad_ynv___(:): %0.16f',fnorm(a_x1_UX_Y_quad_ynv__(:)-a_x1_UX_Y_quad_ynv___(:)))); end;
pm_a_k_Y_quad_ykv___ = a_x1_UX_Y_quad_ynv___;
pm_a_k_Y_quad_ykv__ = a_x1_UX_Y_quad_ynv__;
pm_a_avg_k_Y_quad_yk__ = mean(pm_a_k_Y_quad_ykv___,3);
pm_a_avg_k_Y_quad_yk_ = mean(pm_a_k_Y_quad_ykv__,2);
a_avg_x1_UX_Y_quad_yn__ = mean(a_x1_UX_Y_quad_ynv___,3);
%%%%;
flag_check=1;
if flag_check;
a_k_Y_reco_ykv__ = zeros(n_lm_sum,n_volume);
for nvolume=0:n_volume-1;
for nUX_rank=0:pm_n_UX_rank-1;
for nk_p_r=0:n_k_p_r-1;
tmp_l_max = l_max_(1+nk_p_r);
tmp_n_lm = (tmp_l_max+1).^2;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:tmp_n_lm-1);
a_k_Y_reco_ykv__(1+tmp_index_,1+nvolume) = a_k_Y_reco_ykv__(1+tmp_index_,1+nvolume) + UX_kn__(1+nk_p_r,1+nUX_rank)/max(1e-12,X_weight_r_(1+nk_p_r))*a_x1_UX_Y_quad_ynv___(1:tmp_n_lm,1+nUX_rank,1+nvolume);
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nUX_rank=0:pm_n_UX_rank-1;
end;%for nvolume=0:n_volume-1;
a_k_Y_diff_ykv__ = a_k_Y_quad_ykv__ - a_k_Y_reco_ykv__;
for nvolume=0:n_volume-1;
if (flag_verbose>0); disp(sprintf(' %% nvolume %d/%d',nvolume,n_volume)); end;
[~,~,a_k_Y_quad_l3] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_Y_quad_ykv__(:,1+nvolume),0);
[~,~,a_k_Y_reco_l3] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_Y_reco_ykv__(:,1+nvolume),0);
[~,~,a_k_Y_diff_l3] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_3d_k_p_r_,l_max_,a_k_Y_diff_ykv__(:,1+nvolume),0);
[~,~,a_k_Y_quad_l2] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_2d_k_p_r_,l_max_,a_k_Y_quad_ykv__(:,1+nvolume),0);
[~,~,a_k_Y_reco_l2] = spharm_normalize_2(n_k_p_r,k_p_r_,weight_2d_k_p_r_,l_max_,a_k_Y_reco_ykv__(:,1+nvolume),0);
[~,~,pm_a_k_Y_quad_l3] = spharm_normalize_2(pm_n_k_p_r,pm_k_p_r_,pm_weight_3d_k_p_r_,pm_l_max_,pm_a_k_Y_quad_ykv__(:,1+nvolume),0);
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_quad_ykv__(:,1+nvolume) vs a_k_Y_reco_ykv__(:,1+nvolume): %0.16f %%<-- will not be small if tolerance_pm> 0',a_k_Y_diff_l3/max(1e-12,a_k_Y_quad_l3))); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_quad_l3 %0.6f',a_k_Y_quad_l3)); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_reco_l3 %0.6f',a_k_Y_reco_l3)); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_quad_l2 %0.6f',a_k_Y_quad_l2)); end;
if (flag_verbose>0); disp(sprintf(' %% a_k_Y_reco_l2 %0.6f',a_k_Y_reco_l2)); end;
if (flag_verbose>0); disp(sprintf(' %% pm_a_k_Y_quad_l3 %0.6f',pm_a_k_Y_quad_l3)); end;
end;%for nvolume=0:n_volume-1;
end;%if flag_check;
%%%%%%%%;
fname_fig_pre = sprintf('%s_jpg/X_2d_x1_d0_kk__FIGA',dir_ssnll);
fname_fig_jpg = sprintf('%s.jpg',fname_fig_pre);
if (flag_replot | ~exist(fname_fig_jpg,'file'));
disp(sprintf(' %% %s not found, creating',fname_fig_pre));
figure(1+nf);nf=nf+1;clf;
colormap(colormap_beach());
subplot(1,2,1); imagesc(log10(abs(UX_kn__)),[-3,0]); xlabel('rank'); ylabel('shell'); title('log10(abs(UX)) [-3,0]'); 
subplot(1,2,2); plot(log10(abs(SX_k_)),'ko'); xlabel('rank'); ylabel('log10(\sigma)'); title('log10(SX)');
figbig;
disp(sprintf(' %% writing %s',fname_fig_pre));
sgtitle(fname_fig_pre,'Interpreter','none');
print('-djpeg',fname_fig_jpg);
close(gcf);
end;%if (~exist(fname_fig_jpg,'file'));
if ( exist(fname_fig_jpg,'file'));
disp(sprintf(' %% %s found, not creating',fname_fig_pre));
end;%if ( exist(fname_fig_jpg,'file'));
%%%%%%%%;
fname_fig_pre = sprintf('%s_jpg/X_2d_x1_d0_kk__FIGB',dir_ssnll);
fname_fig_jpg = sprintf('%s.jpg',fname_fig_pre);
if (flag_replot | ~exist(fname_fig_jpg,'file'));
disp(sprintf(' %% %s not found, creating',fname_fig_pre));
figure(1+nf);nf=nf+1;clf;
%%%%%%%%;
% First set up a tensor-product spherical grid (in k_p_ space). ;
%%%%%%%%;
k_u_res = 64;
k_u_polar_a_ = linspace(0,pi,k_u_res);
k_u_azimu_b_ = linspace(0,2*pi,2*k_u_res);
[K_u_polar_a_,K_u_azimu_b_] = ndgrid(k_u_polar_a_,k_u_azimu_b_); n_K_u = k_u_res*2*k_u_res;
K_u_weight_ = sin(K_u_polar_a_);
%%%%%%%%;
% Now look at the functions on each shell associated with these 'principal-modes'. ;
%%%%%%%%;
n_plot = min(6,pm_n_UX_rank);
%plot_nk_p_r_ = max(1,min(n_k_p_r,round(linspace(1,n_k_p_r,n_plot))));
plot_nk_p_r_ = 0:n_plot-1;
quad_lim_ = 0.5 * abs(a_avg_x1_UX_Y_quad_yn__(1,1)) * [-1,+1];
for nplot=0:n_plot-1;
nk_p_r = plot_nk_p_r_(1+nplot);
[b_k_p_quad_] = reshape(convert_spharm_to_k_p_1(flag_verbose,n_K_u,0,ones(n_K_u,1),K_u_azimu_b_(:),K_u_polar_a_(:),K_u_weight_(:),K_u_weight_(:),1,1,1,l_max_max,a_avg_x1_UX_Y_quad_yn__(:,1+nk_p_r)),k_u_res,2*k_u_res);
subplot(3,n_plot,1 + nplot + 0*n_plot); imagesc(real(b_k_p_quad_),quad_lim_); axisnotick; title(sprintf('real nk_p_r: %d, real(quad)',nk_p_r),'Interpreter','none');
subplot(3,n_plot,1 + nplot + 1*n_plot); imagesc(imag(b_k_p_quad_),quad_lim_); axisnotick; title(sprintf('imag nk_p_r: %d, imag(quad)',nk_p_r),'Interpreter','none');
subplot(3,n_plot,1 + nplot + 2*n_plot); imagesc( abs(b_k_p_quad_),quad_lim_); axisnotick; title(sprintf(' abs nk_p_r: %d,  abs(quad)',nk_p_r),'Interpreter','none');
end;%for nplot=0:n_plot-1;
colormap(colormap_beach());
figbig;
disp(sprintf(' %% writing %s',fname_fig_pre));
sgtitle(fname_fig_pre,'Interpreter','none');
print('-djpeg',fname_fig_jpg);
close(gcf);
end;%if (~exist(fname_fig_jpg,'file'));
if ( exist(fname_fig_jpg,'file'));
disp(sprintf(' %% %s found, not creating',fname_fig_pre));
end;%if ( exist(fname_fig_jpg,'file'));
%%%%%%%%;

%%%%%%%%;
% Normalize all the principal-volumes with the same factor. ;
%%%%%%%%;
[~,~,pm_a_avg_k_Y_quad_l2] = spharm_normalize_2(pm_n_k_p_r,pm_k_p_r_,pm_weight_3d_k_p_r_,pm_l_max_,pm_a_avg_k_Y_quad_yk_,0);
pm_a_k_Y_quad_ykv___ = pm_a_k_Y_quad_ykv___/max(1e-12,pm_a_avg_k_Y_quad_l2);
pm_a_k_Y_quad_ykv__ = pm_a_k_Y_quad_ykv__/max(1e-12,pm_a_avg_k_Y_quad_l2);
pm_a_avg_k_Y_quad_yk__ = pm_a_avg_k_Y_quad_yk__/max(1e-12,pm_a_avg_k_Y_quad_l2);
pm_a_avg_k_Y_quad_yk_ = pm_a_avg_k_Y_quad_yk_/max(1e-12,pm_a_avg_k_Y_quad_l2);

%%%%%%%%;
% Use pm_a_k_Y_quad_ykv__ to generate pm_S_use_k_p_wkSv___. ;
% Note that poles are included for subsequent interpolation (when estimating ddssnll_lsq). ;
%%%%%%%%;
[ ...
 n_viewing_S_use ...
,viewing_azimu_b_S_use_ ...
,viewing_polar_a_S_use_ ...
,viewing_weight_S_use_ ...
,viewing_k_c_0_S_use_ ...
,viewing_k_c_1_S_use_ ...
,viewing_k_c_2_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
] = ...
sample_shell_6( ...
 1.0 ...
,1.0/k_p_r_max ...
,'C' ...
,1 ...
) ;
%%%%;
pm_S_use_k_p_wkSv___ = zeros(pm_n_w_sum,n_viewing_S_use,n_volume);
for nvolume=0:n_volume-1;
if (flag_verbose>0); disp(sprintf(' %% nvolume %d/%d',nvolume,n_volume)); end;
tmp_t = tic();
[ ...
 pm_S_use_k_p_wkS___ ...
,~ ...
,n_S_use ...
,viewing_azimu_b_S_use_ ...
,viewing_polar_a_S_use_ ...
,viewing_weight_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
] = ...
pm_template_2( ...
 0*flag_verbose ...
,l_max ...
,pm_n_k_p_r ...
,pm_a_k_Y_quad_ykv___(:,:,1+nvolume) ...
,[] ...
,-1 ...
,n_w_max ...
,n_viewing_S_use ...
,viewing_azimu_b_S_use_ ...
,viewing_polar_a_S_use_ ...
,viewing_weight_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
);
pm_S_use_k_p_wkS__ = reshape(pm_S_use_k_p_wkS___,[pm_n_w_sum,n_S_use]);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% pm_S_use_k_p_wkS__ (pm_template_2): %0.6fs',tmp_t)); end;
pm_S_use_k_p_wkSv___(:,:,1+nvolume) = pm_S_use_k_p_wkS__;
clear pm_S_use_k_p_wkS___ pm_S_use_k_p_wkS__
end;%for nvolume=0:n_volume-1;
%%%%%%%%;

%%%%%%%%;
% Now define pm_M_use_k_p_wkMv___. ;
% Note that poles are excluded (to allow for finite derivatives in U_SmallRotation_2). ;
%%%%%%%%;
tmp_index_ = efind( abs(viewing_polar_a_S_use_-0*pi)>1e-6 & abs(viewing_polar_a_S_use_-1*pi)>1e-6 );
n_M_use = numel(tmp_index_);
viewing_weight_M_use_ = viewing_weight_S_use_(1+tmp_index_);
viewing_weight_M_use_ = viewing_weight_M_use_*sum(viewing_weight_S_use_)/max(1e-12,sum(viewing_weight_M_use_));
pm_M_use_k_p_wkMv___ = pm_S_use_k_p_wkSv___(:,1+tmp_index_,:);
euler_polar_a_M_use_ = viewing_polar_a_S_use_(1+tmp_index_);
euler_azimu_b_M_use_ = viewing_azimu_b_S_use_(1+tmp_index_);
euler_gamma_z_M_use_ = zeros(n_M_use,1);
%%%%%%%%;

%%%%%%%%;
% Set viewing-angle distribution to be uniform (excluding the poles as above). ;
%%%%%%%%;
lsigma_dist = 0; n_lsigma_dist = 1;
factor_imagecount_M_use_ = 1/sqrt(2*pi)^2*ones(n_M_use,1);
tmp_f = sum(factor_imagecount_M_use_.*viewing_weight_M_use_);
factor_imagecount_M_use_ = factor_imagecount_M_use_./max(1e-12,tmp_f);
factor_imagecount_M_ = factor_imagecount_M_use_;
%%%%;
if flag_disp>1;
figure(1+nf);nf=nf+1;clf;figsml;
subplot(1,1,1);
flim_ = 4.0*[0,2.0/(4*pi)];
flag_2d_vs_3d=0;
imagesc_polar_a_azimu_b_0( ...
 euler_polar_a_M_use_ ... 
,euler_azimu_b_M_use_ ... 
,factor_imagecount_M_ ...
,flim_ ... 
,colormap_beach ... 
,flag_2d_vs_3d ...
,k_p_r_max ...
);
axisnotick3d; axis equal; axis vis3d;
title(sprintf('lsigma %0.2f',lsigma_dist),'Interpreter','none');
drawnow();
close(gcf);
end;%if flag_disp>1;
%%%%%%%%;

%%%%%%%%;
factor_imagecount_M_use_ = factor_imagecount_M_;
weight_imagecount_M_use_ = viewing_weight_M_use_ .* factor_imagecount_M_use_ ;
%%%%%%%%;
flag_implicit_dtau = 1;
%%%%%%%%;

%%%%%%%%;
% Determine normalized dvol. ;
%%%%%%%%;
pm_dvol_a_k_Y_quad_ykv__ = zeros(pm_n_lm_sum,n_volume);
for nvolume=0:n_volume-1;
if (flag_verbose>0); disp(sprintf(' %% nvolume %d/%d',nvolume,n_volume)); end;
if nvolume==0;          tmp_pre_ = pm_a_k_Y_quad_ykv__(:,1+0); else; tmp_pre_ = pm_a_k_Y_quad_ykv__(:,1+nvolume-1); end;
if nvolume==n_volume-1; tmp_pos_ = pm_a_k_Y_quad_ykv__(:,end); else; tmp_pos_ = pm_a_k_Y_quad_ykv__(:,1+nvolume+1); end;
tmp_mid_ = tmp_pos_ - tmp_pre_;
[~,~,tmp_l2] = spharm_normalize_2(pm_n_k_p_r,pm_k_p_r_,pm_weight_3d_k_p_r_,pm_l_max_,tmp_mid_,0);
tmp_mid_ = tmp_mid_/max(1e-12,tmp_l2);
pm_dvol_a_k_Y_quad_ykv__(:,1+nvolume) = tmp_mid_;
clear tmp_pre_ tmp_pos_ tmp_mid_ tmp_l2 ;
end;%for nvolume=0:n_volume-1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
for nvolume=0:n_volume-1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% nvolume %d/%d',nvolume,n_volume)); end;
fname_sub_pre = sprintf('%s_mat/ddssnll_v%d',dir_ssnll,nvolume);
[flag_sub_skip,fname_sub_mat] = open_fname_tmp(fname_sub_pre);
if (flag_recalc | ~flag_sub_skip);
disp(sprintf(' %% %s not found, creating',fname_sub_mat));
if ~exist('KAPPA','var'); KAPPA=[]; end;
if ~exist('pm_Ylm_uklma___','var'); pm_Ylm_uklma___=[]; end;
if ~exist('pm_k_p_azimu_b_sub_uka__','var'); pm_k_p_azimu_b_sub_uka__=[]; end;
if ~exist('pm_k_p_polar_a_sub_uka__','var'); pm_k_p_polar_a_sub_uka__=[]; end;
if ~exist('pm_l_max_uk_','var'); pm_l_max_uk_=[]; end;
if ~exist('pm_index_nu_n_k_per_shell_from_nk_p_r_','var'); pm_index_nu_n_k_per_shell_from_nk_p_r_=[]; end;
if ~exist('pm_index_k_per_shell_uka__','var'); pm_index_k_per_shell_uka__=[]; end;
if ~exist('pm_V_lmm___','var'); pm_V_lmm___=[]; end;
if ~exist('pm_L_lm__','var'); pm_L_lm__=[]; end;
if ~exist('pm_d0W_betazeta_mlma____','var'); pm_d0W_betazeta_mlma____=[]; end;
if ~exist('pm_d1W_betazeta_mlma____','var'); pm_d1W_betazeta_mlma____=[]; end;
if ~exist('pm_d2W_betazeta_mlma____','var'); pm_d2W_betazeta_mlma____=[]; end;
if ~exist('pm_U_tilde_SmallRotation_Delta_ykabc3__','var'); pm_pm_U_tilde_SmallRotation_Delta_ykabc3__=[]; end;
parameter_ddssnll = struct('type','ddssnll');
parameter_ddssnll.flag_verbose = flag_verbose;
parameter_ddssnll.flag_implicit_dtau = flag_implicit_dtau;
parameter_ddssnll.flag_check = 1;
parameter_ddssnll.flag_disp = 1;
parameter_ddssnll.flag_kernel_qpro_d0 = 1;
parameter_ddssnll.flag_kernel_qpro_d1 = 1;
parameter_ddssnll.flag_kernel_full = KAPPA_flag_kernel_full;
parameter_ddssnll.kernel_qpro_polar_a_pole_north=KAPPA_pole_north_double;
parameter_ddssnll.kernel_qpro_polar_a_pole_south=KAPPA_pole_south_double;
parameter_ddssnll.kernel_qpro_qref_k_eq_d_double=KAPPA_qref_k_eq_d_double;
[ ...
 parameter_ddssnll ...
,Hvt_ykabc_ ...
,Hv_q3d_k_Y_quad_yk_ ...
,Hv_q3d_k_Y_quad_yk__ ...
,Hv_q3d_k_p_quad_ ...
,Ht_q2d_M3__ ...
,a_restore_C2M0_k_Y_quad_yk_ ...
,a_restore_C2M0_k_p_quad_ ...
,Hvv_q3d_k_Y_quad_yk_ ...
,Hvt_q3d_k_Y_quad_yk_ ...
,Htv_q2d_M3__ ...
,Htt_q2d_M3__ ...
,dvol_a_k_Y_quad_yk_ ...
,dvol_a_k_Y_quad_yk__ ...
,dvol_a_k_p_quad_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
,n_dvt ... 
,dvt_ ... 
,dvt ... 
,ssnll_tmp_q2d_dvt_ ... 
,dssnll_mid_q2d ... 
,dssnll_dif_q2d ... 
,dssnll_lsq_q2d ... 
,ddssnll_mid_q2d ... 
,ddssnll_dif_q2d ... 
,ddssnll_lsq_q2d ... 
,KAPPA ...
,pm_Ylm_uklma___ ...
,pm_k_p_azimu_b_sub_uka__ ...
,pm_k_p_polar_a_sub_uka__ ...
,pm_l_max_uk_ ...
,pm_index_nu_n_k_per_shell_from_nk_p_r_ ...
,pm_index_k_per_shell_uka__ ...
,pm_V_lmm___ ...
,pm_L_lm__ ...
,pm_d0W_betazeta_mlma____ ...
,pm_d1W_betazeta_mlma____ ...
,pm_d2W_betazeta_mlma____ ...
] = ...
ddssnll_3( ...
 parameter_ddssnll ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_k_p_r_max ...
,pm_l_max_ ...
,pm_a_k_Y_quad_ykv__(:,1+nvolume) ...
,[] ...
,pm_dvol_a_k_Y_quad_ykv__(:,1+nvolume) ...
,[] ...
,pm_n_k_all ...
,pm_n_k_all_csum_ ...
,pm_k_p_r_all_ ...
,pm_k_p_azimu_b_all_ ...
,pm_k_p_polar_a_all_ ...
,pm_weight_3d_k_all_ ...
,pm_weight_shell_k_ ...
,pm_weight_3d_k_p_r_ ...
,[] ...
,[] ...
,pm_n_w_ ...
,pm_weight_2d_k_p_r_ ...
,pm_weight_2d_wk_ ...
,n_S_use ...
,pm_S_use_k_p_wkSv___(:,:,1+nvolume) ...
,viewing_polar_a_S_use_ ...
,viewing_azimu_b_S_use_ ...
,viewing_weight_S_use_ ...
,n_viewing_polar_a_use ...
,viewing_polar_a_use_ ...
,n_viewing_azimu_b_use_ ...
,n_M_use ...
,weight_imagecount_M_use_ ...
,pm_M_use_k_p_wkMv___(:,:,1+nvolume) ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,euler_polar_a_M_use_ ...
,euler_azimu_b_M_use_ ...
,euler_gamma_z_M_use_ ...
,[] ...
,[] ...
,[] ...
,KAPPA ...
,pm_Ylm_uklma___ ...
,pm_k_p_azimu_b_sub_uka__ ...
,pm_k_p_polar_a_sub_uka__ ...
,pm_l_max_uk_ ...
,pm_index_nu_n_k_per_shell_from_nk_p_r_ ...
,pm_index_k_per_shell_uka__ ...
,pm_V_lmm___ ...
,pm_L_lm__ ...
,pm_d0W_betazeta_mlma____ ...
,pm_d1W_betazeta_mlma____ ...
,pm_d2W_betazeta_mlma____ ...
);
save(fname_sub_mat ...
     ,'Hvt_ykabc_' ...
     ,'Hv_q3d_k_Y_quad_yk_' ...
     ,'Hv_q3d_k_Y_quad_yk__' ...
     ,'Hv_q3d_k_p_quad_' ...
     ,'Ht_q2d_M3__' ...
     ,'a_restore_C2M0_k_Y_quad_yk_' ...
     ,'a_restore_C2M0_k_p_quad_' ...
     ,'Hvv_q3d_k_Y_quad_yk_' ...
     ,'Hvt_q3d_k_Y_quad_yk_' ...
     ,'Htv_q2d_M3__' ...
     ,'Htt_q2d_M3__' ...
     ,'dvol_a_k_Y_quad_yk_' ...
     ,'dvol_a_k_Y_quad_yk__' ...
     ,'dvol_a_k_p_quad_' ...
     ,'dtau_euler_polar_a_M_' ...
     ,'dtau_euler_azimu_b_M_' ...
     ,'dtau_euler_gamma_z_M_' ...
     ,'n_dvt' ... 
     ,'dvt_' ... 
     ,'dvt' ... 
     ,'ssnll_tmp_q2d_dvt_' ... 
     ,'dssnll_mid_q2d' ... 
     ,'dssnll_dif_q2d' ... 
     ,'dssnll_lsq_q2d' ... 
     ,'ddssnll_mid_q2d' ... 
     ,'ddssnll_dif_q2d' ... 
     ,'ddssnll_lsq_q2d' ... 
     );
close_fname_tmp(fname_sub_pre);
%%%%%%%%;
end;%if (flag_recalc | ~flag_sub_skip);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%for nvolume=0:n_volume-1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
ddssnll_mid_v_ = zeros(n_volume,1);
ddssnll_dif_v_ = zeros(n_volume,1);
ddssnll_lsq_v_ = zeros(n_volume,1);
dtau_euler_polar_a_Mv__ = zeros(n_M_use,n_volume);
dtau_euler_azimu_b_Mv__ = zeros(n_M_use,n_volume);
dtau_euler_gamma_z_Mv__ = zeros(n_M_use,n_volume);
for nvolume=0:n_volume-1;
if (flag_verbose>0); disp(sprintf(' %% nvolume %d/%d',nvolume,n_volume)); end;
fname_sub_mat = sprintf('%s_mat/ddssnll_v%d.mat',dir_ssnll,nvolume);
if ~exist(fname_sub_mat,'file'); disp(sprintf(' %% Warning, %s not found',fname_sub_mat)); end;
if  exist(fname_sub_mat,'file');
tmp_ = load(fname_sub_mat);
ddssnll_mid_v_(1+nvolume) = tmp_.ddssnll_mid_q2d;
ddssnll_dif_v_(1+nvolume) = tmp_.ddssnll_dif_q2d;
ddssnll_lsq_v_(1+nvolume) = tmp_.ddssnll_lsq_q2d;
dtau_euler_polar_a_Mv__(:,1+nvolume) = tmp_.dtau_euler_polar_a_M_;
dtau_euler_azimu_b_Mv__(:,1+nvolume) = tmp_.dtau_euler_azimu_b_M_;
dtau_euler_gamma_z_Mv__(:,1+nvolume) = tmp_.dtau_euler_gamma_z_M_;
clear tmp_ ;
end;%if  exist(fname_sub_mat,'file'); 
end;%for nvolume=0:n_volume-1;
%%%%%%%%;

%%%%%%%%;
% Illustrate dtau_euler_3Mv____ as a function of nvolume. ;
%%%%%%%%;
if flag_disp>1;
figure(1+nf);nf=nf+1;clf;figsml;
markersize_use = 8;
c_use__ = colormap('hsv'); n_c_use = size(c_use__,1);
hold on;
for nM_use=0:n_M_use-1;
surfline_0(dtau_euler_azimu_b_Mv__(1+nM_use,:),dtau_euler_polar_a_Mv__(1+nM_use,:),1:n_volume);
end;%for nM_use=0:n_M_use-1;
hold off;
end;%if flag_disp>1;
%%%%%%%%;

%%%%%%%%;
% Now make diagnostic figure. ;
%%%%%%%%;
if flag_disp;
figure(1+nf);nf=nf+1;clf;figbig;
fontsize_use = 24;
linewidth_use = 2;
c_use__ = colormap('hsv'); n_c_use = size(c_use__,1);
shift_theta = 0; sc = cos(shift_theta); ss = sin(shift_theta);
R__ = [ +sc -ss 0 ; +ss +sc 0 ; 0 0 1 ];
subplot(3,1,[1,2]);
b = bar(1:n_volume,ddssnll_lsq_v_,0.8); set(b,'FaceColor',0.85*[1,1,1],'LineWidth',linewidth_use);
set(gca,'XTick',[]); set(gca,'YTick',[0:0.05:0.15],'YTickLabel',{'','',''}); grid on;
set(gca,'FontSize',fontsize_use);
ylabel('rayleigh-quotient','Interpreter','none');
subplot(3,1,[3]);
for nvolume_sub=0:n_volume_sub-1;
nvolume = max(0,min(n_volume-1,round((n_volume-1)*nvolume_sub/max(1,n_volume_sub-1))));
tmp_shift_d = nvolume_sub * 2.0 * x_p_r_max * 64;
tmp_shift_ = R__*[ tmp_shift_d ; 0 ; 0 ];
tmp_shift_0 = tmp_shift_(1+0);
tmp_shift_1 = tmp_shift_(1+1);
tmp_shift_2 = tmp_shift_(1+2);
Atom_3a__ = Atom_3as___(:,:,1+nvolume);
surfline_0(Atom_3a__(1+0,:) + tmp_shift_0,Atom_3a__(1+1,:) + tmp_shift_1,Atom_3a__(1+2,:) + tmp_shift_2,1:n_atom);
end;%for nvolume_sub=0:n_volume_sub-1;
axisnotick3d; axis equal;
xlabel('conformation','Interpreter','none');
set(gca,'FontSize',fontsize_use);
fname_fig_pre = sprintf('%s_jpg/ddssnll_lsq_vs_Atom_v_FIGC',dir_ssnll);
fname_fig_jpg = sprintf('%s.jpg',fname_fig_pre);
fname_fig_stripped_pre = sprintf('%s_jpg/ddssnll_lsq_vs_Atom_v_FIGC_stripped',dir_ssnll);
fname_fig_stripped_jpg = sprintf('%s.jpg',fname_fig_stripped_pre);
if (flag_replot | ~exist(fname_fig_jpg,'file'));
disp(sprintf(' %% %s not found, creating',fname_fig_pre));
sgtitle(fname_fig_pre,'Interpreter','none');
print('-djpeg',fname_fig_jpg);
sgtitle('','Interpreter','none');
print('-djpeg',fname_fig_stripped_jpg);
end;%if (flag_replot | ~exist(fname_fig_jpg,'file'));
close(gcf);
end;%if flag_disp;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

return;

