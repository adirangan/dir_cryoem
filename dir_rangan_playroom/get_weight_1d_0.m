function ...
[ ...
 weight_1d_k_p_r_ ...
] = ...
get_weight_1d_0( ...
 verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
);

str_thisfunction = 'get_weight_1d_0';

if nargin<1;
%%%%%%%%;
disp(sprintf(' %% testing %s',str_thisfunction));
%%%%%%%%;
verbose=0;
k_p_r_max = 48/(2*pi);
k_eq_d = 1/(2*pi);
[ ...
 n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,k_c_0_all_ ...
,k_c_1_all_ ...
,k_c_2_all_ ...
,J_node_ ...
,J_weight_ ...
,J_chebfun_ ...
,J_polyval_ ...
] = ...
sample_sphere_7( ...
 verbose ...
,k_p_r_max ...
,k_eq_d ...
) ;
%%%%%%%%;
[ ...
 weight_1d_k_p_r_ ...
] = ...
get_weight_1d_0( ...
 verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
);
%%%%%%%%;
f = @(k) ones(size(k));
F_tru = k_p_r_max;
F_est = dot(f(k_p_r_),weight_1d_k_p_r_);
disp(sprintf(' %% F_tru vs F_est: %0.16f',abs(F_tru-F_est)/abs(F_tru)));
sigma = k_p_r_max/4; delta = k_p_r_max/3;
f = @(k) 1/sqrt(2*pi) * (1/sigma) * exp(-(k-delta).^2/(2*sigma^2));
F_tru = 0.5*erf((k_p_r_max-delta)/sqrt(2*sigma^2)) + 0.5*erf((delta-0.0)/sqrt(2*sigma^2));
F_est = dot(f(k_p_r_),weight_1d_k_p_r_);
disp(sprintf(' %% F_tru vs F_est: %0.16f',abs(F_tru-F_est)/abs(F_tru)));
%%%%%%%%;
disp('returning'); return;
%%%%%%%%;
end;%if nargin<1;

na=0;
if (nargin<1+na); verbose=[]; end; na=na+1;
if (nargin<1+na); n_k_p_r=[]; end; na=na+1;
if (nargin<1+na); k_p_r_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_max=[]; end; na=na+1;

%%%%%%%%;
if (verbose); disp(sprintf(' %% Set up integration weights.')); end;
%%%%%%%%;
tmp_P_ = zeros(n_k_p_r,n_k_p_r); %<-- polynomials of order 0:n_k_p_r-1 evaluated on k_p_r_/k_p_r_max. ;
tmp_I_ = zeros(n_k_p_r,1); %<-- integrals of those polynomials on the interval [0,1]. ;
for nk_p_r=0:n_k_p_r-1;
tmp_x = @(x) x.^nk_p_r;
tmp_P_(1+nk_p_r,:) = tmp_x(k_p_r_/k_p_r_max);
tmp_I_(1+nk_p_r) = 1.0/(nk_p_r+1);
end;%for nk_p_r=0:n_k_p_r-1;
tmp_W_ = pinv(tmp_P_,1e-6)*tmp_I_;
if (verbose>1); disp(sprintf(' %% weight error: %0.16f',fnorm(tmp_P_*tmp_W_ - tmp_I_)/fnorm(tmp_I_))); end;
weight_1d_k_p_r_ = tmp_W_*k_p_r_max;
