function ...
[ ...
 X_SM__ ...
,delta_x_SM__ ...
,delta_y_SM__ ...
,gamma_z_SM__ ...
,I_value_SM__ ...
,t_level_SM__ ...
] = ...
ampmh_X_local_SM__7( ...
 FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,n_S_per_Sbatch ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_ ...
,n_M ...
,n_M_per_Mbatch ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
,parameter ...
,template_tree ...
,euler_polar_a_ ...
,euler_azimu_b_ ...
);
%%%%%%%%;
% Uses ampmh_X_SM__7 to conduct a local search. ;
%%%%%%%%;

verbose = 0;
if (verbose>0); disp(sprintf(' %% [entering ampmh_X_local_SM__7]')); end;

if nargin<12;
parameter = [];
end;%if nargin<13;

[ ...
 FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_use_ ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM_use__ ...
,parameter ...
] = ...
ampmh_X_wSM_reduce_0( ...
 FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_ ...
,n_M ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
,parameter ...
);

%%%%%%%%;
if (~isfield(parameter,'flag_optimize_over_gamma_z')); parameter.flag_optimize_over_gamma_z = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'n_neighborhood_retain')); parameter.n_neighborhood_retain = 0; end; %<-- parameter_bookmark. ;
parameter.flag_optimize_over_gamma_z = 1;
n_neighborhood_retain = parameter.n_neighborhood_retain;
%%%%%%%%;

if (nargin<13); template_tree = []; end;
if ( isempty(template_tree));
t_level_SM__ = ones(n_S,n_M);
[ ...
 X_SM__ ...
,delta_x_SM__ ...
,delta_y_SM__ ...
,gamma_z_SM__ ...
,I_value_SM__ ...
] = ...
ampmh_X_wSM___7( ...
 FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,n_S_per_Sbatch ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_use_ ...
,n_M ...
,n_M_per_Mbatch ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM_use__ ...
,parameter ...
);
end;%if ( isempty(template_tree));

if (nargin<14); euler_polar_a_ = []; end;
if (nargin<15); euler_azimu_b_ = []; end;

if (~isempty(template_tree));

n_level = template_tree.n_level;
n_S_max = template_tree.n_S_(n_level);
X_SM__ = -ones(n_S_max,n_M);
delta_x_SM__ = zeros(n_S_max,n_M);
delta_y_SM__ = zeros(n_S_max,n_M);
gamma_z_SM__ = zeros(n_S_max,n_M);
I_value_SM__ = zeros(n_S_max,n_M);
t_level_SM__ = -ones(n_S_max,n_M);

flag_viewing_angle = 0;
if (~isempty(euler_polar_a_) & ~isempty(euler_polar_b_));
flag_viewing_angle = 1;
euler_k_c_0_ = cos(euler_azimu_b_).*sin(euler_polar_a_);
euler_k_c_1_ = sin(euler_azimu_b_).*sin(euler_polar_a_);
euler_k_c_2_ = cos(euler_polar_a_);
euler_k_c_Md__ = [euler_k_c_0_(:),euler_k_c_1_(:),euler_k_c_2_(:)];
index_coarse_from_image__ = cell(n_level,1);
for nlevel=0:n_level-1;
tmp_ij_ = knnsearch(template_tree.viewing_pole_k_c_Sd___{1+nlevel},euler_k_c_Md__,'K',1);
index_coarse_from_image__{1+nlevel} = tmp_ij_ - 1;
end;%for nlevel=0:n_level-1;
end;%if (~isempty(euler_polar_a_) & ~isempty(euler_polar_b_));

%%%%%%%%;
% Start by considering the coarsest level. ;
%%%%%%%%;
nlevel = 0;
tmp_index_representative_fine_from_coarse_ = template_tree.index_representative_fine_from_coarse__{1+nlevel};
tmp_n_S = template_tree.n_S_(1+nlevel);
if (verbose>1) disp(sprintf(' %% nlevel %.2d/%.2d: %.3d templates %.3d images',nlevel,n_level,tmp_n_S,n_M)); end;
tmp_t = tic();
[ ...
 X_SM__(1+tmp_index_representative_fine_from_coarse_,:) ...
,delta_x_SM__(1+tmp_index_representative_fine_from_coarse_,:) ...
,delta_y_SM__(1+tmp_index_representative_fine_from_coarse_,:) ...
,gamma_z_SM__(1+tmp_index_representative_fine_from_coarse_,:) ...
,I_value_SM__(1+tmp_index_representative_fine_from_coarse_,:) ...
] = ...
ampmh_X_wSM___7( ...
 FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,tmp_n_S ...
,n_S_per_Sbatch ...
,CTF_UX_S_k_q_wnS__(:,1+tmp_index_representative_fine_from_coarse_) ...
,CTF_UX_S_l2_use_(1+tmp_index_representative_fine_from_coarse_) ...
,n_M ...
,n_M_per_Mbatch ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM_use__ ...
,parameter ...
);
t_level_SM__(1+tmp_index_representative_fine_from_coarse_,:) = 0;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% nlevel %d: %0.3fs',nlevel,tmp_t)); end;

for (nlevel=0:n_level-2);
tmp_index_representative_fine_from_coarse_ = template_tree.index_representative_fine_from_coarse__{1+nlevel};
tmp_n_S = template_tree.n_S_(1+nlevel);
%%%%%%%%;
% Now associate each image with the top n_neighborhood_retain coarse-elements. ;
% If euler_polar_a_ and euler_azimu_b_ are provided, we ensure that the final coarse-element ;
% is as close to the image viewing angle as possible. ;
%%%%%%%%;
index_coarse_for_image___{1+nlevel} = zeros(n_neighborhood_retain,n_M);
index_n_image__{1+nlevel} = zeros(tmp_n_S,1);
for nM=0:n_M-1;
tmp_index_coarse_ = -ones(n_neighborhood_retain,1);
[~,tmp_ij_] = sort(X_SM__(1+tmp_index_representative_fine_from_coarse_,1+nM),'descend');
n_l = min(n_neighborhood_retain,numel(tmp_ij_));
for nl=0:n_l-1;
tmp_index_coarse_(1+nl) = tmp_ij_(1+nl)-1;
if (nl==n_l-1 & flag_viewing_angle);
tmp_index_coarse_(1+nl) = index_coarse_from_image__{1+nlevel}(1+nM);
end;%if (nl==n_l-1 & flag_viewing_angle);
end;%for nl=0:n_l-1;
index_coarse_for_image___{1+nlevel}(:,1+nM) = tmp_index_coarse_;
index_n_image__{1+nlevel}(1+tmp_index_coarse_(1:n_l)) = index_n_image__{1+nlevel}(1+tmp_index_coarse_(1:n_l)) + 1;
end;%for nM=0:n_M-1;
%%%%%%%%;
index_image_from_coarse___{1+nlevel} = cell(tmp_n_S,1);
for nS=0:tmp_n_S-1;
index_image_from_coarse___{1+nlevel}{1+nS} = zeros(index_n_image__{1+nlevel}(1+nS),1);
end;%for nS=0:tmp_n_S-1;
tab_index_image_from_coarse_ = zeros(tmp_n_S,1);
for nM=0:n_M-1;
for nn=0:n_neighborhood_retain-1;
nS = index_coarse_for_image___{1+nlevel}(1+nn,1+nM);
if (nS>=0 & nS<tmp_n_S);
tab = tab_index_image_from_coarse_(1+nS);
index_image_from_coarse___{1+nlevel}{1+nS}(1+tab) = nM;
tab_index_image_from_coarse_(1+nS) = tab_index_image_from_coarse_(1+nS) + 1;
end;%if (nS>=0 & nS<tmp_n_S);
end;%for nn=0:n_neighborhood_retain-1;
end;%for nM=0:n_M-1;
assert(fnorm(tab_index_image_from_coarse_-index_n_image__{1+nlevel})==0);
%%%%%%%%;
% Now, for each of these neighborhoods, align the associated images with the templates. ;
%%%%%%%%;
tmp_t = tic();
tmp_n_S_neighborhood_total=0; tmp_n_M_neighborhood_total=0;
for nS=0:tmp_n_S-1;
tmp_index_neighbor_representative_fine_from_coarse_ = template_tree.index_neighbor_representative_fine_from_coarse___{1+nlevel}{1+nS};
tmp_n_S_neighborhood = numel(tmp_index_neighbor_representative_fine_from_coarse_);
tmp_index_M_neighborhood_ = index_image_from_coarse___{1+nlevel}{1+nS};
tmp_index_M_neighborhood_ = tmp_index_M_neighborhood_(1+efind(tmp_index_M_neighborhood_>=0 & tmp_index_M_neighborhood_< n_M));
tmp_n_M_neighborhood = numel(tmp_index_M_neighborhood_);
tmp_n_S_neighborhood_total = tmp_n_S_neighborhood_total + tmp_n_S_neighborhood;
tmp_n_M_neighborhood_total = tmp_n_M_neighborhood_total + tmp_n_M_neighborhood;
if (tmp_n_S_neighborhood> 0 & tmp_n_M_neighborhood> 0);
if (verbose>1); disp(sprintf(' %% nlevel %.2d/%.2d: nS %0.3d/%0.3d: %.3d templates %.3d images',nlevel,n_level,nS,tmp_n_S,tmp_n_S_neighborhood,tmp_n_M_neighborhood)); end;
[ ...
 X_SM__(1+tmp_index_neighbor_representative_fine_from_coarse_,1+tmp_index_M_neighborhood_) ...
,delta_x_SM__(1+tmp_index_neighbor_representative_fine_from_coarse_,1+tmp_index_M_neighborhood_) ...
,delta_y_SM__(1+tmp_index_neighbor_representative_fine_from_coarse_,1+tmp_index_M_neighborhood_) ...
,gamma_z_SM__(1+tmp_index_neighbor_representative_fine_from_coarse_,1+tmp_index_M_neighborhood_) ...
,I_value_SM__(1+tmp_index_neighbor_representative_fine_from_coarse_,1+tmp_index_M_neighborhood_) ...
] = ...
ampmh_X_wSM___7( ...
 FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,tmp_n_S_neighborhood ...
,n_S_per_Sbatch ...
,CTF_UX_S_k_q_wnS__(:,1+tmp_index_neighbor_representative_fine_from_coarse_) ...
,CTF_UX_S_l2_use_(1+tmp_index_neighbor_representative_fine_from_coarse_) ...
,tmp_n_M_neighborhood ...
,n_M_per_Mbatch ...
,svd_VUXM_lwnM____(:,:,:,1+tmp_index_M_neighborhood_) ...
,UX_M_l2_dM_use__(:,1+tmp_index_M_neighborhood_) ...
,parameter ...
);
t_level_SM__(1+tmp_index_neighbor_representative_fine_from_coarse_,1+tmp_index_M_neighborhood_) = 1+nlevel;
end;%if (tmp_n_S_neighborhood> 0 & tmp_n_M_neighborhood> 0);
end;%for nS=0:tmp_n_S-1;
if (verbose>1); disp(sprintf(' %% nlevel (%.2d,%.2d)/%.2d: %.3d templates %.3d images in total',nlevel,1+nlevel,n_level,tmp_n_S_neighborhood_total,tmp_n_M_neighborhood_total)); end;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% nlevel %d neighborhoods: %0.3fs',nlevel,tmp_t)); end;
%%%%%%%%;
end;%for (nlevel=0:n_level-2);

%%%%%%%%;
% Finally, interpolate to missing representatives. ;
% We use nearest-neighbor imputation instead of spectral-imputation ;
% because the missingness fraction is usually very high (e.g., 90% missing or more). ;
%%%%%%%%;
tmp_t = tic();
for nM=0:n_M-1;
index_found_ = efind(t_level_SM__(:,1+nM)>=+0);
index_empty_ = efind(t_level_SM__(:,1+nM)==-1);
tmp_ij_knn_ = knnsearch(template_tree.viewing_pole_k_c_Sd___{n_level}(1+index_found_,:),template_tree.viewing_pole_k_c_Sd___{n_level}(1+index_empty_,:),'K',1);
n_l = numel(tmp_ij_knn_);
tmp_index_knn_ = tmp_ij_knn_ - 1; 
for nl=0:n_l-1;
nS0 = index_empty_(1+nl);
nS1 = index_found_(1+tmp_index_knn_(1+nl));
shift_z_p = template_tree.shift_z__(1+nS0,1+nS1);
X_SM__(1+nS0,1+nM) = X_SM__(1+nS1,1+nM);
delta_x_SM__(1+nS0,1+nM) = delta_x_SM__(1+nS1,1+nM);
delta_y_SM__(1+nS0,1+nM) = delta_y_SM__(1+nS1,1+nM);
gamma_z_SM__(1+nS0,1+nM) = periodize(gamma_z_SM__(1+nS1,1+nM) - shift_z_p,0,2*pi);
I_value_SM__(1+nS0,1+nM) = I_value_SM__(1+nS1,1+nM);
end;%for nl=0:n_l-1;
end;%for nM=0:n_M-1;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% nearest-neighbor interpolation: %0.3fs',tmp_t)); end;

end;%if (~isempty(template_tree));

if (verbose>0); disp(sprintf(' %% [finished ampmh_X_local_SM__7]')); end;


