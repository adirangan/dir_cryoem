function ...
[ ...
 parameter ...
,a_restore_k_p_q_ ...
,dtau_a_restore_k_p_q_ ...
,dtau_dtau_a_restore_k_p_q_ ...
] = ...
kappa_basic_apply_0( ...
 parameter ...
,qref_n_shell ...
,qref_k_c_qc__ ...
,chebfun_kernel_norm_ ...
,deconvolve_q ...
,n_M ...
,n_w ...
,a_k_p_wM__ ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_M_ ...
,dtau_viewing_polar_a_M_ ...
,dtau_viewing_azimu_b_M_ ...
,dtau_viewing_gamma_z_M_ ...
);

str_thisfunction = 'kappa_basic_apply_0';

if nargin<1;
disp(sprintf(' %% testing %s',str_thisfunction));
disp(sprintf(' %% see kappa_qpro_recon_1',str_thisfunction));
disp('returning'); return;
end;%if nargin<1;

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;
if (nargin<1+na); qref_n_shell=[]; end; na=na+1;
if (nargin<1+na); qref_k_c_qc__=[]; end; na=na+1;
if (nargin<1+na); chebfun_kernel_norm_=[]; end; na=na+1;
if (nargin<1+na); deconvolve_q=[]; end; na=na+1;
if (nargin<1+na); n_M=[]; end; na=na+1;
if (nargin<1+na); n_w=[]; end; na=na+1;
if (nargin<1+na); a_k_p_wM__=[]; end; na=na+1;
if (nargin<1+na); viewing_polar_a_M_=[]; end; na=na+1;
if (nargin<1+na); viewing_azimu_b_M_=[]; end; na=na+1;
if (nargin<1+na); viewing_gamma_z_M_=[]; end; na=na+1;
if (nargin<1+na); dtau_viewing_polar_a_M_=[]; end; na=na+1;
if (nargin<1+na); dtau_viewing_azimu_b_M_=[]; end; na=na+1;
if (nargin<1+na); dtau_viewing_gamma_z_M_=[]; end; na=na+1;

if isempty(parameter); parameter=struct('type','parameter'); end;
if ~isfield(parameter,'flag_verbose'); parameter.flag_verbose=0; end;
flag_verbose=parameter.flag_verbose;
if ~isfield(parameter,'flag_check'); parameter.flag_check=0; end;
flag_check=parameter.flag_check;
if ~isfield(parameter,'flag_disp'); parameter.flag_disp=0; end;
flag_disp=parameter.flag_disp; nf=0;
if ~isfield(parameter,'tolerance_master'); parameter.tolerance_master=1e-2; end;
tolerance_master=parameter.tolerance_master;

if (flag_verbose> 0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;

%%%%;
Rz = @(azimu_b) ...
[ +cos(azimu_b) -sin(azimu_b) 0 ; ...
  +sin(azimu_b) +cos(azimu_b) 0 ; ...
   0             0            1 ; ...
] ;
dRz = @(azimu_b) ...
[ -sin(azimu_b) -cos(azimu_b) 0 ; ...
  +cos(azimu_b) -sin(azimu_b) 0 ; ...
   0             0            0 ; ...
] ;
Ry = @(polar_a) ...
[ +cos(polar_a) 0 +sin(polar_a) ; ...
   0            1  0            ; ...
  -sin(polar_a) 0 +cos(polar_a) ; ...
];
dRy = @(polar_a) ...
[ -sin(polar_a) 0 +cos(polar_a) ; ...
   0            0  0            ; ...
  -cos(polar_a) 0 -sin(polar_a) ; ...
];
%%%%;

flag_d0 = 1;
flag_d1 = nargout>=3;
flag_d2 = nargout>=4;
%%%%;
if  flag_d0 & ~flag_d1 & ~flag_d2;
[ ...
 k_p_polar_a_wM__ ...
,k_p_azimu_b_wM__ ...
,k_c_0_wM__ ...
,k_c_1_wM__ ...
,k_c_2_wM__ ...
,k_p_r01_wM__ ...
] = ...
cg_rhs_2( ...
 n_M ...
,n_w ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_M_ ...
);
end;%if  flag_d0 & ~flag_d1 & ~flag_d2;
%%%%;
if  flag_d0 &  flag_d1 & ~flag_d2;
[ ...
 k_p_polar_a_wM__ ...
,k_p_azimu_b_wM__ ...
,k_c_0_wM__ ...
,k_c_1_wM__ ...
,k_c_2_wM__ ...
,k_p_r01_wM__ ...
,dtau_k_p_polar_a_wM3___ ...
,dtau_k_p_azimu_b_wM3___ ...
,dtau_k_c_0_wM3___ ...
,dtau_k_c_1_wM3___ ...
,dtau_k_c_2_wM3___ ...
,dtau_k_p_r01_wM3___ ...
] = ...
cg_rhs_2( ...
 n_M ...
,n_w ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_M_ ...
);
end;%if  flag_d0 &  flag_d1 & ~flag_d2;
%%%%;
if  flag_d0 &  flag_d1 &  flag_d2;
[ ...
 k_p_polar_a_wM__ ...
,k_p_azimu_b_wM__ ...
,k_c_0_wM__ ...
,k_c_1_wM__ ...
,k_c_2_wM__ ...
,k_p_r01_wM__ ...
,dtau_k_p_polar_a_wM3___ ...
,dtau_k_p_azimu_b_wM3___ ...
,dtau_k_c_0_wM3___ ...
,dtau_k_c_1_wM3___ ...
,dtau_k_c_2_wM3___ ...
,dtau_k_p_r01_wM3___ ...
,dtau_dtau_k_p_polar_a_wM33____ ...
,dtau_dtau_k_p_azimu_b_wM33____ ...
,dtau_dtau_k_c_0_wM33____ ...
,dtau_dtau_k_c_1_wM33____ ...
,dtau_dtau_k_c_2_wM33____ ...
,dtau_dtau_k_p_r01_wM33____ ...
] = ...
cg_rhs_2( ...
 n_M ...
,n_w ...
,viewing_polar_a_M_ ...
,viewing_azimu_b_M_ ...
,viewing_gamma_z_M_ ...
);
end;%if  flag_d0 &  flag_d1 &  flag_d2;
%%%%;
data_k_c_wMc__ = [ k_c_0_wM__(:) , k_c_1_wM__(:) , k_c_2_wM__(:) ];
%%%%;
if flag_check;
tmp_error = 0;
for nM=0:n_M-1; for nw=0:n_w-1;
tmp_euler_a = +viewing_polar_a_M_(1+nM); tmp_euler_b = +viewing_azimu_b_M_(1+nM); tmp_euler_c = -viewing_gamma_z_M_(1+nM) + (2*pi*nw)/max(1,n_w) ;
tmp_R__ = Rz(tmp_euler_b)*Ry(tmp_euler_a)*Rz(tmp_euler_c);
tmp_R_point_k_c_ = tmp_R__*[1;0;0];
tmp_diff_ = data_k_c_wMc__(1+nw+nM*n_w,:) - reshape(tmp_R_point_k_c_,[1,3]);
tmp_error = tmp_error + fnorm(tmp_diff_);
end;end;%for nw=0:n_w-1; for nM=0:n_M-1;
if (flag_verbose>0); disp(sprintf(' %% data_k_c_wMc__ error: %0.16f',tmp_error)); end;
end;%if flag_check;
%%%%%%%%;
d2_full_wMq__ = sum(bsxfun(@minus,reshape(qref_k_c_qc__,[1,qref_n_shell,3]),reshape(+data_k_c_wMc__,[n_w*n_M,1,3])).^2,3);
d1_full_wMq__ = sqrt(d2_full_wMq__);
mollify_qref_from_data_wMq__ = chebfun_kernel_norm_(1-d2_full_wMq__/2);
index_qref_wMq__ = repmat([0:qref_n_shell-1],[n_w*n_M,1]);
index_data_wMq__ = repmat(transpose(0:n_w*n_M-1),[1,qref_n_shell]);
qref_from_data_qwM__ = sparse(1+index_qref_wMq__(:),1+index_data_wMq__(:),mollify_qref_from_data_wMq__,qref_n_shell,n_w*n_M);
%%%%%%%%;
a_k_p_wM_ = reshape(a_k_p_wM__,[n_w*n_M,1]);
a_k_p_q_ = qref_from_data_qwM__*a_k_p_wM_;
a_restore_k_p_q_ = a_k_p_q_.*deconvolve_q;
%%%%;
if flag_check;
%%%%;
b_k_p_q_ = zeros(qref_n_shell,1);
for nM=0:n_M-1; for nw=0:n_w-1;
tmp_euler_a = +viewing_polar_a_M_(1+nM); tmp_euler_b = +viewing_azimu_b_M_(1+nM); tmp_euler_c = -viewing_gamma_z_M_(1+nM) + (2*pi*nw)/max(1,n_w) ;
tmp_R__ = Rz(tmp_euler_b)*Ry(tmp_euler_a)*Rz(tmp_euler_c); tmp_R_point_k_c_ = tmp_R__*[1;0;0];
tmp_R_distsquared_ = (qref_k_c_qc__(:,1+0) - tmp_R_point_k_c_(1+0)).^2 + (qref_k_c_qc__(:,1+1) - tmp_R_point_k_c_(1+1)).^2 + (qref_k_c_qc__(:,1+2) - tmp_R_point_k_c_(1+2)).^2 ;
b_k_p_q_ = b_k_p_q_ + a_k_p_wM_(1+nw+nM*n_w)*chebfun_kernel_norm_(1-tmp_R_distsquared_/2);
end;end;%for nw=0:n_w-1; for nM=0:n_M-1;
fnorm_disp(flag_verbose,'b_k_p_q_',b_k_p_q_,'a_k_p_q_',a_k_p_q_);
%%%%;
end;%if flag_check;
%%%%%%%%;

n_3 = 3; n_q = qref_n_shell;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if flag_d1; %<-- directional derivative only: accumulate gradient over dtau_viewing_M3__. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
chebfun_kernel_ = chebfun_kernel_norm_;
qref_c11q____ = reshape(permute(qref_k_c_qc__,[2,1]),[n_3,1,1,n_q]);
k_c_cwM___ = permute(reshape(data_k_c_wMc__,[n_w,n_M,n_3]),[3,1,2]);
da_M_ = dtau_viewing_polar_a_M_;
db_M_ = dtau_viewing_azimu_b_M_;
dc_M_ = dtau_viewing_gamma_z_M_;
dtau_k_c_wM3c____ = cat(4,dtau_k_c_0_wM3___,dtau_k_c_1_wM3___,dtau_k_c_2_wM3___); %<-- 3c is abc,012 ;
dtau_k_c_cwM3____ = permute(dtau_k_c_wM3c____,[4,1,2,3]);
dtau_k_c_cwM___ = ...
  + bsxfun(@times,dtau_k_c_cwM3____(:,:,:,1+0),reshape(da_M_,[1,1,n_M,1])) ...
  + bsxfun(@times,dtau_k_c_cwM3____(:,:,:,1+1),reshape(db_M_,[1,1,n_M,1])) ...
  + bsxfun(@times,dtau_k_c_cwM3____(:,:,:,1+2),reshape(dc_M_,[1,1,n_M,1])) ...
  ;
distsquared_1wMq___ = reshape(sum(bsxfun(@minus,qref_c11q____,k_c_cwM___).^2,1),[n_w,n_M,n_q]);
d_distsquared_cwMq____ = -2*bsxfun(@minus,qref_c11q____,k_c_cwM___);
dtau_distsquared_1wMq___ = reshape(sum(bsxfun(@times,d_distsquared_cwMq____,dtau_k_c_cwM___),1),[n_w,n_M,n_q]);
dchebfun_kernel_ = diff(chebfun_kernel_);
ddchebfun_kernel_ = diff(dchebfun_kernel_);
dtau_kappa_1wMq___ = dchebfun_kernel_(1-distsquared_1wMq___/2).*(-0.5).*dtau_distsquared_1wMq___;
%%%%;
dtau_qref_from_data_qwM__ = sparse(1+index_qref_wMq__(:),1+index_data_wMq__(:),dtau_kappa_1wMq___(:),n_q,n_w*n_M);
dtau_a_k_p_q_ = dtau_qref_from_data_qwM__*a_k_p_wM_;
dtau_a_restore_k_p_q_ = dtau_a_k_p_q_.*deconvolve_q;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%if flag_d1; %<-- directional derivative only: accumulate gradient over dtau_viewing_M3__. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if flag_d2; %<-- directional derivative only: accumulate hessian over dtau_viewing_M3__. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
dtau_dtau_k_c_wM33c_____ = cat(5,dtau_dtau_k_c_0_wM33____,dtau_dtau_k_c_1_wM33____,dtau_dtau_k_c_2_wM33____); %<-- 33c is abc,abc,012 ;
dtau_dtau_k_c_cwM33_____ = permute(dtau_dtau_k_c_wM33c_____,[5,1,2,3,4]);
dtau_dtau_k_c_cwM___ = ...
  + 1.0*bsxfun(@times,dtau_dtau_k_c_cwM33_____(:,:,:,1+0,1+0),reshape(da_M_,[1,1,n_M,1,1]).*reshape(da_M_,[1,1,n_M,1,1])) ...
  + 1.0*bsxfun(@times,dtau_dtau_k_c_cwM33_____(:,:,:,1+0,1+1),reshape(da_M_,[1,1,n_M,1,1]).*reshape(db_M_,[1,1,n_M,1,1])) ...
  + 1.0*bsxfun(@times,dtau_dtau_k_c_cwM33_____(:,:,:,1+0,1+2),reshape(da_M_,[1,1,n_M,1,1]).*reshape(dc_M_,[1,1,n_M,1,1])) ...
  + 1.0*bsxfun(@times,dtau_dtau_k_c_cwM33_____(:,:,:,1+1,1+0),reshape(db_M_,[1,1,n_M,1,1]).*reshape(da_M_,[1,1,n_M,1,1])) ...
  + 1.0*bsxfun(@times,dtau_dtau_k_c_cwM33_____(:,:,:,1+1,1+1),reshape(db_M_,[1,1,n_M,1,1]).*reshape(db_M_,[1,1,n_M,1,1])) ...
  + 1.0*bsxfun(@times,dtau_dtau_k_c_cwM33_____(:,:,:,1+1,1+2),reshape(db_M_,[1,1,n_M,1,1]).*reshape(dc_M_,[1,1,n_M,1,1])) ...
  + 1.0*bsxfun(@times,dtau_dtau_k_c_cwM33_____(:,:,:,1+2,1+0),reshape(dc_M_,[1,1,n_M,1,1]).*reshape(da_M_,[1,1,n_M,1,1])) ...
  + 1.0*bsxfun(@times,dtau_dtau_k_c_cwM33_____(:,:,:,1+2,1+1),reshape(dc_M_,[1,1,n_M,1,1]).*reshape(db_M_,[1,1,n_M,1,1])) ...
  + 1.0*bsxfun(@times,dtau_dtau_k_c_cwM33_____(:,:,:,1+2,1+2),reshape(dc_M_,[1,1,n_M,1,1]).*reshape(dc_M_,[1,1,n_M,1,1])) ...
  ;
dtau_dtau_distsquared_1wMq___ = ...
 + reshape(sum(bsxfun(@times,2*ones(1,1,1,n_q),bsxfun(@times,dtau_k_c_cwM___,dtau_k_c_cwM___)),1),[n_w,n_M,n_q]) ...
 + reshape(sum(bsxfun(@times,d_distsquared_cwMq____,dtau_dtau_k_c_cwM___),1),[n_w,n_M,n_q]) ...
;
dtau_dtau_kappa_1wMq___ = ...
 + dchebfun_kernel_(1-distsquared_1wMq___/2).*(-0.5).*dtau_dtau_distsquared_1wMq___ ...
 + ddchebfun_kernel_(1-distsquared_1wMq___/2).*(-0.5).*dtau_distsquared_1wMq___.*(-0.5).*dtau_distsquared_1wMq___ ...
;
%%%%;
dtau_dtau_qref_from_data_qwM__ = sparse(1+index_qref_wMq__(:),1+index_data_wMq__(:),dtau_dtau_kappa_1wMq___(:),n_q,n_w*n_M);
dtau_dtau_a_k_p_q_ = dtau_dtau_qref_from_data_qwM__*a_k_p_wM_;
dtau_dtau_a_restore_k_p_q_ = dtau_dtau_a_k_p_q_.*deconvolve_q;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%if flag_d2; %<-- directional derivative only: accumulate hessian over dtau_viewing_M3__. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

if (flag_verbose> 0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;
