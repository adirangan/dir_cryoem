function ...
[ ...
 a_k_all_ ...
,Ylm_klma___ ...
] = ...
convert_spharm_to_k_p_3( ...
 verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_Y_ ...
,Ylm_klma___ ...
);
% uses spherical-harmonic-expansion a_k_Y_ to evaluate a_k_p_ on a collection of points on spherical shells determined by k_p_r_. ;
% We assume that the polar-representation and quadrature weights associated with these points have been previously calculated. ; 
% ;
% inputs: ;
% ;
% verbose = integer verbosity_level. ;
% n_k_all = integer total number of points. ;
% n_k_all_csum_ = integer array of starting indices associated with each k-value. ;
% k_p_r_all_ = real array of k-values for each point. ;
% k_p_azimu_b_all_ = real array of azimu_b-values for each point. ;
% k_p_polar_a_all_ = real array of polar_a-values for each point. ;
% weight_3d_k_all_ = real array of quadrature weights for volume integral (for each point) (unused). ;
% weight_shell_k_ = real array of quadrature weights for shell integral (for each point). ;
% n_k_p_r = integer maximum k. ;
% k_p_r_ = real array of length n_k_p_r; k_p_r_(nk_p_r) = k_p_r_value for shell nk_p_r. ;
% weight_3d_k_p_r_ = real array of length n_k_p_r; radial quadrature weights (already assumed to be a factor of weight_3d_k_all_) (unused). ;
% l_max_ = integer array of length n_k_p_r; l_max_(nk_p_r) = spherical harmonic order on shell nk_p_r; l_max_(nk_p_r) corresponds to n_lm_(nk_p_r) = (l_max_(nk_p_r)+1)^2 coefficients. ;
% a_k_Y_ = complex array of length \sum_{nk_p_r} (n_lm_(nk_p_r)+1)^2 ; coefficients are ordered in a row, with m varying quickly, l varying slowly and k varying most slowly. ;
% Ylm_klma___ = complex cell array of length n_k_p_r. ; Ylm_klma___{1+nk_p_r} holds the array Ylm_lma__. ;
% Ylm_lma___ = complex array of size (n_lm,n_sub), where n_lm record (l,m) pairs (m varying quickly), and n_sub records the ordered list of points on the shell at nk_p_r. ;
% ;
% outputs: ;
% ;
% a_k_all_ = complex array of a-values for each point. ;
% Ylm_klma___ = complex cell array of length n_k_p_r. ; Ylm_klma___{1+nk_p_r} holds the array Ylm_lma__. ;

str_thisfunction = 'convert_spharm_to_k_p_3';

na=0;
if (nargin<1+na); verbose=[]; end; na=na+1;
if (nargin<1+na); n_k_all=[]; end; na=na+1;
if (nargin<1+na); n_k_all_csum_=[]; end; na=na+1;
if (nargin<1+na); k_p_r_all_=[]; end; na=na+1;
if (nargin<1+na); k_p_azimu_b_all_=[]; end; na=na+1;
if (nargin<1+na); k_p_polar_a_all_=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_all_=[]; end; na=na+1;
if (nargin<1+na); weight_shell_k_=[]; end; na=na+1;
if (nargin<1+na); n_k_p_r=[]; end; na=na+1;
if (nargin<1+na); k_p_r_=[]; end; na=na+1;
if (nargin<1+na); weight_3d_k_p_r_=[]; end; na=na+1;
if (nargin<1+na); l_max_=[]; end; na=na+1;
if (nargin<1+na); a_k_Y_=[]; end; na=na+1;
if (nargin<1+na); Ylm_klma___=[]; end; na=na+1;

flag_Ylm_create = 0; 
if isempty(Ylm_klma___);
flag_Ylm_create=1;
Ylm_klma___ = cell(n_k_p_r,1);
end;%if isempty(Ylm_klma___);

n_lm_ = (l_max_+1).^2;
if (verbose); disp(sprintf(' %% [entering %s] n_k_all %d, n_lm_sum %d',str_thisfunction,n_k_all,sum(n_lm_))); end;
a_k_all_ = zeros(n_k_all,1);
ix0=0;
for nk_p_r=0:n_k_p_r-1;
k_p_r = k_p_r_(1+nk_p_r);
n_k_all_csum = n_k_all_csum_(1+nk_p_r);
if (verbose>1); disp(sprintf(' %% nk_p_r %d/%d k_p_r %0.2f, n_k_all_csum %d --> %0.2f%%',nk_p_r,n_k_p_r,k_p_r,n_k_all_csum,n_k_all_csum/n_k_all)); end;
if (nk_p_r<n_k_p_r-1); n_sub = n_k_all_csum_(1+nk_p_r+1) - n_k_all_csum_(1+nk_p_r); else n_sub = n_k_all - n_k_all_csum ; end;
index_sub_ = n_k_all_csum + (0:n_sub-1);
k_p_r_sub_ = k_p_r_all_(1+index_sub_); 
assert(sum(k_p_r_sub_==k_p_r)==n_sub);
k_p_azimu_b_sub_ = k_p_azimu_b_all_(1+index_sub_);
k_p_polar_a_sub_ = k_p_polar_a_all_(1+index_sub_);
weight_3d_k_sub_ = weight_shell_k_(1+index_sub_)/k_p_r^2;
l_max = l_max_(1+nk_p_r);
n_l_max = l_max+1; flag_flip=0;
n_lm = n_lm_(1+nk_p_r);
if flag_Ylm_create;
tmp_t = tic();
[Ylm_sub__] = get_Ylm__(n_l_max,0:n_l_max,n_sub,k_p_azimu_b_sub_,k_p_polar_a_sub_,flag_flip);
Ylm_lma__ = zeros(n_lm,n_sub);
ix1=0;
for l_val=0:l_max;
n_m = 2*l_val+1;
for nm=0:n_m-1;
m_val = nm - l_val;
Ylm_lma__(1+ix1,:) = Ylm_sub__{1+l_val}(1+nm,:);
ix1 = ix1+1;
end;%for nm=0:n_m-1;
end;%for l_val=0:l_max;
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% nk_p_r %d/%d Ylm_lma__: %0.6fs',nk_p_r,n_k_p_r,tmp_t)); end;
Ylm_klma___{1+nk_p_r} = Ylm_lma__;
clear Ylm_sub__;
end;%if flag_Ylm_create;
if ~flag_Ylm_create;
Ylm_lma__ = Ylm_klma___{1+nk_p_r};
end;%if ~flag_Ylm_create;
tmp_t = tic();
a_k_sub_ = zeros(1,n_sub);
a_k_sub_ = reshape(a_k_Y_(1+ix0 + [0:n_lm-1]),[1,n_lm])*Ylm_lma__;
ix0 = ix0 + n_lm;
a_k_all_(1+index_sub_) = a_k_sub_;
clear  Ylm_lma__;
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% nk_p_r %d/%d a_k_sub_: %0.6fs',nk_p_r,n_k_p_r,tmp_t)); end;
end;%for nk_p_r=0:n_k_p_r-1;
if (verbose); disp(sprintf(' %% [finished %s] n_k_all %d, n_lm_sum %d',str_thisfunction,n_k_all,sum(n_lm_))); end;



%{

%%%%%%%%;
% First run test_pm_trpv1c_9c.m ;
%%%%%%%%;
Ylm_klma___ = [];
%%%%%%%%;
tmp_t = tic();
[ ...
 a_k_p_reco2_  ...
,Ylm_klma___ ...
] =  ...
convert_spharm_to_k_p_3( ...
 1 ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_Y_quad_ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% convert_spharm_to_k_p_3 (pre): %0.6fs',tmp_t));
%%%%%%%%;
tmp_t = tic();
[ ...
 a_k_p_reco3_  ...
] =  ...
convert_spharm_to_k_p_3( ...
 0 ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_Y_quad_ ...
, Ylm_klma___ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% convert_spharm_to_k_p_3 (pos): %0.6fs',tmp_t));
disp(sprintf(' %% fnorm(a_k_p_reco3_ - a_k_p_reco_): %0.16f',fnorm(a_k_p_reco3_ - a_k_p_reco_)));
%%%%%%%%;
[x_u_0___,x_u_1___,x_u_2___] = ndgrid(x_u_0_,x_u_1_,x_u_2_); n_xxx_u = n_x_u_pack^3; xxx_u_weight_ = (2*x_p_r_max/n_x_u_pack)^3;
tmp_t = tic(); 
[ ...
 a_x_u_reco3_ ...
] = ...
convert_k_p_to_x_c_1( ...
 verbose ...
,n_k_all ...
,weight_3d_k_all_ ...
,k_c_0_all_ ...
,k_c_1_all_ ...
,k_c_2_all_ ...
,k_p_r_max ...
,n_xxx_u ...
,xxx_u_weight_ ...
,x_u_0___ ...
,x_u_1___ ...
,x_u_2___ ...
,x_p_r_max ...
,a_k_p_reco3_ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% convert_k_p_to_x_c_1: %0.6fs',tmp_t));
%%%%%%%%;
figure(1);clf;figmed;
subplot(1,2,1); isosurface_f_x_u_0(a_x_u_pack_ ,[97.5,98.5,99.5]); title('a packed');
subplot(1,2,2); isosurface_f_x_u_0(a_x_u_reco3_,[97.5,98.5,99.5]); title('a reco3');


 %}
