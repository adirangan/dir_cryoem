function [X_best,polar_a_best,azimu_b_best,gamma_z_best,delta_best_,a_k_Y_best_,b_k_Y_best_] = test_spharm_16(n_k_p_r,k_p_r_,k_p_r_max,weight_k_p_r_,N_wavelength,l_max_,a_k_Y_,b_k_Y_);
% tests registration between molecule_A and molecule_B via 'exhaustive' scan of angles and displacements.;
% ;
% When no inputs are passed we import two spherical harmonic representations (generated by kspacegrid_to_model): ;
% molecule_A: modsph_A_ori = spiral ;
% molecule_B: modsph_B_ori = spiral with twisted tail ;
% ;
% Inputs: ;
% n_k_p_r = integer number of shells in k_p coordinates. ;
% k_p_r_ = double array of size n_k_p_r ; k_p_r_(nk_p_r) is the radius (in k_p) for shell nk_p_r. ;
% k_p_r_max = double ; maximum value of k_p_r in domain of integration. ;
% weight_k_p_r_ = double array of size n_k_p_r ; quadrature weight associated with each shell. ;
% N_wavelength = double ; number of wavelengths to consider for displacement-grid. ;
% l_max_ = integer array of length n_k_p_r ; l_max_(nk_p_r) is the maximum order l used on shell nk_p_r. ;
% a_k_Y_ = complex array of length \sum_{nk} (n_lm_(nk)+1)^2 ; coefficients of molecule A ordered in a row, with m varying quickly and l varying slowly ;
% b_k_Y_ = complex array of length \sum_{nk} (n_lm_(nk)+1)^2 ; coefficients of molecule B ordered in a row, with m varying quickly and l varying slowly ;
% ;
% Outputs: ;
% X_best = complex ; best correlation found. ;
% polar_a_best = double ; polar angle. ;
% azimu_b_best = double ; azimuthal angle. ;
% gamma_z_best = double ; in-plane angle. ;
% delta_best_ = double array of length 3 ; displacement vector. ;
% ;
% Note that transf_spharm_to_spharm_2 reduces the mass slightly (due to finite l_max_). ;
% Consequently, spharm_normalize_0 does not commute with transf_spharm_to_spharm_2. ;
% As a result, even an on-grid translation is not recapitulated exactly. ;
% test with: ;
%{
  test_spharm_15();
  %}

delta_bake_ = [0;0;0];
euler_bake_ = [0;0;0];

if nargin<8;
%%%%%%%%;
verbose=1;
xnodesr_ = MDA_read_r8('./dir_mdaT/xnodesr_.mda');
isph_start_ = MDA_read_i4('./dir_mdaT/isph_start_.mda');
nterms_sph_ = MDA_read_i4('./dir_mdaT/nterms_sph_.mda');
fname_a = './dir_mdaT/modsph_A_ori_.mda';
fname_b = './dir_mdaT/modsph_A_ori_.mda';
if (verbose) disp(sprintf(' %% loading a_k_Y_ <-- %s',fname_a)); end;
modsph_A_ori_ = MDA_read_c16(fname_a);
if (verbose) disp(sprintf(' %% loading b_k_Y_ <-- %s',fname_b)); end;
modsph_B_ori_ = MDA_read_c16(fname_b);
n_k_p_r = length(isph_start_);
k_p_r_ = xnodesr_;
k_p_r_max = max(k_p_r_);
dk_p_r_ = diff([0;k_p_r_]);
weight_k_p_r_ = 4*pi * k_p_r_.^2 .* dk_p_r_;
N_wavelength = 1.0;
l_max_ = nterms_sph_;
n_lm_ = (l_max_+1).^2;
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
l_max_max = max(l_max_); dWtdkd__l_max_max = 2*l_max_max;
m_max_ = -l_max_max : +l_max_max;
n_m_max = length(m_max_);
f_k_Y_orig_ = modsph_A_ori_;
g_k_Y_orig_ = modsph_B_ori_;
%%%%%%%%;
[weight_Y_,u_k_Y_] = spharm_weight_Y_0(n_k_p_r,k_p_r_,weight_k_p_r_,l_max_);
%%%%%%%%;
f_k_Y_norm_ = spharm_normalize_0(n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,f_k_Y_orig_);
g_k_Y_norm_ = spharm_normalize_0(n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,g_k_Y_orig_);
%%%%%%%%;
if (verbose); disp(sprintf(' %% translating to form g_k_Y_bake_ = T_(delta_bake_) * g_k_Y_norm')); end;
z_target = N_wavelength; delta_p_r_max = z_target/(2*pi*k_p_r_max); delta_eq_d = 1.0/2.0*delta_p_r_max; TorL = 'L';
[n_delta_all,n_delta_all_csum_,delta_p_r_all_,delta_p_azimu_b_all_,delta_p_polar_a_all_,weight_delta_all_,weight_shell_delta_,n_delta_p_r,delta_p_r_,weight_delta_p_r_,delta_c_0_all_,delta_c_1_all_,delta_c_2_all_] = sample_sphere_6(verbose,delta_p_r_max,delta_eq_d,'L') ;
n_delta_node = n_delta_all; n_delta_node_csum_ = [n_delta_all_csum_;n_delta_node]; n_delta_node_p_r = n_delta_p_r;
delta_node_p_r_ = delta_p_r_; weight_delta_node_all_ = weight_delta_all_; 
delta_node_ = transpose([delta_c_0_all_,delta_c_1_all_,delta_c_2_all_]);
delta_bake_ = -delta_node_(:,round(end/2)); assert(fnorm(delta_bake_)<=delta_p_r_max); %<-- on-grid translation (on-node). ;
if (fnorm(delta_bake_)==0); disp(sprintf(' %% zero translation')); end;
if (fnorm(delta_bake_)>0);
if (verbose); disp(sprintf(' %% +delta_bake_: %+0.6f , %+0.6f , %+0.6f',+delta_bake_)); end;
g_k_Y_bake_ = transf_spharm_to_spharm_2(verbose,n_k_p_r,k_p_r_,l_max_,g_k_Y_norm_,+delta_bake_);
if (verbose); disp(sprintf(' %% -delta_bake_: %+0.6f , %+0.6f , %+0.6f',-delta_bake_)); end;
j_k_Y_bake_ = transf_spharm_to_spharm_2(verbose,n_k_p_r,k_p_r_,l_max_,g_k_Y_bake_,-delta_bake_);
disp(sprintf(' %% transf loss: g_k_Y_norm_ vs c_k_Y_bake_: %0.16f',fnorm(g_k_Y_norm_-j_k_Y_bake_)/fnorm(g_k_Y_norm_)));
tmp_bc = ctranspose(g_k_Y_norm_)*(weight_Y_*j_k_Y_bake_);
tmp_bb = ctranspose(g_k_Y_norm_)*(weight_Y_*g_k_Y_norm_);
tmp_cc = ctranspose(j_k_Y_bake_)*(weight_Y_*j_k_Y_bake_);
disp(sprintf(' %% transf loss: <g_k_Y_norm_,j_k_Y_bake_>: %0.16f',real(tmp_bc/sqrt(tmp_bb*tmp_cc))));
b_k_Y_ = g_k_Y_bake_;
end;%if (fnorm(delta_bake_)>0);
%%%%%%%%;
if (verbose); disp(sprintf(' %% rotating to form f_k_Y_bake_ = R_(euler_bake_pos_) * f_k_Y_norm_:')); end;
azimu_b_bake = +13*pi/n_m_max; polar_a_bake = -pi + 26*2*pi/n_m_max; gamma_z_bake = +37*pi/n_m_max; %<-- on-grid rotation. ;
euler_bake_pos_ = [+azimu_b_bake,+polar_a_bake,+gamma_z_bake];
euler_bake_neg_ = -flip(euler_bake_pos_);
if (verbose); disp(sprintf(' %% euler_bake_pos_: %+0.6f , %+0.6f , %+0.6f',euler_bake_pos_)); end;
f_k_Y_bake_ = rotate_spharm_to_spharm_2(0,[],n_k_p_r,k_p_r_,l_max_,f_k_Y_norm_,euler_bake_pos_);
if (verbose); disp(sprintf(' %% euler_bake_neg_: %+0.6f , %+0.6f , %+0.6f',euler_bake_neg_)); end;
h_k_Y_bake_ = rotate_spharm_to_spharm_2(0,[],n_k_p_r,k_p_r_,l_max_,f_k_Y_bake_,euler_bake_neg_);
a_k_Y_ = f_k_Y_bake_;
%%%%%%%%;
end;%if nargin<8;

R_bake_ = euler_to_R(euler_bake_pos_);

verbose=1; 
if (verbose>1); disp(sprintf(' %% indices for counting arrays')); end;
n_lm_ = (l_max_+1).^2;
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
k_p_r_max = k_p_r_(end);
l_max_max = max(l_max_);
m_max_ = -l_max_max : +l_max_max;
n_m_max = length(m_max_);

z_target = N_wavelength; delta_p_r_max = z_target/(2*pi*k_p_r_max);
if (delta_p_r_max>0);
%%%%%%%%;
if (verbose>1); disp(sprintf(' %% determining displacement-grid. ')); end;
% First define coarse nodes for lsq: ;
delta_eq_d = 1.0/2.0*delta_p_r_max; TorL = 'L';
[n_delta_all,n_delta_all_csum_,delta_p_r_all_,delta_p_azimu_b_all_,delta_p_polar_a_all_,weight_delta_all_,weight_shell_delta_,n_delta_p_r,delta_p_r_,weight_delta_p_r_,delta_c_0_all_,delta_c_1_all_,delta_c_2_all_] = sample_sphere_6(verbose,delta_p_r_max,delta_eq_d,'L') ;
n_delta_node = n_delta_all;
n_delta_node_csum_ = [n_delta_all_csum_;n_delta_node];
n_delta_node_p_r = n_delta_p_r;
delta_node_p_r_ = delta_p_r_;
weight_delta_node_all_ = weight_delta_all_;
delta_node_ = transpose([delta_c_0_all_,delta_c_1_all_,delta_c_2_all_]);
%delta_node_ = delta_node_ + 0.01*randn(3,n_delta_node)/sqrt(3)*delta_p_r_max ;
%delta_node_ = randn(3,n_delta_node)/sqrt(3); %delta_node_ = randn(3,n_delta_node)/sqrt(3)*delta_p_r_max;
if (verbose); disp(sprintf(' %% N_wavelength (i.e., kd) %0.2f*2*pi n_delta_node: %d',z_target/(2*pi),n_delta_node)); end;
flag_refine=0;
delta_eq_d = 1.0/32*delta_p_r_max; TorL = 'L';
[n_delta_all,n_delta_all_csum_,delta_p_r_all_,delta_p_azimu_b_all_,delta_p_polar_a_all_,weight_delta_all_,weight_shell_delta_,n_delta_p_r,delta_p_r_,weight_delta_p_r_,delta_c_0_all_,delta_c_1_all_,delta_c_2_all_] = sample_sphere_6(verbose,delta_p_r_max,delta_eq_d,'L') ;
svd_tolerance = 1e-6;
[~,E3_quad] = transf_3d_gradient(0,[delta_node_(:);0],svd_tolerance,k_p_r_max,delta_p_r_max,n_delta_all,delta_c_0_all_,delta_c_1_all_,delta_c_2_all_,weight_delta_all_);
if flag_refine;
if (verbose); disp(sprintf(' %% Warning, later on we assume no refinement')); end;
% Then define finer samples for quadrature: ;
n_iteration = 8; dt = 0.01;
for niteration=1:n_iteration;
[tmp_gradient_,E3_quad] = transf_3d_gradient(0,[delta_node_(:);0],svd_tolerance,k_p_r_max,delta_p_r_max,n_delta_all,delta_c_0_all_,delta_c_1_all_,delta_c_2_all_,weight_delta_all_); tmp_gradient_ = reshape(tmp_gradient_(1:3*n_delta_node),3,n_delta_node);
if (verbose>1); disp(sprintf(' %% niteration %d/%d E3_quad: %0.16f',niteration,n_iteration,E3_quad)); end;
delta_node_ = delta_node_ + dt*tmp_gradient_;
end;%for niteration=1:n_iteration;
end;%if flag_refine;
if (verbose>1); disp(sprintf(' %% using n_delta_node %d with E3_quad: %0.16f',n_delta_node,E3_quad)); end;
% Then define moderate sampling for displacement-grid: ;
delta_eq_d = 1.0/4*delta_p_r_max; TorL = 'L';
[n_delta_all,n_delta_all_csum_,delta_p_r_all_,delta_p_azimu_b_all_,delta_p_polar_a_all_,weight_delta_all_,weight_shell_delta_,n_delta_p_r,delta_p_r_,weight_delta_p_r_,delta_c_0_all_,delta_c_1_all_,delta_c_2_all_] = sample_sphere_6(verbose,delta_p_r_max,delta_eq_d,'L') ;
delta_all_ = transpose([delta_c_0_all_,delta_c_1_all_,delta_c_2_all_]);
if (verbose>1); disp(sprintf(' %% displacement-grid has n_delta_all %d',n_delta_all)); end;
% Now construct delta_lsq_interpolate_. ;
svd_tolerance = 1e-6;
[~,~,delta_lsq_interpolate_] = transf_3d_gradient(0,[delta_node_(:);0],svd_tolerance,k_p_r_max,delta_p_r_max,n_delta_all,delta_c_0_all_,delta_c_1_all_,delta_c_2_all_,weight_delta_all_); 
%%%%%%%%;
end;%if (delta_p_r_max>0);

if (verbose>1); disp(sprintf(' %% setting up initial array of rotations azimu_b_, polar_a_ and gamma_z_')); end;
n_polar_a = n_m_max; polar_a_ = linspace(-pi,pi,n_polar_a+1); polar_a_ = polar_a_(1:end-1);
n_azimu_b = n_m_max; azimu_b_ = linspace(0,2*pi,n_azimu_b+1); azimu_b_ = azimu_b_(1:end-1);
n_gamma_z = n_m_max; gamma_z_ = linspace(0,2*pi,n_gamma_z+1); gamma_z_ = gamma_z_(1:end-1);

if (verbose>1); disp(sprintf(' %% setting up weight_Y_ for inner-product and e_k_Y_ for integration')); end;
weight_Y_row_ = zeros(n_lm_sum,1);
weight_Y_col_ = zeros(n_lm_sum,1);
weight_Y_val_ = zeros(n_lm_sum,1);
e_k_Y_ = zeros(n_lm_sum,1);
na=0;
for nk_p_r=1:n_k_p_r;
tmp_ij_ = na + (1:n_lm_(nk_p_r));
weight_Y_row_(tmp_ij_) = tmp_ij_;
weight_Y_col_(tmp_ij_) = tmp_ij_;
weight_Y_val_(tmp_ij_) = weight_k_p_r_(nk_p_r);
e_k_Y_(1+na) = 1;
na=na+n_lm_(nk_p_r);
end;%for nk_p_r=1:n_k_p_r;
weight_Y_ = sparse(weight_Y_row_,weight_Y_col_,weight_Y_val_,n_lm_sum,n_lm_sum);
e_avg = ctranspose(e_k_Y_)*(weight_Y_*e_k_Y_);
u_k_Y_ = e_k_Y_./max(sqrt(e_avg),1e-12);

if (verbose>1); disp(sprintf(' %% centering and normalizing both a_k_Y_ and b_k_Y_')); end;
a_avg = ctranspose(u_k_Y_)*(weight_Y_*a_k_Y_);
a_k_Y_norm_ = (a_k_Y_ - a_avg*u_k_Y_);
a_std = sqrt(ctranspose(a_k_Y_norm_)*(weight_Y_*a_k_Y_norm_));
a_k_Y_norm_ = a_k_Y_norm_./max(a_std,1e-12);
b_avg = ctranspose(u_k_Y_)*(weight_Y_*b_k_Y_);
b_k_Y_norm_ = (b_k_Y_ - b_avg*u_k_Y_);
b_std = sqrt(ctranspose(b_k_Y_norm_)*(weight_Y_*b_k_Y_norm_));
b_k_Y_norm_ = b_k_Y_norm_./max(b_std,1e-12);
a_avg = ctranspose(u_k_Y_)*(weight_Y_*a_k_Y_norm_);
a_std = sqrt(ctranspose(a_k_Y_norm_)*(weight_Y_*a_k_Y_norm_));
b_avg = ctranspose(u_k_Y_)*(weight_Y_*b_k_Y_norm_);
b_std = sqrt(ctranspose(b_k_Y_norm_)*(weight_Y_*b_k_Y_norm_));
if (verbose>1); disp(sprintf(' %% a_avg %+0.6f , a_std %+0.6f , b_avg %+0.6f , b_std %+0.6f',real(a_avg),a_std,real(b_avg),b_std)); end;

X_best = -1;
polar_a_best = 0.0;
azimu_b_best = 0.0;
gamma_z_best = 0.0;
delta_best_ = [0;0;0];
dWtdkd__l_max_max = 2*l_max_max;
sum_t1 = 0; sum_t2 = 0; sum_t3 = 0; sum_t4 = 0; sum_t5 = 0;
tmp_t = tic; dWtdkd__ = dwignertdkd__(dWtdkd__l_max_max);
tmp_t = toc(tmp_t); sum_t1 = sum_t1 + tmp_t;
polar_a = 0.0;
if (verbose>1); disp(sprintf(' %% first estimate X_base__ for polar_a = 0 and delta_ = 0.')); end;
[X_base__] = register_spharm_to_spharm_single_beta_2(verbose,n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,a_k_Y_norm_,b_k_Y_norm_,polar_a,0,[],0,[],[],[],[],[]);
if (verbose>2); figure(1); clf; imagesc(real(X_base__)); colormap(colormap_beach()); axis image; title('X_base__','Interpreter','none'); end;
[tmp_X_best,tmp_ij] = max(real(X_base__),[],'all','linear');
[tmp_azimu_b_ij,tmp_gamma_z_ij] = ind2sub([n_m_max,n_m_max],tmp_ij);
if (tmp_X_best>X_best);
if (verbose>1); disp(sprintf(' %% found tmp_X_best %+0.6f > X_best %+0.6f: polar_a %+0.6f azimu_b %+0.6f gamma_z %+0.6f',tmp_X_best,X_best,polar_a,azimu_b_(tmp_azimu_b_ij),gamma_z_(tmp_gamma_z_ij))); end;
X_best = tmp_X_best;
polar_a_best = polar_a;
azimu_b_best = azimu_b_(tmp_azimu_b_ij);
gamma_z_best = gamma_z_(tmp_gamma_z_ij);
delta_best_ = [0;0;0];
end;%if (tmp_X_best>X_best);
%%%%%%%%;
if (verbose>1); disp(sprintf(' %% Now step through the polar_a_, translating b_k_Y_ by each of the delta_node_ if necessary')); end;
for npolar_a=1:n_polar_a;
polar_a = polar_a_(npolar_a);
if (mod(npolar_a,8)==0); if (verbose); disp(sprintf(' %% npolar_a %.3d/%.3d polar_a %+0.6f',npolar_a,n_polar_a,polar_a)); end; end;
if (verbose>1); disp(sprintf(' %% first estimate X_base__ for delta_ = 0.')); end;
[X_base__] = register_spharm_to_spharm_single_beta_2(verbose,n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,a_k_Y_norm_,b_k_Y_norm_,polar_a,0,[],0,[],[],[],[],[]);
[tmp_X_best,tmp_ij] = max(real(X_base__),[],'all','linear');
[tmp_azimu_b_ij,tmp_gamma_z_ij] = ind2sub([n_m_max,n_m_max],tmp_ij);
if (tmp_X_best>X_best);
X_best = tmp_X_best;
polar_a_best = polar_a;
azimu_b_best = azimu_b_(tmp_azimu_b_ij);
gamma_z_best = gamma_z_(tmp_gamma_z_ij);
delta_best_ = [0;0;0];
end;%if (tmp_X_best>X_best);
%%%%%%%%;
if (delta_p_r_max>0);
if (verbose>1); disp(sprintf(' %% now estimate X_lsqi___ across translations.')); end;
b_k_Y_node__ = zeros(n_lm_sum,n_delta_node);
%%%%%%%%;
for ndelta_node_p_r=1:n_delta_node_p_r;
delta_node_p_r = delta_node_p_r_(ndelta_node_p_r);
if (verbose>1); disp(sprintf(' %% ndelta_node_p_r %d/%d delta_node_p_r %0.6f',ndelta_node_p_r,n_delta_node_p_r,delta_node_p_r)); end;
tmp_t = tic; Wt___ = expm_dwignertdkd__(dWtdkd__,n_k_p_r,k_p_r_,l_max_,delta_node_p_r);
tmp_t = toc(tmp_t); sum_t2 = sum_t2 + tmp_t;
tmp_t = tic; Wt_ = wignert_ODE_0(dWtdkd__,Wt___,n_k_p_r,k_p_r_,l_max_,delta_node_p_r);
tmp_t = toc(tmp_t); sum_t3 = sum_t3 + tmp_t;
for ndelta_node=1+n_delta_node_csum_(ndelta_node_p_r):n_delta_node_csum_(1+ndelta_node_p_r);
if (mod(ndelta_node,1024)==0); if (verbose); disp(sprintf(' %% ndelta_node %d/%d (%0.6f)',ndelta_node,n_delta_node,fnorm(delta_node_(:,ndelta_node)))); end; end;
delta_z_c_ = transpose(delta_node_(:,ndelta_node));
delta_z_p_r = sqrt(delta_z_c_(1+0).^2 + delta_z_c_(1+1).^2 + delta_z_c_(1+2).^2);
delta_z_p_01 = sqrt(delta_z_c_(1+0).^2 + delta_z_c_(1+1).^2);
delta_z_p_azimu_b = atan2(delta_z_c_(1+1),delta_z_c_(1+0));
delta_z_p_polar_a = atan2(delta_z_p_01,delta_z_c_(1+2));
delta_z_p_euler_pos_ = [0,+delta_z_p_polar_a,+delta_z_p_azimu_b];
delta_z_p_euler_neg_ = [-delta_z_p_azimu_b,-delta_z_p_polar_a,0];
delta_z_c_ = [cos(delta_z_p_azimu_b)*sin(delta_z_p_polar_a);sin(delta_z_p_azimu_b)*sin(delta_z_p_polar_a);cos(delta_z_p_polar_a)]*delta_z_p_r;
%%%%%%%%;
tmp_t = tic;
W_beta_neg__ = wignerd_b(l_max_max,delta_z_p_euler_neg_(1+1));
W_beta_pos__ = wignerd_b(l_max_max,delta_z_p_euler_pos_(1+1));
tmp_t = toc(tmp_t);  sum_t4 = sum_t4 + tmp_t; %disp(sprintf(' %% sphere: create Wd_: time %0.6fs',tmp_t));
tmp_t = tic; 
tmp_Y_form_ = b_k_Y_norm_;
tmp_Y_form_ = rotate_spharm_to_spharm_2(0,W_beta_neg__,n_k_p_r,k_p_r_,l_max_,tmp_Y_form_,delta_z_p_euler_neg_);
tmp_Y_form_ = Wt_*tmp_Y_form_; 
tmp_Y_form_ = rotate_spharm_to_spharm_2(0,W_beta_pos__,n_k_p_r,k_p_r_,l_max_,tmp_Y_form_,delta_z_p_euler_pos_);
b_k_Y_form_ = tmp_Y_form_;
tmp_t = toc(tmp_t); sum_t5 = sum_t5 + tmp_t; 
b_k_Y_node__(:,ndelta_node) = b_k_Y_form_;
end;%for ndelta_node=1+n_delta_node_csum_(ndelta_node_p_r):n_delta_node_csum_(1+ndelta_node_p_r);
end;%for ndelta_node_p_r=1:n_delta_node_p_r;
%%%%%%%%;
if (verbose>1); disp(sprintf(' %% timing: sum_t1 %0.2fs sum_t2 %0.2fs sum_t3 %0.2fs sum_t4 %0.2fs sum_t5 %0.2fs',sum_t1,sum_t2,sum_t3,sum_t4,sum_t5)); end;
%%%%%%%%;
X_node___ = zeros(n_m_max,n_m_max,n_delta_node);
for ndelta_node=1:n_delta_node;
if (mod(ndelta_node,1024)==0); if (verbose); disp(sprintf(' %% ndelta_node %d/%d',ndelta_node,n_delta_node)); end; end;
[X_node__] = register_spharm_to_spharm_single_beta_2(verbose,n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,a_k_Y_norm_,b_k_Y_node__(:,ndelta_node),polar_a,0,[],0,[],[],[],[],[]);
X_node___(:,:,ndelta_node) = X_node__;
end;%for ndelta_node=1:n_delta_node;
[tmp_X_best,tmp_ij] = max(real(X_node___),[],'all','linear');
[tmp_azimu_b_ij,tmp_gamma_z_ij,tmp_ndelta_node_ij] = ind2sub([n_m_max,n_m_max,n_delta_node],tmp_ij);
if (tmp_X_best>X_best);
X_best = tmp_X_best;
polar_a_best = polar_a;
azimu_b_best = azimu_b_(tmp_azimu_b_ij);
gamma_z_best = gamma_z_(tmp_gamma_z_ij);
delta_best_ = delta_node_(:,tmp_ndelta_node_ij);
end;%if (tmp_X_best>X_best);
%%%%%%%%;
X_lsqi___ = reshape(reshape(X_node___,[n_m_max*n_m_max,n_delta_node])*delta_lsq_interpolate_,[n_m_max,n_m_max,n_delta_all]);
[tmp_X_best,tmp_ij] = max(real(X_lsqi___),[],'all','linear');
[tmp_azimu_b_ij,tmp_gamma_z_ij,tmp_ndelta_all_ij] = ind2sub([n_m_max,n_m_max,n_delta_all],tmp_ij);
if (tmp_X_best>X_best);
X_best = tmp_X_best;
polar_a_best = polar_a;
azimu_b_best = azimu_b_(tmp_azimu_b_ij);
gamma_z_best = gamma_z_(tmp_gamma_z_ij);
delta_best_ = delta_all_(:,tmp_ndelta_all_ij);
end;%if (tmp_X_best>X_best);
end;%if (delta_p_r_max>0);
%%%%%%%%;
end;%for npolar_a=1:n_polar_a;
%%%%%%%%;
if (verbose>1); disp(sprintf(' %% timing: sum_t1 %0.2fs sum_t2 %0.2fs sum_t3 %0.2fs sum_t4 %0.2fs sum_t5 %0.2fs',sum_t1,sum_t2,sum_t3,sum_t4,sum_t5)); end;

X_orig = ctranspose(a_k_Y_norm_)*(weight_Y_*b_k_Y_norm_);
disp(sprintf(' %% X_orig = <a_k_Y_norm,b_k_Y_norm> = %+0.6f',real(X_orig)));
if (verbose); disp(sprintf(' %% found X_best %0.6f euler: [%+0.6f,%+0.6f,%+0.6f] delta_ [%+0.6f,%+0.6f,%+0.6f]',real(X_best),-gamma_z_best,-polar_a_best,-azimu_b_best,delta_best_)); end;
%%%%%%%%;
b_k_Y_best_ = b_k_Y_norm_;
if (fnorm(delta_best_)>0);
if (verbose); disp(sprintf(' %% translating to form b_k_Y_best_ = T_(delta_best_) * b_k_Y_norm_')); end;
if (verbose); disp(sprintf(' %% delta_best_: %+0.6f , %+0.6f , %+0.6f',delta_best_)); end;
dWtdkd__ = dwignertdkd__(dWtdkd__l_max_max);
polar_a = polar_a_best;
delta_best_p_r = fnorm(delta_best_);
Wt___ = expm_dwignertdkd__(dWtdkd__,n_k_p_r,k_p_r_,l_max_,delta_best_p_r);
Wt_ = wignert_ODE_0(dWtdkd__,Wt___,n_k_p_r,k_p_r_,l_max_,delta_best_p_r);
delta_z_c_ = transpose(delta_best_);
delta_z_p_r = sqrt(delta_z_c_(1+0).^2 + delta_z_c_(1+1).^2 + delta_z_c_(1+2).^2);
delta_z_p_01 = sqrt(delta_z_c_(1+0).^2 + delta_z_c_(1+1).^2);
delta_z_p_azimu_b = atan2(delta_z_c_(1+1),delta_z_c_(1+0));
delta_z_p_polar_a = atan2(delta_z_p_01,delta_z_c_(1+2));
delta_z_p_euler_pos_ = [0,+delta_z_p_polar_a,+delta_z_p_azimu_b];
delta_z_p_euler_neg_ = [-delta_z_p_azimu_b,-delta_z_p_polar_a,0];
delta_z_c_ = [cos(delta_z_p_azimu_b)*sin(delta_z_p_polar_a);sin(delta_z_p_azimu_b)*sin(delta_z_p_polar_a);cos(delta_z_p_polar_a)]*delta_z_p_r;
W_beta_neg__ = wignerd_b(l_max_max,delta_z_p_euler_neg_(1+1));
W_beta_pos__ = wignerd_b(l_max_max,delta_z_p_euler_pos_(1+1));
tmp_Y_form_ = b_k_Y_norm_;
tmp_Y_form_ = rotate_spharm_to_spharm_2(0,W_beta_neg__,n_k_p_r,k_p_r_,l_max_,tmp_Y_form_,delta_z_p_euler_neg_);
tmp_Y_form_ = Wt_*tmp_Y_form_; 
tmp_Y_form_ = rotate_spharm_to_spharm_2(0,W_beta_pos__,n_k_p_r,k_p_r_,l_max_,tmp_Y_form_,delta_z_p_euler_pos_);
b_k_Y_best_ = tmp_Y_form_;
end;%if (fnorm(delta_best_)>0);
%%%%%%%%;
if (verbose); disp(sprintf(' %% rotating to form a_k_Y_best_ = R_(euler_best_) * a_k_Y_norm_:')); end;
euler_best_ = [+azimu_b_best,+polar_a_best,+gamma_z_best];
if (verbose); disp(sprintf(' %% euler_best_: %+0.6f , %+0.6f , %+0.6f',euler_best_)); end;
W_beta_best__ = wignerd_b(l_max_max,euler_best_(1+1));
tmp_Y_form_ = a_k_Y_norm_;
tmp_Y_form_ = rotate_spharm_to_spharm_2(0,W_beta_best__,n_k_p_r,k_p_r_,l_max_,tmp_Y_form_,euler_best_);
a_k_Y_best_ = tmp_Y_form_;
%%%%%%%%;
X_calc = ctranspose(a_k_Y_best_)*(weight_Y_*b_k_Y_best_);
disp(sprintf(' %% X_calc %0.6f vs X_best %0.6f, error %0.16f',real(X_calc),real(X_best),fnorm(X_calc-X_best)/fnorm(X_calc)));
R_best_ = euler_to_R(euler_best_);
R_comb_ = R_best_*R_bake_;
if (verbose); disp(sprintf(' %% R_comb_: ')); disp(sprintf(' %% %+0.6f %+0.6f %+0.6f\n',R_comb_)); end;
