function [a_x_c_] = convert_spharm_to_x_c_0(verbose,n_k_p_r,k_p_r_,weight_k_p_r_,l_val_,a_,X_0_,X_1_,X_2_);
% evaluates spherical-harmonic-expansion a_ (in fourier-space) on a collection of points in real-space. ;
% ;
% inputs: ;
% ;
% verbose = integer verbosity_level. ;
% n_k_p_r = integer maximum k_p_r. ;
% k_p_r_ = real array of length n_k_p_r; k_p_r_(nk_p_r) = k_value for shell nk_p_r. ;
% weight_k_p_r_ = real array of radial quadrature weights. ;
% l_val_ = integer array of length n_k_p_r; l_val_(nk_p_r) = spherical harmonic order on shell nk_p_r; l_val_(nk_p_r) corresponds to n_lm_(nk_p_r) = (l_val_(nk_p_r)+1)^2 coefficients. ;
% a_ = complex array of length \sum_{nk_p_r} (n_lm_(nk_p_r)+1)^2 ; coefficients are ordered linearly, with m varying quickly and l varying slowly and k varying most slowly. ;
% X_0_ = real array of length n_x_c ; x_c_0 value to evaluate. ;
% X_1_ = real array of length n_x_c ; x_c_1 value to evaluate. ;
% X_2_ = real array of length n_x_c ; x_c_2 value to evaluate. ;
% ;
% outputs: ;
% ;
% a_x_c_ = complex array of length n_x_c ; evaluation of function in real-space. ;

n_lm_ = (l_val_+1).^2;
l_val_max = max(l_val_);
m_max_ = -l_val_max : +l_val_max;
n_m_max = length(m_max_);
n_x_c = numel(X_0_);
assert(numel(X_0_)==numel(X_1_));
assert(numel(X_1_)==numel(X_2_));
a_x_c_ = zeros(n_x_c,1);
X_012_ = sqrt(X_0_.^2 + X_1_.^2 + X_2_.^2);
X_01_ = sqrt(X_0_.^2 + X_1_.^2);
X_azimu_b_ = atan2(X_1_,X_0_);
X_polar_a_ = atan2(X_01_,X_2_);
Ylm__ = get_Ylm__(l_val_max+1,0:l_val_max,n_x_c,X_azimu_b_(:),X_polar_a_(:));
na=0;
for nk_p_r=0:n_k_p_r-1;
k_p_r = k_p_r_(1+nk_p_r);
l_val_max = l_val_(1+nk_p_r);
for nl=0:l_val_max;
l_val = nl;
t_ = 2*pi*k_p_r*X_012_; t_ = reshape(t_,n_x_c,1);
jl_ = besselj(l_val+0.5,t_).*sqrt(pi./(2*t_));
n_m = (2*l_val+1);
for nm=0:n_m-1;
m_val = -l_val + nm;
Ylm_ = Ylm__{1+l_val}(1+nm,:); Ylm_ = reshape(Ylm_,n_x_c,1);
a_x_c_ = a_x_c_ + i^l_val * (jl_ .* Ylm_) * k_p_r^2 * weight_k_p_r_(1+nk_p_r) * a_(1+na);
na = na+1;
end;%for nm=0:n_m-1;
end;%for nl=0:l_val_max;
end;%for nk_p_r=0:n_k_p_r-1;
assert(na==sum(n_lm_));
a_x_c_ = (4*pi)^3 / sqrt((2*pi)^3) * reshape(a_x_c_,size(X_0_));
