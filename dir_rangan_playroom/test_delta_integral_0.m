% testing integral of translation-operator across gaussian-distribution of translations. ;

twopi = 2*pi;

rmu = @(d,s) exp( - d.^2 ./ (2*s.^2) ) / twopi ./ s.^2 .* d ;

sigma_d = 0.10;
n_d = 128;
[dx_,dw_] = chebpts(n_d,[0,10*sigma_d]);
dx_ = reshape(dx_,[n_d,1]); dw_ = reshape(dw_,[n_d,1]);
delta_0_ = dx_;
delta_1_ = dx_;
[delta_0__,delta_1__] = ndgrid(delta_0_,delta_1_);
[weight_delta_0__,weight_delta_1__] = ndgrid(dw_,dw_);
%%%%%%%%;
% integral of gaussian in 2d. ;
%%%%%%%%;
I_quad = sum(dw_.*rmu(dx_,sigma_d),'all')*twopi;
I_form = 1;
disp(sprintf(' %% I_form vs I_quad: %0.16f',fnorm(I_form-I_quad)/fnorm(I_form)));
%%%%%%%%;
% integral of gaussian in 4d. ;
%%%%%%%%;
I_quad = sum(weight_delta_0__.*weight_delta_1__.*rmu(delta_0__,sigma_d).*rmu(delta_1__,sigma_d),'all')*twopi*twopi;
I_form = 1;
disp(sprintf(' %% I_form vs I_quad: %0.16f',fnorm(I_form-I_quad)/fnorm(I_form)));
%%%%%%%%;
% \int dphi * 1/twopi/sigma_d^2 * exp(-delta_0^2/2/sigma_d^2) * delta_0 * d_delta_0 * d_omega_0 * exp(\pm i*twopi*k_0*delta_0*cos(phi - omega_0)) ;
%%%%%%%%;
k = 3.5;
n_phi = 32; phi_ = linspace(0,twopi,n_phi+1); phi_ = phi_(1:end-1);
n_omega = 32; omega_ = linspace(0,twopi,n_omega+1); omega_ = omega_(1:end-1);
delta_ = dx_;
[delta___,omega___,phi___] = ndgrid(delta_,omega_,phi_);
weight_delta___ = repmat(dw_,[1,n_omega,n_phi]);
I_quad = sum((twopi/n_phi) * (twopi/n_omega) * weight_delta___ .* rmu(delta___,sigma_d) .* exp(-i*twopi*k*delta___.*cos(phi___-omega___)),'all');
I_form = integral(@(d) besselj(0,twopi*k*d).*rmu(d,sigma_d),0,+Inf)*twopi^2;
disp(sprintf(' %% I_form vs I_quad: %0.16f',fnorm(I_form-I_quad)/fnorm(I_form)));
I_quad = sum((twopi/n_phi) * (twopi/n_omega) * weight_delta___ .* rmu(delta___,sigma_d) .* exp(+i*twopi*k*delta___.*cos(phi___-omega___)),'all');
I_form = integral(@(d) besselj(0,twopi*k*d).*rmu(d,sigma_d),0,+Inf)*twopi^2;
disp(sprintf(' %% I_form vs I_quad: %0.16f',fnorm(I_form-I_quad)/fnorm(I_form)));
%%%%%%%%;
% \int dphi * 1/twopi/sigma_d^2 * exp(-delta^2/2/sigma_d^2) * delta * d_delta * d_omega * exp(+i*twopi*k_0*delta*cos(phi - omega)) * exp(-i*twopi*k_1*delta*cos(phi - omega)). ;
%%%%%%%%;
k_0 = 3.5; k_1 = 2.3;
n_phi = 32; phi_ = linspace(0,twopi,n_phi+1); phi_ = phi_(1:end-1);
n_omega = 32; omega_ = linspace(0,twopi,n_omega+1); omega_ = omega_(1:end-1);
delta_ = dx_;
[delta___,omega___,phi___] = ndgrid(delta_,omega_,phi_);
weight_delta___ = repmat(dw_,[1,n_omega,n_phi]);
I_quad = sum((twopi/n_phi) * (twopi/n_omega) * weight_delta___ .* rmu(delta___,sigma_d) .* exp(+i*twopi*k_0*delta___.*cos(phi___-omega___)) .* exp(-i*twopi*k_1*delta___.*cos(phi___-omega___)),'all');
l_max = 32;
I_form_ = zeros(1+2*l_max,1);
for l_val=-l_max:l_max;
I_form_(1+l_max+l_val) = integral(@(d) besselj(l_val,twopi*k_0*d).*besselj(l_val,twopi*k_1*d).*rmu(d,sigma_d),0,+Inf)*twopi^2;
end;%for l_val=0:l_max;
I_form = sum(I_form_);
disp(sprintf(' %% I_form vs I_quad: %0.16f',fnorm(I_form-I_quad)/fnorm(I_form)));
%%%%%%%%;
% exp(-i*twopi*k*delta*cos(phi-omega));
%%%%%%%%;
k = 3.5;
n_phi = 32; phi_ = linspace(0,twopi,n_phi+1); phi_ = phi_(1:end-1);
n_omega = 32; omega_ = linspace(0,twopi,n_omega+1); omega_ = omega_(1:end-1);
delta_ = dx_;
[delta___,omega___,phi___] = ndgrid(delta_,omega_,phi_);
weight_delta___ = repmat(dw_,[1,n_omega,n_phi]);
expiw_0___ = exp(-i*twopi*k*delta___.*cos(phi___-omega___));
expiw_1___ = zeros(n_d,n_omega,n_phi);
l_max = 32;
for l_val=-l_max:+l_max;
expiw_1___ = expiw_1___ + (-i)^l_val * besselj(l_val,twopi*k*delta___).*exp(+i*l_val*(phi___-omega___));
end;%for l_val=0:l_max;
disp(sprintf(' %% expiw_0___ vs expiw_1___: %0.16f',fnorm(expiw_0___-expiw_1___)/fnorm(expiw_0___)));


