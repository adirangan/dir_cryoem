function dWtdkd_ = dwignertdkd_(m_val,l_val_max);
% Uses dwignertdkd to calculate the derivative of wignert(kd;m_val,l_val_a,l_val_b) with respect to kd. ;
% This calculation is performed across all l_val_a and l_val_b in m_val:l_val_max, for a particular fixed m_val. ;
% Consequently, the result will be a (sparse) square matrix of side-length 1+l_val_max-m_val. ;
% More specifically: dWtdkd_(nla,nlb) refers to: ;
% \partial_{kd} wignert(kd;m_val,l_val_a,l_val_b), where ;
% l_val_a = nla + m_val ;
% l_val_b = nlb + m_val ;
% By construction, dWtdkd_(nla,nlb) is 0 unless l_val_a==l_val_b+1 or l_val_a==l_val_b-1. ;
dWtdkd_m_val = m_val; dWtdkd_l_val_max = l_val_max;
dWtdkd_n_l = 1+dWtdkd_l_val_max;
dWtdkd_m_abs = abs(dWtdkd_m_val);
dWtdkd_n_s = 2*(dWtdkd_l_val_max - dWtdkd_m_abs);
dWtdkd_row_ij_ = zeros(dWtdkd_n_s,1);
dWtdkd_col_ij_ = zeros(dWtdkd_n_s,1);
dWtdkd_val_ij_ = zeros(dWtdkd_n_s,1);
dWtdkd_ns=0;
for dWtdkd_l_val_a=dWtdkd_m_abs:dWtdkd_l_val_max;
for dWtdkd_l_val_b=[max(0,dWtdkd_l_val_a-1),min(dWtdkd_l_val_max,dWtdkd_l_val_a+1)];
if ((dWtdkd_m_abs<=dWtdkd_l_val_a) & (dWtdkd_m_abs<=dWtdkd_l_val_b));
dWtdkd_row_ij_(1+dWtdkd_ns) = 1+dWtdkd_l_val_a-dWtdkd_m_abs;
dWtdkd_col_ij_(1+dWtdkd_ns) = 1+dWtdkd_l_val_b-dWtdkd_m_abs;
dWtdkd_val_ij_(1+dWtdkd_ns) = dwignertdkd(dWtdkd_m_val,dWtdkd_l_val_a,dWtdkd_l_val_b);
dWtdkd_ns=dWtdkd_ns+1;
end;%if ((dWtdkd_m_abs<=dWtdkd_l_val_a) & (dWtdkd_m_abs<=dWtdkd_l_val_b));
end;%for dWtdkd_l_val_b=[max(0,dWtdkd_l_val_a-1),min(dWtdkd_l_val_max,dWtdkd_l_val_a+1)];
end;%for dWtdkd_l_val_a=dWtdkd_m_abs:dWtdkd_l_val_max;
dWtdkd_ = sparse(dWtdkd_row_ij_,dWtdkd_col_ij_,dWtdkd_val_ij_,dWtdkd_n_l-dWtdkd_m_abs,dWtdkd_n_l-dWtdkd_m_abs);
