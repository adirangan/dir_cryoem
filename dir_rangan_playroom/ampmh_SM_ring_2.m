function  ...
[ ...
 parameter ...
,euler_polar_a_ ...
,euler_azimu_b_ ...
,euler_gamma_z_ ...
,image_delta_x_ ...
,image_delta_y_ ...
,image_I_value_ ...
,image_X_value_ ...
,image_S_index_ ...
] = ...
ampmh_SM_ring_2( ...
 parameter ...
,n_w_max ...
,n_S ...
,viewing_polar_a_all_ ...
,viewing_azimu_b_all_ ...
,n_M ...
,X_wSM___ ...
,delta_x_wSM___ ...
,delta_y_wSM___ ...
,gamma_z_wSM___ ...
,I_value_wSM___ ...
);
%%%%%%%%;
verbose=0;
if (verbose); disp(sprintf(' %% [entering ampmh_SM_ring_2]')); end;
%%%%%%%%;
if isempty(parameter);
parameter = struct('type','parameter');
end;%if isempty(parameter);
%%%%%%%%;
if (~isfield(parameter,'flag_euler_polar_a_restrict')); parameter.flag_euler_polar_a_restrict = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'euler_polar_a_restrict_band')); parameter.euler_polar_a_restrict_band = pi/12; end; %<-- parameter_bookmark. ;
flag_euler_polar_a_restrict = parameter.flag_euler_polar_a_restrict;
euler_polar_a_restrict_band = parameter.euler_polar_a_restrict_band;
%%%%%%%%;
if flag_euler_polar_a_restrict==0; %<-- any equatorial polar_a allowed. ;
[ ...
 parameter ...
,euler_polar_a_ ...
,euler_azimu_b_ ...
,euler_gamma_z_ ...
,image_delta_x_ ...
,image_delta_y_ ...
,image_I_value_ ...
,image_X_value_ ...
,image_S_index_ ...
] = ...
ampmh_SM_uniform_2( ...
 parameter ...
,n_w_max ...
,n_S ...
,viewing_polar_a_all_ ...
,viewing_azimu_b_all_ ...
,n_M ...
,X_wSM___ ...
,delta_x_wSM___ ...
,delta_y_wSM___ ...
,gamma_z_wSM___ ...
,I_value_wSM___ ...
);
end;%if flag_euler_polar_a_restrict==0; %<-- any equatorial polar_a allowed. ;
%%%%%%%%;
if flag_euler_polar_a_restrict==1; %<-- only equatorial polar_a allowed. ;

if ~isfield(parameter,'sample_sphere_k_eq_d'); parameter.sample_sphere_k_eq_d = 1/(2*pi); end; %<-- parameter_bookmark. ;
sample_sphere_k_eq_d = parameter.sample_sphere_k_eq_d;
viewing_k_c_0_ = cos(viewing_azimu_b_all_).*sin(viewing_polar_a_all_);
viewing_k_c_1_ = sin(viewing_azimu_b_all_).*sin(viewing_polar_a_all_);
viewing_k_c_2_ = cos(viewing_polar_a_all_);
[ ...
 tmp_n_all ...
,tmp_azimu_b_all_ ...
,tmp_polar_a_all_ ...
,~ ...
,tmp_k_c_0_all_ ...
,tmp_k_c_1_all_ ...
,tmp_k_c_2_all_ ...
] = ...
sample_shell_5( ...
 1 ...
,parameter.sample_sphere_k_eq_d ...
);
%%%%;
euler_polar_a_ = zeros(n_M,1);
euler_azimu_b_ = zeros(n_M,1);
euler_gamma_z_ = zeros(n_M,1);
image_delta_x_ = zeros(n_M,1);
image_delta_y_ = zeros(n_M,1);
image_I_value_ = zeros(n_M,1);
image_X_value_ = zeros(n_M,1);
image_S_index_ = zeros(n_M,1);
%%%%;
tmp_nall_opt=0;
for tmp_nall=0:tmp_n_all-1;
if (verbose); if (mod(tmp_nall,128)==0); disp(sprintf(' %% tmp_nall %d/%d',tmp_nall,tmp_n_all)); end; end;
tmp_k_c_0 = tmp_k_c_0_all_(1+tmp_nall); tmp_k_c_1 = tmp_k_c_1_all_(1+tmp_nall); tmp_k_c_2 = tmp_k_c_2_all_(1+tmp_nall);
tmp_angle_ = acos( tmp_k_c_0 * viewing_k_c_0_ + tmp_k_c_1 * viewing_k_c_1_ + tmp_k_c_2 * viewing_k_c_2_ );
tmp_dangle_ = abs(tmp_angle_-pi/2);
flag_continue=1; nf=0;
while flag_continue;
index_nS_from_subset_ = efind(tmp_dangle_<=euler_polar_a_restrict_band + nf*pi/16);
if (~isempty(index_nS_from_subset_)); nf=nf+0; flag_continue=0; end;
if ( isempty(index_nS_from_subset_)); nf=nf+1; flag_continue=1; end;
end;%while flag_continue;
tmp_n_S = numel(index_nS_from_subset_);
%%%%;
if ndims(X_wSM___)==3;
[ ...
 parameter ...
,tmp_euler_polar_a_ ...
,tmp_euler_azimu_b_ ...
,tmp_euler_gamma_z_ ...
,tmp_image_delta_x_ ...
,tmp_image_delta_y_ ...
,tmp_image_I_value_ ...
,tmp_image_X_value_ ...
,tmp_image_S_index_ ...
] = ...
ampmh_SM_uniform_2( ...
 parameter ...
,n_w_max ...
,tmp_n_S ...
,viewing_polar_a_all_(1+index_nS_from_subset_) ...
,viewing_azimu_b_all_(1+index_nS_from_subset_) ...
,n_M ...
,X_wSM___(:,1+index_nS_from_subset_,:) ...
,delta_x_wSM___(:,1+index_nS_from_subset_,:) ...
,delta_y_wSM___(:,1+index_nS_from_subset_,:) ...
,gamma_z_wSM___(:,1+index_nS_from_subset_,:) ...
,I_value_wSM___(:,1+index_nS_from_subset_,:) ...
);
end;%if ndims(X_wSM___)==3;
%%%%;
if ndims(X_wSM___)==2;
[ ...
 parameter ...
,tmp_euler_polar_a_ ...
,tmp_euler_azimu_b_ ...
,tmp_euler_gamma_z_ ...
,tmp_image_delta_x_ ...
,tmp_image_delta_y_ ...
,tmp_image_I_value_ ...
,tmp_image_X_value_ ...
,tmp_image_S_index_ ...
] = ...
ampmh_SM_uniform_2( ...
 parameter ...
,n_w_max ...
,tmp_n_S ...
,viewing_polar_a_all_(1+index_nS_from_subset_) ...
,viewing_azimu_b_all_(1+index_nS_from_subset_) ...
,n_M ...
,X_wSM___(1+index_nS_from_subset_,:) ...
,delta_x_wSM___(1+index_nS_from_subset_,:) ...
,delta_y_wSM___(1+index_nS_from_subset_,:) ...
,gamma_z_wSM___(1+index_nS_from_subset_,:) ...
,I_value_wSM___(1+index_nS_from_subset_,:) ...
);
end;%if ndims(X_wSM___)==2;
%%%%;
if ( (tmp_nall==0) | (mean(real(tmp_image_X_value_))> mean(real(image_X_value_))) );
tmp_nall_opt = tmp_nall;
euler_polar_a_ = tmp_euler_polar_a_;
euler_azimu_b_ = tmp_euler_azimu_b_;
euler_gamma_z_ = tmp_euler_gamma_z_;
image_delta_x_ = tmp_image_delta_x_;
image_delta_y_ = tmp_image_delta_y_;
image_I_value_ = tmp_image_I_value_;
image_X_value_ = tmp_image_X_value_;
image_S_index_ = tmp_image_S_index_;
end;%if ( (tmp_nall==0) | (mean(real(tmp_image_X_value_))> mean(real(image_X_value_))) );
%%%%%%%%;
end;%for tmp_nall=0:tmp_n_all-1;
if (verbose); disp(sprintf(' %% optimal ring found at index %d/%d <-- polar_a azimu_b: %0.3f %0.3f',tmp_nall_opt,tmp_n_all,tmp_polar_a_all_(1+tmp_nall_opt),tmp_azimu_b_all_(1+tmp_nall_opt))); end;

end;%if flag_euler_polar_a_restrict==1; %<-- only equatorial polar_a allowed. ;
%%%%%%%%;

if (verbose); disp(sprintf(' %% [finished ampmh_SM_ring_2]')); end;
