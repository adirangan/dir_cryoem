%%%%%%%%;
% Establish the relationship between rigid rotations of the volume a_k_Y_form_, ;
% the corresponding perturbation to the volume dvol_a_k_Y_form_, ;
% and the induced perturbation to the viewing-angles dtau_M3__. ;
%%%%%%%%;

%%%%%%%%;
platform = 'rusty';
if (exist('platform.type','file')); fp=fopen('platform.type'); platform = fscanf(fp,'%s'); fclose(fp); end;
if (strcmp(platform,'access1')); setup_access1; string_root = 'data'; end;
if (strcmp(platform,'OptiPlex')); setup_OptiPlex; string_root = 'home'; end;
if (strcmp(platform,'eval1')); setup_eval1; string_root = 'home'; end;
if (strcmp(platform,'rusty')); setup_rusty; string_root = 'mnt/home'; end;
%%%%%%%%;

str_thisfunction = 'test_slice_vs_volume_integral_rotate_5';

flag_verbose=1; flag_disp=1; nf=0;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%%%%%%%%;
% First define integral of <f,f>. ;
%%%%%%%%;
h2d_ = @(kd) 4*pi^2*(besselj(0,kd) + besselj(2,kd)); % calculates <f_j,f_k>, normalized so that <f,f> = (4*pi^2);
dh2d_ = @(kd) 4*pi^3*(besselj(-1,kd) - besselj(+3,kd));
h3d_ = @(kd) 4*pi*( sin(kd) - (kd).*cos(kd) ) ./ kd.^3 ; % calculates <f_j,f_k>, normalized so that <f,f> = 4*pi/3;
dh3d_ = @(kd) 12*pi*( (kd.^2/3 - 1) .* sin(kd) + (kd).*cos(kd) ) ./ kd.^4 ;
%%%%%%%%;
% Now set up and test k-quadrature on sphere. ;
%%%%%%%%;
k_p_r_max = 48.0/(2*pi); k_eq_d = 1.0/(2*pi); str_T_vs_L = 'C';
flag_unif_vs_adap = 0; flag_tensor_vs_adap = 0; %<-- This is set to match test_ssnll_from_a_k_Y_12 ;
[ ...
 n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,k_c_0_all_ ...
,k_c_1_all_ ...
,k_c_2_all_ ...
] = ...
sample_sphere_7( ...
 0*flag_verbose ...
,k_p_r_max ...
,k_eq_d ...
,str_T_vs_L ...
,flag_unif_vs_adap ...
,flag_tensor_vs_adap ...
) ;
%%%%%%%%;
% Define sources. ;
%%%%%%%%;
n_source = 4;
rng(0);
delta_a_c__ = zeros(3,n_source);
delta_b_c__ = zeros(3,n_source);
for nsource=0:n_source-1;
rng(1+nsource);
delta_a_c_ = 2*rand(3,1)-1; delta_a_c_ = delta_a_c_*0.5/k_p_r_max/max(1e-12,fnorm(delta_a_c_)); %<-- ensure small in magnitude. ;
delta_a_c__(:,1+nsource) = delta_a_c_;
delta_b_c_ = 2*rand(3,1)-1; delta_b_c_ = delta_b_c_*0.5/k_p_r_max/max(1e-12,fnorm(delta_b_c_)); %<-- ensure small in magnitude. ;
delta_b_c__(:,1+nsource) = delta_b_c_;
end;%for nsource=0:n_source-1;
a_k_p_form_ = zeros(n_k_all,1);
b_k_p_form_ = zeros(n_k_all,1);
for nsource=0:n_source-1;
delta_a_c_ = delta_a_c__(:,1+nsource);
a_k_p_form_ = a_k_p_form_ + exp(+i*2*pi*(k_c_0_all_*delta_a_c_(1+0) + k_c_1_all_*delta_a_c_(1+1) + k_c_2_all_*delta_a_c_(1+2)));
delta_b_c_ = delta_b_c__(:,1+nsource);
b_k_p_form_ = b_k_p_form_ + exp(+i*2*pi*(k_c_0_all_*delta_b_c_(1+0) + k_c_1_all_*delta_b_c_(1+1) + k_c_2_all_*delta_b_c_(1+2)));
end;%for nsource=0:n_source-1;
%%%%;
I_a_quad = sum(a_k_p_form_.*weight_3d_k_all_);
I_b_quad = sum(b_k_p_form_.*weight_3d_k_all_);
I_a_form = 0;
I_b_form = 0;
for nsource=0:n_source-1;
delta_a_c_ = delta_a_c__(:,1+nsource);
delta_b_c_ = delta_b_c__(:,1+nsource);
tmp_kd = 2*pi*k_p_r_max*fnorm(delta_a_c_);
I_a_form = I_a_form + h3d_(tmp_kd)*k_p_r_max^3;
tmp_kd = 2*pi*k_p_r_max*fnorm(delta_b_c_);
I_b_form = I_b_form + h3d_(tmp_kd)*k_p_r_max^3;
end;%for nsource=0:n_source-1;
disp(sprintf(' %% I_a_form vs I_a_quad %0.16f %%<-- should be <1e-6',fnorm(I_a_form-I_a_quad)/fnorm(I_a_form)));
disp(sprintf(' %% I_b_form vs I_b_quad %0.16f %%<-- should be <1e-6',fnorm(I_b_form-I_b_quad)/fnorm(I_b_form)));
%%%%%%%%;
% Now set up and test polar-quadrature-weights on disk. ;
%%%%%%%%;
l_max_upb = round(2*pi*k_p_r_max);
l_max_max = min(l_max_upb,1+ceil(2*pi*k_p_r_(end)));
n_w_max = 1*1*2*(l_max_max+1); n_w_0in_ = n_w_max*ones(n_k_p_r,1);
[ ...
 n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,k_p_r_wk_ ...
,k_p_w_wk_ ...
,k_c_0_wk_ ...
,k_c_1_wk_ ...
] = ...
get_weight_2d_2( ...
 0*flag_verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,-1 ...
,n_w_0in_ ...
);
n_w_sum = sum(n_w_); n_w_csum_ = cumsum([0;n_w_]);
%%%%;
S_k_p_wk_ = zeros(n_w_sum,1);
T_k_p_wk_ = zeros(n_w_sum,1);
for nsource=0:n_source-1;
S_k_p_wk_ = S_k_p_wk_ + exp(+2*pi*i*(k_c_0_wk_*delta_a_c__(1+0,1+nsource) + k_c_1_wk_*delta_a_c__(1+1,1+nsource)));
T_k_p_wk_ = T_k_p_wk_ + exp(+2*pi*i*(k_c_0_wk_*delta_b_c__(1+0,1+nsource) + k_c_1_wk_*delta_b_c__(1+1,1+nsource)));
end;%for nsource=0:n_source-1;
I_quad = sum(conj(S_k_p_wk_).*T_k_p_wk_.*weight_2d_wk_)*(4*pi^2);
I_form = 0;
for nsource0=0:n_source-1;
for nsource1=0:n_source-1;
tmp_kd = 2*pi*k_p_r_max*fnorm(delta_a_c__(1:2,1+nsource0) - delta_b_c__(1:2,1+nsource1));
I_form = I_form + h2d_(tmp_kd)/(4*pi^2) * (pi*k_p_r_max^2);
end;%for nsource1=0:n_source-1;
end;%for nsource0=0:n_source-1;
disp(sprintf(' %% I_form vs I_quad %0.16f %%<-- should be <1e-2',fnorm(I_form-I_quad)/fnorm(I_form)));
%%%%;
if (flag_disp>1);
figure(1+nf);nf=nf+1;clf;figmed;
Slim_ = n_source*[-1,+1];
subplot(1,2,1);
imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(S_k_p_wk_),Slim_,colormap_beach());
axis image; axisnotick; title('real(S_k_p_wk_)','Interpreter','none');
subplot(1,2,2);
imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(T_k_p_wk_),Slim_,colormap_beach());
axis image; axisnotick; title('real(T_k_p_wk_)','Interpreter','none');
end;% if flag_disp;
%%%%%%%%;
% Now set up spherical-harmonics. ;
%%%%%%%%;
l_max_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
l_max_(1+nk_p_r) = max(0,min(l_max_upb,1+ceil(2*pi*k_p_r_(1+nk_p_r))));
end;%for nk_p_r=0:n_k_p_r-1;
n_lm_ = (l_max_+1).^2;
n_lm_max = max(n_lm_);
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
l_max_max = max(l_max_);
m_max_ = -l_max_max : +l_max_max;
n_m_max = length(m_max_);
%%%%;
Y_l_val_ = zeros(n_lm_sum,1);
Y_m_val_ = zeros(n_lm_sum,1);
Y_k_val_ = zeros(n_lm_sum,1);
for nk_p_r=0:n_k_p_r-1;
l_max = l_max_(1+nk_p_r);
tmp_l_val_ = zeros(n_lm_(1+nk_p_r),1);
tmp_m_val_ = zeros(n_lm_(1+nk_p_r),1);
na=0; 
for l_val=0:l_max;
for m_val=-l_val:+l_val;
tmp_l_val_(1+na) = l_val;
tmp_m_val_(1+na) = m_val;
na=na+1;
end;%for m_val=-l_val:+l_val;
end;%for l_val=0:l_max;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
Y_l_val_(1+tmp_index_) = tmp_l_val_;
Y_m_val_(1+tmp_index_) = tmp_m_val_;
Y_k_val_(1+tmp_index_) = k_p_r_(1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
weight_Y_ = zeros(n_lm_sum,1);
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
weight_Y_(1+tmp_index_) = weight_3d_k_p_r_(1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%;
a_k_Y_form_ = zeros(n_lm_sum,1);
b_k_Y_form_ = zeros(n_lm_sum,1);
for nsource=0:n_source-1;
a_k_Y_form_ = a_k_Y_form_ + plane_wave_expansion_1(n_k_p_r,k_p_r_,delta_a_c__(:,1+nsource),l_max_);
b_k_Y_form_ = b_k_Y_form_ + plane_wave_expansion_1(n_k_p_r,k_p_r_,delta_b_c__(:,1+nsource),l_max_);
end;%for nsource=0:n_source-1;
%%%%;
tmp_t = tic;
if ~exist('Ylm_uklma___','var'); Ylm_uklma___ = []; end;
if ~exist('k_p_azimu_b_sub_uka__','var'); k_p_azimu_b_sub_uka__ = []; end;
if ~exist('k_p_polar_a_sub_uka__','var'); k_p_polar_a_sub_uka__ = []; end;
if ~exist('l_max_uk_','var'); l_max_uk_ = []; end;
if ~exist('index_nu_n_k_per_shell_from_nk_p_r_','var'); index_nu_n_k_per_shell_from_nk_p_r_ = []; end;
if ~exist('index_k_per_shell_uka__','var'); index_k_per_shell_uka__ = []; end;
[ ...
 a_k_Y_quad_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_p_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% a_k_Y_quad_ time %0.2fs',tmp_t));
disp(sprintf(' %% a_k_Y_form_ vs a_k_Y_quad_: %0.16f %%<-- should be <1e-2',fnorm(a_k_Y_form_-a_k_Y_quad_)/fnorm(a_k_Y_form_)));
%%%%;
tmp_t = tic();
[ ...
 b_k_Y_quad_ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,b_k_p_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% b_k_Y_quad_ time %0.2fs',tmp_t));
disp(sprintf(' %% b_k_Y_form_ vs b_k_Y_quad_: %0.16f %%<-- should be <1e-2',fnorm(b_k_Y_form_-b_k_Y_quad_)/fnorm(b_k_Y_form_)));
%%%%;
tmp_t = tic;
[ ...
 a_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% a_k_p_quad_ time %0.2fs',tmp_t));
disp(sprintf(' %% a_k_p_form_ vs a_k_p_quad_: %0.16f %%<-- should be <1e-2',fnorm(a_k_p_form_-a_k_p_quad_)/fnorm(a_k_p_form_)));
%%%%;
tmp_t = tic;
[ ...
 b_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,b_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% b_k_p_quad_ time %0.2fs',tmp_t));
disp(sprintf(' %% b_k_p_form_ vs b_k_p_quad_: %0.16f %%<-- should be <1e-2',fnorm(b_k_p_form_-b_k_p_quad_)/fnorm(b_k_p_form_)));
%%%%%%%%;
% prepare a_k_Y_form__ and b_k_Y_form__ ;
%%%%%%%%;
a_k_Y_form_yk_ = a_k_Y_form_;
a_k_Y_form_yk__ = zeros(n_lm_max,n_k_p_r);
tmp_t = tic();
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
a_k_Y_form_yk__(1:n_lm,1+nk_p_r) = a_k_Y_form_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% a_k_Y_form_yk__: %0.6fs',tmp_t)); end;
%%%%;
b_k_Y_form_yk_ = b_k_Y_form_;
b_k_Y_form_yk__ = zeros(n_lm_max,n_k_p_r);
tmp_t = tic();
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
b_k_Y_form_yk__(1:n_lm,1+nk_p_r) = b_k_Y_form_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% b_k_Y_form_yk__: %0.6fs',tmp_t)); end;
%%%%%%%%;
% define rotations. ;
%%%%%%%%;
Rz = @(azimu_b) ...
[ +cos(azimu_b) -sin(azimu_b) 0 ; ...
  +sin(azimu_b) +cos(azimu_b) 0 ; ...
   0             0            1 ; ...
] ;
%%%%%%%%;
Ry = @(polar_a) ...
[ +cos(polar_a) 0 +sin(polar_a) ; ...
   0            1  0            ; ...
  -sin(polar_a) 0 +cos(polar_a) ; ...
];
%%%%%%%%;
dRz = @(azimu_b) ...
[ -sin(azimu_b) -cos(azimu_b) 0 ; ...
  +cos(azimu_b) -sin(azimu_b) 0 ; ...
   0             0            0 ; ...
] ;
%%%%%%%%;
dRy = @(polar_a) ...
[ -sin(polar_a) 0 +cos(polar_a) ; ...
   0            0  0            ; ...
  -cos(polar_a) 0 -sin(polar_a) ; ...
];
%%%%%%%%;
ddRz = @(azimu_b) ...
[ -cos(azimu_b) +sin(azimu_b) 0 ; ...
  -sin(azimu_b) -cos(azimu_b) 0 ; ...
   0             0            0 ; ...
] ;
%%%%%%%%;
ddRy = @(polar_a) ...
[ -cos(polar_a) 0 -sin(polar_a) ; ...
   0            0  0            ; ...
  +sin(polar_a) 0 -cos(polar_a) ; ...
];
%%%%%%%%;
% generate templates. ;
%%%%%%%%;
tmp_t = tic();
template_k_eq_d = 1.0/k_p_r_max;
flag_tensor_vs_adap = 1; %<-- tensor grid. ;
[ ...
 n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,viewing_k_c_0_all_ ...
,viewing_k_c_1_all_ ...
,viewing_k_c_2_all_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
sample_shell_6( ...
 1.0 ...
,template_k_eq_d ...
,str_T_vs_L ...
,flag_tensor_vs_adap ...
) ;
n_S = n_viewing_S;
if (flag_verbose>0); disp(sprintf(' %% n_S %d, n_viewing_polar_a %d, n_viewing_azimu_b [%d,..,%d]',n_S,n_viewing_polar_a,n_viewing_azimu_b_(1+0),n_viewing_azimu_b_(end))); end;
%%%%;
if (flag_disp>1);
figure(1+nf);nf=nf+1;clf;figsml;
plot3(viewing_k_c_0_all_,viewing_k_c_1_all_,viewing_k_c_2_all_,'.');
axis equal; axisnotick3d; axis vis3d;
end;%if flag_disp;
%%%%;
[ ...
 ~ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
] = ...
get_weight_2d_2( ...
 0*flag_verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,-1 ...
,n_w_ ...
);
%%%%;
tmp_t = tic();
[ ...
 S_k_p_wkS__ ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
pm_template_2( ...
 0*flag_verbose ...
,l_max ...
,n_k_p_r ...
,a_k_Y_form_yk__ ...
,[] ...
,-1 ...
,n_w_max ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
);
S_k_p_wkS__ = reshape(S_k_p_wkS__,[n_w_sum,n_S]);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% S_k_p_wkS__ (pm_template_2): %0.6fs',tmp_t)); end;
%%%%%%%%;
tmp_t = tic();
[ ...
 R_k_p_wkS__ ...
] = ...
sph_template_3( ...
 0*flag_verbose ...
,l_max ...
,n_k_p_r ...
,a_k_Y_form_yk__ ...
,[] ...
,[] ...
,-1 ...
,n_w_max ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% R_k_p_wkS__ (sph_template_3): %0.6fs',tmp_t)); end;
disp(sprintf(' %% R_k_p_wkS__ vs S_k_p_wkS__: %0.16f %%<-- should be <1e-2',fnorm(R_k_p_wkS__-S_k_p_wkS__)/fnorm(R_k_p_wkS__)));
%%%%%%%%;
% Now step through and reconstitute the templates. ;
%%%%%%%%;
R_k_p_wkS__ = zeros(n_w_sum,n_S);
for nS=0:n_S-1;
S_k_p_wk_ = S_k_p_wkS__(:,1+nS);
tmp_azimu_b = viewing_azimu_b_S_(1+nS);
tmp_polar_a = viewing_polar_a_S_(1+nS);
tmp_gamma_z = 0.0;
tmp_R__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
R_k_p_wk_ = zeros(n_w_sum,1);
for nsource=0:n_source-1;
tmp_delta_ = tmp_R__*delta_a_c__(:,1+nsource);
R_k_p_wk_ = R_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_(1+0) + k_c_1_wk_*tmp_delta_(1+1)));
end;%for nsource=0:n_source-1;
R_k_p_wkS__(:,1+nS) = R_k_p_wk_;
end;%for nS=0:n_S-1;
disp(sprintf(' %% R_k_p_wkS__ vs S_k_p_wkS__: %0.16f %%<-- should be <1e-2',fnorm(R_k_p_wkS__-S_k_p_wkS__)/fnorm(R_k_p_wkS__)));
%%%%%%%%;
% Now get templates for b_k_Y_form. ;
%%%%%%%%;
tmp_t = tic();
[ ...
 T_k_p_wkS__ ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
pm_template_2( ...
 0*flag_verbose ...
,l_max ...
,n_k_p_r ...
,b_k_Y_form_yk__ ...
,[] ...
,-1 ...
,n_w_max ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
);
T_k_p_wkS__ = reshape(T_k_p_wkS__,[n_w_sum,n_S]);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% T_k_p_wkS__ (pm_template_2): %0.6fs',tmp_t)); end;
%%%%%%%%;
tmp_t = tic();
[ ...
 R_k_p_wkS__ ...
] = ...
sph_template_3( ...
 0*flag_verbose ...
,l_max ...
,n_k_p_r ...
,b_k_Y_form_yk__ ...
,[] ...
,[] ...
,-1 ...
,n_w_max ...
,n_viewing_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% R_k_p_wkS__ (sph_template_3): %0.6fs',tmp_t)); end;
disp(sprintf(' %% R_k_p_wkS__ vs T_k_p_wkS__: %0.16f %%<-- should be <1e-2',fnorm(R_k_p_wkS__-T_k_p_wkS__)/fnorm(R_k_p_wkS__)));
%%%%%%%%;
% Now step through and reconstitute the templates. ;
%%%%%%%%;
R_k_p_wkS__ = zeros(n_w_sum,n_S);
for nS=0:n_S-1;
T_k_p_wk_ = T_k_p_wkS__(:,1+nS);
tmp_azimu_b = viewing_azimu_b_S_(1+nS);
tmp_polar_a = viewing_polar_a_S_(1+nS);
tmp_gamma_z = 0.0;
tmp_R__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
R_k_p_wk_ = zeros(n_w_sum,1);
for nsource=0:n_source-1;
tmp_delta_ = tmp_R__*delta_b_c__(:,1+nsource);
R_k_p_wk_ = R_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_(1+0) + k_c_1_wk_*tmp_delta_(1+1)));
end;%for nsource=0:n_source-1;
R_k_p_wkS__(:,1+nS) = R_k_p_wk_;
end;%for nS=0:n_S-1;
disp(sprintf(' %% R_k_p_wkS__ vs T_k_p_wkS__: %0.16f %%<-- should be <1e-2',fnorm(R_k_p_wkS__-T_k_p_wkS__)/fnorm(R_k_p_wkS__)));
%%%%%%%%;
% Now test integral. ;
%%%%%%%%;
CTF_alpha = 0.3;
CTF_k_p_wk_ = reshape(repmat(reshape(besselj(0,CTF_alpha*k_p_r_),[1,n_k_p_r]),[n_w_max,1]),[n_w_sum,1]);
%%%%;
nS = 128;
S_k_p_wk_ = S_k_p_wkS__(:,1+nS);
tmp_azimu_b = viewing_azimu_b_S_(1+nS);
tmp_polar_a = viewing_polar_a_S_(1+nS);
tmp_gamma_z = 0.0;
tmp_R_a__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
U_k_p_wk_ = zeros(n_w_sum,1);
nsource_a = 0;
tmp_delta_U_ = tmp_R_a__*delta_a_c__(:,1+nsource_a);
tmp_delta_U = fnorm(tmp_delta_U_(1+[0,1]));
tmp_omega_U = atan2(tmp_delta_U_(1+1),tmp_delta_U_(1+0));
U_k_p_wk_ = U_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_U_(1+0) + k_c_1_wk_*tmp_delta_U_(1+1)));
%%%%;
nT = 128;
T_k_p_wk_ = T_k_p_wkS__(:,1+nT);
tmp_azimu_b = viewing_azimu_b_S_(1+nT);
tmp_polar_a = viewing_polar_a_S_(1+nT);
tmp_gamma_z = 0.0;
tmp_R_b__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
V_k_p_wk_ = zeros(n_w_sum,1);
nsource_b = 0;
tmp_delta_V_ = tmp_R_b__*delta_b_c__(:,1+nsource_b);
tmp_delta_V = fnorm(tmp_delta_V_(1+[0,1]));
tmp_omega_V = atan2(tmp_delta_V_(1+1),tmp_delta_V_(1+0));
V_k_p_wk_ = V_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_V_(1+0) + k_c_1_wk_*tmp_delta_V_(1+1)));
%%%%;
I_quad = sum(conj(U_k_p_wk_).*CTF_k_p_wk_.*V_k_p_wk_.*weight_2d_wk_,'all')*(4*pi^2);
I_form = ...
plane_bessel_plane_integral_0( ...
 k_p_r_max ...
,tmp_delta_U ...
,tmp_omega_U ...
,tmp_delta_V ...
,tmp_omega_V ...
,CTF_alpha ...
);
if (flag_verbose>0); disp(sprintf(' %% I_form vs I_quad: %0.16f',fnorm(I_form-I_quad)/fnorm(I_form))); end;
J_quad = 0.5 * sum(abs(U_k_p_wk_.*CTF_k_p_wk_ - V_k_p_wk_).^2.*weight_2d_wk_,'all')*(4*pi^2);
%%%%;
% Note that (Gradshteyn and Ryzhik 5.52.1): ;
% \int_{0}^{K} k besselj(0,alpha*k) dkdpsi = 2*pi*K*besselj(1,alpha*K)/alpha. ;
% and: \lim_{alpha\rightarrow 0} besselj(1,alpha*K)/alpha = K/2. ;
% i.e.: CTF_alpha = 0.2; integral2(@(k,psi) k.*besselj(0,CTF_alpha.*k),0,k_p_r_max,0,2*pi)*CTF_alpha/(2*pi*k_p_r_max*besselj(1,CTF_alpha.*k_p_r_max));
% Note also that (Gradshteyn and Ryzhik 5.54.2): ;
% \int_{0}^{k} k besselj(0,alpha*k)^2 dkdpsi = 2*pi* (K^2/2)*(besselj(0,alpha*K)^2 - besselj(-1,alpha*K)*besselj(+1,alpha*K)). ;
% i.e., ;
% nu = 0; CTF_alpha = 0.2;
% tmp_I = integral(@(k) k.*besselj(nu,CTF_alpha.*k).^2,0,k_p_r_max);
% tmp_J = (k_p_r_max^2/2)*(besselj(nu,CTF_alpha.*k_p_r_max)^2 - besselj(nu+1,CTF_alpha.*k_p_r_max)*besselj(nu-1,CTF_alpha.*k_p_r_max));
% disp(sprintf(' %% fnorm(tmp_I - tmp_J): %0.16f',fnorm(tmp_I-tmp_J)));
% CTF_alpha = 1e-4;
% tmp_J = (k_p_r_max^2/2)*(besselj(nu,CTF_alpha.*k_p_r_max)^2 - besselj(nu+1,CTF_alpha.*k_p_r_max)*besselj(nu-1,CTF_alpha.*k_p_r_max));
% disp(sprintf(' %% fnorm(tmp_J - k_p_r_max^2/2) %0.6f',fnorm(tmp_J - k_p_r_max^2/2)));
%%%%;
G_form = (2*pi)*k_p_r_max^2/2.0; if (CTF_alpha> 1e-12); G_form = (2*pi)*(k_p_r_max^2/2)*(besselj(0,CTF_alpha*k_p_r_max)^2 - besselj(-1,CTF_alpha*k_p_r_max)*besselj(+1,CTF_alpha*k_p_r_max)); end;
H_form = pi*k_p_r_max^2;
J_form = 0.5 * (G_form - 2*I_form + H_form);
%%%%;
n_nS_sub = 8; nS_sub_ = randperm(n_S,n_nS_sub)-1;
n_nT_sub = 10; nT_sub_ = randperm(n_S,n_nT_sub)-1;
I_quad_ST__ = zeros(n_nS_sub,n_nT_sub);
I_form_ST__ = zeros(n_nS_sub,n_nT_sub);
for nnS_sub=0:n_nS_sub-1;
nS_sub = nS_sub_(1+nnS_sub);
nS = nS_sub;
S_k_p_wk_ = S_k_p_wkS__(:,1+nS);
tmp_azimu_b = viewing_azimu_b_S_(1+nS);
tmp_polar_a = viewing_polar_a_S_(1+nS);
tmp_gamma_z = 0.0;
tmp_R_a__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
U_k_p_wk_ = zeros(n_w_sum,1);
for nsource_a=0:n_source-1;
tmp_delta_U_ = tmp_R_a__*delta_a_c__(:,1+nsource_a);
tmp_delta_U = fnorm(tmp_delta_U_(1+[0,1]));
tmp_omega_U = atan2(tmp_delta_U_(1+1),tmp_delta_U_(1+0));
U_k_p_wk_ = U_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_U_(1+0) + k_c_1_wk_*tmp_delta_U_(1+1)));
end;%for nsource_a=0:n_source-1;
for nnT_sub=0:n_nT_sub-1;
nT_sub = nT_sub_(1+nnT_sub);
nT = nT_sub;
T_k_p_wk_ = T_k_p_wkS__(:,1+nT);
tmp_azimu_b = viewing_azimu_b_S_(1+nT);
tmp_polar_a = viewing_polar_a_S_(1+nT);
tmp_gamma_z = 0.0;
tmp_R_b__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
V_k_p_wk_ = zeros(n_w_sum,1);
for nsource_b=0:n_source-1;
tmp_delta_V_ = tmp_R_b__*delta_b_c__(:,1+nsource_b);
tmp_delta_V = fnorm(tmp_delta_V_(1+[0,1]));
tmp_omega_V = atan2(tmp_delta_V_(1+1),tmp_delta_V_(1+0));
V_k_p_wk_ = V_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_V_(1+0) + k_c_1_wk_*tmp_delta_V_(1+1)));
end;%for nsource_b=0:n_source-1;
I_quad = sum(conj(U_k_p_wk_).*CTF_k_p_wk_.*V_k_p_wk_.*weight_2d_wk_,'all')*(4*pi^2);
I_form = 0;
for nsource_a=0:n_source-1;
tmp_delta_U_ = tmp_R_a__*delta_a_c__(:,1+nsource_a);
tmp_delta_U = fnorm(tmp_delta_U_(1+[0,1]));
tmp_omega_U = atan2(tmp_delta_U_(1+1),tmp_delta_U_(1+0));
for nsource_b=0:n_source-1;
tmp_delta_V_ = tmp_R_b__*delta_b_c__(:,1+nsource_b);
tmp_delta_V = fnorm(tmp_delta_V_(1+[0,1]));
tmp_omega_V = atan2(tmp_delta_V_(1+1),tmp_delta_V_(1+0));
I_form_sub = ...
plane_bessel_plane_integral_0( ...
 k_p_r_max ...
,tmp_delta_U ...
,tmp_omega_U ...
,tmp_delta_V ...
,tmp_omega_V ...
,CTF_alpha ...
);
I_form = I_form + I_form_sub;
end;%for nsource_b=0:n_source-1;
end;%for nsource_a=0:n_source-1;
I_quad_ST__(1+nnS_sub,1+nnT_sub) = I_quad;
I_form_ST__(1+nnS_sub,1+nnT_sub) = I_form;
end;%for nnT_sub=0:n_nT_sub-1;
end;%for nnS_sub=0:n_nS_sub-1;
if (flag_verbose>0); disp(sprintf(' %% I_form_ST__ vs I_quad_ST__: %0.16f',fnorm(I_form_ST__-I_quad_ST__)/fnorm(I_form_ST__))); end;
%%%%%%%%;

%%%%%%%%;
% Now creating dvol_a_k_Y_form_. ;
%%%%%%%%;
n_source = 4;
rng(1);
delta_dvol_a_c__ = zeros(3,n_source);
for nsource=0:n_source-1;
rng(1024+1+nsource);
delta_dvol_a_c_ = 2*rand(3,1)-1; delta_dvol_a_c_ = delta_dvol_a_c_*0.5/k_p_r_max/max(1e-12,fnorm(delta_dvol_a_c_)); %<-- ensure small in magnitude. ;
delta_dvol_a_c__(:,1+nsource) = delta_dvol_a_c_;
end;%for nsource=0:n_source-1;
dvol_a_k_p_form_ = zeros(n_k_all,1);
for nsource=0:n_source-1;
delta_dvol_a_c_ = delta_dvol_a_c__(:,1+nsource);
dvol_a_k_p_form_ = dvol_a_k_p_form_ + exp(+i*2*pi*(k_c_0_all_*delta_dvol_a_c_(1+0) + k_c_1_all_*delta_dvol_a_c_(1+1) + k_c_2_all_*delta_dvol_a_c_(1+2)));
end;%for nsource=0:n_source-1;
%%%%;
I_dvol_a_quad = sum(dvol_a_k_p_form_.*weight_3d_k_all_);
I_dvol_a_form = 0;
for nsource=0:n_source-1;
delta_dvol_a_c_ = delta_dvol_a_c__(:,1+nsource);
tmp_kd = 2*pi*k_p_r_max*fnorm(delta_dvol_a_c_);
I_dvol_a_form = I_dvol_a_form + h3d_(tmp_kd)*k_p_r_max^3;
end;%for nsource=0:n_source-1;
disp(sprintf(' %% I_a_form vs I_a_quad %0.16f %%<-- should be <1e-6',fnorm(I_a_form-I_a_quad)/fnorm(I_a_form)));
%%%%;
dvol_a_k_Y_form_ = zeros(n_lm_sum,1);
for nsource=0:n_source-1;
dvol_a_k_Y_form_ = dvol_a_k_Y_form_ + plane_wave_expansion_1(n_k_p_r,k_p_r_,delta_dvol_a_c__(:,1+nsource),l_max_);
end;%for nsource=0:n_source-1;
%%%%;
tmp_t = tic;
[ ...
 dvol_a_k_Y_quad_ ...
] = ...
convert_k_p_to_spharm_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,dvol_a_k_p_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% dvol_a_k_Y_quad_ time %0.2fs',tmp_t));
disp(sprintf(' %% dvol_a_k_Y_form_ vs dvol_a_k_Y_quad_: %0.16f %%<-- should be <1e-2',fnorm(dvol_a_k_Y_form_-dvol_a_k_Y_quad_)/fnorm(dvol_a_k_Y_form_)));
%%%%;
tmp_t = tic;
[ ...
 dvol_a_k_p_quad_ ...
] = ...
convert_spharm_to_k_p_4( ...
 0*flag_verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,dvol_a_k_Y_form_ ...
,Ylm_uklma___ ...
,k_p_azimu_b_sub_uka__ ...
,k_p_polar_a_sub_uka__ ...
,l_max_uk_ ...
,index_nu_n_k_per_shell_from_nk_p_r_ ...
,index_k_per_shell_uka__ ...
);
tmp_t = toc(tmp_t); disp(sprintf(' %% dvol_a_k_p_quad_ time %0.2fs',tmp_t));
disp(sprintf(' %% dvol_a_k_p_form_ vs dvol_a_k_p_quad_: %0.16f %%<-- should be <1e-2',fnorm(dvol_a_k_p_form_-dvol_a_k_p_quad_)/fnorm(dvol_a_k_p_form_)));
%%%%%%%%;
% prepare dvol_a_k_Y_form__ ;
%%%%%%%%;
dvol_a_k_Y_form_yk_ = dvol_a_k_Y_form_;
dvol_a_k_Y_form_yk__ = zeros(n_lm_max,n_k_p_r);
tmp_t = tic();
for nk_p_r=0:n_k_p_r-1;
n_lm = n_lm_(1+nk_p_r);
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:n_lm-1);
dvol_a_k_Y_form_yk__(1:n_lm,1+nk_p_r) = dvol_a_k_Y_form_yk_(1+tmp_index_);
end;%for nk_p_r=0:n_k_p_r-1;
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% dvol_a_k_Y_form_yk__: %0.6fs',tmp_t)); end;
%%%%%%%%;
% generate templates. ;
%%%%%%%%;
tmp_t = tic();
[ ...
 dvol_S_k_p_wkS__ ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
] = ...
pm_template_2( ...
 0*flag_verbose ...
,l_max ...
,n_k_p_r ...
,dvol_a_k_Y_form_yk__ ...
,[] ...
,-1 ...
,n_w_max ...
,n_S ...
,viewing_azimu_b_S_ ...
,viewing_polar_a_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
);
dvol_S_k_p_wkS__ = reshape(dvol_S_k_p_wkS__,[n_w_sum,n_S]);
tmp_t = toc(tmp_t); if (flag_verbose>0); disp(sprintf(' %% dvol_S_k_p_wkS__: %0.6fs',tmp_t)); end;
%%%%%%%%;
% Now step through and reconstitute the templates. ;
%%%%%%%%;
dvol_R_k_p_wkS__ = zeros(n_w_sum,n_S);
for nS=0:n_S-1;
dvol_S_k_p_wk_ = dvol_S_k_p_wkS__(:,1+nS);
tmp_azimu_b = viewing_azimu_b_S_(1+nS);
tmp_polar_a = viewing_polar_a_S_(1+nS);
tmp_gamma_z = 0.0;
tmp_dvol_R__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
dvol_R_k_p_wk_ = zeros(n_w_sum,1);
for nsource=0:n_source-1;
tmp_delta_ = tmp_dvol_R__*delta_dvol_a_c__(:,1+nsource);
dvol_R_k_p_wk_ = dvol_R_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_(1+0) + k_c_1_wk_*tmp_delta_(1+1)));
end;%for nsource=0:n_source-1;
dvol_R_k_p_wkS__(:,1+nS) = dvol_R_k_p_wk_;
end;%for nS=0:n_S-1;
disp(sprintf(' %% dvol_R_k_p_wkS__ vs dvol_S_k_p_wkS__: %0.16f %%<-- should be <1e-2',fnorm(dvol_R_k_p_wkS__-dvol_S_k_p_wkS__)/fnorm(dvol_R_k_p_wkS__)));
%%%%%%%%;

%%%%%%%%;
% Now construct a new rotated version of the same volume. ;
%%%%%%%%;
RigidRotation_polar_a = +79*pi/97;
RigidRotation_azimu_b = +151*pi/97;
RigidRotation_gamma_z = -131*pi/97;
RigidRotation_euler_ = [-RigidRotation_azimu_b,-RigidRotation_polar_a,+RigidRotation_gamma_z]; %<-- note the reversal in ordering. ;
tmp_polar_a = +RigidRotation_polar_a;
tmp_azimu_b = +RigidRotation_azimu_b;
tmp_gamma_z = -RigidRotation_gamma_z;
RigidRotation_R__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
if (flag_verbose>0); disp(sprintf(' %% RigidRotation_R__ vs euler_to_R(RigidRotation_euler_): %0.16f',fnorm(RigidRotation_R__ - euler_to_R(RigidRotation_euler_)))); end;
%%%%;
RigidRotation_delta_a_c__ = RigidRotation_R__ * delta_a_c__;
RigidRotation_a_k_Y_form_ = zeros(n_lm_sum,1);
for nsource=0:n_source-1;
RigidRotation_a_k_Y_form_ = RigidRotation_a_k_Y_form_ + plane_wave_expansion_1(n_k_p_r,k_p_r_,RigidRotation_delta_a_c__(:,1+nsource),l_max_);
end;%for nsource=0:n_source-1;
RigidRotation_a_k_Y_wign_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,a_k_Y_form_,RigidRotation_euler_);
if (flag_verbose>0); disp(sprintf(' %% RigidRotation_a_k_Y_form_ vs RigidRotation_a_k_Y_wign_: %0.16f',fnorm(RigidRotation_a_k_Y_form_ - RigidRotation_a_k_Y_wign_)/max(1e-12,fnorm(RigidRotation_a_k_Y_form_)))); end;
%%%%;
RigidRotation_delta_dvol_a_c__ = RigidRotation_R__ * delta_dvol_a_c__;
RigidRotation_dvol_a_k_Y_form_ = zeros(n_lm_sum,1);
for nsource=0:n_source-1;
RigidRotation_dvol_a_k_Y_form_ = RigidRotation_dvol_a_k_Y_form_ + plane_wave_expansion_1(n_k_p_r,k_p_r_,RigidRotation_delta_dvol_a_c__(:,1+nsource),l_max_);
end;%for nsource=0:n_source-1;
RigidRotation_dvol_a_k_Y_wign_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,dvol_a_k_Y_form_,RigidRotation_euler_);
if (flag_verbose>0); disp(sprintf(' %% RigidRotation_dvol_a_k_Y_form_ vs RigidRotation_dvol_a_k_Y_wign_: %0.16f',fnorm(RigidRotation_dvol_a_k_Y_form_ - RigidRotation_dvol_a_k_Y_wign_)/max(1e-12,fnorm(RigidRotation_dvol_a_k_Y_form_)))); end;
%%%%%%%%;

%%%%%%%%;
% Now calculate ssnll. ;
% This does not test anisotropic CTF. ;
% Nor does this test anisotropic eta. (indeed, here we set eta to 1). ;
%%%%%%%%;
n_alpha = 3; CTF_alpha_ = [0.1;0.3;0.5];
n_power = 2; eta_power_ = [0.5;0.75]*0; %<-- turn off eta for volumetric calculation. ;
n_CTF = n_alpha*n_power;
n_eta = n_alpha*n_power;
CTF_k_p_r_kC__ = zeros(n_k_p_r,n_CTF);
CTF_k_p_wkC__ = zeros(n_w_sum,n_CTF);
eta_k_p_r_ke__ = zeros(n_k_p_r,n_eta);
eta_k_p_wke__ = zeros(n_w_sum,n_eta);
for nalpha=0:n_alpha-1;
CTF_alpha = CTF_alpha_(1+nalpha);
for npower=0:n_power-1;
eta_power = eta_power_(1+npower);
nCTF = nalpha+npower*n_alpha;
neta = nalpha+npower*n_alpha;
CTF_k_p_r_k_ = reshape(besselj(0,CTF_alpha*k_p_r_),[n_k_p_r,1]).^(1-eta_power);
eta_k_p_r_k_ = reshape(besselj(0,CTF_alpha*k_p_r_),[n_k_p_r,1]).^(0+eta_power);
CTF_k_p_wk_ = (reshape(repmat(reshape(CTF_k_p_r_k_,[1,n_k_p_r]),[n_w_max,1]),[n_w_sum,1]));
CTF_k_p_r_kC__(:,1+nCTF) = CTF_k_p_r_k_;
CTF_k_p_wkC__(:,1+nCTF) = CTF_k_p_wk_;
eta_k_p_wk_ = (reshape(repmat(reshape(eta_k_p_r_k_,[1,n_k_p_r]),[n_w_max,1]),[n_w_sum,1]));
eta_k_p_r_ke__(:,1+neta) = eta_k_p_r_k_;
eta_k_p_wke__(:,1+neta) = eta_k_p_wk_;
end;%for npower=0:n_power-1;
end;%for nalpha=0:n_alpha-1;
%%%%;

%%%%%%%%;
% Set up a test with some 'off-grid' images. ;
%%%%%%%%;
n_M = 5;
index_nCTF_from_nM_ = [1;0;0;1;1];
index_neta_from_nM_ = [1;0;1;0;1];
nS_pole_south = max(efind(abs(viewing_polar_a_S_-1*pi)<1e-12));
nS_pole_north = min(efind(abs(viewing_polar_a_S_-0*pi)<1e-12));
index_nS_from_nM_ = max(nS_pole_south,min(nS_pole_north,2*nS_pole_south + [32;64;128;512;768]));
M_k_p_wkM__ = zeros(n_w_sum,n_M);
fromb_polar_a_M_ = viewing_polar_a_S_(1+index_nS_from_nM_);
fromb_azimu_b_M_ = viewing_azimu_b_S_(1+index_nS_from_nM_);
fromb_gamma_z_M_ = [pi/3;pi/4;pi/5;pi/6;pi/7];
for nM=0:n_M-1;
M_k_p_wkM__(:,1+nM) = rotate_p_to_p_fftw(n_k_p_r,n_w_,n_w_sum,T_k_p_wkS__(:,1+index_nS_from_nM_(1+nM)),+fromb_gamma_z_M_(1+nM));
end;%for nM=0:n_M-1;
%%%%;
rng(6);
euler_polar_a_M_ = 1*pi*(0.25 + 0.5*rand(n_M,1));
euler_azimu_b_M_ = 2*pi*rand(n_M,1);
euler_gamma_z_M_ = 2*pi*rand(n_M,1);
%%%%;
rng(7);
dtau_euler_polar_a_M_ = 2*pi*rand(n_M,1);
dtau_euler_azimu_b_M_ = 2*pi*rand(n_M,1);
dtau_euler_gamma_z_M_ = 2*pi*rand(n_M,1);
dtau_fnorm = fnorm([ dtau_euler_polar_a_M_ , dtau_euler_azimu_b_M_ , dtau_euler_gamma_z_M_ ]);
dtau_euler_polar_a_M_ = dtau_euler_polar_a_M_/max(1e-12,dtau_fnorm);
dtau_euler_azimu_b_M_ = dtau_euler_azimu_b_M_/max(1e-12,dtau_fnorm);
dtau_euler_gamma_z_M_ = dtau_euler_gamma_z_M_/max(1e-12,dtau_fnorm);
dtau = 1e-3;
%%%%;
ssnll_frm = 0.0d0;
for nM=0:n_M-1;
nS = index_nS_from_nM_(1+nM);
T_k_p_wk_ = T_k_p_wkS__(:,1+nS);
nCTF = index_nCTF_from_nM_(1+nM);
CTF_k_p_wk_ = CTF_k_p_wkC__(:,1+nCTF);
neta = index_neta_from_nM_(1+nM);
eta_k_p_wk_ = eta_k_p_wke__(:,1+neta);
tmp_polar_a = +euler_polar_a_M_(1+nM);
tmp_azimu_b = +euler_azimu_b_M_(1+nM);
tmp_gamma_z = -euler_gamma_z_M_(1+nM);
tmp_R_a__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
U_k_p_wk_ = zeros(n_w_sum,1);
for nsource_a=0:n_source-1;
tmp_delta_U_ = tmp_R_a__*delta_a_c__(:,1+nsource_a);
tmp_delta_U = fnorm(tmp_delta_U_(1+[0,1]));
tmp_omega_U = atan2(tmp_delta_U_(1+1),tmp_delta_U_(1+0));
U_k_p_wk_ = U_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_U_(1+0) + k_c_1_wk_*tmp_delta_U_(1+1)));
end;%for nsource_a=0:n_source-1;
tmp_polar_a = +fromb_polar_a_M_(1+nM);
tmp_azimu_b = +fromb_azimu_b_M_(1+nM);
tmp_gamma_z = -fromb_gamma_z_M_(1+nM);
tmp_R_b__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
V_k_p_wk_ = zeros(n_w_sum,1);
for nsource_b=0:n_source-1;
tmp_delta_V_ = tmp_R_b__*delta_b_c__(:,1+nsource_b);
tmp_delta_V = fnorm(tmp_delta_V_(1+[0,1]));
tmp_omega_V = atan2(tmp_delta_V_(1+1),tmp_delta_V_(1+0));
V_k_p_wk_ = V_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_V_(1+0) + k_c_1_wk_*tmp_delta_V_(1+1)));
end;%for nsource_b=0:n_source-1;
if (flag_verbose>0); disp(sprintf(' %% T_k_p_wk_ vs R(V_k_p_wk_): %0.16f',fnorm(T_k_p_wk_ - rotate_p_to_p_fftw(n_k_p_r,n_w_,n_w_sum,V_k_p_wk_,+tmp_gamma_z))/fnorm(T_k_p_wk_))); end;
M_k_p_wk_ = M_k_p_wkM__(:,1+nM);
if (flag_verbose>0); disp(sprintf(' %% M_k_p_wk_ vs V_k_p_wk_: %0.16f',fnorm(M_k_p_wk_ - V_k_p_wk_)/fnorm(M_k_p_wk_))); end;
ssnll_frm = ssnll_frm + 0.5*sum(abs(U_k_p_wk_.*CTF_k_p_wk_ - V_k_p_wk_).^2.*eta_k_p_wk_.*weight_2d_wk_,'all')*(4*pi^2);
end;%for nM=0:n_M-1;
%%%%%%%%;
% Calculate derivative using ssnll_from_plane_wave_expansion_1. ;
%%%%%%%%;
n_source_a = n_source; v_source_a_ = ones(n_source_a,1);
n_source_b = n_source; v_source_b_ = ones(n_source_b,1);
n_source_dvol_a = n_source; v_source_dvol_a_ = ones(n_source_dvol_a,1);
viewing_gamma_z_S_ = zeros(n_S,1);
parameter_ssnll = struct('type','parameter');
[ ...
 ~ ...
,ssnll_pw1_M_ ...
,ssnll_pw1 ...
,S_k_p_pw1_wkS__ ...
,dvol_ssnll_pw1_M_ ...
,dvol_ssnll_pw1 ...
,dvol_S_k_p_pw1_wkS__ ...
,dvol_dvol_ssnll_pw1 ...
,dtau_ssnll_pw1_M3__ ...
,dtau_ssnll_pw1 ...
,dtau_S_k_p_pw1_wkS3___ ...
,dtau_dvol_ssnll_pw1_M3__ ...
,dtau_dvol_ssnll_pw1 ...
,dtau_dvol_S_k_p_pw1_wkS3___ ...
,dtau_dtau_ssnll_pw1_M33___ ...
,dtau_dtau_ssnll_pw1 ...
,dtau_dtau_S_k_p_pw1_wkS33____ ...
] = ...
ssnll_from_plane_wave_expansion_1( ...
 parameter_ssnll ...
,n_source_a ...
,v_source_a_ ...
,delta_a_c__ ...
,n_source_b ...
,v_source_b_ ...
,delta_b_c__ ...
,n_source_dvol_a ...
,v_source_dvol_a_ ...
,delta_dvol_a_c__ ...
,n_k_p_r ...
,k_p_r_ ...
,n_w_max ...
,weight_2d_wk_ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,n_M ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
,fromb_polar_a_M_ ...
,fromb_azimu_b_M_ ...
,fromb_gamma_z_M_ ...
,n_S ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_gamma_z_S_ ...
);
if (flag_verbose>0); disp(sprintf(' %% ssnll_frm vs ssnll_pw1: %0.16f',fnorm(ssnll_frm - ssnll_pw1)/max(1e-12,fnorm(ssnll_frm)))); end;
%%%%%%%%;
% Calculate derivative using ssnll_from_a_k_Y_12. ;
%%%%%%%%;
[ ...
 ~ ...
,ssnll_q2d_M_ ...
,ssnll_q2d ...
,S_k_p_q2d_wkS__ ...
,dvol_ssnll_q2d_M_ ...
,dvol_ssnll_q2d ...
,dvol_S_k_p_q2d_wkS__ ...
,dvol_dvol_ssnll_q2d ...
,dtau_ssnll_q2d_M3__ ...
,dtau_ssnll_q2d ...
,dtau_S_k_p_q2d_wkS3___ ...
,dtau_dvol_ssnll_q2d_M3__ ...
,dtau_dvol_ssnll_q2d ...
,dtau_dvol_S_k_p_q2d_wkS3___ ...
,dtau_dtau_ssnll_q2d_M33___ ...
,dtau_dtau_ssnll_q2d ...
,dtau_dtau_S_k_p_q2d_wkS33____ ...
,V_lmm___ ...
,L_lm__ ...
,d0W_betazeta_mlma____ ...
,d1W_betazeta_mlma____ ...
,d2W_betazeta_mlma____ ...
] = ...
ssnll_from_a_k_Y_12( ...
 parameter_ssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_form_ ...
,dvol_a_k_Y_form_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,dtau_euler_polar_a_M_ ...
,dtau_euler_azimu_b_M_ ...
,dtau_euler_gamma_z_M_ ...
);

%%%%%%%%;
% tabulate results. ;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %%%%%%%%%%%%%%%% : ')); end;
if (flag_verbose>0); disp(sprintf(' %% off-grid test: ')); end;
if (flag_verbose>0); disp(sprintf(' %%%%%%%%%%%%%%%% : ')); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_frm vs ssnll_pw1: %0.16f',fnorm(ssnll_frm - ssnll_pw1)/max(1e-12,fnorm(ssnll_frm)))); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_frm vs ssnll_q2d: %0.16f',fnorm(ssnll_frm - ssnll_q2d)/max(1e-12,fnorm(ssnll_frm)))); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_pw1_M_ vs ssnll_q2d_M_: %0.16f',fnorm(ssnll_pw1_M_ - ssnll_q2d_M_)/max(1e-12,fnorm(ssnll_pw1_M_)))); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_pw1 vs ssnll_q2d: %0.16f',fnorm(ssnll_pw1 - ssnll_q2d)/max(1e-12,fnorm(ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% S_k_p_pw1_wkS__ vs S_k_p_q2d_wkS__: %0.16f',fnorm(S_k_p_pw1_wkS__ - S_k_p_q2d_wkS__)/max(1e-12,fnorm(S_k_p_pw1_wkS__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_pw1_M_ vs dvol_ssnll_q2d_M_: %0.16f',fnorm(dvol_ssnll_pw1_M_ - dvol_ssnll_q2d_M_)/max(1e-12,fnorm(dvol_ssnll_pw1_M_)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_pw1 vs dvol_ssnll_q2d: %0.16f',fnorm(dvol_ssnll_pw1 - dvol_ssnll_q2d)/max(1e-12,fnorm(dvol_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_S_k_p_pw1_wkS__ vs dvol_S_k_p_q2d_wkS__: %0.16f',fnorm(dvol_S_k_p_pw1_wkS__ - dvol_S_k_p_q2d_wkS__)/max(1e-12,fnorm(dvol_S_k_p_pw1_wkS__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_dvol_ssnll_pw1 vs dvol_dvol_ssnll_q2d: %0.16f',fnorm(dvol_dvol_ssnll_pw1 - dvol_dvol_ssnll_q2d)/max(1e-12,fnorm(dvol_dvol_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_ssnll_pw1_M3__ vs dtau_ssnll_q2d_M3__: %0.16f',fnorm(dtau_ssnll_pw1_M3__ - dtau_ssnll_q2d_M3__)/max(1e-12,fnorm(dtau_ssnll_pw1_M3__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_ssnll_pw1 vs dtau_ssnll_q2d: %0.16f',fnorm(dtau_ssnll_pw1 - dtau_ssnll_q2d)/max(1e-12,fnorm(dtau_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_S_k_p_pw1_wkS3___ vs dtau_S_k_p_q2d_wkS3___: %0.16f',fnorm(dtau_S_k_p_pw1_wkS3___ - dtau_S_k_p_q2d_wkS3___)/max(1e-12,fnorm(dtau_S_k_p_pw1_wkS3___)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dvol_ssnll_pw1_M3__ vs dtau_dvol_ssnll_q2d_M3__: %0.16f',fnorm(dtau_dvol_ssnll_pw1_M3__ - dtau_dvol_ssnll_q2d_M3__)/max(1e-12,fnorm(dtau_dvol_ssnll_pw1_M3__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dvol_ssnll_pw1 vs dtau_dvol_ssnll_q2d: %0.16f',fnorm(dtau_dvol_ssnll_pw1 - dtau_dvol_ssnll_q2d)/max(1e-12,fnorm(dtau_dvol_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dvol_S_k_p_pw1_wkS3___ vs dtau_dvol_S_k_p_q2d_wkS3___: %0.16f',fnorm(dtau_dvol_S_k_p_pw1_wkS3___ - dtau_dvol_S_k_p_q2d_wkS3___)/max(1e-12,fnorm(dtau_dvol_S_k_p_pw1_wkS3___)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_ssnll_pw1_M33___ vs dtau_dtau_ssnll_q2d_M33___: %0.16f',fnorm(dtau_dtau_ssnll_pw1_M33___ - dtau_dtau_ssnll_q2d_M33___)/max(1e-12,fnorm(dtau_dtau_ssnll_pw1_M33___)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_ssnll_pw1 vs dtau_dtau_ssnll_q2d: %0.16f',fnorm(dtau_dtau_ssnll_pw1 - dtau_dtau_ssnll_q2d)/max(1e-12,fnorm(dtau_dtau_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_S_k_p_pw1_wkS33____ vs dtau_dtau_S_k_p_q2d_wkS33____: %0.16f',fnorm(dtau_dtau_S_k_p_pw1_wkS33____ - dtau_dtau_S_k_p_q2d_wkS33____)/max(1e-12,fnorm(dtau_dtau_S_k_p_pw1_wkS33____)))); end;
%%%%%%%%;

%%%%%%%%;
% Now calculate ssnll using the rotated volume and the (inversely) rotated euler angles. ;
%%%%%%%%;
nnp__ = [-1 0 0 ; 0 -1 0 ; 0 0 +1];
RigidRotation_euler_to_euler_ = @(euler_) periodize_R(R_to_euler_0(euler_to_R(euler_*nnp__)*inv(RigidRotation_R__))*nnp__);
%%%%%%%%;
RigidRotation_viewing_polar_a_S_ = zeros(n_S,1);
RigidRotation_viewing_azimu_b_S_ = zeros(n_S,1);
RigidRotation_viewing_gamma_z_S_ = zeros(n_S,1);
for nS=0:n_S-1;
tmp_viewing_ = [viewing_azimu_b_S_(1+nS),viewing_polar_a_S_(1+nS),viewing_gamma_z_S_(1+nS)];
tmp_RigidRotation_viewing_ = RigidRotation_euler_to_euler_(tmp_viewing_);
RigidRotation_viewing_azimu_b_S_(1+nS) = tmp_RigidRotation_viewing_(1+0);
RigidRotation_viewing_polar_a_S_(1+nS) = tmp_RigidRotation_viewing_(1+1);
RigidRotation_viewing_gamma_z_S_(1+nS) = tmp_RigidRotation_viewing_(1+2);
end;%for nS=0:n_S-1;
%%%%;
RigidRotation_euler_polar_a_M_ = zeros(n_M,1);
RigidRotation_euler_azimu_b_M_ = zeros(n_M,1);
RigidRotation_euler_gamma_z_M_ = zeros(n_M,1);
for nM=0:n_M-1;
tmp_euler_ = [euler_azimu_b_M_(1+nM),euler_polar_a_M_(1+nM),euler_gamma_z_M_(1+nM)];
tmp_RigidRotation_euler_ = RigidRotation_euler_to_euler_(tmp_euler_);
RigidRotation_euler_azimu_b_M_(1+nM) = tmp_RigidRotation_euler_(1+0);
RigidRotation_euler_polar_a_M_(1+nM) = tmp_RigidRotation_euler_(1+1);
RigidRotation_euler_gamma_z_M_(1+nM) = tmp_RigidRotation_euler_(1+2);
end;%for nM=0:n_M-1;
%%%%;
RigidRotation_dtau_euler_polar_a_M_ = zeros(n_M,1);
RigidRotation_dtau_euler_azimu_b_M_ = zeros(n_M,1);
RigidRotation_dtau_euler_gamma_z_M_ = zeros(n_M,1);
for nM=0:n_M-1;
tmp_euler_ = [euler_azimu_b_M_(1+nM),euler_polar_a_M_(1+nM),euler_gamma_z_M_(1+nM)];
tmp_dtau_euler_ = [dtau_euler_azimu_b_M_(1+nM),dtau_euler_polar_a_M_(1+nM),dtau_euler_gamma_z_M_(1+nM)];
tmp_RigidRotation_euler_pos_ = RigidRotation_euler_to_euler_(tmp_euler_ + 1.0*dtau*tmp_dtau_euler_);
tmp_RigidRotation_euler_neg_ = RigidRotation_euler_to_euler_(tmp_euler_ - 1.0*dtau*tmp_dtau_euler_);
tmp_RigidRotation_dtau_euler_ = (tmp_RigidRotation_euler_pos_ - tmp_RigidRotation_euler_neg_)/max(1e-12,2*dtau);
RigidRotation_dtau_euler_azimu_b_M_(1+nM) = tmp_RigidRotation_dtau_euler_(1+0);
RigidRotation_dtau_euler_polar_a_M_(1+nM) = tmp_RigidRotation_dtau_euler_(1+1);
RigidRotation_dtau_euler_gamma_z_M_(1+nM) = tmp_RigidRotation_dtau_euler_(1+2);
end;%for nM=0:n_M-1;
%%%%%%%%;

%%%%%%%%;
RigidRotation_ssnll_frm = 0.0d0;
for nM=0:n_M-1;
nCTF = index_nCTF_from_nM_(1+nM);
CTF_k_p_wk_ = CTF_k_p_wkC__(:,1+nCTF);
neta = index_neta_from_nM_(1+nM);
eta_k_p_wk_ = eta_k_p_wke__(:,1+neta);
tmp_polar_a = +euler_polar_a_M_(1+nM);
tmp_azimu_b = +euler_azimu_b_M_(1+nM);
tmp_gamma_z = -euler_gamma_z_M_(1+nM);
tmp_R_a__ = euler_to_R([-tmp_azimu_b,-tmp_polar_a,-tmp_gamma_z]);
tmp_RigidRotation_polar_a = +RigidRotation_euler_polar_a_M_(1+nM);
tmp_RigidRotation_azimu_b = +RigidRotation_euler_azimu_b_M_(1+nM);
tmp_RigidRotation_gamma_z = -RigidRotation_euler_gamma_z_M_(1+nM);
tmp_RigidRotation_R_a__ = euler_to_R([-tmp_RigidRotation_azimu_b,-tmp_RigidRotation_polar_a,-tmp_RigidRotation_gamma_z]);
U_k_p_wk_ = zeros(n_w_sum,1);
RigidRotation_U_k_p_wk_ = zeros(n_w_sum,1);
for nsource_a=0:n_source-1;
tmp_delta_U_ = tmp_R_a__*delta_a_c__(:,1+nsource_a);
tmp_delta_U = fnorm(tmp_delta_U_(1+[0,1]));
tmp_omega_U = atan2(tmp_delta_U_(1+1),tmp_delta_U_(1+0));
U_k_p_wk_ = U_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_U_(1+0) + k_c_1_wk_*tmp_delta_U_(1+1)));
tmp_RigidRotation_delta_U_ = tmp_RigidRotation_R_a__*RigidRotation_delta_a_c__(:,1+nsource_a);
tmp_RigidRotation_delta_U = fnorm(tmp_RigidRotation_delta_U_(1+[0,1]));
tmp_RigidRotation_omega_U = atan2(tmp_RigidRotation_delta_U_(1+1),tmp_RigidRotation_delta_U_(1+0));
RigidRotation_U_k_p_wk_ = RigidRotation_U_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_RigidRotation_delta_U_(1+0) + k_c_1_wk_*tmp_RigidRotation_delta_U_(1+1)));
end;%for nsource_a=0:n_source-1;
if (flag_verbose>0); disp(sprintf(' %% U_k_p_wk_ vs RigidRotation_U_k_p_wk_: %0.16f',fnorm(U_k_p_wk_ - RigidRotation_U_k_p_wk_)/max(1e-12,fnorm(U_k_p_wk_)))); end;
tmp_polar_a = +fromb_polar_a_M_(1+nM);
tmp_azimu_b = +fromb_azimu_b_M_(1+nM);
tmp_gamma_z = -fromb_gamma_z_M_(1+nM);
tmp_R_b__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
V_k_p_wk_ = zeros(n_w_sum,1);
for nsource_b=0:n_source-1;
tmp_delta_V_ = tmp_R_b__*delta_b_c__(:,1+nsource_b);
tmp_delta_V = fnorm(tmp_delta_V_(1+[0,1]));
tmp_omega_V = atan2(tmp_delta_V_(1+1),tmp_delta_V_(1+0));
V_k_p_wk_ = V_k_p_wk_ + exp(+i*2*pi*(k_c_0_wk_*tmp_delta_V_(1+0) + k_c_1_wk_*tmp_delta_V_(1+1)));
end;%for nsource_b=0:n_source-1;
RigidRotation_ssnll_frm = RigidRotation_ssnll_frm + 0.5*sum(abs(RigidRotation_U_k_p_wk_.*CTF_k_p_wk_ - V_k_p_wk_).^2.*eta_k_p_wk_.*weight_2d_wk_,'all')*(4*pi^2);
end;%for nM=0:n_M-1;
if (flag_verbose>0); disp(sprintf(' %% ssnll_frm vs RigidRotation_ssnll_frm: %0.16f',fnorm(ssnll_frm - RigidRotation_ssnll_frm)/max(1e-12,fnorm(ssnll_frm)))); end;
%%%%%%%%;

%%%%%%%%;
n_source_a = n_source; v_source_a_ = ones(n_source_a,1);
n_source_b = n_source; v_source_b_ = ones(n_source_b,1);
n_source_dvol_a = n_source; v_source_dvol_a_ = ones(n_source_dvol_a,1);
%%%%;
parameter_ssnll = struct('type','parameter');
[ ...
 ~ ...
,RigidRotation_ssnll_pw1_M_ ...
,RigidRotation_ssnll_pw1 ...
,RigidRotation_S_k_p_pw1_wkS__ ...
,RigidRotation_dvol_ssnll_pw1_M_ ...
,RigidRotation_dvol_ssnll_pw1 ...
,RigidRotation_dvol_S_k_p_pw1_wkS__ ...
,RigidRotation_dvol_dvol_ssnll_pw1 ...
,RigidRotation_dtau_ssnll_pw1_M3__ ...
,RigidRotation_dtau_ssnll_pw1 ...
,RigidRotation_dtau_S_k_p_pw1_wkS3___ ...
,RigidRotation_dtau_dvol_ssnll_pw1_M3__ ...
,RigidRotation_dtau_dvol_ssnll_pw1 ...
,RigidRotation_dtau_dvol_S_k_p_pw1_wkS3___ ...
,RigidRotation_dtau_dtau_ssnll_pw1_M33___ ...
,RigidRotation_dtau_dtau_ssnll_pw1 ...
,RigidRotation_dtau_dtau_S_k_p_pw1_wkS33____ ...
] = ...
ssnll_from_plane_wave_expansion_1( ...
 parameter_ssnll ...
,n_source_a ...
,v_source_a_ ...
,RigidRotation_delta_a_c__ ...
,n_source_b ...
,v_source_b_ ...
,delta_b_c__ ...
,n_source_dvol_a ...
,v_source_dvol_a_ ...
,RigidRotation_delta_dvol_a_c__ ...
,n_k_p_r ...
,k_p_r_ ...
,n_w_max ...
,weight_2d_wk_ ...
,n_CTF ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,n_eta ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,n_M ...
,RigidRotation_euler_polar_a_M_ ...
,RigidRotation_euler_azimu_b_M_ ...
,RigidRotation_euler_gamma_z_M_ ...
,RigidRotation_dtau_euler_polar_a_M_ ...
,RigidRotation_dtau_euler_azimu_b_M_ ...
,RigidRotation_dtau_euler_gamma_z_M_ ...
,fromb_polar_a_M_ ...
,fromb_azimu_b_M_ ...
,fromb_gamma_z_M_ ...
,n_S ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_gamma_z_S_ ...
);
%%%%%%%%;
% tabulate results. ;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %%%%%%%%%%%%%%%% : ')); end;
if (flag_verbose>0); disp(sprintf(' %% off-grid test (applied to rotated volume): ')); end;
if (flag_verbose>0); disp(sprintf(' %%%%%%%%%%%%%%%% : ')); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_frm vs RigidRotation_ssnll_pw1: %0.16f',fnorm(ssnll_frm - RigidRotation_ssnll_pw1)/max(1e-12,fnorm(ssnll_frm)))); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_pw1_M_ vs RigidRotation_ssnll_pw1_M_: %0.16f',fnorm(ssnll_pw1_M_ - RigidRotation_ssnll_pw1_M_)/max(1e-12,fnorm(ssnll_pw1_M_)))); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_pw1 vs RigidRotation_ssnll_pw1: %0.16f',fnorm(ssnll_pw1 - RigidRotation_ssnll_pw1)/max(1e-12,fnorm(ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% S_k_p_pw1_wkS__ vs RigidRotation_S_k_p_pw1_wkS__: %0.16f %%<-- not matched',fnorm(S_k_p_pw1_wkS__ - RigidRotation_S_k_p_pw1_wkS__)/max(1e-12,fnorm(S_k_p_pw1_wkS__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_pw1_M_ vs RigidRotation_dvol_ssnll_pw1_M_: %0.16f',fnorm(dvol_ssnll_pw1_M_ - RigidRotation_dvol_ssnll_pw1_M_)/max(1e-12,fnorm(dvol_ssnll_pw1_M_)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_pw1 vs RigidRotation_dvol_ssnll_pw1: %0.16f',fnorm(dvol_ssnll_pw1 - RigidRotation_dvol_ssnll_pw1)/max(1e-12,fnorm(dvol_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_S_k_p_pw1_wkS__ vs RigidRotation_dvol_S_k_p_pw1_wkS__: %0.16f %%<-- not matched',fnorm(dvol_S_k_p_pw1_wkS__ - RigidRotation_dvol_S_k_p_pw1_wkS__)/max(1e-12,fnorm(dvol_S_k_p_pw1_wkS__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_dvol_ssnll_pw1 vs RigidRotation_dvol_dvol_ssnll_pw1: %0.16f',fnorm(dvol_dvol_ssnll_pw1 - RigidRotation_dvol_dvol_ssnll_pw1)/max(1e-12,fnorm(dvol_dvol_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_ssnll_pw1_M3__ vs RigidRotation_dtau_ssnll_pw1_M3__: %0.16f %%<-- not matched',fnorm(dtau_ssnll_pw1_M3__ - RigidRotation_dtau_ssnll_pw1_M3__)/max(1e-12,fnorm(dtau_ssnll_pw1_M3__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_ssnll_pw1 vs RigidRotation_dtau_ssnll_pw1: %0.16f %%<-- should be <1e-4',fnorm(dtau_ssnll_pw1 - RigidRotation_dtau_ssnll_pw1)/max(1e-12,fnorm(dtau_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_S_k_p_pw1_wkS3___ vs RigidRotation_dtau_S_k_p_pw1_wkS3___: %0.16f %%<-- not matched',fnorm(dtau_S_k_p_pw1_wkS3___ - RigidRotation_dtau_S_k_p_pw1_wkS3___)/max(1e-12,fnorm(dtau_S_k_p_pw1_wkS3___)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dvol_ssnll_pw1_M3__ vs RigidRotation_dtau_dvol_ssnll_pw1_M3__: %0.16f %%<-- not matched',fnorm(dtau_dvol_ssnll_pw1_M3__ - RigidRotation_dtau_dvol_ssnll_pw1_M3__)/max(1e-12,fnorm(dtau_dvol_ssnll_pw1_M3__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dvol_ssnll_pw1 vs RigidRotation_dtau_dvol_ssnll_pw1: %0.16f %%<-- should be <1e-4',fnorm(dtau_dvol_ssnll_pw1 - RigidRotation_dtau_dvol_ssnll_pw1)/max(1e-12,fnorm(dtau_dvol_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dvol_S_k_p_pw1_wkS3___ vs RigidRotation_dtau_dvol_S_k_p_pw1_wkS3___: %0.16f %%<-- not matched',fnorm(dtau_dvol_S_k_p_pw1_wkS3___ - RigidRotation_dtau_dvol_S_k_p_pw1_wkS3___)/max(1e-12,fnorm(dtau_dvol_S_k_p_pw1_wkS3___)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_ssnll_pw1_M33___ vs RigidRotation_dtau_dtau_ssnll_pw1_M33___: %0.16f %%<-- not matched',fnorm(dtau_dtau_ssnll_pw1_M33___ - RigidRotation_dtau_dtau_ssnll_pw1_M33___)/max(1e-12,fnorm(dtau_dtau_ssnll_pw1_M33___)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_ssnll_pw1 vs RigidRotation_dtau_dtau_ssnll_pw1: %0.16f %%<-- not matched',fnorm(dtau_dtau_ssnll_pw1 - RigidRotation_dtau_dtau_ssnll_pw1)/max(1e-12,fnorm(dtau_dtau_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_S_k_p_pw1_wkS33____ vs RigidRotation_dtau_dtau_S_k_p_pw1_wkS33____: %0.16f %%<-- not matched',fnorm(dtau_dtau_S_k_p_pw1_wkS33____ - RigidRotation_dtau_dtau_S_k_p_pw1_wkS33____)/max(1e-12,fnorm(dtau_dtau_S_k_p_pw1_wkS33____)))); end;
%%%%%%%%;

%%%%%%%%;
% recalculate using ssnll_from_a_k_Y_12. ;
%%%%%%%%;
parameter_ssnll = struct('type','parameter');
[ ...
 ~ ...
,RigidRotation_ssnll_q2d_M_ ...
,RigidRotation_ssnll_q2d ...
,RigidRotation_S_k_p_q2d_wkS__ ...
,RigidRotation_dvol_ssnll_q2d_M_ ...
,RigidRotation_dvol_ssnll_q2d ...
,RigidRotation_dvol_S_k_p_q2d_wkS__ ...
,RigidRotation_dvol_dvol_ssnll_q2d ...
,RigidRotation_dtau_ssnll_q2d_M3__ ...
,RigidRotation_dtau_ssnll_q2d ...
,RigidRotation_dtau_S_k_p_q2d_wkS3___ ...
,RigidRotation_dtau_dvol_ssnll_q2d_M3__ ...
,RigidRotation_dtau_dvol_ssnll_q2d ...
,RigidRotation_dtau_dvol_S_k_p_q2d_wkS3___ ...
,RigidRotation_dtau_dtau_ssnll_q2d_M33___ ...
,RigidRotation_dtau_dtau_ssnll_q2d ...
,RigidRotation_dtau_dtau_S_k_p_q2d_wkS33____ ...
] = ...
ssnll_from_a_k_Y_12( ...
 parameter_ssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,RigidRotation_a_k_Y_form_ ...
,RigidRotation_dvol_a_k_Y_form_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,index_neta_from_nM_ ...
,eta_k_p_wke__ ...
,RigidRotation_euler_polar_a_M_ ...
,RigidRotation_euler_azimu_b_M_ ...
,RigidRotation_euler_gamma_z_M_ ...
,RigidRotation_dtau_euler_polar_a_M_ ...
,RigidRotation_dtau_euler_azimu_b_M_ ...
,RigidRotation_dtau_euler_gamma_z_M_ ...
);
%%%%%%%%;
% tabulate results. ;
%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %%%%%%%%%%%%%%%% : ')); end;
if (flag_verbose>0); disp(sprintf(' %% off-grid test (applied to rotated volume): ')); end;
if (flag_verbose>0); disp(sprintf(' %%%%%%%%%%%%%%%% : ')); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_frm vs RigidRotation_ssnll_q2d: %0.16f',fnorm(ssnll_frm - RigidRotation_ssnll_q2d)/max(1e-12,fnorm(ssnll_frm)))); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_pw1_M_ vs RigidRotation_ssnll_q2d_M_: %0.16f',fnorm(ssnll_pw1_M_ - RigidRotation_ssnll_q2d_M_)/max(1e-12,fnorm(ssnll_pw1_M_)))); end;
if (flag_verbose>0); disp(sprintf(' %% ssnll_pw1 vs RigidRotation_ssnll_q2d: %0.16f',fnorm(ssnll_pw1 - RigidRotation_ssnll_q2d)/max(1e-12,fnorm(ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% S_k_p_pw1_wkS__ vs RigidRotation_S_k_p_q2d_wkS__: %0.16f %%<-- not matched',fnorm(S_k_p_pw1_wkS__ - RigidRotation_S_k_p_q2d_wkS__)/max(1e-12,fnorm(S_k_p_pw1_wkS__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_pw1_M_ vs RigidRotation_dvol_ssnll_q2d_M_: %0.16f',fnorm(dvol_ssnll_pw1_M_ - RigidRotation_dvol_ssnll_q2d_M_)/max(1e-12,fnorm(dvol_ssnll_pw1_M_)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_ssnll_pw1 vs RigidRotation_dvol_ssnll_q2d: %0.16f',fnorm(dvol_ssnll_pw1 - RigidRotation_dvol_ssnll_q2d)/max(1e-12,fnorm(dvol_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_S_k_p_pw1_wkS__ vs RigidRotation_dvol_S_k_p_q2d_wkS__: %0.16f %%<-- not matched',fnorm(dvol_S_k_p_pw1_wkS__ - RigidRotation_dvol_S_k_p_q2d_wkS__)/max(1e-12,fnorm(dvol_S_k_p_pw1_wkS__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dvol_dvol_ssnll_pw1 vs RigidRotation_dvol_dvol_ssnll_q2d: %0.16f',fnorm(dvol_dvol_ssnll_pw1 - RigidRotation_dvol_dvol_ssnll_q2d)/max(1e-12,fnorm(dvol_dvol_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_ssnll_pw1_M3__ vs RigidRotation_dtau_ssnll_q2d_M3__: %0.16f %%<-- not matched',fnorm(dtau_ssnll_pw1_M3__ - RigidRotation_dtau_ssnll_q2d_M3__)/max(1e-12,fnorm(dtau_ssnll_pw1_M3__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_ssnll_pw1 vs RigidRotation_dtau_ssnll_q2d: %0.16f %%<-- should be <1e-2',fnorm(dtau_ssnll_pw1 - RigidRotation_dtau_ssnll_q2d)/max(1e-12,fnorm(dtau_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_S_k_p_pw1_wkS3___ vs RigidRotation_dtau_S_k_p_q2d_wkS3___: %0.16f %%<-- not matched',fnorm(dtau_S_k_p_pw1_wkS3___ - RigidRotation_dtau_S_k_p_q2d_wkS3___)/max(1e-12,fnorm(dtau_S_k_p_pw1_wkS3___)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dvol_ssnll_pw1_M3__ vs RigidRotation_dtau_dvol_ssnll_q2d_M3__: %0.16f %%<-- not matched',fnorm(dtau_dvol_ssnll_pw1_M3__ - RigidRotation_dtau_dvol_ssnll_q2d_M3__)/max(1e-12,fnorm(dtau_dvol_ssnll_pw1_M3__)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dvol_ssnll_pw1 vs RigidRotation_dtau_dvol_ssnll_q2d: %0.16f %%<-- should be <1e-2',fnorm(dtau_dvol_ssnll_pw1 - RigidRotation_dtau_dvol_ssnll_q2d)/max(1e-12,fnorm(dtau_dvol_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dvol_S_k_p_pw1_wkS3___ vs RigidRotation_dtau_dvol_S_k_p_q2d_wkS3___: %0.16f %%<-- not matched',fnorm(dtau_dvol_S_k_p_pw1_wkS3___ - RigidRotation_dtau_dvol_S_k_p_q2d_wkS3___)/max(1e-12,fnorm(dtau_dvol_S_k_p_pw1_wkS3___)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_ssnll_pw1_M33___ vs RigidRotation_dtau_dtau_ssnll_q2d_M33___: %0.16f %%<-- not matched',fnorm(dtau_dtau_ssnll_pw1_M33___ - RigidRotation_dtau_dtau_ssnll_q2d_M33___)/max(1e-12,fnorm(dtau_dtau_ssnll_pw1_M33___)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_ssnll_pw1 vs RigidRotation_dtau_dtau_ssnll_q2d: %0.16f %%<-- not matched',fnorm(dtau_dtau_ssnll_pw1 - RigidRotation_dtau_dtau_ssnll_q2d)/max(1e-12,fnorm(dtau_dtau_ssnll_pw1)))); end;
if (flag_verbose>0); disp(sprintf(' %% dtau_dtau_S_k_p_pw1_wkS33____ vs RigidRotation_dtau_dtau_S_k_p_q2d_wkS33____: %0.16f %%<-- not matched',fnorm(dtau_dtau_S_k_p_pw1_wkS33____ - RigidRotation_dtau_dtau_S_k_p_q2d_wkS33____)/max(1e-12,fnorm(dtau_dtau_S_k_p_pw1_wkS33____)))); end;
%%%%%%%%;

%%%%%%%%;
% Note that, for this application, our convention is: ;
% a = +polar_a ;
% b = +azimu_b ;
% c = -gamma_z ;
% R__ = Rz(-c)*Ry(-a)*Rz(-b);
% [ +cc*ca*cb - sc*sb , +cc*ca*sb +sc*cb , -cc*sa ];
% [ -sc*ca*cb - cc*sb , -sc*ca*sb +cc*cb , +sc*sa ];
% [ +sa*cb            , +sa*sb           , +ca    ];
%%%%%%%%;
a = +RigidRotation_polar_a; ca = cos(a); sa = sin(a);
b = +RigidRotation_azimu_b; cb = cos(b); sb = sin(b);
c = -RigidRotation_gamma_z; cc = cos(c); sc = sin(c);
tmp_R__ = ... 
[ ...
;[ +cc*ca*cb - sc*sb , +cc*ca*sb + sc*cb , -cc*sa ] ...
;[ -sc*ca*cb - cc*sb , -sc*ca*sb + cc*cb , +sc*sa ] ...
;[ +sa*cb            , +sa*sb            , +ca    ] ...
];
if (flag_verbose>0); disp(sprintf(' %% RigidRotation_R__ vs tmp_R__: %0.16f',fnorm(RigidRotation_R__ - tmp_R__))); end;
if (flag_verbose>0); disp(sprintf(' %% a vs acos(tmp_R__(3,3)): %0.16f',abs(periodize(a-acos(tmp_R__(3,3)),-pi,+pi)))); end;
if (flag_verbose>0); disp(sprintf(' %% b vs atan2(tmp_R__(3,2),+tmp_R__(3,1)): %0.16f',abs(periodize(b-atan2(tmp_R__(3,2),+tmp_R__(3,1)),-pi,+pi)))); end;
if (flag_verbose>0); disp(sprintf(' %% c vs atan2(tmp_R__(2,3),-tmp_R__(1,3)): %0.16f',abs(periodize(c-atan2(tmp_R__(2,3),-tmp_R__(1,3)),-pi,+pi)))); end;
%%%%%%%%;
% If we define euler_ as [+azimu_b,+polar_a,+gamma_z], then: ;
%%%%%%%%;
nnp__ = [-1 0 0 ; 0 -1 0 ; 0 0 +1];
RigidRotation_euler_to_euler_ = @(euler_) (R_to_euler_0(euler_to_R(euler_*nnp__)*inv(RigidRotation_R__)))*nnp__;
nM = 0;
tmp_euler_ = [euler_azimu_b_M_(1+nM),euler_polar_a_M_(1+nM),euler_gamma_z_M_(1+nM)];
tmp_polar_a = +euler_polar_a_M_(1+nM);
tmp_azimu_b = +euler_azimu_b_M_(1+nM);
tmp_gamma_z = -euler_gamma_z_M_(1+nM);
tmp_R__ = euler_to_R([-tmp_azimu_b,-tmp_polar_a,-tmp_gamma_z]);
tmp_RigidRotation_euler_ = R_to_euler_0(tmp_R__*inv(RigidRotation_R__));
tmp_RigidRotation_azimu_b = -tmp_RigidRotation_euler_(1+0);
tmp_RigidRotation_polar_a = -tmp_RigidRotation_euler_(1+1);
tmp_RigidRotation_gamma_z = -tmp_RigidRotation_euler_(1+2);
RigidRotation_euler_polar_a_M_(1+nM) = +tmp_RigidRotation_polar_a;
RigidRotation_euler_azimu_b_M_(1+nM) = +tmp_RigidRotation_azimu_b;
RigidRotation_euler_gamma_z_M_(1+nM) = -tmp_RigidRotation_gamma_z;
tmp_RigidRotation_euler_ = [RigidRotation_euler_azimu_b_M_(1+nM),RigidRotation_euler_polar_a_M_(1+nM),RigidRotation_euler_gamma_z_M_(1+nM)];
RigidRotation_euler_to_euler_(tmp_euler_);
if (flag_verbose>0); disp(sprintf(' %% tmp_RigidRotation_euler_ vs RigidRotation_euler_to_euler_(tmp_euler_): %0.16f',fnorm(tmp_RigidRotation_euler_ - RigidRotation_euler_to_euler_(tmp_euler_)))); end;
tmp_euler_ = [euler_azimu_b_M_(1+nM),euler_polar_a_M_(1+nM),euler_gamma_z_M_(1+nM)];
%%%%%%%%;

%%%%;
RigidRotation_euler_polar_a_M_ = zeros(n_M,1);
RigidRotation_euler_azimu_b_M_ = zeros(n_M,1);
RigidRotation_euler_gamma_z_M_ = zeros(n_M,1);
for nM=0:n_M-1;
tmp_euler_ = [euler_azimu_b_M_(1+nM),euler_polar_a_M_(1+nM),euler_gamma_z_M_(1+nM)];
tmp_RigidRotation_euler_ = RigidRotation_euler_to_euler_(tmp_euler_);
RigidRotation_euler_azimu_b_M_(1+nM) = tmp_RigidRotation_euler_(1+0);
RigidRotation_euler_polar_a_M_(1+nM) = tmp_RigidRotation_euler_(1+1);
RigidRotation_euler_gamma_z_M_(1+nM) = tmp_RigidRotation_euler_(1+2);
end;%for nM=0:n_M-1;
%%%%;
RigidRotation_dtau_euler_polar_a_M_ = zeros(n_M,1);
RigidRotation_dtau_euler_azimu_b_M_ = zeros(n_M,1);
RigidRotation_dtau_euler_gamma_z_M_ = zeros(n_M,1);
for nM=0:n_M-1;
tmp_euler_ = [euler_azimu_b_M_(1+nM),euler_polar_a_M_(1+nM),euler_gamma_z_M_(1+nM)];
tmp_dtau_euler_ = [dtau_euler_azimu_b_M_(1+nM),dtau_euler_polar_a_M_(1+nM),dtau_euler_gamma_z_M_(1+nM)];
tmp_RigidRotation_euler_pos_ = RigidRotation_euler_to_euler_(tmp_euler_ + 1.0*dtau*tmp_dtau_euler_);
tmp_RigidRotation_euler_neg_ = RigidRotation_euler_to_euler_(tmp_euler_ - 1.0*dtau*tmp_dtau_euler_);
tmp_RigidRotation_dtau_euler_ = (tmp_RigidRotation_euler_pos_ - tmp_RigidRotation_euler_neg_)/max(1e-12,2*dtau);
RigidRotation_dtau_euler_azimu_b_M_(1+nM) = tmp_RigidRotation_dtau_euler_(1+0);
RigidRotation_dtau_euler_polar_a_M_(1+nM) = tmp_RigidRotation_dtau_euler_(1+1);
RigidRotation_dtau_euler_gamma_z_M_(1+nM) = tmp_RigidRotation_dtau_euler_(1+2);
end;%for nM=0:n_M-1;
%%%%;
nM = 2;
%%%%;
tmp_polar_a = +euler_polar_a_M_(1+nM);
tmp_azimu_b = +euler_azimu_b_M_(1+nM);
tmp_gamma_z = -euler_gamma_z_M_(1+nM);
tmp_R_a__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
tmp_da_R_a__ = -Rz(-tmp_gamma_z)*dRy(-tmp_polar_a)*Rz(-tmp_azimu_b);
tmp_db_R_a__ = -Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*dRz(-tmp_azimu_b);
tmp_dc_R_a__ = +dRz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
tmp_dtau_R_a__ = ...
+tmp_da_R_a__*dtau_euler_polar_a_M_(1+nM)...
+tmp_db_R_a__*dtau_euler_azimu_b_M_(1+nM)...
+tmp_dc_R_a__*dtau_euler_gamma_z_M_(1+nM)...
  ;
U_k_p_wk_ = zeros(n_w_sum,1);
da_U_k_p_wk_ = zeros(n_w_sum,1);
db_U_k_p_wk_ = zeros(n_w_sum,1);
dc_U_k_p_wk_ = zeros(n_w_sum,1);
dtau_U_k_p_wk3__ = zeros(n_w_sum,3);
for nsource_a=0:n_source_a-1;
tmp_va = v_source_a_(1+nsource_a);
tmp_delta_U_ = tmp_R_a__*delta_a_c__(:,1+nsource_a);
tmp_da_delta_U_ = tmp_da_R_a__*delta_a_c__(:,1+nsource_a);
tmp_db_delta_U_ = tmp_db_R_a__*delta_a_c__(:,1+nsource_a);
tmp_dc_delta_U_ = tmp_dc_R_a__*delta_a_c__(:,1+nsource_a);
planewave_wk_ = exp(+i*2*pi*(k_c_0_wk_*tmp_delta_U_(1+0) + k_c_1_wk_*tmp_delta_U_(1+1)));
da_factor_wk_ = (+i*2*pi*(k_c_0_wk_*tmp_da_delta_U_(1+0) + k_c_1_wk_*tmp_da_delta_U_(1+1)));
db_factor_wk_ = (+i*2*pi*(k_c_0_wk_*tmp_db_delta_U_(1+0) + k_c_1_wk_*tmp_db_delta_U_(1+1)));
dc_factor_wk_ = (+i*2*pi*(k_c_0_wk_*tmp_dc_delta_U_(1+0) + k_c_1_wk_*tmp_dc_delta_U_(1+1)));
U_k_p_wk_ = U_k_p_wk_ + tmp_va*planewave_wk_;
da_U_k_p_wk_ = da_U_k_p_wk_ + tmp_va*planewave_wk_.*da_factor_wk_;
db_U_k_p_wk_ = db_U_k_p_wk_ + tmp_va*planewave_wk_.*db_factor_wk_;
dc_U_k_p_wk_ = dc_U_k_p_wk_ + tmp_va*planewave_wk_.*dc_factor_wk_;
end;%for nsource_a=0:n_source_a-1;
dtau_U_k_p_wk3__ = [da_U_k_p_wk_,db_U_k_p_wk_,dc_U_k_p_wk_];
dtau_U_k_p_wk_ = dtau_U_k_p_wk3__ * [dtau_euler_polar_a_M_(1+nM);dtau_euler_azimu_b_M_(1+nM);dtau_euler_gamma_z_M_(1+nM)];
%%%%;
tmp_RigidRotation_polar_a = +RigidRotation_euler_polar_a_M_(1+nM);
tmp_RigidRotation_azimu_b = +RigidRotation_euler_azimu_b_M_(1+nM);
tmp_RigidRotation_gamma_z = -RigidRotation_euler_gamma_z_M_(1+nM);
tmp_RigidRotation_R_a__ = Rz(-tmp_RigidRotation_gamma_z)*Ry(-tmp_RigidRotation_polar_a)*Rz(-tmp_RigidRotation_azimu_b);
tmp_RigidRotation_da_R_a__ = -Rz(-tmp_RigidRotation_gamma_z)*dRy(-tmp_RigidRotation_polar_a)*Rz(-tmp_RigidRotation_azimu_b);
tmp_RigidRotation_db_R_a__ = -Rz(-tmp_RigidRotation_gamma_z)*Ry(-tmp_RigidRotation_polar_a)*dRz(-tmp_RigidRotation_azimu_b);
tmp_RigidRotation_dc_R_a__ = +dRz(-tmp_RigidRotation_gamma_z)*Ry(-tmp_RigidRotation_polar_a)*Rz(-tmp_RigidRotation_azimu_b);
tmp_RigidRotation_dtau_R_a__ = ...
+tmp_RigidRotation_da_R_a__*RigidRotation_dtau_euler_polar_a_M_(1+nM)...
+tmp_RigidRotation_db_R_a__*RigidRotation_dtau_euler_azimu_b_M_(1+nM)...
+tmp_RigidRotation_dc_R_a__*RigidRotation_dtau_euler_gamma_z_M_(1+nM)...
  ;
RigidRotation_U_k_p_wk_ = zeros(n_w_sum,1);
RigidRotation_da_U_k_p_wk_ = zeros(n_w_sum,1);
RigidRotation_db_U_k_p_wk_ = zeros(n_w_sum,1);
RigidRotation_dc_U_k_p_wk_ = zeros(n_w_sum,1);
RigidRotation_dtau_U_k_p_wk3__ = zeros(n_w_sum,3);
for nsource_a=0:n_source_a-1;
tmp_va = v_source_a_(1+nsource_a);
tmp_RigidRotation_delta_U_ = tmp_RigidRotation_R_a__*RigidRotation_delta_a_c__(:,1+nsource_a);
tmp_RigidRotation_da_delta_U_ = tmp_RigidRotation_da_R_a__*RigidRotation_delta_a_c__(:,1+nsource_a);
tmp_RigidRotation_db_delta_U_ = tmp_RigidRotation_db_R_a__*RigidRotation_delta_a_c__(:,1+nsource_a);
tmp_RigidRotation_dc_delta_U_ = tmp_RigidRotation_dc_R_a__*RigidRotation_delta_a_c__(:,1+nsource_a);
RigidRotation_planewave_wk_ = exp(+i*2*pi*(k_c_0_wk_*tmp_RigidRotation_delta_U_(1+0) + k_c_1_wk_*tmp_RigidRotation_delta_U_(1+1)));
RigidRotation_da_factor_wk_ = (+i*2*pi*(k_c_0_wk_*tmp_RigidRotation_da_delta_U_(1+0) + k_c_1_wk_*tmp_RigidRotation_da_delta_U_(1+1)));
RigidRotation_db_factor_wk_ = (+i*2*pi*(k_c_0_wk_*tmp_RigidRotation_db_delta_U_(1+0) + k_c_1_wk_*tmp_RigidRotation_db_delta_U_(1+1)));
RigidRotation_dc_factor_wk_ = (+i*2*pi*(k_c_0_wk_*tmp_RigidRotation_dc_delta_U_(1+0) + k_c_1_wk_*tmp_RigidRotation_dc_delta_U_(1+1)));
RigidRotation_U_k_p_wk_ = RigidRotation_U_k_p_wk_ + tmp_va*RigidRotation_planewave_wk_;
RigidRotation_da_U_k_p_wk_ = RigidRotation_da_U_k_p_wk_ + tmp_va*RigidRotation_planewave_wk_.*RigidRotation_da_factor_wk_;
RigidRotation_db_U_k_p_wk_ = RigidRotation_db_U_k_p_wk_ + tmp_va*RigidRotation_planewave_wk_.*RigidRotation_db_factor_wk_;
RigidRotation_dc_U_k_p_wk_ = RigidRotation_dc_U_k_p_wk_ + tmp_va*RigidRotation_planewave_wk_.*RigidRotation_dc_factor_wk_;
end;%for nsource_a=0:n_source_a-1;
RigidRotation_dtau_U_k_p_wk3__ = [RigidRotation_da_U_k_p_wk_,RigidRotation_db_U_k_p_wk_,RigidRotation_dc_U_k_p_wk_];
RigidRotation_dtau_U_k_p_wk_ = RigidRotation_dtau_U_k_p_wk3__ * [RigidRotation_dtau_euler_polar_a_M_(1+nM);RigidRotation_dtau_euler_azimu_b_M_(1+nM);RigidRotation_dtau_euler_gamma_z_M_(1+nM)];
%%%%;
if (flag_verbose>0); disp(sprintf(' %% tmp_R_a__ vs tmp_RigidRotation_R_a__*RigidRotation_R__: %0.16f',fnorm(tmp_R_a__ - tmp_RigidRotation_R_a__*RigidRotation_R__))); end;
if (flag_verbose>0); disp(sprintf(' %% tmp_dtau_R_a__ vs tmp_RigidRotation_dtau_R_a__: %0.16f',fnorm(tmp_dtau_R_a__ - tmp_RigidRotation_dtau_R_a__*RigidRotation_R__))); end;

%%%%%%%%;
% Now describe the infinitesimal rotations, and the corresponding perturbations to the euler angles. ;
%%%%%%%%;

%%%%%%%%;
% Note that an infinitesimal rotation is antisymmetric: ;
%%%%%%%%;
%{
syms a b c d f g h ;
Rzpb = ...
[ ...
  +cos(+b) , -sin(+b) , 0 ...
 ;+sin(+b) , +cos(+b) , 0 ...
 ; 0       , 0        , 1 ...
];
Rznb = ...
[ ...
  +cos(-b) , -sin(-b) , 0 ...
 ;+sin(-b) , +cos(-b) , 0 ...
 ; 0       , 0        , 1 ...
];
Rzpc = ...
[ ...
  +cos(+c) , -sin(+c) , 0 ...
 ;+sin(+c) , +cos(+c) , 0 ...
 ; 0       , 0        , 1 ...
];
Rznc = ...
[ ...
  +cos(-c) , -sin(-c) , 0 ...
 ;+sin(-c) , +cos(-c) , 0 ...
 ; 0       , 0        , 1 ...
];
Rypa = ...
[ ...
  +cos(+a) , 0 , +sin(+a) ...
 ; 0       , 1    0       ...
 ;-sin(+a) , 0 , +cos(+a) ...
];
Ryna = ...
[ ...
  +cos(-a) , 0 , +sin(-a) ...
 ; 0       , 1    0       ...
 ;-sin(-a) , 0 , +cos(-a) ...
];
simplify(Rznc*Ryna*Rznb);
[  cos(a)*cos(b)*cos(c) - sin(b)*sin(c), cos(b)*sin(c) + cos(a)*cos(c)*sin(b), -cos(c)*sin(a)]
[- cos(c)*sin(b) - cos(a)*cos(b)*sin(c), cos(b)*cos(c) - cos(a)*sin(b)*sin(c),  sin(a)*sin(c)]
[                         cos(b)*sin(a),                        sin(a)*sin(b),         cos(a)]
Rzpd = ...
[ ...
  +cos(+d) , -sin(+d) , 0 ...
 ;+sin(+d) , +cos(+d) , 0 ...
 ; 0       , 0        , 1 ...
];
IpDRzpd = ...
[ ...
  1-d.^2/2 , -d     , 0 ...
 ;+d       , 1-d.^2 , 0 ...
 ; 0       , 0      , 1 ...
];
IpDRzpd = ...
[ ...
   1 , -d , 0 ...
 ;+d ,  1 , 0 ...
 ; 0 ,  0 , 1 ...
];
simplify(Rznc*Ryna*Rznb*IpDRzpd*Rzpb*Rypa*Rzpc);
[               1,        -d*cos(a), d*sin(a)*sin(c)]
[        d*cos(a),                1, d*cos(c)*sin(a)]
[-d*sin(a)*sin(c), -d*cos(c)*sin(a),               1]
Delta_R = ...
[ ...
   1 , -f , -g ...
; +f ,  1 , -h ...
; +g , +h ,  1 ...
]
+f = +d*cos(a);
+g = -d*sin(a)*sin(c);
+h = -d*cos(c)*sin(a);
%}
% test via: ;
dtau = 1e-3;
tmp_azimu_b_0 = 2*pi*rand(); tmp_polar_a_0 = 2*pi*rand(); tmp_gamma_z_0 = 2*pi*rand();
tmp_euler_0_ = [-tmp_azimu_b_0,-tmp_polar_a_0,-tmp_gamma_z_0];
tmp_R_0__ = euler_to_R(tmp_euler_0_);
tmp_R_1__ = ...
[ ...
  + cos(tmp_polar_a_0)*cos(tmp_azimu_b_0)*cos(tmp_gamma_z_0) - sin(tmp_azimu_b_0)*sin(tmp_gamma_z_0), cos(tmp_azimu_b_0)*sin(tmp_gamma_z_0) + cos(tmp_polar_a_0)*cos(tmp_gamma_z_0)*sin(tmp_azimu_b_0), -cos(tmp_gamma_z_0)*sin(tmp_polar_a_0) ...
; - cos(tmp_gamma_z_0)*sin(tmp_azimu_b_0) - cos(tmp_polar_a_0)*cos(tmp_azimu_b_0)*sin(tmp_gamma_z_0), cos(tmp_azimu_b_0)*cos(tmp_gamma_z_0) - cos(tmp_polar_a_0)*sin(tmp_azimu_b_0)*sin(tmp_gamma_z_0),  sin(tmp_polar_a_0)*sin(tmp_gamma_z_0) ...
;                          cos(tmp_azimu_b_0)*sin(tmp_polar_a_0),                        sin(tmp_polar_a_0)*sin(tmp_azimu_b_0),         cos(tmp_polar_a_0) ...
];
if (flag_verbose>0); disp(sprintf(' %% tmp_R_0__ vs tmp_R_1__: %0.16f',fnorm(tmp_R_0__ - tmp_R_1__)/max(1e-12,fnorm(tmp_R_0__)))); end;
tmp_euler_1_ = [1,0,0];%tmp_euler_1_ = 2*pi*rand(1,3);
Delta_R_dif__ = euler_to_R(tmp_euler_0_)*(euler_to_R(+dtau*tmp_euler_1_) - euler_to_R(-dtau*tmp_euler_1_))*euler_to_R(-flip(tmp_euler_0_))/max(1e-12,2*dtau);
tmp_f = cos(tmp_polar_a_0);
tmp_g = -sin(tmp_polar_a_0)*sin(tmp_gamma_z_0);
tmp_h = -sin(tmp_polar_a_0)*cos(tmp_gamma_z_0);
Delta_R_mid__ = [ 0 , -tmp_f , -tmp_g ; +tmp_f , 0 , -tmp_h ; +tmp_g , +tmp_h , 0 ];
if (flag_verbose>0); disp(sprintf(' %% Delta_R_dif__ vs Delta_R_mid__: %0.16f',fnorm(Delta_R_dif__ - Delta_R_mid__)/max(1e-12,fnorm(Delta_R_dif__)))); end;
%%%%%%%%;

%%%%%%%%;
% Note further that, if the rigid rotation is infinitesimal, then: ;
% R__ * (I + Delta_R__) = Rz(-c)*Ry(-a)*Rz(-b) * (I + Delta_R__);
% [ +cc*ca*cb - sc*sb , +cc*ca*sb +sc*cb , -cc*sa ]   [  1 -f -g ] ;
% [ -sc*ca*cb - cc*sb , -sc*ca*sb +cc*cb , +sc*sa ] * [ +f  1 -h ] ;
% [ +sa*cb            , +sa*sb           , +ca    ]   [ +g +h  1 ] ;
% = ;
% [ +1*(+cc*ca*cb - sc*sb) + f*(+cc*ca*sb +sc*cb) + g*(-cc*sa) , -f*(+cc*ca*cb - sc*sb) + 1*(+cc*ca*sb +sc*cb) + h*(-cc*sa) , -g*(+cc*ca*cb - sc*sb) - h*(+cc*ca*sb +sc*cb) + 1*(-cc*sa) ] ;
% [ +1*(-sc*ca*cb - cc*sb) + f*(-sc*ca*sb +cc*cb) + g*(+sc*sa) , -f*(-sc*ca*cb - cc*sb) + 1*(-sc*ca*sb +cc*cb) + h*(+sc*sa) , -g*(-sc*ca*cb - cc*sb) - h*(-sc*ca*sb +cc*cb) + 1*(+sc*sa) ] ;
% [ +1*(+sa*cb)            + f*(+sa*sb)           + g*(+ca)    , -f*(+sa*cb)            + 1*(+sa*sb)           + h*(+ca)    , -g*(+sa*cb)            - h*(+sa*sb)           + 1*(+ca)    ] ;
% Or equivalently: ;
% [ RE00 , RE01 , RE02 ]   [  1 -f -g ] ;
% [ RE10 , RE11 , RE12 ] * [ +f  1 -h ] ;
% [ RE20 , RE21 , RE22 ]   [ +g +h  1 ] ;
% = ;
% [ +1*(+cc*ca*cb - sc*sb) + f*(+cc*ca*sb +sc*cb) + g*(-cc*sa) , -f*(+cc*ca*cb - sc*sb) + 1*(+cc*ca*sb +sc*cb) + h*(-cc*sa) , -g*(+cc*ca*cb - sc*sb) - h*(+cc*ca*sb +sc*cb) + 1*(-cc*sa) ] ;
% [ +1*(-sc*ca*cb - cc*sb) + f*(-sc*ca*sb +cc*cb) + g*(+sc*sa) , -f*(-sc*ca*cb - cc*sb) + 1*(-sc*ca*sb +cc*cb) + h*(+sc*sa) , -g*(-sc*ca*cb - cc*sb) - h*(-sc*ca*sb +cc*cb) + 1*(+sc*sa) ] ;
% [ +1*(+sa*cb)            + f*(+sa*sb)           + g*(+ca)    , -f*(+sa*cb)            + 1*(+sa*sb)           + h*(+ca)    , -g*(+sa*cb)            - h*(+sa*sb)           + 1*(+ca)    ] ;
% = ;
% [ +1RE00+fRE01+gRE02 , -fRE00+1RE01+hRE02 , -gRE00-hRE01+1RE02 ] ;
% [ +1RE10+fRE11+gRE12 , -fRE10+1RE11+hRE12 , -gRE10-hRE11+1RE12 ] ;
% [ +1RE20+fRE21+gRE22 , -fRE20+1RE21+hRE22 , -gRE20-hRE21+1RE22 ] ;
% double check: ;
%{
simplify(Rznc*Ryna*Rznb*Delta_R);
[f*(cos(b)*sin(c) + cos(a)*cos(c)*sin(b)) - sin(b)*sin(c) - g*cos(c)*sin(a) + cos(a)*cos(b)*cos(c), f*(sin(b)*sin(c) - cos(a)*cos(b)*cos(c)) + cos(b)*sin(c) - h*cos(c)*sin(a) + cos(a)*cos(c)*sin(b), g*(sin(b)*sin(c) - cos(a)*cos(b)*cos(c)) - h*(cos(b)*sin(c) + cos(a)*cos(c)*sin(b)) - cos(c)*sin(a)]
[f*(cos(b)*cos(c) - cos(a)*sin(b)*sin(c)) - cos(c)*sin(b) + g*sin(a)*sin(c) - cos(a)*cos(b)*sin(c), f*(cos(c)*sin(b) + cos(a)*cos(b)*sin(c)) + cos(b)*cos(c) + h*sin(a)*sin(c) - cos(a)*sin(b)*sin(c), sin(a)*sin(c) + g*(cos(c)*sin(b) + cos(a)*cos(b)*sin(c)) - h*(cos(b)*cos(c) - cos(a)*sin(b)*sin(c))]
[                                                       g*cos(a) + cos(b)*sin(a) + f*sin(a)*sin(b),                                                        sin(a)*sin(b) + h*cos(a) - f*cos(b)*sin(a),                                                          cos(a) - g*cos(b)*sin(a) - h*sin(a)*sin(b)]
or: ;
[f*(cb*sc + ca*cc*sb) - sb*sc - g*cc*sa + ca*cb*cc, f*(sb*sc - ca*cb*cc) + cb*sc - h*cc*sa + ca*cc*sb, g*(sb*sc - ca*cb*cc) - h*(cb*sc + ca*cc*sb) - cc*sa]
[f*(cb*cc - ca*sb*sc) - cc*sb + g*sa*sc - ca*cb*sc, f*(cc*sb + ca*cb*sc) + cb*cc + h*sa*sc - ca*sb*sc, sa*sc + g*(cc*sb + ca*cb*sc) - h*(cb*cc - ca*sb*sc)]
[                           g*ca + cb*sa + f*sa*sb,                            sa*sb + h*ca - f*cb*sa,                              ca - g*cb*sa - h*sa*sb]
%}
% implying that: ;
% a_perturb = acos( -g*(+sa*cb) - h*(+sa*sb) + 1*(+ca) ) = acos(+ca) + dacos(+ca)*(-g*(+sa*cb) - h*(+sa*sb)) = acos(+ca) + (-1/sqrt(1-ca^2))*(-g*(+sa*cb) - h*(+sa*sb)) ;
% a_perturb = acos(-gRE20-hRE21+1RE22) = acos(RE22) + dacos(RE22)*(-gRE20-hRE21) ;
% b_perturb = atan( +(-fRE20+1RE21+hRE22)/+(+1RE20+fRE21+gRE22) ) ;
%           = atan( +(+1RE21/+1RE20-fRE20/+1RE20+hRE22/+1RE20)/+(+1+fRE21/+1RE20+gRE22/+1RE20) ) ;
%           = atan( +(+1RE21/RE20-fRE20/RE20+hRE22/RE20) * +(+1-fRE21/RE20-gRE22/RE20) ) ;
%           = atan( +1RE21/RE20 - fRE20/RE20 + hRE22/RE20 - fRE21/RE20*RE21/RE20 - gRE22/RE20*RE21/RE20 ) ;
%           = atan(+RE21/RE20) + datan(+RE21/RE20)*( - fRE20/RE20 + hRE22/RE20 - fRE21/RE20*RE21/RE20 - gRE22/RE20*RE21/RE20 ) ;
% c_perturb = atan( +(-gRE10-hRE11+1RE12)/-(-gRE00-hRE01+1RE02) ) ;
%           = atan( +(+1RE12/-1RE02-gRE10/-1RE02-hRE11/-1RE02)/+(-1RE02/-1RE02+gRE00/-1RE02+hRE01/-1RE02) ) ;
%           = atan( (-RE12/RE02 + gRE10/RE02 + hRE11/RE02)/(1 - gRE00/RE02 - hRE01/RE02) ) ;
%           = atan( (-RE12/RE02 + gRE10/RE02 + hRE11/RE02) * (1 + gRE00/RE02 + hRE01/RE02) ) ;
%           = atan( (-RE12/RE02 + gRE10/RE02 + hRE11/RE02 - gRE00/RE02*RE12/RE02 - hRE01/RE02*-RE12/RE02) ) ;
%           = atan(-RE12/RE02) + datan(-RE12/RE02)*( + gRE10/RE02 + hRE11/RE02 - gRE00/RE02*RE12/RE02 - hRE01/RE02*RE12/RE02 ) ;
% double check: ;
%[  cos(a)*cos(b)*cos(c) - sin(b)*sin(c), cos(b)*sin(c) + cos(a)*cos(c)*sin(b), -cos(c)*sin(a)]
%[- cos(c)*sin(b) - cos(a)*cos(b)*sin(c), cos(b)*cos(c) - cos(a)*sin(b)*sin(c),  sin(a)*sin(c)]
%[                         cos(b)*sin(a),                        sin(a)*sin(b),         cos(a)]
%{
syms a b c d f g h ;
syms RE20 RE21 RE02 RE12 RE22 ;
syms SE20 SE21 SE02 SE12 SE22 ;
RE20 = +sin(a)*cos(b);
RE21 = +sin(a)*sin(b);
RE02 = -cos(c)*sin(a);
RE12 = +sin(a)*sin(c);
RE22 = +cos(a);
SE20 = g*cos(a) + cos(b)*sin(a) + f*sin(a)*sin(b);
SE21 = sin(a)*sin(b) + h*cos(a) - f*cos(b)*sin(a);
SE22 = cos(a) - g*cos(b)*sin(a) - h*sin(a)*sin(b);
SE02 = g*(sin(b)*sin(c) - cos(a)*cos(b)*cos(c)) - h*(cos(b)*sin(c) + cos(a)*cos(c)*sin(b)) - cos(c)*sin(a);
SE12 = sin(a)*sin(c) + g*(cos(c)*sin(b) + cos(a)*cos(b)*sin(c)) - h*(cos(b)*cos(c) - cos(a)*sin(b)*sin(c));
disp(sprintf(' %% a_perturb: %s',simplify(-1/sqrt(1-RE22.^2)*( SE22 - RE22 ))));
disp(sprintf(' %% b_perturb: %s',simplify(+1/(1+(+RE21/+RE20)^2) * ( +SE21/+SE20 - +RE21/+RE20 ))));
disp(sprintf(' %% c_perturb: %s',simplify(+1/(1+(+RE12/-RE02)^2) * ( +SE12/-SE02 - +RE12/-RE02 ))));
 % a_perturb: (sin(a)*(g*cos(b) + h*sin(b)))/(1 - cos(a)^2)^(1/2)
 % b_perturb: -(cos(b)*(f*sin(a) - h*cos(a)*cos(b) + g*cos(a)*sin(b)))/(g*cos(a) + cos(b)*sin(a) + f*sin(a)*sin(b))
 % c_perturb: -(cos(c)*(h*cos(b) - g*sin(b)))/(cos(c)*sin(a) + h*cos(b)*sin(c) - g*sin(b)*sin(c) + g*cos(a)*cos(b)*cos(c) + h*cos(a)*cos(c)*sin(b))
%}
% double check: ;
tmp_polar_a_del = 1*pi*rand(); tmp_gamma_z_del = 2*pi*rand(); tmp_f = +cos(tmp_polar_a_del); tmp_g = -sin(tmp_polar_a_del)*sin(tmp_gamma_z_del); tmp_h = -sin(tmp_polar_a_del)*cos(tmp_gamma_z_del);
tmp_a = 1*pi*rand(); tmp_b = 2*pi*rand(); tmp_c = 2*pi*rand();
n_d = 1+128; tmp_d_ = 1e-3*transpose(linspace(-1,+1,n_d));
RE20_ = +sin(tmp_a)*cos(tmp_b);
RE21_ = +sin(tmp_a)*sin(tmp_b);
RE02_ = -cos(tmp_c)*sin(tmp_a);
RE12_ = +sin(tmp_a)*sin(tmp_c);
RE22_ = +cos(tmp_a);
SE20_ = tmp_d_*tmp_g*cos(tmp_a) + cos(tmp_b)*sin(tmp_a) + tmp_d_*tmp_f*sin(tmp_a)*sin(tmp_b);
SE21_ = sin(tmp_a)*sin(tmp_b) + tmp_d_*tmp_h*cos(tmp_a) - tmp_d_*tmp_f*cos(tmp_b)*sin(tmp_a);
SE22_ = cos(tmp_a) - tmp_d_*tmp_g*cos(tmp_b)*sin(tmp_a) - tmp_d_*tmp_h*sin(tmp_a)*sin(tmp_b);
SE02_ = tmp_d_*tmp_g*(sin(tmp_b)*sin(tmp_c) - cos(tmp_a)*cos(tmp_b)*cos(tmp_c)) - tmp_d_*tmp_h*(cos(tmp_b)*sin(tmp_c) + cos(tmp_a)*cos(tmp_c)*sin(tmp_b)) - cos(tmp_c)*sin(tmp_a);
SE12_ = sin(tmp_a)*sin(tmp_c) + tmp_d_*tmp_g*(cos(tmp_c)*sin(tmp_b) + cos(tmp_a)*cos(tmp_b)*sin(tmp_c)) - tmp_d_*tmp_h*(cos(tmp_b)*cos(tmp_c) - cos(tmp_a)*sin(tmp_b)*sin(tmp_c));
tmp_da = (sin(tmp_a)*(tmp_g*cos(tmp_b) + tmp_h*sin(tmp_b)))/(1 - cos(tmp_a)^2)^(1/2);
tmp_db = -(cos(tmp_b)*(tmp_f*sin(tmp_a) - tmp_h*cos(tmp_a)*cos(tmp_b) + tmp_g*cos(tmp_a)*sin(tmp_b)))/( cos(tmp_b)*sin(tmp_a) ); %<-- remove lower order terms from denominator. ;
tmp_dc = -(cos(tmp_c)*(tmp_h*cos(tmp_b) - tmp_g*sin(tmp_b)))/( cos(tmp_c)*sin(tmp_a) ); %<-- remove lower order terms from denominator. ;
if flag_disp>1;
figure(1+nf);nf=nf+1;clf;figmed;
subplot(1,3,1);
plot(0,acos(RE22_),'rd',tmp_d_,acos(SE22_),'kx',tmp_d_,acos(RE22_) + tmp_da*tmp_d_,'go');
xlabel('d'); ylabel('a');
subplot(1,3,2);
plot(0,atan2(+RE21_,+RE20_),'rd',tmp_d_,atan2(+SE21_,+SE20_),'kx',tmp_d_,atan2(+RE21_,+RE20_) + tmp_db*tmp_d_,'go');
xlabel('d'); ylabel('b');
subplot(1,3,3);
plot(0,atan2(+RE12_,-RE02_),'rd',tmp_d_,atan2(+SE12_,-SE02_),'kx',tmp_d_,atan2(+RE12_,-RE02_) + tmp_dc*tmp_d_,'go');
xlabel('d'); ylabel('c');
end;%if flag_disp>1;
%%%%%%%%;
% double check: ;
%%%%%%%%;
dtau = 1e-3;
tmp_azimu_b_del = 2*pi*rand(); tmp_polar_a_del = 2*pi*rand(); tmp_gamma_z_del = 2*pi*rand();
tmp_euler_del_ = [-tmp_azimu_b_del,-tmp_polar_a_del,-tmp_gamma_z_del];
tmp_euler_one_ = [+1,+0,+0];%tmp_euler_one_ = 2*pi*rand(1,3);
tmp_Delta_R_dif__ = euler_to_R(tmp_euler_del_)*(euler_to_R(+dtau*tmp_euler_one_) - euler_to_R(-dtau*tmp_euler_one_))*euler_to_R(-flip(tmp_euler_del_))/max(1e-12,2*dtau);
tmp_f = +cos(tmp_polar_a_del);
tmp_g = -sin(tmp_polar_a_del)*sin(tmp_gamma_z_del);
tmp_h = -sin(tmp_polar_a_del)*cos(tmp_gamma_z_del);
tmp_Delta_R_mid__ = [ 0 , -tmp_f , -tmp_g ; +tmp_f , 0 , -tmp_h ; +tmp_g , +tmp_h , 0 ];
if (flag_verbose>0); disp(sprintf(' %% tmp_Delta_R_dif__ vs tmp_Delta_R_mid__: %0.16f',fnorm(tmp_Delta_R_dif__ - tmp_Delta_R_mid__)/max(1e-12,fnorm(tmp_Delta_R_dif__)))); end;
tmp_azimu_b_ori = 2*pi*rand(); tmp_polar_a_ori = 2*pi*rand(); tmp_gamma_z_ori = 2*pi*rand();
tmp_euler_ori_ = [-tmp_azimu_b_ori,-tmp_polar_a_ori,-tmp_gamma_z_ori];
tmp_Combi_R_mid__ = euler_to_R(tmp_euler_ori_)*(eye(3)+0*dtau*tmp_Delta_R_mid__);
tmp_polar_a_mid = acos(tmp_Combi_R_mid__(1+2,1+2));
tmp_azimu_b_mid = atan2(+tmp_Combi_R_mid__(1+2,1+1),+tmp_Combi_R_mid__(1+2,1+0));
tmp_gamma_z_mid = atan2(+tmp_Combi_R_mid__(1+1,1+2),-tmp_Combi_R_mid__(1+0,1+2));
tmp_euler_mid_ = -[tmp_azimu_b_mid,tmp_polar_a_mid,tmp_gamma_z_mid]; %tmp_euler_mid_ = R_to_euler_0(euler_to_R(tmp_euler_ori_)*(eye(3)+dtau*tmp_Delta_R_mid__));
tmp_Combi_R_pos__ = euler_to_R(tmp_euler_ori_)*(eye(3)-1*dtau*tmp_Delta_R_mid__); %<-- Note that this is the approximate inverse of (I+dtau*Delta_R). ;
tmp_polar_a_pos = acos(tmp_Combi_R_pos__(1+2,1+2));
tmp_azimu_b_pos = atan2(+tmp_Combi_R_pos__(1+2,1+1),+tmp_Combi_R_pos__(1+2,1+0));
tmp_gamma_z_pos = atan2(+tmp_Combi_R_pos__(1+1,1+2),-tmp_Combi_R_pos__(1+0,1+2));
tmp_euler_pos_ = -[tmp_azimu_b_pos,tmp_polar_a_pos,tmp_gamma_z_pos]; %tmp_euler_pos_ = R_to_euler_0(euler_to_R(tmp_euler_ori_)*(eye(3)+dtau*tmp_Delta_R_mid__));
tmp_Combi_R_neg__ = euler_to_R(tmp_euler_ori_)*(eye(3)+1*dtau*tmp_Delta_R_mid__); %<-- Note that this is the approximate inverse of (I+dtau*Delta_R). ;
tmp_polar_a_neg = acos(tmp_Combi_R_neg__(1+2,1+2));
tmp_azimu_b_neg = atan2(+tmp_Combi_R_neg__(1+2,1+1),+tmp_Combi_R_neg__(1+2,1+0));
tmp_gamma_z_neg = atan2(+tmp_Combi_R_neg__(1+1,1+2),-tmp_Combi_R_neg__(1+0,1+2));
tmp_euler_neg_ = -[tmp_azimu_b_neg,tmp_polar_a_neg,tmp_gamma_z_neg]; %tmp_euler_neg_ = R_to_euler_0(euler_to_R(tmp_euler_ori_)*(eye(3)-dtau*tmp_Delta_R_mid__));
tmp_deuler_dif_ = (tmp_euler_pos_ - tmp_euler_neg_)/max(1e-12,2*dtau);
tmp_da_mid = +(sin(tmp_polar_a_ori)*(tmp_g*cos(tmp_azimu_b_ori) + tmp_h*sin(tmp_azimu_b_ori)))/(1 - cos(tmp_polar_a_ori)^2)^(1/2);
tmp_db_mid = -(cos(tmp_azimu_b_ori)*(tmp_f*sin(tmp_polar_a_ori) - tmp_h*cos(tmp_polar_a_ori)*cos(tmp_azimu_b_ori) + tmp_g*cos(tmp_polar_a_ori)*sin(tmp_azimu_b_ori)))/(cos(tmp_azimu_b_ori)*sin(tmp_polar_a_ori)); %<-- remove lower order terms from denominator. ;
tmp_dc_mid = -(cos(tmp_gamma_z_ori)*(tmp_h*cos(tmp_azimu_b_ori) - tmp_g*sin(tmp_azimu_b_ori)))/(cos(tmp_gamma_z_ori)*sin(tmp_polar_a_ori)); %<-- remove lower order terms from denominator. ;
tmp_deuler_mid_ = [tmp_db_mid,tmp_da_mid,tmp_dc_mid];
if (flag_verbose>0); disp(sprintf(' %% tmp_deuler_dif_ vs tmp_deuler_mid_: %0.16f',fnorm(tmp_deuler_dif_ - tmp_deuler_mid_)/max(1e-12,fnorm(tmp_deuler_dif_)))); end;
%%%%%%%%;

%%%%%%%%;
% Now we can construct the perturbation corresponding to an infinitesimal rigid rotation. ;
%%%%%%%%;
SmallRotation_polar_a =  +53*pi/97;
SmallRotation_azimu_b =  -83*pi/97;
SmallRotation_gamma_z = +173*pi/97;
SmallRotation_euler_ = [-SmallRotation_azimu_b,-SmallRotation_polar_a,+SmallRotation_gamma_z]; %<-- note the reversal in ordering. ;
tmp_polar_a = +SmallRotation_polar_a;
tmp_azimu_b = +SmallRotation_azimu_b;
tmp_gamma_z = -SmallRotation_gamma_z;
SmallRotation_R__ = Rz(-tmp_gamma_z)*Ry(-tmp_polar_a)*Rz(-tmp_azimu_b);
if (flag_verbose>0); disp(sprintf(' %% SmallRotation_R__ vs euler_to_R(SmallRotation_euler_): %0.16f',fnorm(SmallRotation_R__ - euler_to_R(SmallRotation_euler_)))); end;
if (flag_verbose>0); disp(sprintf(' %% inv(SmallRotation_R__) vs euler_to_R(-flip(SmallRotation_euler_)): %0.16f',fnorm(inv(SmallRotation_R__) - euler_to_R(-flip(SmallRotation_euler_))))); end;
%%%%;
SmallRotation_delta_a_c__ = SmallRotation_R__ * delta_a_c__;
SmallRotation_a_k_Y_form_ = zeros(n_lm_sum,1);
for nsource=0:n_source-1;
SmallRotation_a_k_Y_form_ = SmallRotation_a_k_Y_form_ + plane_wave_expansion_1(n_k_p_r,k_p_r_,SmallRotation_delta_a_c__(:,1+nsource),l_max_);
end;%for nsource=0:n_source-1;
SmallRotation_a_k_Y_wign_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,a_k_Y_form_,SmallRotation_euler_);
if (flag_verbose>0); disp(sprintf(' %% SmallRotation_a_k_Y_form_ vs SmallRotation_a_k_Y_wign_: %0.16f',fnorm(SmallRotation_a_k_Y_form_ - SmallRotation_a_k_Y_wign_)/max(1e-12,fnorm(SmallRotation_a_k_Y_form_)))); end;
%%%%;
euler_azimu_b_one_ = [+1,+0,+0];
tmp_Delta_R_dif__ = euler_to_R(SmallRotation_euler_)*(euler_to_R(+dtau*euler_azimu_b_one_) - euler_to_R(-dtau*euler_azimu_b_one_))*euler_to_R(-flip(SmallRotation_euler_))/max(1e-12,2*dtau);
tmp_f = +cos(SmallRotation_polar_a);
tmp_g = -sin(SmallRotation_polar_a)*sin(-SmallRotation_gamma_z); %<-- note flipped sign of SmallRotation_gamma_z. ;
tmp_h = -sin(SmallRotation_polar_a)*cos(-SmallRotation_gamma_z);
tmp_Delta_R_mid__ = [ 0 , -tmp_f , -tmp_g ; +tmp_f , 0 , -tmp_h ; +tmp_g , +tmp_h , 0 ];
if (flag_verbose>0); disp(sprintf(' %% tmp_Delta_R_dif__ vs tmp_Delta_R_mid__: %0.16f',fnorm(tmp_Delta_R_dif__ - tmp_Delta_R_mid__)/max(1e-12,fnorm(tmp_Delta_R_dif__)))); end;
%%%%;
SmallRotation_Delta_R__ = tmp_Delta_R_mid__;
%%%%;
tmp_a_k_Y_pos_wign_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,a_k_Y_form_,-flip(dtau*euler_azimu_b_one_));
tmp_a_k_Y_neg_wign_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,a_k_Y_form_,+(dtau*euler_azimu_b_one_));
tmp_a_k_Y_dif_wign_ = (tmp_a_k_Y_pos_wign_ - tmp_a_k_Y_neg_wign_)/max(1e-12,2*dtau);
tmp_a_k_Y_mid_wign_ = +i*a_k_Y_form_.*Y_m_val_;
if (flag_verbose>0); disp(sprintf(' %% tmp_a_k_Y_dif_wign_ vs tmp_a_k_Y_mid_wign_: %0.16f',fnorm(tmp_a_k_Y_dif_wign_ - tmp_a_k_Y_mid_wign_)/max(1e-12,fnorm(tmp_a_k_Y_dif_wign_)))); end;
%%%%;
tmp_a_k_Y_pos_wign_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,a_k_Y_form_,-flip(SmallRotation_euler_)),-flip(dtau*euler_azimu_b_one_)),+SmallRotation_euler_);
tmp_a_k_Y_neg_wign_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,a_k_Y_form_,-flip(SmallRotation_euler_)),     +dtau*euler_azimu_b_one_ ),+SmallRotation_euler_);
tmp_a_k_Y_dif_wign_ = (tmp_a_k_Y_pos_wign_ - tmp_a_k_Y_neg_wign_)/max(1e-12,2*dtau);
tmp_a_k_Y_mid_wign_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,bsxfun(@times,rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,a_k_Y_form_,-flip(SmallRotation_euler_)),+i*Y_m_val_),+SmallRotation_euler_);
if (flag_verbose>0); disp(sprintf(' %% tmp_a_k_Y_dif_wign_ vs tmp_a_k_Y_mid_wign_: %0.16f',fnorm(tmp_a_k_Y_dif_wign_ - tmp_a_k_Y_mid_wign_)/max(1e-12,fnorm(tmp_a_k_Y_dif_wign_)))); end;
%%%%;
SmallRotation_dvol_a_k_Y_form_ = tmp_a_k_Y_mid_wign_;
%%%%;
tmp_f = +SmallRotation_Delta_R__(1+1,1+0);
tmp_g = +SmallRotation_Delta_R__(1+2,1+0);
tmp_h = +SmallRotation_Delta_R__(1+2,1+1);
SmallRotation_dtau_euler_polar_a_M_ = zeros(n_M,1);
SmallRotation_dtau_euler_azimu_b_M_ = zeros(n_M,1);
SmallRotation_dtau_euler_gamma_z_M_ = zeros(n_M,1);
for nM=0:n_M-1;
tmp_polar_a_ori = +euler_polar_a_M_(1+nM);
tmp_azimu_b_ori = +euler_azimu_b_M_(1+nM);
tmp_gamma_z_ori = -euler_gamma_z_M_(1+nM);
tmp_da_mid = +(sin(tmp_polar_a_ori)*(tmp_g*cos(tmp_azimu_b_ori) + tmp_h*sin(tmp_azimu_b_ori)))/(1 - cos(tmp_polar_a_ori)^2)^(1/2);
tmp_db_mid = -(cos(tmp_azimu_b_ori)*(tmp_f*sin(tmp_polar_a_ori) - tmp_h*cos(tmp_polar_a_ori)*cos(tmp_azimu_b_ori) + tmp_g*cos(tmp_polar_a_ori)*sin(tmp_azimu_b_ori)))/(cos(tmp_azimu_b_ori)*sin(tmp_polar_a_ori)); %<-- remove lower order terms from denominator. ;
tmp_dc_mid = -(cos(tmp_gamma_z_ori)*(tmp_h*cos(tmp_azimu_b_ori) - tmp_g*sin(tmp_azimu_b_ori)))/(cos(tmp_gamma_z_ori)*sin(tmp_polar_a_ori)); %<-- remove lower order terms from denominator. ;
flag_check=1;
if flag_check;
tmp_euler_ori_ = [-tmp_azimu_b_ori,-tmp_polar_a_ori,-tmp_gamma_z_ori];
tmp_Combi_R_mid__ = euler_to_R(tmp_euler_ori_)*(eye(3)+0*dtau*SmallRotation_Delta_R__);
tmp_polar_a_mid = acos(tmp_Combi_R_mid__(1+2,1+2));
tmp_azimu_b_mid = atan2(+tmp_Combi_R_mid__(1+2,1+1),+tmp_Combi_R_mid__(1+2,1+0));
tmp_gamma_z_mid = atan2(+tmp_Combi_R_mid__(1+1,1+2),-tmp_Combi_R_mid__(1+0,1+2));
tmp_euler_mid_ = -[tmp_azimu_b_mid,tmp_polar_a_mid,tmp_gamma_z_mid]; %tmp_euler_mid_ = R_to_euler_0(euler_to_R(tmp_euler_ori_)*(eye(3)+dtau*SmallRotation_Delta_R__));
tmp_Combi_R_pos__ = euler_to_R(tmp_euler_ori_)*(eye(3)-1*dtau*SmallRotation_Delta_R__); %<-- Note that this is the approximate inverse of (I+dtau*Delta_R). ;
tmp_polar_a_pos = acos(tmp_Combi_R_pos__(1+2,1+2));
tmp_azimu_b_pos = atan2(+tmp_Combi_R_pos__(1+2,1+1),+tmp_Combi_R_pos__(1+2,1+0));
tmp_gamma_z_pos = atan2(+tmp_Combi_R_pos__(1+1,1+2),-tmp_Combi_R_pos__(1+0,1+2));
tmp_euler_pos_ = -[tmp_azimu_b_pos,tmp_polar_a_pos,tmp_gamma_z_pos]; %tmp_euler_pos_ = R_to_euler_0(euler_to_R(tmp_euler_ori_)*(eye(3)+dtau*SmallRotation_Delta_R__));
tmp_Combi_R_neg__ = euler_to_R(tmp_euler_ori_)*(eye(3)+1*dtau*SmallRotation_Delta_R__); %<-- Note that this is the approximate inverse of (I+dtau*Delta_R). ;
tmp_polar_a_neg = acos(tmp_Combi_R_neg__(1+2,1+2));
tmp_azimu_b_neg = atan2(+tmp_Combi_R_neg__(1+2,1+1),+tmp_Combi_R_neg__(1+2,1+0));
tmp_gamma_z_neg = atan2(+tmp_Combi_R_neg__(1+1,1+2),-tmp_Combi_R_neg__(1+0,1+2));
tmp_euler_neg_ = -[tmp_azimu_b_neg,tmp_polar_a_neg,tmp_gamma_z_neg]; %tmp_euler_neg_ = R_to_euler_0(euler_to_R(tmp_euler_ori_)*(eye(3)-dtau*SmallRotation_Delta_R__));
tmp_deuler_dif_ = (tmp_euler_pos_ - tmp_euler_neg_)/max(1e-12,2*dtau);
tmp_deuler_mid_ = [tmp_db_mid,tmp_da_mid,tmp_dc_mid];
if (flag_verbose>0); disp(sprintf(' %% tmp_deuler_dif_ vs tmp_deuler_mid_: %0.16f',fnorm(tmp_deuler_dif_ - tmp_deuler_mid_)/max(1e-12,fnorm(tmp_deuler_dif_)))); end;
end;%if flag_check;
SmallRotation_dtau_euler_polar_a_M_(1+nM) = +tmp_da_mid;
SmallRotation_dtau_euler_azimu_b_M_(1+nM) = +tmp_db_mid;
SmallRotation_dtau_euler_gamma_z_M_(1+nM) = -tmp_dc_mid;
end;%for nM=0:n_M-1;
%%%%;
tmp_t = tic();
viewing_gamma_z_S_ = zeros(n_S,1);
parameter_ssnll = struct('type','parameter');
[ ...
 ~ ...
,ssnll_q2d_M_ ...
,ssnll_q2d ...
,S_k_p_q2d_q2d_wkS__ ...
,dvol_ssnll_q2d_M_ ...
,dvol_ssnll_q2d ...
,dvol_S_k_p_q2d_wkS__ ...
,dvol_dvol_ssnll_q2d ...
,dtau_ssnll_q2d_M3__ ...
,dtau_ssnll_q2d ...
,dtau_S_k_p_q2d_wkS3___ ...
] = ...
ssnll_from_a_k_Y_12( ...
 parameter_ssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_form_ ...
,SmallRotation_dvol_a_k_Y_form_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,[] ...
,[] ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,SmallRotation_dtau_euler_polar_a_M_ ...
,SmallRotation_dtau_euler_azimu_b_M_ ...
,SmallRotation_dtau_euler_gamma_z_M_ ...
);
tmp_t = toc(tmp_t);
if (flag_verbose>0); disp(sprintf(' %% ssnll_from_a_k_Y_12 (yes derivative): %0.6fs',tmp_t)); end;
%%%%%%%%;
SmallRotation_dtau_M3__ = [ ...
,SmallRotation_dtau_euler_polar_a_M_ ...
,SmallRotation_dtau_euler_azimu_b_M_ ...
,SmallRotation_dtau_euler_gamma_z_M_ ...
] ;
dtau_ssnll_q2d_M_ = sum(dtau_ssnll_q2d_M3__.*SmallRotation_dtau_M3__,[2]);
if flag_disp;
figure(1+nf);nf=nf+1;clf;figsml;
plot(dvol_ssnll_q2d_M_,dtau_ssnll_q2d_M_,'o');
xlabel('dvol_ssnll_q2d_M_','Interpreter','none');
ylabel('dtau_ssnll_q2d_M_','Interpreter','none');
end;%if flag_disp;
if (flag_verbose>0); disp(sprintf(' %% dtau_ssnll_q2d + dvol_ssnll_q2d = %0.6f',dtau_ssnll_q2d + dvol_ssnll_q2d)); end;
%%%%%%%%;
% Aligns. ;
%%%%%%%%;

%%%%%%%%;
% Now determine space of all such alignments (should have dimension of so3). ;
%%%%%%%%;
n_SmallRotation = 9;
SmallRotation_dvol_a_k_Y_form_yks__ = zeros(n_lm_sum,n_SmallRotation);
SmallRotation_dtau_euler_polar_a_Ms__ = zeros(n_M,n_SmallRotation);
SmallRotation_dtau_euler_azimu_b_Ms__ = zeros(n_M,n_SmallRotation);
SmallRotation_dtau_euler_gamma_z_Ms__ = zeros(n_M,n_SmallRotation);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
for nSmallRotation=0:n_SmallRotation-1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% nSmallRotation = %d/%d',nSmallRotation,n_SmallRotation)); end;
SmallRotation_polar_a = 1*pi*rand();
SmallRotation_azimu_b = 2*pi*rand();
SmallRotation_gamma_z = 2*pi*rand();
SmallRotation_euler_ = [-SmallRotation_azimu_b,-SmallRotation_polar_a,+SmallRotation_gamma_z]; %<-- note the reversal in ordering. ;
SmallRotation_R__ = euler_to_R(SmallRotation_euler_);
euler_azimu_b_one_ = [+1,+0,+0];
tmp_f = +cos(SmallRotation_polar_a);
tmp_g = -sin(SmallRotation_polar_a)*sin(-SmallRotation_gamma_z); %<-- note flipped sign of SmallRotation_gamma_z. ;
tmp_h = -sin(SmallRotation_polar_a)*cos(-SmallRotation_gamma_z);
SmallRotation_Delta_R__ = [ 0 , -tmp_f , -tmp_g ; +tmp_f , 0 , -tmp_h ; +tmp_g , +tmp_h , 0 ];
SmallRotation_dvol_a_k_Y_form_ = rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,bsxfun(@times,rotate_spharm_to_spharm_3(n_k_p_r,k_p_r_,l_max_,a_k_Y_form_,-flip(SmallRotation_euler_)),+i*Y_m_val_),+SmallRotation_euler_);
%%%%;
tmp_f = +SmallRotation_Delta_R__(1+1,1+0);
tmp_g = +SmallRotation_Delta_R__(1+2,1+0);
tmp_h = +SmallRotation_Delta_R__(1+2,1+1);
SmallRotation_dtau_euler_polar_a_M_ = zeros(n_M,1);
SmallRotation_dtau_euler_azimu_b_M_ = zeros(n_M,1);
SmallRotation_dtau_euler_gamma_z_M_ = zeros(n_M,1);
for nM=0:n_M-1;
tmp_polar_a_ori = +euler_polar_a_M_(1+nM);
tmp_azimu_b_ori = +euler_azimu_b_M_(1+nM);
tmp_gamma_z_ori = -euler_gamma_z_M_(1+nM);
tmp_da_mid = +(sin(tmp_polar_a_ori)*(tmp_g*cos(tmp_azimu_b_ori) + tmp_h*sin(tmp_azimu_b_ori)))/(1 - cos(tmp_polar_a_ori)^2)^(1/2);
tmp_db_mid = -(cos(tmp_azimu_b_ori)*(tmp_f*sin(tmp_polar_a_ori) - tmp_h*cos(tmp_polar_a_ori)*cos(tmp_azimu_b_ori) + tmp_g*cos(tmp_polar_a_ori)*sin(tmp_azimu_b_ori)))/(cos(tmp_azimu_b_ori)*sin(tmp_polar_a_ori)); %<-- remove lower order terms from denominator. ;
tmp_dc_mid = -(cos(tmp_gamma_z_ori)*(tmp_h*cos(tmp_azimu_b_ori) - tmp_g*sin(tmp_azimu_b_ori)))/(cos(tmp_gamma_z_ori)*sin(tmp_polar_a_ori)); %<-- remove lower order terms from denominator. ;
SmallRotation_dtau_euler_polar_a_M_(1+nM) = +tmp_da_mid;
SmallRotation_dtau_euler_azimu_b_M_(1+nM) = +tmp_db_mid;
SmallRotation_dtau_euler_gamma_z_M_(1+nM) = -tmp_dc_mid;
end;%for nM=0:n_M-1;
%%%%;
SmallRotation_dvol_a_k_Y_form_yks__(:,1+nSmallRotation) = SmallRotation_dvol_a_k_Y_form_;
SmallRotation_dtau_euler_polar_a_Ms__(:,1+nSmallRotation) = SmallRotation_dtau_euler_polar_a_M_;
SmallRotation_dtau_euler_azimu_b_Ms__(:,1+nSmallRotation) = SmallRotation_dtau_euler_azimu_b_M_;
SmallRotation_dtau_euler_gamma_z_Ms__(:,1+nSmallRotation) = SmallRotation_dtau_euler_gamma_z_M_;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%for nSmallRotation=0:n_SmallRotation-1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
SmallRotation_Delta_ykabcs__ = cat( ...
 1 ...
,SmallRotation_dvol_a_k_Y_form_yks__ ...
,SmallRotation_dtau_euler_polar_a_Ms__ ...
,SmallRotation_dtau_euler_azimu_b_Ms__ ...
,SmallRotation_dtau_euler_gamma_z_Ms__ ...
);
[U_SmallRotation_Delta_ykabcs__,S_SmallRotation_Delta_ss__,V_SmallRotation_Delta_ss__] = svds(SmallRotation_Delta_ykabcs__,n_SmallRotation);
S_SmallRotation_Delta_s_ = diag(S_SmallRotation_Delta_ss__);
if (flag_verbose>0); disp(sprintf(' %% S_SmallRotation_Delta_s_: %s',num2str(transpose(S_SmallRotation_Delta_s_),' %+0.6f'))); end;

flag_check=1;
if flag_check;
for ns=0:3-1;
tmp_t = tic();
viewing_gamma_z_S_ = zeros(n_S,1);
SmallRotation_dvol_a_k_Y_form_ = U_SmallRotation_Delta_ykabcs__(1:n_lm_sum,1+ns);
SmallRotation_dtau_euler_polar_a_M_ = U_SmallRotation_Delta_ykabcs__(1*n_lm_sum + 0*n_M + [1:n_M],1+ns);
SmallRotation_dtau_euler_azimu_b_M_ = U_SmallRotation_Delta_ykabcs__(1*n_lm_sum + 1*n_M + [1:n_M],1+ns);
SmallRotation_dtau_euler_gamma_z_M_ = U_SmallRotation_Delta_ykabcs__(1*n_lm_sum + 2*n_M + [1:n_M],1+ns);
parameter_ssnll = struct('type','parameter');
[ ...
 ~ ...
,ssnll_q2d_M_ ...
,ssnll_q2d ...
,S_k_p_q2d_q2d_wkS__ ...
,dvol_ssnll_q2d_M_ ...
,dvol_ssnll_q2d ...
,dvol_S_k_p_q2d_wkS__ ...
,dvol_dvol_ssnll_q2d ...
,dtau_ssnll_q2d_M3__ ...
,dtau_ssnll_q2d ...
,dtau_S_k_p_q2d_wkS3___ ...
] = ...
ssnll_from_a_k_Y_12( ...
 parameter_ssnll ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,l_max_ ...
,a_k_Y_form_ ...
,SmallRotation_dvol_a_k_Y_form_ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_wk_ ...
,n_S ...
,[] ...
,[] ...
,[] ...
,[] ...
,[] ...
,viewing_polar_a_S_ ...
,viewing_azimu_b_S_ ...
,viewing_weight_S_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,n_M ...
,M_k_p_wkM__ ...
,index_nCTF_from_nM_ ...
,CTF_k_p_wkC__ ...
,[] ...
,[] ...
,euler_polar_a_M_ ...
,euler_azimu_b_M_ ...
,euler_gamma_z_M_ ...
,SmallRotation_dtau_euler_polar_a_M_ ...
,SmallRotation_dtau_euler_azimu_b_M_ ...
,SmallRotation_dtau_euler_gamma_z_M_ ...
);
tmp_t = toc(tmp_t);
if (flag_verbose>0); disp(sprintf(' %% ssnll_from_a_k_Y_12 (yes derivative): %0.6fs',tmp_t)); end;
%%%%%%%%;
SmallRotation_dtau_M3__ = [ ...
,SmallRotation_dtau_euler_polar_a_M_ ...
,SmallRotation_dtau_euler_azimu_b_M_ ...
,SmallRotation_dtau_euler_gamma_z_M_ ...
] ;
dtau_ssnll_q2d_M_ = sum(dtau_ssnll_q2d_M3__.*SmallRotation_dtau_M3__,[2]);
if (flag_verbose>0); disp(sprintf(' %% ns=%d/3 dtau_ssnll_q2d + dvol_ssnll_q2d = %0.6f',ns,dtau_ssnll_q2d + dvol_ssnll_q2d)); end;
end;%for ns=0:3-1;
end;%if flag_check;
%%%%%%%%;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (flag_verbose>0); disp(sprintf(' %% [finished %s]',str_thisfunction)); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

disp('returning'); return;
