load('ampmh_X_wSM___5_debug.mat');
if (verbose); disp(sprintf(' %% [entering ampmh_X_wSM___5_experiment_5]')); end;

if ~exist('ampmh_X_wSM___5_experiment_5.mat');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
template_tree = get_template_tree_0(viewing_k_eq_d,5);

%%%%%%%%;
% Pull out CTF-modes for the principal-templates. ;
%%%%%%%%;
[n_S] = sample_shell_5(pm_k_p_r_max,viewing_k_eq_d,'L') ; %<-- obtain viewing angles on outer shell. ;
tmp_t = tic();
tmp_verbose=0;
UCTF_UX_S_k_p_wSc___ = zeros(pm_n_w_sum,n_S,n_CTF_rank);
for nCTF_rank=0:n_CTF_rank-1;
[ ...
 UCTF_UX_S_k_p_wSc___(:,:,1+nCTF_rank) ...
,~ ...
,~ ...
,~ ...
,n_viewing_all ...
,viewing_azimu_b_all_ ...
,viewing_polar_a_all_ ...
,~ ...
,~ ...
,~ ...
,~ ...
,~ ...
,~ ...
,~ ...
] = ...
get_template_1( ...
 tmp_verbose ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_k_p_r_max ...
,pm_weight_k_p_r_ ...
,pm_l_max_ ...
,a_UCTF_UX_Y_0lsq_ync__(:,1+nCTF_rank) ...
,viewing_k_eq_d ...
,-1 ...
,pm_n_w_ ...
);
assert(n_S==n_viewing_all);
end;%for nCTF_rank=0:n_CTF_rank-1;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% get_template_1: %0.3fs',tmp_t)); end;
%%%%%%%%;

%%%%%%%%;
% group images by micrograph (i.e., sort by CTF_index_). ;
%%%%%%%%;
u_CTF_index_ = unique(CTF_index_(1:n_M)); n_u_CTF_index = numel(u_CTF_index_);
index_M_CTF_index__ = cell(n_u_CTF_index,1);
n_u_CTF_index_ = zeros(n_u_CTF_index,1);
for nu_CTF_index=0:n_u_CTF_index-1;
u_CTF_index = u_CTF_index_(1+nu_CTF_index);
index_M_CTF_index__{1+nu_CTF_index} = efind(CTF_index_(1:n_M)==u_CTF_index);
n_u_CTF_index_(1+nu_CTF_index) = numel(index_M_CTF_index__{1+nu_CTF_index});
end;%for nu_CTF_index=0:n_u_CTF_index-1;
if (verbose); disp(sprintf(' %% n_u_CTF_index %d',n_u_CTF_index)); end;
%%%%%%%%;
if (verbose);
for nu_CTF_index=0:n_u_CTF_index-1;
disp(sprintf(' %% nu_CTF_index %.3d/%.3d (%.8d) <-- n %.3d',nu_CTF_index,n_u_CTF_index,u_CTF_index_(1+nu_CTF_index),n_u_CTF_index_(1+nu_CTF_index)));
end;%for nu_CTF_index=0:n_u_CTF_index-1;
disp(sprintf(' %% n_M %.4d sum(n_u_CTF_index_) = %.4d',n_M,sum(n_u_CTF_index_)));
end;%if (verbose);

%%%%%%%%;
% Now step through each micrograph. ;
% Calculate the templates associated with that particular CTF-function, ;
% and then calculate innerproducts between those templates and all the images. ;
%%%%%%%%;
parameter = struct('type','parameter');
parameter.svd_eps_use = 0.01;
parameter.n_svd_l_use = 0;
parameter.n_delta_v_use = 48;
parameter.pm_n_UX_rank_use = pm_n_UX_rank;
parameter.n_w_max_use = 80;
parameter.flag_optimize_over_gamma_z = 1;
parameter.n_neighborhood_retain = 4;
X_SM_full__ = zeros(n_S,n_M);
delta_x_SM_full__ = zeros(n_S,n_M);
delta_y_SM_full__ = zeros(n_S,n_M);
gamma_z_SM_full__ = zeros(n_S,n_M);
I_value_SM_full__ = zeros(n_S,n_M);
t_full = 0;
X_SM_tree__ = zeros(n_S,n_M);
delta_x_SM_tree__ = zeros(n_S,n_M);
delta_y_SM_tree__ = zeros(n_S,n_M);
gamma_z_SM_tree__ = zeros(n_S,n_M);
I_value_SM_tree__ = zeros(n_S,n_M);
t_level_SM_tree__ = zeros(n_S,n_M);
t_tree = 0;

%%%%%%%%;
for nu_CTF_index=0:n_u_CTF_index-1;
%%%%%%%%;

tmp_index_M_ = index_M_CTF_index__{1+nu_CTF_index};
tmp_n_M = n_u_CTF_index_(1+nu_CTF_index);
if (verbose); disp(sprintf(' %% nu_CTF_index %d/%d --> tmp_n_M %d [%d,..,%d] ',nu_CTF_index,n_u_CTF_index,tmp_n_M,tmp_index_M_(0+1),tmp_index_M_(tmp_n_M-1+1))); end;
%%%%%%%%;
% combine CTF-modes to form templates for that particular CTF-function. ;
%%%%%%%%;
tmp_t = tic();
VSCTF_avg_ = mean(VSCTF_Mc__(1+tmp_index_M_,:),1);
VSCTF_std_ = std(VSCTF_Mc__(1+tmp_index_M_,:),1,1);
assert(max(VSCTF_std_./max(1e-12,abs(VSCTF_avg_)))<1e-6); %<-- consider lowering threshold to 1e-3. ;
CTF_UX_S_k_p_wnS__ = zeros(pm_n_w_sum,n_S);
for nCTF_rank=0:n_CTF_rank-1;
CTF_UX_S_k_p_wnS__ = CTF_UX_S_k_p_wnS__ + UCTF_UX_S_k_p_wSc___(:,:,1+nCTF_rank) * VSCTF_avg_(1+nCTF_rank);
end;%for nCTF_rank=0:n_CTF_rank-1;
%%%%%%%%;
CTF_UX_S_l2_ = zeros(n_S,1);
for nS=0:n_S-1;
CTF_UX_S_l2_(1+nS) = ...
innerproduct_p_quad( ...
 pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_weight_2d_k_p_r_/(2*pi) ...
,pm_n_w_ ...
,pm_n_w_sum ...
,CTF_UX_S_k_p_wnS__(:,1+nS) ...
,CTF_UX_S_k_p_wnS__(:,1+nS) ...
);
end;%for nS=0:n_S-1;
%%%%%%%%;
CTF_UX_S_k_q_wnS__ = zeros(pm_n_w_sum,n_S);
for nS=0:n_S-1;
CTF_UX_S_k_q_wnS__(:,1+nS) = ...
interp_p_to_q( ...
 pm_n_k_p_r ...
,pm_n_w_ ...
,pm_n_w_sum ...
,CTF_UX_S_k_p_wnS__(:,1+nS) ...
); 
end;%for nS=0:n_S-1; 
%%%%%%%%;

%%%%%%%%;
% Now test out template alignment for that particular tmp_n_M. ;
%%%%%%%%;
tmp_t = tic();
[ ...
 X_SM_full__(:,1+tmp_index_M_) ...
,delta_x_SM_full__(:,1+tmp_index_M_) ...
,delta_y_SM_full__(:,1+tmp_index_M_) ...
,gamma_z_SM_full__(:,1+tmp_index_M_) ...
,I_value_SM_full__(:,1+tmp_index_M_) ...
] = ...
ampmh_X_local_SM__7( ...
 FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,n_S_per_Sbatch ...
,CTF_UX_S_k_p_wnS__ ...
,CTF_UX_S_l2_ ...
,tmp_n_M ...
,n_M_per_Mbatch ...
,svd_VUXM_lwnM____(:,:,:,1+tmp_index_M_) ...
,UX_M_l2_dM__(:,1+tmp_index_M_) ...
,parameter ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_SM_full__: %0.3fs',tmp_t)); end;
t_full = t_full + tmp_t;

%%%%%%%%;
% Compare to local search. ;
%%%%%%%%;
tmp_t = tic();
[ ...
 X_SM_tree__(:,1+tmp_index_M_) ...
,delta_x_SM_tree__(:,1+tmp_index_M_) ...
,delta_y_SM_tree__(:,1+tmp_index_M_) ...
,gamma_z_SM_tree__(:,1+tmp_index_M_) ...
,I_value_SM_tree__(:,1+tmp_index_M_) ...
,t_level_SM_tree__(:,1+tmp_index_M_) ...
] = ...
ampmh_X_local_SM__7( ...
 FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,n_S_per_Sbatch ...
,CTF_UX_S_k_p_wnS__ ...
,CTF_UX_S_l2_ ...
,tmp_n_M ...
,n_M_per_Mbatch ...
,svd_VUXM_lwnM____(:,:,:,1+tmp_index_M_) ...
,UX_M_l2_dM__(:,1+tmp_index_M_) ...
,parameter ...
,template_tree ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_SM_tree__: %0.3fs',tmp_t)); end;
t_tree = t_tree + tmp_t;

%%%%%%%%;
end;%for nu_CTF_index=0:n_u_CTF_index-1;
%%%%%%%%;

%%%%%%%%;
X_p_tree_ = zeros(n_M,1);
X_p_full_ = zeros(n_M,1);
for nM=0:n_M-1;
[~,tmp_ij] = max(X_SM_tree__(:,1+nM));
tmp_p = numel(efind(X_SM_full__(:,1+nM)<=X_SM_full__(tmp_ij,1+nM)))/n_S;
X_p_tree_(1+nM) = tmp_p;
tmp_index_ = efind(t_level_SM_tree__(:,1+nM)>=0);
[~,tmp_ij] = max(X_SM_tree__(1+tmp_index_,1+nM));
assert(fnorm(X_SM_tree__(1+tmp_index_(tmp_ij),1+nM)-X_SM_full__(1+tmp_index_(tmp_ij),1+nM))<1e-3);
tmp_p = numel(efind(X_SM_full__(:,1+nM)<=X_SM_full__(1+tmp_index_(tmp_ij),1+nM)))/n_S;
X_p_full_(1+nM) = tmp_p;
end;%for nM=0:n_M-1;
%%%%%%%%;

save( ...
 'ampmh_X_wSM___5_experiment_5.mat' ...
,'parameter' ...
,'X_SM_full__' ...
,'delta_x_SM_full__' ...
,'delta_y_SM_full__' ...
,'gamma_z_SM_full__' ...
,'I_value_SM_full__' ...
,'template_tree' ...
,'X_SM_tree__' ...
,'delta_x_SM_tree__' ...
,'delta_y_SM_tree__' ...
,'gamma_z_SM_tree__' ...
,'I_value_SM_tree__' ...
,'t_level_SM_tree__' ...
,'X_p_tree_','X_p_full_','t_tree','t_full' ...
);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%if ~exist('ampmh_X_wSM___5_experiment_5.mat');

load('ampmut_1_debug.mat');
load('ampmh_X_wSM___5_experiment_5.mat');


%%%%%%%%;
% Now extract viewing-angles. ;
%%%%%%%%;
flag_MS_vs_SM = 1;
if flag_MS_vs_SM==1; %<-- assign images to templates, ensuring a uniform distribution of viewing angles. ;
tmp_t = tic();
[ ...
 euler_polar_a_ ...
,euler_azimu_b_ ...
,euler_gamma_z_ ...
,image_delta_x_upd_ ...
,image_delta_y_upd_ ...
,image_I_value_ ...
,image_X_value_ ...
,image_S_index_ ...
] = ...
ampmh_MS_2( ...
 parameter.n_w_max_use ...
,n_S ...
,viewing_polar_a_all_ ...
,viewing_azimu_b_all_ ...
,n_M ...
,X_SM_full__ ...
,delta_x_SM_full__ ...
,delta_y_SM_full__ ...
,gamma_z_SM_full__ ...
,I_value_SM_full__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% MS: update euler_polar_a_ euler_azimu_b_ euler_gamma_z_ : %0.3fs',tmp_t)); end;
end;%if flag_MS_vs_SM==1; %<-- assign images to templates, ensuring a uniform distribution of viewing angles. ;
image_delta_x_ = image_delta_x_upd_; %<-- assume that we start from 0-translation. ;
image_delta_y_ = image_delta_y_upd_; %<-- assume that we start from 0-translation. ;
%%%%%%%%;
% and test least-squares. ;
%%%%%%%%;
%%%%%%%%;
% First construct M_k_q__ while taking into account the translations. ;
%%%%%%%%;
tmp_t = tic();
M_k_q__ = zeros(n_w_sum,n_M);
for nM=0:n_M-1;
M_k_p_ = ...
transf_p_to_p( ...
 n_k_p_r ...
,k_p_r_ ...
,n_w_ ...
,n_w_sum ...
,M_k_p__(:,1+nM) ...
,+image_delta_x_(1+nM) ...
,+image_delta_y_(1+nM) ...
);
M_k_q__(:,1+nM) = ...
interp_p_to_q( ...
 n_k_p_r ...
,n_w_ ...
,n_w_sum ...
,M_k_p_ ...
);
end;%for nM=0:n_M-1;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% M_k_q__: %0.3fs',tmp_t)); end;
%%%%%%%%;
% Now form svd_VUXM_lwnM____ using these translated images. ;
%%%%%%%%;
tmp_t = tic();
svd_VUXM_lwnM____ = tpmh_VUXM_lwnM____0(FTK,n_k_p_r,n_w_,n_M,M_k_q__,pm_n_UX_rank,UX__,X_weight_r_);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_VUXM_lwnM____: %0.3fs',tmp_t)); end;
%%%%%%%%;
% Now calculate norms of the translated images. ;
%%%%%%%%;
tmp_t = tic();
UX_M_l2_dM__ = ampmh_UX_M_l2_dM__1(FTK,n_w_,n_M,pm_n_UX_rank,svd_VUXM_lwnM____);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UX_M_l2_dM__: %0.3fs',tmp_t)); end;
%%%%%%%%;
% Now, form principal-images (using the zero-displacement). ;
%%%%%%%%;
tmp_t = tic();
[UX_M_k_q_wnM___,UX_M_k_p_wnM___] = ampmh_UX_M_k_p_wnM___0(FTK,n_w_,pm_n_UX_rank,n_M,svd_VUXM_lwnM____,zeros(n_M,1),zeros(n_M,1));
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UX_M_k_q_wnM___: %0.6fs',tmp_t)); end;

%%%%%%%%;
% use current euler-angles and displacements to solve for current model. ;
%%%%%%%%;
profile on;
tmp_t = tic();
a_UCTF_UX_Y_0lsq_ync__ = ...
cg_lsq_pm_0( ...
 pm_n_order ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_l_max_ ...
,pm_n_w_ ...
,n_M ...
,reshape(UX_M_k_p_wnM___,[n_w_max*pm_n_k_p_r,n_M]) ...
,n_CTF_rank ...
,VSCTF_Mc__ ...
,euler_polar_a_ ...
,euler_azimu_b_ ...
,euler_gamma_z_ ...
,[] ...
,[] ...
,image_I_value_ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% cg_lsq_pm_0 for a_UCTF_UX_Y_0lsq_ync__: %0.3fs',tmp_t)); end;
profile viewer; profile off;

%%%%%%%%;
% use current euler-angles and displacements to solve for current model. ;
%%%%%%%%;
profile on;
tmp_t = tic();
a_UCTF_UX_Y_1lsq_ync__ = ...
cg_lsq_pm_1( ...
 pm_n_order ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_l_max_ ...
,pm_n_w_ ...
,n_M ...
,reshape(UX_M_k_p_wnM___,[n_w_max*pm_n_k_p_r,n_M]) ...
,n_CTF_rank ...
,VSCTF_Mc__ ...
,euler_polar_a_ ...
,euler_azimu_b_ ...
,euler_gamma_z_ ...
,[] ...
,[] ...
,image_I_value_ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% cg_lsq_pm_0 for a_UCTF_UX_Y_0lsq_ync__: %0.3fs',tmp_t)); end;
profile viewer; profile off;

%%%%%%%%;
% approximate using quadrature-backpropagation. ;
%%%%%%%%;
tmp_t = tic();
a_UCTF_UX_Y_0qbp_ync__ = ...
qbp_pm_0( ...
 1/(2*pi) ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_l_max_ ...
,pm_n_w_ ...
,n_M ...
,reshape(UX_M_k_p_wnM___,[n_w_max*pm_n_k_p_r,n_M]) ...
,n_CTF_rank ...
,VSCTF_Mc__ ...
,euler_polar_a_ ...
,euler_azimu_b_ ...
,euler_gamma_z_ ...
,[] ...
,[] ...
,image_I_value_ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% cg_lsq_pm_0 for a_UCTF_UX_Y_0lsq_ync__: %0.3fs',tmp_t)); end;

%%%%%%%%;
% Now normalize a_CTF_UX_Y_0lsq_. ;
% This step is necessary to prevent the intensity from diverging over successive iterations. ;
%%%%%%%%;
a_UCTF_UX_Y_0lsq_ync__ = spharm__normalize_1(pm_n_k_p_r,pm_k_p_r_,pm_weight_k_p_r_,pm_l_max_,a_UCTF_UX_Y_0lsq_ync__);
%%%%%%%%;
% use a_UCTF_UX_Y_0lsq_ync__ as well VSCTF_Mc__ to approximate the image-averaged a_CTF_UX_Y_0lsq_. ;
%%%%%%%%;
a_CTF_UX_Y_0lsq_ = spharm_normalize_1(pm_n_k_p_r,pm_k_p_r_,pm_weight_k_p_r_,pm_l_max_,mean(a_UCTF_UX_Y_0lsq_ync__*transpose(VSCTF_Mc__),2));



disp('returning'); return;

tpmh_VUXM_lwnM____2(FTK,n_k_p_r,n_w_,n_M,M_k_q__,pm_n_UX_rank,UX__,X_weight_r_);

tmp_t = tic();
tpmh_VUXM_lwnM____1(FTK,n_k_p_r,n_w_,n_M,M_k_q__,pm_n_UX_rank,UX__,X_weight_r_);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_VUXM_lwnM____: %0.3fs',tmp_t)); end;
