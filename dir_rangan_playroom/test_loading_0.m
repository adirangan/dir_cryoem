% clear; test_pm_rib80s_3;

verbose = 2;

%%%%%%%%;
% set up indices. ;
%%%%%%%%;
n_w_max = max(n_w_);
n_w_sum = sum(n_w_);
n_w_csum_ = cumsum([0;n_w_]);
l_max_max = max(l_max_);
n_lm_ = (l_max_+1).^2;
n_lm_max = max(n_lm_);
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
%%%%%%%%;
n_UX_rank = n_k_p_r-1; %<-- just to check dimensions. ;
%%%%%%%%;
% set up CTF average. ;
%%%%%%%%;
CTF_k_p_r__ = zeros(n_k_p_r,n_CTF);
for nCTF=0:n_CTF-1;
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_w_csum_(1+nk_p_r) + (0:n_w_(1+nk_p_r)-1);
CTF_k_p_r__(1+nk_p_r,1+nCTF) = mean(CTF_k_p__(1+tmp_index_,1+nCTF));
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nCTF=0:n_CTF-1;
CTF_avg_k_p_ = mean(CTF_k_p__,2);
%imagesc_p(n_k_p_r,k_p_r_,n_w_,sum(n_w_),real(CTF_avg_k_p_(:)),[-1,+1],colormap_beach());
CTF_avg_k_p_r_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
tmp_index_ = n_w_csum_(1+nk_p_r) + (0:n_w_(1+nk_p_r)-1);
CTF_avg_k_p_r_(1+nk_p_r) = mean(CTF_avg_k_p_(1+tmp_index_));
end;%for nk_p_r=0:n_k_p_r-1;
CTF_k_p_r_xcor__ = CTF_k_p_r__(:,1+CTF_index_(1+(0:n_M-1))) * transpose(CTF_k_p_r__(:,1+CTF_index_(1+(0:n_M-1)))) / n_M;
%%%%%%%%;
% Calculate empirical principal-modes. ;
%%%%%%%%;
[ ...
 X_2d_Memp_d1__ ...
,X_2d_Memp_d1_weight_r_ ...
] = ...
principled_marching_empirical_cost_matrix_0( ...
 n_k_p_r ...
,k_p_r_ ...
,weight_2d_k_p_r_ ...
,n_w_ ...
,n_M ...
,M_k_p__ ...
);
%%%%%%%%;
[UX_2d_Memp_d1__,SX_2d_Memp_d1__,VX_2d_Memp_d1__] = svds(X_2d_Memp_d1__,n_UX_rank); SX_2d_Memp_d1_ = diag(SX_2d_Memp_d1__);
if (verbose); disp(sprintf(' %% cumsum(SX_2d_Memp_d1_): ')); disp(sprintf(' %% %0.4f',cumsum(SX_2d_Memp_d1_/sum(SX_2d_Memp_d1_)))); end;
%%%%%%%%;

pm_n_UX_rank = 8;

%%%%%%%%;
% set up indices for pm. ;
%%%%%%%%;
n_w_max = n_w_max + mod(n_w_max,2); %<-- round up to nearest even number. ;
l_max_max = n_w_max/2 - 1;
n_w_ = n_w_max*ones(n_k_p_r,1);
n_w_sum = sum(n_w_);
n_w_csum_ = cumsum([0;n_w_]);
%%%%;
pm_n_k_p_r = pm_n_UX_rank;
pm_k_p_r_ = ones(pm_n_k_p_r,1);
pm_k_p_r_max = 1;
pm_n_w_ = n_w_max*ones(pm_n_k_p_r,1);
pm_n_w_max = n_w_max;
pm_n_w_sum = sum(pm_n_w_);
pm_n_w_csum_ = cumsum([0;pm_n_w_]);
pm_l_max_ = l_max_max*ones(pm_n_k_p_r,1);
pm_n_lm_ = (1+pm_l_max_).^2; pm_n_lm_sum = sum(pm_n_lm_); pm_n_lm_max = max(pm_n_lm_); pm_n_lm_csum_ = cumsum([0;pm_n_lm_]);
pm_weight_k_p_r_ = ones(pm_n_k_p_r,1);
pm_weight_2d_k_p_r_ = ones(pm_n_k_p_r,1);
pm_weight_3d_k_p_r_ = ones(pm_n_k_p_r,1);
%%%%;

euler_polar_a_load_ = euler_polar_a_true_;
euler_azimu_b_load_ = euler_azimu_b_true_;
euler_gamma_z_load_ = euler_gamma_z_true_;
image_delta_x_load_ = image_delta_x_true_;
image_delta_y_load_ = image_delta_y_true_;
parameter = struct('type','parameter');
parameter.tolerance_master = 1e-2;
if (~isfield(parameter,'cg_lsq_n_order')); parameter.cg_lsq_n_order = 5; end;
cg_lsq_n_order = parameter.cg_lsq_n_order;

%%%%%%%%;
% define n_CTF_rank. ;
%%%%%%%%;
SCTF_ = svd(CTF_k_p_r__(:,1+CTF_index_(1:n_M)));
n_CTF_rank = max(find(SCTF_/max(SCTF_)>tolerance_master));
[UCTF_kc__,SCTF_c__,VCTF_Mc__] = svds(CTF_k_p_r__(:,1+CTF_index_(1:n_M)),n_CTF_rank);
VSCTF_Mc__ = VCTF_Mc__*SCTF_c__;

%%%%%%%%;
% Define null FTK. ;
%%%%%%%%;
FTK0 = ampmh_FTK_1(n_k_p_r,k_p_r_,k_p_r_max,0,1e-2,0);

%%%%%%%%;
% Construct M_k_q__ while taking into account translations. ;
%%%%%%%%;
tmp_t = tic();
M_k_q__ = zeros(n_w_sum,n_M);
for nM=0:n_M-1;
M_k_p_ = ...
transf_p_to_p( ...
 n_k_p_r ...
,k_p_r_ ...
,n_w_ ...
,n_w_sum ...
,M_k_p__(:,1+nM) ...
,+image_delta_x_load_(1+nM) ...
,+image_delta_y_load_(1+nM) ...
);
M_k_q__(:,1+nM) = ...
interp_p_to_q( ...
 n_k_p_r ...
,n_w_ ...
,n_w_sum ...
,M_k_p_ ...
);
end;%for nM=0:n_M-1;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% M_k_q__: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'M_k_q__',tmp_t);
%%%%%%%%;
% Now form svd_VUXM_lwnM____ using these translated images. ;
%%%%%%%%;
tmp_t = tic();
svd_VUXM_lwnM____(:,:,:,:) = tpmh_VUXM_lwnM____3(FTK0,n_k_p_r,n_w_,n_M,M_k_q__(:,:),pm_n_UX_rank,UX_2d_Memp_d1__,X_weight_r_);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_VUXM_lwnM____: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'svd_VUXM_lwnM____',tmp_t);
%%%%%%%%;
% Now calculate norms of the translated images. ;
%%%%%%%%;
tmp_t = tic();
UX_M_l2_dM__(:,:) = ampmh_UX_M_l2_dM__1(FTK0,n_w_,n_M,pm_n_UX_rank,svd_VUXM_lwnM____(:,:,:,:));
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UX_M_l2_dM__: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_UX_M_l2_dM__1',tmp_t);
%%%%%%%%;
% Now, form principal-images (the displacements are already included in the M_k_q__). ;
%%%%%%%%;
tmp_t = tic();
[UX_M_k_q_wnM___,UX_M_k_p_wnM___] = ampmh_UX_M_k_p_wnM___0(FTK0,n_w_,pm_n_UX_rank,n_M,svd_VUXM_lwnM____,[],[]);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UX_M_k_q_wnM___: %0.6fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_UX_M_k_p_wnM___0',tmp_t);

%%%%%%%%;
% reconstruct principal-volume. ;
%%%%%%%%;
tmp_t = tic();
parameter.cg_lsq_pcg_tol = [];
parameter.cg_lsq_pcg_maxit = [];
[ ...
 parameter ...
,a_UCTF_UX_Y_load_ync__ ...
,a_Residual_load_wnM__ ...
,a_pcg_flag_n_ ...
,a_pcg_relres_n_ ...
,a_pcg_iter_n_ ...
,a_pcg_resvec_ni__ ...
] = ...
cg_lsq_pm_2( ...
 parameter ...
,pm_n_k_p_r ...
,pm_l_max_ ...
,pm_n_w_ ...
,n_M ...
,reshape(UX_M_k_p_wnM___,[n_w_max*pm_n_UX_rank,n_M]) ...
,n_CTF_rank ...
,VSCTF_Mc__ ...
,euler_polar_a_load_ ...
,euler_azimu_b_load_ ...
,euler_gamma_z_load_ ...
,[] ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% a_UCTF_UX_Y_load_ync__: %0.6fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'a_UCTF_UX_Y_load_ync__',tmp_t);
%%%%%%%%;
tmp_t = tic();
parameter.cg_lsq_pcg_tol = parameter.tolerance_master*1e-1;
parameter.cg_lsq_pcg_maxit = 256;
[ ...
 parameter ...
,b_UCTF_UX_Y_load_ync__ ...
,b_Residual_load_wnM__ ...
,b_pcg_flag_n_ ...
,b_pcg_relres_n_ ...
,b_pcg_iter_n_ ...
,b_pcg_resvec_ni__ ...
] = ...
cg_lsq_pm_2( ...
 parameter ...
,pm_n_k_p_r ...
,pm_l_max_ ...
,pm_n_w_ ...
,n_M ...
,reshape(UX_M_k_p_wnM___,[n_w_max*pm_n_UX_rank,n_M]) ...
,n_CTF_rank ...
,VSCTF_Mc__ ...
,euler_polar_a_load_ ...
,euler_azimu_b_load_ ...
,euler_gamma_z_load_ ...
,[] ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% b_UCTF_UX_Y_load_ync__: %0.6fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'b_UCTF_UX_Y_load_ync__',tmp_t);
%%%%%%%%;
tmp_t = tic();
parameter.cg_lsq_pcg_tol = parameter.tolerance_master*1e-1;
parameter.cg_lsq_pcg_maxit = 256;
[ ...
 parameter ...
,c_UCTF_UX_Y_load_ync__ ...
,c_Residual_load_wnM__ ...
,c_pcg_flag_n_ ...
,c_pcg_relres_n_ ...
,c_pcg_iter_n_ ...
,c_pcg_resvec_ni__ ...
] = ...
cg_lsq_pm_2( ...
 parameter ...
,pm_n_k_p_r ...
,pm_l_max_ ...
,pm_n_w_ ...
,n_M ...
,b_Residual_load_wnM__ ...
,n_CTF_rank ...
,VSCTF_Mc__ ...
,euler_polar_a_load_ ...
,euler_azimu_b_load_ ...
,euler_gamma_z_load_ ...
,[] ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% c_UCTF_UX_Y_load_ync__: %0.6fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'c_UCTF_UX_Y_load_ync__',tmp_t);

%%%%%%%%;
% reconstruct principal-volume. ;
%%%%%%%%;
tmp_t = tic();
[ ...
 parameter ...
,a_UCTF_UX_Y_load_ync__ ...
,Residual_load_wnM__ ...
] = ...
cg_lsq_pm_2( ...
 parameter ...
,pm_n_k_p_r ...
,pm_l_max_ ...
,pm_n_w_ ...
,n_M ...
,reshape(UX_M_k_p_wnM___,[n_w_max*pm_n_UX_rank,n_M]) ...
,n_CTF_rank ...
,VSCTF_Mc__ ...
,euler_polar_a_load_ ...
,euler_azimu_b_load_ ...
,euler_gamma_z_load_ ...
,[] ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% a_UCTF_UX_Y_load_ync__: %0.6fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'a_UCTF_UX_Y_load_ync__',tmp_t);
%%%%%%%%;
a_UCTF_UX_Y_load_ync__ = spharm__normalize_1(pm_n_k_p_r,pm_k_p_r_,pm_weight_k_p_r_,pm_l_max_,a_UCTF_UX_Y_load_ync__);
%%%%%%%%;
% Use a_UCTF_UX_Y_load_ync__ as well VSCTF_Mc__ to approximate the image-averaged a_CTF_avg_UX_Y_. ;
% This is not actually used in the calculation, but can be useful for postprocessing. ;
%%%%%%%%;
a_CTF_avg_UX_Y_load_ = spharm_normalize_1(pm_n_k_p_r,pm_k_p_r_,pm_weight_k_p_r_,pm_l_max_,mean(a_UCTF_UX_Y_load_ync__*transpose(VSCTF_Mc__),2));

%%%%%%%%;
% Now compare a_CTF_avg_UX_Y_load_ with a_CTF_avg_UX_Y_true__ ;
%%%%%%%%;
a_k_Y_true_ = a_k_Y_quad_;
a_CTF_avg_UX_Y_true__ = zeros(n_lm_max,n_UX_rank);
for nUX_rank=0:n_UX_rank-1;
for nk_p_r=0:n_k_p_r-1;
tmp_l_max = l_max_(1+nk_p_r);
tmp_n_lm = (tmp_l_max+1).^2;
tmp_index_ = n_lm_csum_(1+nk_p_r) + (0:tmp_n_lm-1);
a_CTF_avg_UX_Y_true__(1:tmp_n_lm,1+nUX_rank) = ...
a_CTF_avg_UX_Y_true__(1:tmp_n_lm,1+nUX_rank) + ...
UX_2d_Memp_d1__(1+nk_p_r,1+nUX_rank)*X_2d_Memp_d1_weight_r_(1+nk_p_r)*a_k_Y_true_(1+tmp_index_)*CTF_avg_k_p_r_(1+nk_p_r); ...
%<-- use average CTF here, under the assumption that a_CTF_UX_Y_true_ will be used alone. ;
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nUX_rank=0:n_UX_rank-1;
%%%%%%%%;
tmp_t = tic();
N_wavelength = 0;
[ ...
 X_best_load ...
,X_flag_flip_load ...
] = ...
register_spharm_to_spharm_wigner_wrap_1( ...
 pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_k_p_r_max ...
,pm_weight_3d_k_p_r_ ...
,N_wavelength ...
,pm_l_max_ ...
,reshape(a_CTF_avg_UX_Y_true__(:,1:pm_n_UX_rank),[pm_n_lm_sum,1]) ...
,reshape(a_CTF_avg_UX_Y_load_,[pm_n_lm_sum,1]) ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_best: %0.6fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'X_best',tmp_t);
%%%%%%%%;
disp(sprintf(' %% X_best_load %0.2f, X_flag_flip_load %d',X_best_load,X_flag_flip_load));

%%%%%%%%;
% Now set up operators. ;
%%%%%%%%;
if (n_CTF_rank<=0); n_CTF_rank = 1; VSCTF_Mc__ = ones(n_M,1); end;
if (isempty(VSCTF_Mc__)); n_CTF_rank = 1; VSCTF_Mc__ = ones(n_M,1); end;
flag_uniqe_pm_n = 0;
if (numel(unique(pm_l_max_))==1 & numel(unique(pm_n_lm_))==1 & numel(unique(pm_n_w_))==1);
flag_unique_pm_n = 1;
pm_l_max = pm_l_max_(1+0);
pm_n_lm = pm_n_lm_(1+0);
pm_n_w = pm_n_w_(1+0);
VSCTF_wMc__ = reshape(repmat(reshape(VSCTF_Mc__,[1,n_M,n_CTF_rank]),[pm_n_w,1,1]),[pm_n_w*n_M,n_CTF_rank]);
[k_p_polar_a__,k_p_azimu_b__] = cg_rhs_1(n_M,pm_n_w,euler_polar_a_load_,euler_azimu_b_load_,+euler_gamma_z_load_);
n_polar_a = ceil(pm_n_w/2);
n_azimu_b = max(1+2*pm_l_max,2*n_polar_a);
[legendre_evaluate_ljm___,legendre_evaluate_mlj___,expil__,expi__] = legendre_evaluate_ljm___0(pm_l_max,cos(linspace(0,pi,n_polar_a)),n_azimu_b);
scatter_from_tensor__ = cg_interpolate_n_2(cg_lsq_n_order,n_polar_a,n_azimu_b,pm_n_w*n_M,k_p_polar_a__(:),k_p_azimu_b__(:));
tensor_from_scatter__ = ctranspose(scatter_from_tensor__); %<-- this conjugation is not necessary, since the matrix should be real. ;
An__ = @(a_UX_Y_yc_) cg_lsq_pm_An_0(n_CTF_rank,n_M,VSCTF_wMc__,pm_n_w,pm_l_max,a_UX_Y_yc_,scatter_from_tensor__,n_polar_a,n_azimu_b,legendre_evaluate_ljm___);
At__ = @(UX_M_) cg_lsq_pm_At_0(n_CTF_rank,n_M,VSCTF_wMc__,pm_n_w,pm_l_max,UX_M_,tensor_from_scatter__,n_polar_a,n_azimu_b,legendre_evaluate_mlj___,expil__,expi__);
AtAn__ = @(a_UX_Y_yc_) At__(An__(a_UX_Y_yc_));
else; disp(sprintf(' %% Warning, consider setting all values of pm_l_max, pm_n_lm and pm_n_w to be the same.'));
end;%if (numel(unique(pm_l_max_))==1 & numel(unique(pm_n_lm_))==1 & numel(unique(pm_n_w_))==1);

%%%%%%%%;
% Now test out pcg on residual (should return 0). ;
%%%%%%%%;
a_UCTF_UX_Y_zero_ync__ = zeros(pm_n_lm_sum,n_CTF_rank);
for pm_nk_p_r=0:pm_n_k_p_r-1;
index_Y_ = pm_n_lm_csum_(1+pm_nk_p_r) + (0:pm_n_lm-1);
index_pm_nw_ = pm_n_w_csum_(1+pm_nk_p_r) + (0:pm_n_w-1);
tmp_RHS_ = reshape(bsxfun(@times,reshape(Residual_load_wnM__(1+index_pm_nw_,:),[n_w_max,n_M]),transpose(ones(n_M,1))),[pm_n_w*n_M,1]);
[a_UX_Y_zero_yc_,~] = pcg(AtAn__,At__(tmp_RHS_));
for nCTF_rank=0:n_CTF_rank-1;
tmp_index_ = nCTF_rank*pm_n_lm + (0:pm_n_lm-1);
a_UCTF_UX_Y_zero_ync__(1+index_Y_,1+nCTF_rank) = a_UX_Y_zero_yc_(1+tmp_index_);
end;%for nCTF_rank=0:n_CTF_rank-1;
end;%for pm_nk_p_r=0:pm_n_k_p_r-1;
%%%%%%%%;

rng(1);
tmp_RHS_ = crandn(pm_n_w*n_M,1);
%%%%%%%%;
cg_lsq_pcg_tol = [];
cg_lsq_pcg_maxit = [];
[tmp_a_UX_Y_yc_,tmp_flag,tmp_relres,tmp_iter,tmp_resvec_] = pcg(AtAn__,At__(tmp_RHS_),cg_lsq_pcg_tol,cg_lsq_pcg_maxit);
tmp_r_nM_ = AtAn__(tmp_a_UX_Y_yc_) - At__(tmp_RHS_);
[tmp_b_UX_Y_yc_,tmp_flag,tmp_relres,tmp_iter,tmp_resvec_] = pcg(AtAn__,tmp_r_nM_,cg_lsq_pcg_tol,cg_lsq_pcg_maxit);
disp(sprintf(' %% tol %0.6f, maxit %.4d: b_ vs a_: %0.16f/%0.16f = %0.16f',cg_lsq_pcg_tol,cg_lsq_pcg_maxit,fnorm(tmp_b_UX_Y_yc_),fnorm(tmp_a_UX_Y_yc_),fnorm(tmp_b_UX_Y_yc_)/fnorm(tmp_a_UX_Y_yc_)));
%%%%%%%%;
cg_lsq_pcg_tol = 1e-2;
cg_lsq_pcg_maxit = 64;
[tmp_a_UX_Y_yc_,tmp_flag,tmp_relres,tmp_iter,tmp_resvec_] = pcg(AtAn__,At__(tmp_RHS_),cg_lsq_pcg_tol,cg_lsq_pcg_maxit);
tmp_r_nM_ = AtAn__(tmp_a_UX_Y_yc_) - At__(tmp_RHS_);
[tmp_b_UX_Y_yc_,tmp_flag,tmp_relres,tmp_iter,tmp_resvec_] = pcg(AtAn__,tmp_r_nM_,cg_lsq_pcg_tol,cg_lsq_pcg_maxit);
disp(sprintf(' %% tol %0.6f, maxit %.4d: b_ vs a_: %0.16f/%0.16f = %0.16f',cg_lsq_pcg_tol,cg_lsq_pcg_maxit,fnorm(tmp_b_UX_Y_yc_),fnorm(tmp_a_UX_Y_yc_),fnorm(tmp_b_UX_Y_yc_)/fnorm(tmp_a_UX_Y_yc_)));
%%%%%%%%;
cg_lsq_pcg_tol = 1e-3;
cg_lsq_pcg_maxit = 256;
[tmp_a_UX_Y_yc_,tmp_flag,tmp_relres,tmp_iter,tmp_resvec_] = pcg(AtAn__,At__(tmp_RHS_),cg_lsq_pcg_tol,cg_lsq_pcg_maxit);
tmp_r_nM_ = AtAn__(tmp_a_UX_Y_yc_) - At__(tmp_RHS_);
[tmp_b_UX_Y_yc_,tmp_flag,tmp_relres,tmp_iter,tmp_resvec_] = pcg(AtAn__,tmp_r_nM_,cg_lsq_pcg_tol,cg_lsq_pcg_maxit);
disp(sprintf(' %% tol %0.6f, maxit %.4d: b_ vs a_: %0.16f/%0.16f = %0.16f',cg_lsq_pcg_tol,cg_lsq_pcg_maxit,fnorm(tmp_b_UX_Y_yc_),fnorm(tmp_a_UX_Y_yc_),fnorm(tmp_b_UX_Y_yc_)/fnorm(tmp_a_UX_Y_yc_)));
%%%%%%%%;
cg_lsq_pcg_tol = 1e-4;
cg_lsq_pcg_maxit = 1024;
[tmp_a_UX_Y_yc_,tmp_flag,tmp_relres,tmp_iter,tmp_resvec_] = pcg(AtAn__,At__(tmp_RHS_),cg_lsq_pcg_tol,cg_lsq_pcg_maxit);
tmp_r_nM_ = AtAn__(tmp_a_UX_Y_yc_) - At__(tmp_RHS_);
[tmp_b_UX_Y_yc_,tmp_flag,tmp_relres,tmp_iter,tmp_resvec_] = pcg(AtAn__,tmp_r_nM_,cg_lsq_pcg_tol,cg_lsq_pcg_maxit);
disp(sprintf(' %% tol %0.6f, maxit %.4d: b_ vs a_: %0.16f/%0.16f = %0.16f',cg_lsq_pcg_tol,cg_lsq_pcg_maxit,fnorm(tmp_b_UX_Y_yc_),fnorm(tmp_a_UX_Y_yc_),fnorm(tmp_b_UX_Y_yc_)/fnorm(tmp_a_UX_Y_yc_)));
%%%%%%%%;

[tmp_a_UX_Y_yc_,tmp_flag,tmp_relres,tmp_iter,tmp_resvec_] = pcg(AtAn__,At__(tmp_RHS_),1e-3,256);
tmp_r_nM_ = AtAn__(tmp_a_UX_Y_yc_) - At__(tmp_RHS_);
[tmp_b_UX_Y_yc_,tmp_flag,tmp_relres,tmp_iter,tmp_resvec_] = pcg(AtAn__,tmp_r_nM_);
disp(sprintf(' %% b_ vs a_: %0.16f/%0.16f = %0.16f',fnorm(tmp_b_UX_Y_yc_),fnorm(tmp_a_UX_Y_yc_),fnorm(tmp_b_UX_Y_yc_)/fnorm(tmp_a_UX_Y_yc_)));

