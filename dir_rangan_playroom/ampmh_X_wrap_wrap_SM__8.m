function ...
[ ...
 parameter ...
,n_S ...
,template_viewing_polar_a_all_ ...
,template_viewing_azimu_b_all_ ...
,X_SM__ ...
,delta_x_SM__ ...
,delta_y_SM__ ...
,gamma_z_SM__ ...
,I_value_SM__ ...
,t_level_SM__ ...
] = ...
ampmh_X_wrap_wrap_SM__8( ...
 parameter ...
,FTK ...
,n_w_max ...
,l_max_max ...
,pm_n_UX_rank ...
,n_CTF_rank ...
,a_UCTF_UX_Y_ync__ ...
,n_M ...
,CTF_index_ ...
,VSCTF_Mc__ ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
,template_tree ...
,euler_polar_a_ ...
,euler_azimu_b_ ...
);
%%%%%%%%;
% calls ampmh_X_wrap_SM__8.m for each micrograph. ;
% Note that if a local-search is requested, ;
% the template_tree must be consistent with the template_viewing_k_eq_d used to construct the templates. ;
% This is because, for now, the templates are automatically assigned to template_viewing_angles based on their index, ;
% assuming that they are generated using the same method as the template_tree (i.e., get_template_1). ;
% For this reason the templates should not be permuted or subselected. ;
% Future versions might incorporate a feature where the alignment allows for each template to have a specified template_viewing_angle. ;
%%%%%%%%;

if nargin<1;
%%%%%%%%;
% First define integral of <f,f>. ;
%%%%%%%%;
h2d_ = @(kd) 4*pi^2*(besselj(0,kd) + besselj(2,kd)); % calculates <f_j,f_k>, normalized so that <f,f> = (4*pi^2);
dh2d_ = @(kd) 4*pi^3*(besselj(-1,kd) - besselj(+3,kd));
h3d_ = @(kd) 4*pi*( sin(kd) - (kd).*cos(kd) ) ./ kd.^3 ; % calculates <f_j,f_k>, normalized so that <f,f> = 4*pi/3;
dh3d_ = @(kd) 12*pi*( (kd.^2/3 - 1) .* sin(kd) + (kd).*cos(kd) ) ./ kd.^4 ;
%%%%%%%%;
verbose=1;
k_p_r_max = 48/(2*pi); k_eq_d = 1.0/max(1e-12,k_p_r_max); TorL = 'L';
if (verbose); disp(sprintf(' %% [testing ampmh_X_wrap_wrap_SM__8.m]')); end;
%%%%%%%%;
tmp_t = tic();
[ ...
 n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,k_c_0_all_ ...
,k_c_1_all_ ...
,k_c_2_all_ ...
,J_node_ ...
,J_weight_ ...
,J_chebfun_ ...
,J_polyval_ ...
] = ...
sample_sphere_7( ...
 verbose ...
,k_p_r_max ...
,k_eq_d ...
,TorL ...
) ;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% sample_sphere_7: %0.2fs',tmp_t)); end;
if (verbose); disp(sprintf(' %% k_p_r_max %0.2f k_eq_d %0.2f n_k_all %d n_k_p_r %d',k_p_r_max,k_eq_d,n_k_all,n_k_p_r)); end;
%%%%%%%%;
l_max_upb = 36;
l_max_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
l_max_(1+nk_p_r) = max(0,min(l_max_upb,1+ceil(2*pi*k_p_r_(1+nk_p_r))));
end;%for nk_p_r=0:n_k_p_r-1;
n_lm_ = (l_max_+1).^2;
n_lm_max = max(n_lm_);
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
l_max_max = max(l_max_); dWtdkd__l_max_max = 2*l_max_max;
m_max_ = -l_max_max : +l_max_max;
n_m_max = length(m_max_);
%%%%%%%%;
delta_orig_ = [+0.12;-0.3;+0.23];
a_k_p_orig_ = exp(+2*pi*i*(k_c_0_all_*delta_orig_(1+0) + k_c_1_all_*delta_orig_(1+1) + k_c_2_all_*delta_orig_(1+2)));
tmp_t = tic;
[a_k_Y_quad_] = ...
convert_k_p_to_spharm_1( ...
 verbose ...
,n_k_all ...
,n_k_all_csum_ ...
,k_p_r_all_ ...
,k_p_azimu_b_all_ ...
,k_p_polar_a_all_ ...
,weight_3d_k_all_ ...
,weight_shell_k_ ...
,n_k_p_r ...
,k_p_r_ ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_p_orig_ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% a_k_Y_quad_ time %0.2fs',tmp_t)); end;
%%%%%%%%;
delta_orig_r012 = sqrt(delta_orig_(1+0)^2 + delta_orig_(1+1)^2 + delta_orig_(1+2)^2);
delta_orig_r01 = sqrt(delta_orig_(1+0)^2 + delta_orig_(1+1)^2);
delta_orig_polar_a = atan2(delta_orig_r01,delta_orig_(1+2));
delta_orig_azimu_b = atan2(delta_orig_(1+1),delta_orig_(1+0));
delta_Ylm_ = get_Ylm__(1+l_max_max,0:l_max_max,1,delta_orig_azimu_b,delta_orig_polar_a);
a_k_Y_form_ = zeros(n_lm_sum,1);
na=0;
for nk_p_r=0:n_k_p_r-1;
k_p_r = k_p_r_(1+nk_p_r);
l_max = l_max_(1+nk_p_r);
for l_val=0:l_max;
tmp_x = 2*pi*k_p_r*delta_orig_r012;
tmp_jl = besselj(l_val+0.5,tmp_x)*sqrt(pi/(2*tmp_x));
for m_val=-l_val:+l_val;
a_k_Y_form_(1+na) = 4*pi * i^l_val * tmp_jl * conj(delta_Ylm_{1+l_val}(1+m_val+l_val));
na=na+1;
end;%for m_val=-l_val:+l_val;
end;%for l_val=0:l_max;
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;
disp(sprintf(' %% a_k_Y_form_ vs a_k_Y_quad_: %0.16f',fnorm(a_k_Y_form_ - a_k_Y_quad_)/fnorm(a_k_Y_form_)));
%%%%%%%%;
template_k_eq_d = k_eq_d*2;
viewing_k_eq_d = k_eq_d*128;
tmp_t = tic();
[ ...
 S_k_p__ ...
,n_w_ ...
,weight_2d_k_p_r_ ...
,weight_2d_k_all_ ...
,n_viewing_all ...
,viewing_azimu_b_all_ ...
,viewing_polar_a_all_ ...
,viewing_weight_all_ ...
,n_viewing_polar_a ...
,viewing_polar_a_ ...
,n_viewing_azimu_b_ ...
,template_k_c_0__ ...
,template_k_c_1__ ...
,template_k_c_2__ ...
] = ...
get_template_1( ...
 verbose ...
,n_k_p_r ...
,k_p_r_ ...
,k_p_r_max ...
,weight_3d_k_p_r_ ...
,l_max_ ...
,a_k_Y_quad_ ...
,viewing_k_eq_d ...
,template_k_eq_d ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% get_template_1: %0.2fs',tmp_t)); end;
if (verbose); disp(sprintf(' %% n_viewing_all %d n_viewing_polar_a %d n_w_max %d',n_viewing_all,n_viewing_polar_a,max(n_w_))); end;
n_S = n_viewing_all; n_w_max = max(n_w_); n_w_sum = sum(n_w_); n_w_csum_ = cumsum([0;n_w_]);
%%%%%%%%;
pole_k_c_0_ = zeros(n_w_sum,1);
pole_k_c_1_ = zeros(n_w_sum,1);
pole_k_c_2_ = zeros(n_w_sum,1);
na=0;
for nk_p_r=0:n_k_p_r-1;
k_p_r = k_p_r_(1+nk_p_r);
n_w = n_w_(1+nk_p_r);
for nw=0:n_w-1;
gamma_z = 2*pi*nw/n_w;
cc = cos(gamma_z); sc = sin(gamma_z);
pole_k_c_0_(1+na) = k_p_r*cc;
pole_k_c_1_(1+na) = k_p_r*sc;
pole_k_c_2_(1+na) = 0;
na=na+1;
end;%for nw=0:n_w-1;
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;
% after calling get_template_1: ;
% A template with viewing angle viewing_polar_a and viewing_azimu_b corresponds to the evaluations: ;
% let sa and ca be sin(polar_a) and cos(polar_a), respectively. ;
% let sb and cb be sin(azimu_b) and cos(azimu_b), respectively. ;
% let sc and cc be sin(gamma_z) and cos(gamma_z), respectively. ;
% [ template_k_c_0 ; template_k_c_1 ; template_k_c_2 ] = [ +cb*ca*cc - sb*sc ; +sb*ca*cc + cb*sc ; -sa*cc ] ;
% for gamma_z = 2*pi*[0:n_gamma_z-1]/n_gamma_z. ;
% Given that the original function is a plane-wave defined as: ;
% a_k_p_ = exp(+2*pi*i*( delta_orig_(1+0)*template_k_c_0 + delta_orig_(1+1)*template_k_c_1 + delta_orig_(1+2)*template_k_c_2 )) ;
% we have that the template evaluates to: ;
% S_k_p_ = exp(+2*pi*i*( delta_orig_ * Rz(azimu_b) * Ry(polar_a) * Rz(gamma_z) * [1;0;0]*k_p_r )) ;
% S_k_p_ = exp(+2*pi*i*( (Ry(-polar_a) * Rz(-azimu_b) * delta_orig_) * Rz(gamma_z) * [1;0;0]*k_p_r )) ;
%%%%%%%%;
nS=max(0,min(n_S-1,floor(n_S*rand())));
S_k_p_quad_ = S_k_p__(:,1+nS);
S_k_p_orig_ = exp(+2*pi*i*(template_k_c_0__(:,1+nS)*delta_orig_(1+0) + template_k_c_1__(:,1+nS)*delta_orig_(1+1) + template_k_c_2__(:,1+nS)*delta_orig_(1+2)));
viewing_azimu_b = viewing_azimu_b_all_(1+nS);
cb = cos(+viewing_azimu_b); sb = sin(+viewing_azimu_b);
Rz = [ +cb , -sb , 0 ; +sb , +cb , 0 ; 0 , 0 , 1 ]; %<-- rotation about the positive z-axis. ;
viewing_polar_a = viewing_polar_a_all_(1+nS);
ca = cos(+viewing_polar_a); sa = sin(+viewing_polar_a);
Ry = [ +ca , 0 , +sa ; 0 , 1 , 0 ; -sa , 0 , +ca ]; %<-- rotation about the positive y-axis. ;
delta_temp_ = transpose(Ry)*transpose(Rz)*delta_orig_;
S_k_p_form_ = exp(+2*pi*i*(pole_k_c_0_*delta_temp_(1+0) + pole_k_c_1_*delta_temp_(1+1) + pole_k_c_2_*delta_temp_(1+2)));
flag_plot=0;
if flag_plot;
figure(1);clf;
subplot(2,3,1+0); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(S_k_p_orig_),[-1,+1],colormap_beach()); title('real orig'); axisnotick; axis image;
subplot(2,3,1+3); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,imag(S_k_p_orig_),[-1,+1],colormap_beach()); title('imag orig'); axisnotick; axis image;
subplot(2,3,2+0); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(S_k_p_quad_),[-1,+1],colormap_beach()); title('real quad'); axisnotick; axis image;
subplot(2,3,2+3); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,imag(S_k_p_quad_),[-1,+1],colormap_beach()); title('imag quad'); axisnotick; axis image;
subplot(2,3,3+0); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(S_k_p_form_),[-1,+1],colormap_beach()); title('real form'); axisnotick; axis image;
subplot(2,3,3+3); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,imag(S_k_p_form_),[-1,+1],colormap_beach()); title('imag form'); axisnotick; axis image;
figbig;
end;%if flag_plot;
error_orig_vs_quad = fnorm(S_k_p_orig_ - S_k_p_quad_)/fnorm(S_k_p_orig_);
disp(sprintf(' %% error_orig_vs_quad: %0.16f',error_orig_vs_quad));
error_orig_vs_form = fnorm(S_k_p_orig_ - S_k_p_form_)/fnorm(S_k_p_orig_);
disp(sprintf(' %% error_orig_vs_form: %0.16f',error_orig_vs_form));
%%%%%%%%;
n_w_uni_ = n_w_max*ones(n_k_p_r,1);
n_w_uni_csum_ = [0;cumsum(n_w_uni_)];
n_w_uni_sum = sum(n_w_uni_);
weight_uni_2d_k_all_ = zeros(n_w_uni_sum,1);
weight_uni_2d_k_all_ = reshape(ones(n_w_max,1)*transpose(weight_2d_k_p_r_)/n_w_max,[n_w_uni_sum,1]);
%%%%%%%%;
pole_uni_k_c_0_ = zeros(n_w_uni_sum,1);
pole_uni_k_c_1_ = zeros(n_w_uni_sum,1);
pole_uni_k_c_2_ = zeros(n_w_uni_sum,1);
na=0;
for nk_p_r=0:n_k_p_r-1;
k_p_r = k_p_r_(1+nk_p_r);
n_w_uni = n_w_uni_(1+nk_p_r);
for nw=0:n_w_uni-1;
gamma_z = 2*pi*nw/n_w_uni;
cc = cos(gamma_z); sc = sin(gamma_z);
pole_uni_k_c_0_(1+na) = k_p_r*cc;
pole_uni_k_c_1_(1+na) = k_p_r*sc;
pole_uni_k_c_2_(1+na) = 0;
na=na+1;
end;%for nw=0:n_w_uni-1;
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;
tmp_t = tic();
S_uni_k_q__ = zeros(n_w_uni_sum,n_S);
for nS=0:n_S-1;
viewing_azimu_b = viewing_azimu_b_all_(1+nS);
cb = cos(+viewing_azimu_b); sb = sin(+viewing_azimu_b);
Rz = [ +cb , -sb , 0 ; +sb , +cb , 0 ; 0 , 0 , 1 ]; %<-- rotation about the positive z-axis. ;
viewing_polar_a = viewing_polar_a_all_(1+nS);
ca = cos(+viewing_polar_a); sa = sin(+viewing_polar_a);
Ry = [ +ca , 0 , +sa ; 0 , 1 , 0 ; -sa , 0 , +ca ]; %<-- rotation about the positive y-axis. ;
delta_temp_ = transpose(Ry)*transpose(Rz)*delta_orig_;
S_uni_k_p_form_ = exp(+2*pi*i*(pole_uni_k_c_0_*delta_temp_(1+0) + pole_uni_k_c_1_*delta_temp_(1+1) + pole_uni_k_c_2_*delta_temp_(1+2)));
S_uni_k_q__(:,1+nS) = ...
interp_p_to_q( ...
 n_k_p_r ...
,n_w_uni_ ...
,n_w_uni_sum ...
,S_uni_k_p_form_ ...
);
end;%for nS=0:n_S-1;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% S_uni_k_q__: %0.3fs',tmp_t)); end;
%%%%%%%%;
delta_r_max = 0.05; n_delta_v_requested = 64;
%delta_r_max = 0.00; n_delta_v_requested = 1;
delta_r_p = 0.05;
delta_r_s = delta_r_max/sqrt(2*log(1/delta_r_p));
delta_r_N = delta_r_max * (2*pi*k_p_r_max) / (pi*sqrt(2));
svd_eps = 1e-12;
tmp_t = tic();
FTK = ampmh_FTK_1(n_k_p_r,k_p_r_,k_p_r_max,delta_r_max,svd_eps,n_delta_v_requested);
tmp_t = toc(tmp_t); if (verbose); disp(sprintf(' %% FTK: %0.3fs',tmp_t)); end;
disp(sprintf(' %% p-val %0.4f delta_r_max %0.6f sigma %0.4f N_pixel %0.4f --> FTK.n_svd_l %d, n_delta_v_requested %d',delta_r_p,delta_r_max,delta_r_s,delta_r_N,FTK.n_svd_l,n_delta_v_requested));
%%%%%%%%;
% Now calculate the inner-products. ;
%%%%%%%%;
n_UX_rank = n_k_p_r;
tmp_t = tic();
svd_VUXS_lwnS____ = tpmh_VUXM_lwnM____3(FTK,n_k_p_r,n_w_uni_,n_S,S_uni_k_q__,n_UX_rank,eye(n_UX_rank,n_UX_rank),sqrt(weight_2d_k_p_r_));
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% svd_VUXS_lwnS____: %0.3fs',tmp_t)); end;
%%%%%%%%;
% Now calculate norms of the non-translated images. ;
%%%%%%%%;
tmp_t = tic();
UX_S_l2_dS__ = ampmh_UX_M_l2_dM__1(FTK,n_w_uni_,n_S,n_UX_rank,svd_VUXS_lwnS____);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UX_S_l2_dS__: %0.3fs',tmp_t)); end;
disp(sprintf(' %% average l2-norm of templates (should be 1): %0.16f',mean(UX_S_l2_dS__(:))/(pi*k_p_r_max^2)));
flag_plot=0;
if flag_plot;
plot(UX_S_l2_dS__(:)/(pi*k_p_r_max^2),'.');
end;%if flag_plot;
%%%%%%%%;
tmp_t = tic();
[UX_S_k_q_wnS___,UX_S_k_p_wnS___] = ampmh_UX_M_k_p_wnM___0(FTK,n_w_uni_,n_UX_rank,n_S,svd_VUXS_lwnS____,zeros(n_S,1),zeros(n_S,1));
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UX_S_k_q_wnS___: %0.6fs',tmp_t)); end;
UX_S_k_p_wnS__ = reshape(UX_S_k_p_wnS___(:,1:n_k_p_r,:),[n_w_max*n_k_p_r,n_S]);
UX_S_k_q_wnS__ = reshape(UX_S_k_q_wnS___(:,1:n_k_p_r,:),[n_w_max*n_k_p_r,n_S]);
%%%%%%%%;
% Visualize: ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
figure(3);clf;figbig;fig80s;
subplot(2,2,1);imagesc(reshape(permute(log10(abs(svd_VUXS_lwnS____)),[1,3,4,2]),[FTK.n_svd_l*n_k_p_r*n_S,n_w_max]));axisnotick; colorbar;
subplot(2,2,2);plot(0:n_w_max-1,log10(sqrt(mean(reshape(permute(abs(svd_VUXS_lwnS____).^2,[1,3,4,2]),[FTK.n_svd_l*n_k_p_r*n_S,n_w_max]),1))));
subplot(2,2,3);imagesc(reshape(permute(reshape(log10(abs(UX_S_k_q_wnS__)),[n_w_max,n_k_p_r,n_S]),[2,3,1]),[n_k_p_r*n_S,n_w_max]));axisnotick;colorbar;
subplot(2,2,4);plot(0:n_w_max-1,log10(sqrt(mean(reshape(permute(reshape(abs(UX_S_k_q_wnS__).^2,[n_w_max,n_k_p_r,n_S]),[2,3,1]),[n_k_p_r*n_S,n_w_max]),1))));
end;%if flag_plot;
%%%%%%%%;
% Calculate ampmh_X_wrap_wrap_SM__8. ;
%%%%%%%%;
% First use the templates to define a few images. ;
%%%%%%%%;
template_viewing_k_eq_d = 8*1/max(1e-12,k_p_r_max);
n_w_max = max(n_w_);
pm_n_UX_rank = n_k_p_r;
n_CTF_rank = 3;
a_UCTF_UX_Y_ync__ = zeros(n_lm_max*n_k_p_r,n_CTF_rank);
for nk_p_r=0:n_k_p_r-1;
a_UCTF_UX_Y_ync__(1+nk_p_r*n_lm_max + [0:n_lm_(1+nk_p_r)-1],1) = ...
sqrt(weight_2d_k_p_r_(1+nk_p_r)) ...
*a_k_Y_quad_(1+n_lm_csum_(1+nk_p_r) + [0:n_lm_(1+nk_p_r)-1]) ;
end;%for nk_p_r=0:n_k_p_r-1;
rng(0); [tmp_Q_,~] = qr(randn(n_CTF_rank));
a_UCTF_UX_Y_ync__ = a_UCTF_UX_Y_ync__*tmp_Q_;
n_M = n_S;
CTF_index_ = zeros(n_M,1);
VSCTF_Mc__ = ones(n_M,1)*tmp_Q_(1,:);
svd_VUXM_lwnM____ = svd_VUXS_lwnS____;
UX_M_l2_dM__ = UX_S_l2_dS__;
%%%%%%%%;
parameter = struct('type','parameter');
parameter.template_viewing_k_eq_d = template_viewing_k_eq_d;
tmp_t = tic();
[ ...
 parameter ...
,n_template_viewing_all ...
,template_viewing_polar_a_all_ ...
,template_viewing_azimu_b_all_ ...
,X_SM_full__ ...
,delta_x_SM_full__ ...
,delta_y_SM_full__ ...
,gamma_z_SM_full__ ...
,I_value_SM_full__ ...
,t_level_SM_full__ ...
] = ...
ampmh_X_wrap_wrap_SM__8( ...
 parameter ...
,FTK ...
,n_w_max ...
,l_max_max ...
,pm_n_UX_rank ...
,n_CTF_rank ...
,a_UCTF_UX_Y_ync__ ...
,n_M ...
,CTF_index_ ...
,VSCTF_Mc__ ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
,[] ...
,[] ...
,[] ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_SM_full__: %0.3fs',tmp_t)); end;
%%%%%%%%;
% Calculate true landscape of innerproducts for the same set of translations. ;
%%%%%%%%;
X_SM_form__ = zeros(n_template_viewing_all,n_M);
for nS=0:n_template_viewing_all-1;
template_viewing_azimu_b = template_viewing_azimu_b_all_(1+nS);
cb = cos(+template_viewing_azimu_b); sb = sin(+template_viewing_azimu_b);
Rz = [ +cb , -sb , 0 ; +sb , +cb , 0 ; 0 , 0 , 1 ]; %<-- rotation about the positive z-axis. ;
template_viewing_polar_a = template_viewing_polar_a_all_(1+nS);
ca = cos(+template_viewing_polar_a); sa = sin(+template_viewing_polar_a);
Ry = [ +ca , 0 , +sa ; 0 , 1 , 0 ; -sa , 0 , +ca ]; %<-- rotation about the positive y-axis. ;
delta_temp_0_ = transpose(Ry)*transpose(Rz)*delta_orig_;
S_uni_k_p_form_ = exp(+2*pi*i*(pole_uni_k_c_0_*delta_temp_0_(1+0) + pole_uni_k_c_1_*delta_temp_0_(1+1) + pole_uni_k_c_2_*delta_temp_0_(1+2)));
for nM=0:n_M-1;
image_viewing_azimu_b = viewing_azimu_b_all_(1+nM);
cb = cos(+image_viewing_azimu_b); sb = sin(+image_viewing_azimu_b);
Rz = [ +cb , -sb , 0 ; +sb , +cb , 0 ; 0 , 0 , 1 ]; %<-- rotation about the positive z-axis. ;
image_viewing_polar_a = viewing_polar_a_all_(1+nM);
ca = cos(+image_viewing_polar_a); sa = sin(+image_viewing_polar_a);
Ry = [ +ca , 0 , +sa ; 0 , 1 , 0 ; -sa , 0 , +ca ]; %<-- rotation about the positive y-axis. ;
delta_temp_1_ = transpose(Ry)*transpose(Rz)*delta_orig_;
M_uni_k_p_form_ = exp(+2*pi*i*(pole_uni_k_c_0_*delta_temp_1_(1+0) + pole_uni_k_c_1_*delta_temp_1_(1+1) + pole_uni_k_c_2_*delta_temp_1_(1+2)));
%%%%;
gamma_z = gamma_z_SM_full__(1+nS,1+nM);%gamma_z = 2*pi*nw/n_w_max;
cc = cos(+gamma_z); sc = sin(+gamma_z);
Rz = [+cc , -sc ; +sc , +cc];
delta_x = delta_x_SM_full__(1+nS,1+nM);
delta_y = delta_y_SM_full__(1+nS,1+nM);
delta_temp_0b_ = Rz*delta_temp_0_(1+[0:1]); %<-- rotate delta_temp_0_ by +gamma_z = rotate k by -gamma_z = rotate S_0 by +gamma_z. ;
delta_temp_1b_ = delta_temp_1_(1+[0:1]) - [delta_x;delta_y]; %<-- translate delta_temp_1_ by -delta_ = multiply S_1 by exp(-2*pi*i*dot(k_,delta_)). ;
X_form = h2d_(2*pi*k_p_r_max*fnorm(delta_temp_0b_ - delta_temp_1b_))/(2*pi)^2 * (pi*k_p_r_max^2); %<-- note sign of translation. ;
X_SM_form__(1+nS,1+nM) = real(X_form);
%%%%;
end;%for nM=0:n_M-1;
end;%for nS=0:n_template_viewing_all-1;
%%%%%%%%;
disp(sprintf(' %% X_SM_form__ vs X_SM_full__: %0.16f',fnorm(X_SM_form__-X_SM_full__*(pi*k_p_r_max^2))/fnorm(X_SM_form__)));
%%%%%%%%;
% Now repeat calculation using CTF_index_unused. ;
%%%%%%%%;
parameter = struct('type','parameter');
parameter.template_viewing_k_eq_d = template_viewing_k_eq_d;
parameter.flag_CTF_index_unused = 1;
tmp_t = tic();
[ ...
 parameter ...
,n_template_viewing_all ...
,template_viewing_polar_a_all_ ...
,template_viewing_azimu_b_all_ ...
,X_SM_unus__ ...
,delta_x_SM_unus__ ...
,delta_y_SM_unus__ ...
,gamma_z_SM_unus__ ...
,I_value_SM_unus__ ...
,t_level_SM_unus__ ...
] = ...
ampmh_X_wrap_wrap_SM__8( ...
 parameter ...
,FTK ...
,n_w_max ...
,l_max_max ...
,pm_n_UX_rank ...
,n_CTF_rank ...
,a_UCTF_UX_Y_ync__ ...
,n_M ...
,CTF_index_ ...
,VSCTF_Mc__ ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
,[] ...
,[] ...
,[] ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_SM_unus__: %0.3fs',tmp_t)); end;
%%%%%%%%;
disp(sprintf(' %% X_SM_full__ vs X_SM_unus__: %0.16f',fnorm(X_SM_full__ - X_SM_unus__)/fnorm(X_SM_full__)));
%%%%%%%%;
% Now repeat calculation using tree search. ;
%%%%%%%%;
parameter = struct('type','parameter');
parameter.template_viewing_k_eq_d = template_viewing_k_eq_d;
parameter.flag_X_local_vs_global = 1;
tmp_t = tic();
[ ...
 parameter ...
,n_template_viewing_all ...
,template_viewing_polar_a_all_ ...
,template_viewing_azimu_b_all_ ...
,X_SM_tree__ ...
,delta_x_SM_tree__ ...
,delta_y_SM_tree__ ...
,gamma_z_SM_tree__ ...
,I_value_SM_tree__ ...
,t_level_SM_tree__ ...
] = ...
ampmh_X_wrap_wrap_SM__8( ...
 parameter ...
,FTK ...
,n_w_max ...
,l_max_max ...
,pm_n_UX_rank ...
,n_CTF_rank ...
,a_UCTF_UX_Y_ync__ ...
,n_M ...
,CTF_index_ ...
,VSCTF_Mc__ ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
,[] ...
,[] ...
,[] ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_SM_tree__: %0.3fs',tmp_t)); end;
%%%%%%%%;
tmp_index_ = efind(t_level_SM_tree__>-1);
disp(sprintf(' %% X_SM_full__ vs X_SM_tree__ on %d/%d leaves: %0.16f',numel(tmp_index_),numel(t_level_SM_tree__),fnorm(X_SM_full__(1+tmp_index_) - X_SM_tree__(1+tmp_index_))/fnorm(X_SM_full__(1+tmp_index_))));
%%%%%%%%;
disp('returning'); return;
end;% if nargin<1;

verbose=0;
if (verbose>0); disp(sprintf(' %% [entering ampmh_X_wrap_wrap_SM__8]')); end;

if isempty(parameter);
parameter = struct('type','parameter');
end;%if isempty(parameter);
%%%%%%%%;
if (~isfield(parameter,'template_viewing_k_eq_d')); error(sprintf(' %% Warning! parameter.template_viewing_k_eq_d not defined')); end;
if (~isfield(parameter,'flag_optimize_over_gamma_z')); parameter.flag_optimize_over_gamma_z = 0; end; %<-- parameter_bookmark. ;
parameter.flag_optimize_over_gamma_z = 1;
if (~isfield(parameter,'flag_X_local_vs_global')); parameter.flag_X_local_vs_global = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'n_CTF_rank_use')); parameter.n_CTF_rank_use = 0; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'flag_CTF_index_unused')); parameter.flag_CTF_index_unused = 0; end; %<-- parameter_bookmark. ;
%%%%%%%%;
template_viewing_k_eq_d = parameter.template_viewing_k_eq_d;
flag_X_local_vs_global = parameter.flag_X_local_vs_global;
flag_CTF_index_unused = parameter.flag_CTF_index_unused;
if ( flag_CTF_index_unused & flag_X_local_vs_global );
disp(sprintf(' %% Warning, flag_CTF_index_unused %d flag_X_local_vs_global %d not yet implemented',flag_CTF_index_unused,flag_X_local_vs_global));
parameter.flag_X_local_vs_global = 0;
flag_X_local_vs_global = parameter.flag_X_local_vs_global;
end;%if ( flag_CTF_index_unused & flag_X_local_vs_global );
flag_n_CTF_rank_subselect = 0;
n_CTF_rank_use = parameter.n_CTF_rank_use;
if ( (n_CTF_rank_use> 0) & (n_CTF_rank_use< n_CTF_rank) );
flag_n_CTF_rank_subselect = 1;
n_CTF_rank = n_CTF_rank_use;
VSCTF_Mc__ = VSCTF_Mc__(:,1:n_CTF_rank); %<-- replace original. ;
end;%if ( (n_CTF_rank_use> 0) & (n_CTF_rank_use< n_CTF_rank) );
%%%%%%%%;
flag_X_local_vs_global = parameter.flag_X_local_vs_global;
if (flag_X_local_vs_global==1); %<-- local search. ;
if ( isempty(template_tree));
if (~isfield(parameter,'template_viewing_k_eq_d_min')); parameter.template_viewing_k_eq_d_min = template_viewing_k_eq_d; end; %<-- parameter_bookmark. ;
if (~isfield(parameter,'template_tree_n_level')); parameter.template_tree_n_level = 2; end; %<-- parameter_bookmark. ;
template_tree = get_template_tree_0(parameter.template_viewing_k_eq_d_min,parameter.template_tree_n_level);
end;%if ( isempty(template_tree));
end;%if (flag_X_local_vs_global==1); %<-- local search. ;

pm_n_k_p_r = pm_n_UX_rank;
pm_k_p_r_ = ones(pm_n_k_p_r,1);
pm_k_p_r_max = 1;
pm_n_w_ = n_w_max*ones(pm_n_k_p_r,1);
pm_n_w_max = n_w_max;
pm_n_w_sum = sum(pm_n_w_);
pm_n_w_csum_ = cumsum([0;pm_n_w_]);
pm_l_max_ = l_max_max*ones(pm_n_k_p_r,1);
pm_n_lm_ = (1+pm_l_max_).^2; pm_n_lm_sum = sum(pm_n_lm_); pm_n_lm_max = max(pm_n_lm_);
pm_weight_k_p_r_ = ones(pm_n_k_p_r,1);
pm_weight_2d_k_p_r_ = ones(pm_n_k_p_r,1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if flag_CTF_index_unused==0;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
%%%%%%%%;
[n_S] = sample_shell_5(pm_k_p_r_max,template_viewing_k_eq_d,'L') ; %<-- obtain template_viewing angles on outer shell. ;
tmp_t = tic();
tmp_verbose=0;
UCTF_UX_S_k_p_wnSc___ = zeros(pm_n_w_sum,n_S,n_CTF_rank);
for nCTF_rank=0:n_CTF_rank-1;
[ ...
 UCTF_UX_S_k_p_wnSc___(:,:,1+nCTF_rank) ...
,~ ...
,~ ...
,~ ...
,n_template_viewing_all ...
,template_viewing_azimu_b_all_ ...
,template_viewing_polar_a_all_ ...
,~ ...
,~ ...
,~ ...
,~ ...
,~ ...
,~ ...
,~ ...
] = ...
get_template_1( ...
 tmp_verbose ...
,pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_k_p_r_max ...
,pm_weight_k_p_r_ ...
,pm_l_max_ ...
,a_UCTF_UX_Y_ync__(:,1+nCTF_rank) ...
,template_viewing_k_eq_d ...
,-1 ...
,pm_n_w_ ...
);
assert(n_S==n_template_viewing_all);
end;%for nCTF_rank=0:n_CTF_rank-1;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UCTF_UX_S_k_p_wnSc___: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'get_template_1',tmp_t);
%%%%%%%%;
% group images by micrograph (i.e., sort by CTF_index_). ;
%%%%%%%%;
u_CTF_index_ = unique(CTF_index_(1:n_M)); n_u_CTF_index = numel(u_CTF_index_);
index_M_CTF_index__ = cell(n_u_CTF_index,1);
n_u_CTF_index_ = zeros(n_u_CTF_index,1);
for nu_CTF_index=0:n_u_CTF_index-1;
u_CTF_index = u_CTF_index_(1+nu_CTF_index);
index_M_CTF_index__{1+nu_CTF_index} = efind(CTF_index_(1:n_M)==u_CTF_index);
n_u_CTF_index_(1+nu_CTF_index) = numel(index_M_CTF_index__{1+nu_CTF_index});
end;%for nu_CTF_index=0:n_u_CTF_index-1;
if (verbose); disp(sprintf(' %% n_u_CTF_index %d',n_u_CTF_index)); end;
if (n_u_CTF_index>=n_M/8); disp(sprintf(' %% Warning, n_u_CTF_index %d vs n_M %d in ampmh_X_wrap_wrap_SM__8. Consider grouping CTF-functions.',n_u_CTF_index,n_M)); end;
%%%%%%%%;
X_SM__ = zeros(n_S,n_M);
delta_x_SM__ = zeros(n_S,n_M);
delta_y_SM__ = zeros(n_S,n_M);
gamma_z_SM__ = zeros(n_S,n_M);
I_value_SM__ = zeros(n_S,n_M);
%%%%%%%%;
% step through each micrograph, ;
% calculate the templates associated with that particular CTF-function, ;
% and then calculate innerproducts between those templates and all the images. ;
% Note that this will be quite slow if the number of CTF-functions is comparable to the number of images. ;
% In this case we should lump the CTF-functions together so that more images are processed in each batch. ;
%%%%%%%%;
for nu_CTF_index=0:n_u_CTF_index-1;
tmp_index_M_ = index_M_CTF_index__{1+nu_CTF_index};
tmp_n_M = n_u_CTF_index_(1+nu_CTF_index);
if (verbose); disp(sprintf(' %% nu_CTF_index %d/%d --> tmp_n_M %d [%d,..,%d] ',nu_CTF_index,n_u_CTF_index,tmp_n_M,tmp_index_M_(0+1),tmp_index_M_(tmp_n_M-1+1))); end;
%%%%%%%%;
% Find templates. ;
%%%%%%%%;
tmp_t = tic();
VSCTF_avg_ = mean(VSCTF_Mc__(1+tmp_index_M_,:),1);
VSCTF_std_ = std(VSCTF_Mc__(1+tmp_index_M_,:),1,1);
if (n_CTF_rank>1); assert(max(VSCTF_std_./max(1e-12,abs(VSCTF_avg_)))<1e-6); end; %<-- consider lowering threshold to 1e-3. ;
CTF_UX_S_k_p_wnS__ = zeros(pm_n_w_sum,n_S);
for nCTF_rank=0:n_CTF_rank-1;
CTF_UX_S_k_p_wnS__ = CTF_UX_S_k_p_wnS__ + UCTF_UX_S_k_p_wnSc___(:,:,1+nCTF_rank) * VSCTF_avg_(1+nCTF_rank);
end;%for nCTF_rank=0:n_CTF_rank-1;
%%%%%%%%;
CTF_UX_S_l2_ = zeros(n_S,1);
for nS=0:n_S-1;
CTF_UX_S_l2_(1+nS) = ...
innerproduct_p_quad( ...
 pm_n_k_p_r ...
,pm_k_p_r_ ...
,pm_weight_2d_k_p_r_/(2*pi) ...
,pm_n_w_ ...
,pm_n_w_sum ...
,CTF_UX_S_k_p_wnS__(:,1+nS) ...
,CTF_UX_S_k_p_wnS__(:,1+nS) ...
);
end;%for nS=0:n_S-1;
%%%%%%%%;
CTF_UX_S_k_q_wnS__ = zeros(pm_n_w_sum,n_S);
for nS=0:n_S-1;
CTF_UX_S_k_q_wnS__(:,1+nS) = ...
interp_p_to_q( ...
 pm_n_k_p_r ...
,pm_n_w_ ...
,pm_n_w_sum ...
,CTF_UX_S_k_p_wnS__(:,1+nS) ...
); 
end;%for nS=0:n_S-1; 
%%%%%%%%;
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% CTF_UX_S_k_q_wnS__: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'CTF_UX_S_k_q_wnS__',tmp_t);
%%%%%%%%;
tmp_t = tic();
[ ...
 parameter ...
,X_SM__(:,1+tmp_index_M_) ...
,delta_x_SM__(:,1+tmp_index_M_) ...
,delta_y_SM__(:,1+tmp_index_M_) ...
,gamma_z_SM__(:,1+tmp_index_M_) ...
,I_value_SM__(:,1+tmp_index_M_) ...
,t_level_SM__(:,1+tmp_index_M_) ...
] = ...
ampmh_X_wrap_SM__8( ...
 parameter ...
,FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,n_S ...
,CTF_UX_S_k_q_wnS__ ...
,CTF_UX_S_l2_ ...
,tmp_n_M ...
,svd_VUXM_lwnM____(:,:,:,1+tmp_index_M_) ...
,UX_M_l2_dM__(:,1+tmp_index_M_) ...
,template_tree ...
,euler_polar_a_ ...
,euler_azimu_b_ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% X_SM__: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_wrap_SM__8',tmp_t);
%%%%%%%%;
end;%for nu_CTF_index=0:n_u_CTF_index-1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%if flag_CTF_index_unused==0;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if flag_CTF_index_unused==1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
n_neighborhood = 1;
index_neighborhood_exc_MP__ = cell(1,1);
index_neighborhood_exc_MP__{1} = transpose(0:n_M-1);
index_neighborhood_ori_MP__ = cell(1,1);
index_neighborhood_ori_MP__{1} = transpose(0:n_M-1);
%%%%%%%%;
% Generate all the templates. ;
%%%%%%%%;
[n_S] = sample_shell_5(pm_k_p_r_max,template_viewing_k_eq_d,'L') ; %<-- obtain template_viewing angles on outer shell. ;
tmp_t = tic();
tmp_verbose=0;
[ ...
 UCTF_UX_S_k_q_wncSx____ ...
,~ ...
,n_S ...
,template_viewing_azimu_b_all_ ...
,template_viewing_polar_a_all_ ...
] = ...
pm_template_2( ...
 tmp_verbose ...
,l_max_max ...
,pm_n_UX_rank*n_CTF_rank*n_neighborhood ...
,reshape(a_UCTF_UX_Y_ync__(:,:),[pm_n_lm_max,pm_n_UX_rank*n_CTF_rank*n_neighborhood]) ...
,template_viewing_k_eq_d ...
,-1 ...
,n_w_max ...
);
UCTF_UX_S_k_q_wncSx____ = permute(reshape(UCTF_UX_S_k_q_wncSx____,[n_w_max*pm_n_UX_rank,n_CTF_rank,n_neighborhood,n_S]),[1,2,4,3]);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% pm_template_2: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'pm_template_2',tmp_t);
%%%%%%%%;
% Now convert S_k_p_ to S_k_q_. ;
%%%%%%%%;
tmp_t = tic();
UCTF_UX_S_k_q_wncSx____ = reshape(fft(reshape(UCTF_UX_S_k_q_wncSx____,[pm_n_w_max,pm_n_UX_rank*n_CTF_rank*n_S*n_neighborhood]),[],1)/sqrt(pm_n_w_max),[pm_n_w_sum,n_CTF_rank,n_S,n_neighborhood]);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% UCTF_UX_S_k_q_wncxS____: %0.3fs',tmp_t)); end;
%%%%%%%%;
% Align the principal-images. ;
% Batches images into batches of size n_M_per_Mbatch (default 24). ;
% Batches templates into batches of size n_S_per_Sbatch (default 24). ;
% Only stores the optimal translation for each principal-image. ;
%%%%%%%%;
tmp_t = tic();
[ ...
 parameter ...
,X_SM__ ...
,delta_x_SM__ ...
,delta_y_SM__ ...
,gamma_z_SM__ ...
,I_value_SM__ ...
] = ...
ampmh_X_single_neighborhood_wrap_SM__9( ...
 parameter ...
,FTK ...
,n_w_max ...
,pm_n_UX_rank ...
,n_CTF_rank ...
,n_neighborhood ...
,n_S ...
,UCTF_UX_S_k_q_wncSx____ ...
,n_M ...
,CTF_index_ ...
,VSCTF_Mc__ ...
,svd_VUXM_lwnM____ ...
,UX_M_l2_dM__ ...
,index_neighborhood_ori_MP__ ...
);
tmp_t = toc(tmp_t); if (verbose>1); disp(sprintf(' %% ampmh_X_single_neighborhood_wrap_SM__9: %0.3fs',tmp_t)); end;
parameter = parameter_timing_update(parameter,'ampmh_X_single_neighborhood_wrap_SM__9',tmp_t);
,t_level_SM__ = zeros(n_S,n_M);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%if flag_CTF_index_unused==1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

if (verbose>0); disp(sprintf(' %% [finished ampmh_X_wrap_wrap_SM__8]')); end;

