function [X0_,X1_] = test_spharm_9(n_k,k_,n_l_,a_,b_);
% tests registration between molecule_A and molecule_B using an array of beta (fast only);
% finds maximum value and rotates accordingly, producing X1_ ;
% Note that the maximum value within X0_ should be the alpha_=[0,0,0] value of X1_ ;
%
% when no inputs are passed we import two spherical harmonic representations (generated by kspacegrid_to_model): ;
% molecule_A: modsph_A_ori = spiral ;
% molecule_B: modsph_B_ori = spiral with twisted tail ;
% ;
% n_k = integer maximum k ;
% k_ = real array of length n_k; k_(nk) = k_value for shell nk ;
% n_l_ = integer array of length n_k; n_l_(nk) = spherical harmonic order on shell nk; n_l_(nk) corresponds to n_lm_(nk) = (n_l_(nk)+1)^2 coefficients ;
% a_ = complex array of length \sum_{nk} (n_lm_(nk)+1)^2 ; coefficients are ordered in a row, with m varying quickly and l varying slowly ;
% b_ = complex array of length \sum_{nk} (n_lm_(nk)+1)^2 ; coefficients are ordered in a row, with m varying quickly and l varying slowly ;
% a_ corresponds to molecule_a, b_ to molecule_b ;
% ;
% X_ = complex array of size (n_m_max,n_m_max,n_m_max) ;
% X_(nalpha,ngamma,nbeta) corresponds to the innerproduct between molecule_A and molecule_B, where ;
% the latter has been rotated by euler-angles alpha,beta,gamma. ;
% Note that alpha_ and gamma_ are arrays from 0 to 2*pi, ;
% whereas beta_ is an array from -pi to pi. ;
% ;
% test with: ;
%{
  [X0_,X1_] = test_spharm_9();
  %}

verbose=1;

if nargin<5;
xnodesr_ = MDA_read_r8('./dir_mdaT/xnodesr_.mda');
isph_start_ = MDA_read_i4('./dir_mdaT/isph_start_.mda');
nterms_sph_ = MDA_read_i4('./dir_mdaT/nterms_sph_.mda');
modsph_A_ori_ = MDA_read_c16('./dir_mdaT/modsph_A_ori_.mda');
modsph_B_ori_ = MDA_read_c16('./dir_mdaT/modsph_B_ori_.mda');
n_k = length(isph_start_);
k_ = xnodesr_;
n_l_ = nterms_sph_;
n_lm_ = (n_l_+1).^2;
a_ = modsph_A_ori_;
b_ = modsph_B_ori_;
end;%if nargin<4;

% generating innerproduct array over beta_;

n_beta = 34;
beta_ = linspace(-pi,pi,n_beta+1); beta_ = beta_(1:end-1); n_beta = length(beta_);

tic;
[X0_] = register_spharm_to_spharm_angle_0(verbose,n_k,k_,n_l_,a_,b_,n_beta,beta_);
t_1 = toc; if (verbose); disp(sprintf(' %% X0_ time %0.2f',t_1)); end;

[max_0_v,max_ij] = max(real(X0_(:))); max_ij = max_ij-1;
max_ = zeros(1,3);
max_(1) = mod(max_ij,size(X0_,1));
max_ij = max_ij - max_(1); max_ij = max_ij / size(X0_,1) ;
max_(2) = mod(max_ij,size(X0_,2));
max_ij = max_ij - max_(2); max_ij = max_ij / size(X0_,2);
max_(3) = max_ij;
alpha_0_(1) = 2*pi*max_(1)/size(X0_,1);
alpha_0_(3) = 2*pi*max_(2)/size(X0_,2);
alpha_0_(2) = beta_(1+max_(3));
max_0_ = 1+max_;
assert(real(X0_(max_0_(1),max_0_(2),max_0_(3)))==max_0_v);

[c_] = rotate_spharm_to_spharm_0(verbose,n_k,k_,n_l_,b_,alpha_0_);

tmp_x = register_spharm_to_spharm_0(verbose,n_k,k_,n_l_,a_,c_);
disp(sprintf(' %% max_0_v %0.16f - tmp_x %0.16f = %0.16f',real(max_0_v),real(tmp_x),real(max_0_v-tmp_x)));

tic;
[X1_] = register_spharm_to_spharm_angle_0(verbose,n_k,k_,n_l_,a_,c_,n_beta,beta_);
t_1 = toc; if (verbose); disp(sprintf(' %% X1_ time %0.2f',t_1)); end;

[max_1_v,max_ij] = max(real(X1_(:))); max_ij = max_ij-1;
max_ = zeros(1,3);
max_(1) = mod(max_ij,size(X1_,1));
max_ij = max_ij - max_(1); max_ij = max_ij / size(X1_,1) ;
max_(2) = mod(max_ij,size(X1_,2));
max_ij = max_ij - max_(2); max_ij = max_ij / size(X1_,2);
max_(3) = max_ij;
alpha_1_(1) = 2*pi*max_(1)/size(X1_,1);
alpha_1_(3) = 2*pi*max_(2)/size(X1_,2);
alpha_1_(2) = beta_(1+max_(3));
max_1_ = 1+max_;
assert(real(X1_(max_1_(1),max_1_(2),max_1_(3)))==max_1_v);

figure; clf;
n_nb = 15;
nb_ = round(linspace(1,n_beta,n_nb));
for nnb=1:n_nb;
nb = nb_(nnb);
subplot(3,5,nnb); imagesc(squeeze(real(X0_(:,:,nb)))); title(sprintf('X0(:,:,%d)',nb))
end;%for nnb=1:n_nb;
figure; clf;
n_nb = 15;
nb_ = round(linspace(1,n_beta,n_nb));
for nnb=1:n_nb;
nb = nb_(nnb);
subplot(3,5,nnb); imagesc(squeeze(real(X1_(:,:,nb)))); title(sprintf('X1(:,:,%d)',nb))
end;%for nnb=1:n_nb;


%{

tmp_x = register_spharm_to_spharm_0(verbose,n_k,k_,n_l_,a_,b_);

n_beta = 1; beta_ = [3*pi/5];
if (n_beta>1); beta_ = linspace(-pi,pi,n_beta+1); beta_ = beta_(1:end-1); n_beta = length(beta_); end;

tic;
[X0_] = register_spharm_to_spharm_angle_0(verbose,n_k,k_,n_l_,a_,b_,n_beta,beta_);
t_1 = toc; if (verbose); disp(sprintf(' %% X0_ time %0.2f',t_1)); end;

tic;
[X1_] = register_spharm_to_spharm_angle_slow_0(verbose,n_k,k_,n_l_,a_,b_,n_beta,beta_);
t_1 = toc; if (verbose); disp(sprintf(' %% X1_ time %0.2f',t_1)); end;

subplot(1,3,1); imagesc(real(X0_)); colorbar;
subplot(1,3,2); imagesc(real(X1_)); colorbar;
subplot(1,3,3); imagesc(real(X0_-X1_)); colorbar;

% If register_spharm_to_spharm_angle defined via: ;
% X0_(:,:,1+nbeta) = recenter2(fft2(recenter2(squeeze(C_(:,:)))));
% X0b_ = X0_; 
% X0b_ = recenter2(X0b_);
% X0b_ = transpose(X0b_);
% X0b_ = circshift(X0b_,[-1,-1]);
% subplot(1,3,1); imagesc(real(X0b_)); colorbar;
% subplot(1,3,2); imagesc(real(X1_)); colorbar;
% subplot(1,3,3); imagesc(real(X0b_-X1_)); colorbar;
%
% Y_ = reshape(1:100,10,10);
% Yb_ = Y_; 
% Yb_ = recenter2(Yb_);
% Yb_ = transpose(Yb_);
% Yb_ = circshift(Yb_,[-1,-1]);

[max_0_v,max_ij] = max(real(X0_(:))); max_ij = max_ij-1;
max_ = zeros(1,3);
max_(1) = mod(max_ij,size(X0_,1));
max_ij = max_ij - max_(1); max_ij = max_ij / size(X0_,1) ;
max_(2) = mod(max_ij,size(X0_,2));
max_ij = max_ij - max_(2); max_ij = max_ij / size(X0_,2);
max_(3) = max_ij;
alpha_0_(1) = 2*pi*max_(1)/size(X0_,1)-pi;
alpha_0_(3) = 2*pi*max_(2)/size(X0_,2)-pi;
alpha_0_(2) = beta_(1+max_(3));
max_0_ = 1+max_;
assert(real(X0_(max_0_(1),max_0_(2),max_0_(3)))==max_0_v);

  %}
