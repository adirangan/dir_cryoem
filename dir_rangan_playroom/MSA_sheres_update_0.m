function ...
[ ...
 parameter ...
,B_sher_q_ ...
,B_sher_w_ ...
] = ...
MSA_sheres_update_0( ...
 parameter ...
,n_w...
,n_q...
,F_wq__...
,F_inv_qw__...
,n_M...
,z_M_...
,p_M_...
,sigma_sher...
,B_sher_q_...
,B_sher_w_...
);

str_thisfunction = 'MSA_sheres_update_0';

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;
if (nargin<1+na); n_w=[]; end; na=na+1;
if (nargin<1+na); n_q=[]; end; na=na+1;
if (nargin<1+na); F_wq__=[]; end; na=na+1;
if (nargin<1+na); F_inv_qw__=[]; end; na=na+1;
if (nargin<1+na); n_M=[]; end; na=na+1;
if (nargin<1+na); z_M_=[]; end; na=na+1;
if (nargin<1+na); p_M_=[]; end; na=na+1;
if (nargin<1+na); sigma_sher=[]; end; na=na+1;
if (nargin<1+na); B_sher_q_=[]; end; na=na+1;
if (nargin<1+na); B_sher_w_=[]; end; na=na+1;

if isempty(parameter); parameter = struct('type','parameter'); end;
if ~isfield(parameter,'flag_verbose'); parameter.flag_verbose = 0; end;
if ~isfield(parameter,'flag_disp'); parameter.flag_disp = 0; end;
flag_verbose = parameter.flag_verbose;
flag_disp = parameter.flag_disp;

if flag_verbose; disp(sprintf(' %% [entering %s]',str_thisfunction)); end;

R2_sher_wM__ = abs(bsxfun(@minus,reshape(B_sher_w_,[n_w,1]),reshape(z_M_,[1,n_M]))).^2;
R2_sher_wM__ = bsxfun(@minus,R2_sher_wM__,min(R2_sher_wM__,[],1));
p_sher_wM__ = exp(-R2_sher_wM__/max(1e-12,2*sigma_sher^2));
p_sher_wM__ = bsxfun(@rdivide,p_sher_wM__,max(1e-24,sum(p_sher_wM__,1))); %<-- ensure that each image-location has a normalized set of p(w|M). ;
tmp_denom_w_ = sum(bsxfun(@times,p_sher_wM__,reshape(p_M_,[1,n_M])),2);
p_sher_wM__ = bsxfun(@rdivide,p_sher_wM__,max(1e-12,tmp_denom_w_)); %<-- ensure that each w has a normalized set of p(M|w). ;
tmp_index_ = efind(sum(p_sher_wM__,2)<1e-24); %<-- find and correct w which are very far away from all image-locations. ;
p_sher_wM__(1+tmp_index_,:) = 1/max(1,n_M);
tmp_denom_w_ = sum(bsxfun(@times,p_sher_wM__,reshape(p_M_,[1,n_M])),2);
p_sher_wM__ = bsxfun(@rdivide,p_sher_wM__,max(1e-24,tmp_denom_w_)); %<-- ensure that each w has a normalized set of p(M|w). ;
C_sher_w_ = p_sher_wM__*(z_M_.*p_M_); %<-- now, for each w, accumulate \sum_{nM} p(M|w)*z_M_(1+nM)*p_M_(1+nM). ;
C_sher_q_ = F_inv_qw__*C_sher_w_;
C_sher_w_ = F_wq__*C_sher_q_;
B_sher_q_ = C_sher_q_;
B_sher_w_ = C_sher_w_;
