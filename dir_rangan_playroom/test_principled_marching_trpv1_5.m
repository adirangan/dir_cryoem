clear; setup;

dir_trunk = sprintf('/data/rangan/dir_cryoem/dir_rangan_playroom/dir_principled_marching');

h2d_ = @(kd) 4*pi^2*(besselj(0,kd) + besselj(2,kd)); % calculates <f_j,f_k>, normalized so that <f,f> = (4*pi^2);
dh2d_ = @(kd) 4*pi^3*(besselj(-1,kd) - besselj(+3,kd));
h3d_ = @(kd) 4*pi*( sin(kd) - (kd).*cos(kd) ) ./ kd.^3 ; % calculates <f_j,f_k>, normalized so that <f,f> = 4*pi/3;
dh3d_ = @(kd) 12*pi*( (kd.^2/3 - 1) .* sin(kd) + (kd).*cos(kd) ) ./ kd.^4 ;

%%%%%%%%;
% Quick check of nufft1d3, using k=frequency ;
%%%%%%%%;
gx = @(x_,mu,sg) 1/sqrt(2*pi)/sg * exp(-(x_-mu).^2/2/sg.^2);
gk = @(k_,mu,sg) gx(k_,0,1/sg).*exp(-i*k_*mu)/sg;
x_r_max = 10;
[x_all_,x_weight_all_] = chebpts(128,x_r_max*[-1,+1]);
n_x_all = numel(x_all_);
k_r_max = 15;
[k_all_,k_weight_all_] = chebpts(256,k_r_max*[-1,+1]);
n_k_all = numel(k_all_);
sg = 1.5; mu = 2.5;
f_x_c_form_ = gx(x_all_,mu,sg);
f_k_c_form_ = gk(k_all_,mu,sg);
eta = pi/x_r_max;
f_k_c_quad_ = nufft1d3(n_x_all,x_all_*eta,f_x_c_form_.*x_weight_all_(:),-1,1e-12,n_k_all,k_all_/eta)/sqrt(2*pi);
eta = pi/k_r_max;
f_x_c_quad_ = nufft1d3(n_k_all,k_all_*eta,f_k_c_form_.*k_weight_all_(:),+1,1e-12,n_x_all,x_all_/eta)/sqrt(2*pi);
flag_plot=0;
if flag_plot;
subplot(1,2,1);plot(k_all_,f_k_c_form_,'k.-',k_all_,f_k_c_quad_,'ro-'); xlabel('k'); ylabel('f_k');
subplot(1,2,2);plot(x_all_,f_x_c_form_,'k.-',x_all_,f_x_c_quad_,'ro-'); xlabel('x'); ylabel('f_x');
end;%if flag_plot;
disp(sprintf(' %% nufft1d3: f_k_c_quad error: %0.16f',fnorm(f_k_c_form_-f_k_c_quad_)/fnorm(f_k_c_form_)));
disp(sprintf(' %% nufft1d3: f_x_c_quad error: %0.16f',fnorm(f_x_c_form_-f_x_c_quad_)/fnorm(f_x_c_form_)));
%%%%%%%%;
% Quick check of nufft1d3, using k=wavenumber ;
%%%%%%%%;
gx = @(x_,mu,sg) 1/sqrt(2*pi)/sg * exp(-(x_-mu).^2/2/sg.^2);
gk = @(k_,mu,sg) gx(k_,0,1/sg).*exp(-i*k_*mu)/sg;
x_r_max = 10;
[x_all_,x_weight_all_] = chebpts(128,x_r_max*[-1,+1]);
n_x_all = numel(x_all_);
k_r_max = 15/(2*pi);
[k_all_,k_weight_all_] = chebpts(256,k_r_max*[-1,+1]);
n_k_all = numel(k_all_);
sg = 1.5; mu = 2.5;
f_x_c_form_ = gx(x_all_,mu,sg);
f_k_c_form_ = gk(2*pi*k_all_,mu,sg);
eta = pi/x_r_max;
f_k_c_quad_ = nufft1d3(n_x_all,x_all_*eta,f_x_c_form_.*x_weight_all_(:),-1,1e-12,n_k_all,2*pi*k_all_/eta)/sqrt(2*pi);
eta = pi/k_r_max;
f_x_c_quad_ = nufft1d3(n_k_all,2*pi*k_all_*eta,f_k_c_form_.*2*pi.*k_weight_all_(:),+1,1e-12,n_x_all,x_all_/eta)/sqrt(2*pi);
flag_plot=0;
if flag_plot;
subplot(1,2,1);plot(k_all_,f_k_c_form_,'k.-',k_all_,f_k_c_quad_,'ro-'); xlabel('k'); ylabel('f_k');
subplot(1,2,2);plot(x_all_,f_x_c_form_,'k.-',x_all_,f_x_c_quad_,'ro-'); xlabel('x'); ylabel('f_x');
end;%if flag_plot;
disp(sprintf(' %% nufft1d3: f_k_c_quad error: %0.16f',fnorm(f_k_c_form_-f_k_c_quad_)/fnorm(f_k_c_form_)));
disp(sprintf(' %% nufft1d3: f_x_c_quad error: %0.16f',fnorm(f_x_c_form_-f_x_c_quad_)/fnorm(f_x_c_form_)));

%%%%%%%%;
% First load trpv1 molecule on x_u grid. ;
%%%%%%%%;
dir_data = '/data/rangan/dir_cryoem/dir_trpv1/data_nosym';
fname_dims = sprintf('%s/dims',dir_data);
tmp_ = textread(fname_dims); n_x_u = tmp_(1); n_image = tmp_(2); clear tmp_;
fname_density = sprintf('%s/density_clean',dir_data);
a_x_u_load_ = textread(fname_density); a_x_u_load_ = reshape(a_x_u_load_,n_x_u,n_x_u,n_x_u);
flag_plot=0; if flag_plot; figure(1); isosurface_f_x_c_0(a_x_u_load_,98.5); end;
%%%%%%%%;
half_diameter_x_c = 1.0d0;
diameter_x_c = 2.0d0*half_diameter_x_c;
x_p_r_max = 1.0;
x_u_res = 64;
n_pack = n_x_u/x_u_res;
pack_row_ij_ = zeros(x_u_res,1);
pack_col_ij_ = zeros(x_u_res,1);
pack_val_ij_ = zeros(x_u_res,1);
na=0;
for nx_u=0:n_x_u-1;
pack_row_ij_(1+na) = 1+nx_u;
pack_col_ij_(1+na) = 1+floor(nx_u/n_pack);
pack_val_ij_(1+na) = 1/n_pack;
na=na+1;
end;%for nx_u=0:n_x_u-1;
x_u_pack_ = sparse(pack_row_ij_,pack_col_ij_,pack_val_ij_,n_x_u,x_u_res);
a_x_u_pack_ = reshape(a_x_u_load_,[n_x_u*n_x_u,n_x_u])*x_u_pack_;
a_x_u_pack_ = reshape(permute(reshape(a_x_u_pack_,[n_x_u,n_x_u,x_u_res]),[3,1,2]),[n_x_u*x_u_res,n_x_u])*x_u_pack_;
a_x_u_pack_ = reshape(permute(reshape(a_x_u_pack_,[x_u_res,n_x_u,x_u_res]),[3,1,2]),[x_u_res*x_u_res,n_x_u])*x_u_pack_;
a_x_u_pack_ = permute(reshape(a_x_u_pack_,[x_u_res,x_u_res,x_u_res]),[3,1,2]);
flag_plot=0; if flag_plot; figure(1); subplot(1,2,1); isosurface_f_x_c_0(a_x_u_load_,98.5); subplot(1,2,2); isosurface_f_x_c_0(a_x_u_pack_,98.5); end;
%%%%%%%%;
x_u_0_ = linspace(-x_p_r_max,+x_p_r_max,x_u_res);
x_u_1_ = linspace(-x_p_r_max,+x_p_r_max,x_u_res);
x_u_2_ = linspace(-x_p_r_max,+x_p_r_max,x_u_res);
[X_u_0_,X_u_1_,X_u_2_] = ndgrid(x_u_0_,x_u_1_,x_u_2_); n_X_u = x_u_res^3;
X_u_weight_ = (2*x_p_r_max/x_u_res)^3;

%%%%%%%%;
% Now convert to a_k_p_ ;
%%%%%%%%;
verbose=0;
fname_mat = sprintf('%s_mat/test_principled_marching_trpv1_5_a_k_p_quad_.mat',dir_trunk);
if (~exist(fname_mat,'file'));
disp(sprintf(' %% %s not found, creating',fname_mat));
tmp_t = tic;
k_p_r_max = 48/(2*pi); k_eq_d = 1.0/(2*pi);
[n_k_all,n_k_all_csum_,k_p_r_all_,k_p_azimu_b_all_,k_p_polar_a_all_,weight_k_all_,weight_shell_k_,n_k_p_r,k_p_r_,weight_k_p_r_,k_c_0_all_,k_c_1_all_,k_c_2_all_,J_node_,J_weight_,J_chebfun_,J_polyval_] = sample_sphere_7(verbose,k_p_r_max,k_eq_d,'L') ;
tmp_t = toc(tmp_t); disp(sprintf(' %% sample_sphere_7: time %0.2fs',tmp_t));
eta = pi/x_p_r_max; tmp_t = tic;
a_k_p_quad_ = nufft3d3(n_X_u,X_u_0_(:)*eta,X_u_1_(:)*eta,X_u_2_(:)*eta,a_x_u_pack_(:).*X_u_weight_(:),-1,1e-12,n_k_all,2*pi*k_c_0_all_/eta,2*pi*k_c_1_all_/eta,2*pi*k_c_2_all_/eta)/sqrt(2*pi)/sqrt(2*pi)/sqrt(2*pi);
tmp_t = toc(tmp_t); disp(sprintf(' %% nufft3d3: a_k_p_quad_ time %0.2fs',tmp_t));
%%%%%%%%;
eta = pi/k_p_r_max; tmp_t = tic;
a_x_u_reco_ = nufft3d3(n_k_all,2*pi*k_c_0_all_*eta,2*pi*k_c_1_all_*eta,2*pi*k_c_2_all_*eta,a_k_p_quad_.*(2*pi)^3.*weight_k_all_,+1,1e-12,n_X_u,X_u_0_(:)/eta,X_u_1_(:)/eta,X_u_2_(:)/eta)/sqrt(2*pi)/sqrt(2*pi)/sqrt(2*pi);
tmp_t = toc(tmp_t); disp(sprintf(' %% nufft3d3: a_x_u_reco_ time %0.2fs',tmp_t));
disp(sprintf(' %% nufft3d3: a_x_u_reco error: %0.16f',fnorm(a_x_u_pack_(:)-a_x_u_reco_)/fnorm(a_x_u_pack_(:))));
disp(sprintf(' %% at this point one should ensure that a_k_p_quad_ on the outer shells (i.e., near k_p_r_max) has decayed to the desired precision.'));
save(fname_mat ...
     ,'k_p_r_max','k_eq_d' ...
     ,'n_k_all','n_k_all_csum_','k_p_r_all_','k_p_azimu_b_all_','k_p_polar_a_all_','weight_k_all_','weight_shell_k_','n_k_p_r','k_p_r_','weight_k_p_r_','k_c_0_all_','k_c_1_all_','k_c_2_all_','J_node_','J_weight_','J_chebfun_','J_polyval_' ...
     ,'a_k_p_quad_' ...
     ,'a_x_u_reco_' ...
     );
end;%if (~exist(fname_mat,'file'));
if ( exist(fname_mat,'file'));
disp(sprintf(' %% %s found, not creating',fname_mat));
load(fname_mat);
end;%if ( exist(fname_mat,'file'));
flag_plot=0;
if flag_plot;
plot(k_p_r_all_,log10(abs(a_k_p_quad_)),'.'); xlabel('k'); ylabel('log10(|a(k)|)');
end;%if flag_plot;

%%%%%%%%;
% Now see what the function looks like on a uniform x_c_ grid. ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
a_x_u_reco__ = zeros(n_X_u,n_k_p_r);
eta = pi/k_p_r_max; 
for nk_p_r=0:n_k_p_r-1;
tmp_ij_ = n_k_all_csum_(1+nk_p_r):n_k_all_csum_(1+1+nk_p_r)-1;
tmp_n_k_all = numel(1+tmp_ij_);
tmp_t = tic;
a_x_u_reco__(:,1+nk_p_r) = nufft3d3(tmp_n_k_all,2*pi*k_c_0_all_(1+tmp_ij_)*eta,2*pi*k_c_1_all_(1+tmp_ij_)*eta,2*pi*k_c_2_all_(1+tmp_ij_)*eta,a_k_p_quad_(1+tmp_ij_).*(2*pi)^3.*weight_k_all_(1+tmp_ij_),+1,1e-12,n_X_u,X_u_0_(:)/eta,X_u_1_(:)/eta,X_u_2_(:)/eta)/sqrt(2*pi)/sqrt(2*pi)/sqrt(2*pi);
tmp_t = toc(tmp_t); disp(sprintf(' %% nk_p_r %.3d/%.3d nufft3d3: a_x_u_reco__(:,%.3d) time %0.2fs',nk_p_r,n_k_p_r,nk_p_r,tmp_t));
end;%for nk_p_r=0:n_k_p_r-1;
b_x_u_reco__ = cumsum(a_x_u_reco__,2);
%%%%%%%%;
clf;
subplot(2,2,1); isosurface_f_x_u_0(reshape(real(b_x_u_reco__(:,16)),x_u_res,x_u_res,x_u_res),[90,95,99]); title(sprintf('K<=%0.2f',k_p_r_(16)));
subplot(2,2,2); isosurface_f_x_u_0(reshape(real(b_x_u_reco__(:,24)),x_u_res,x_u_res,x_u_res),[90,95,99]); title(sprintf('K<=%0.2f',k_p_r_(24)));
subplot(2,2,3); isosurface_f_x_u_0(reshape(real(b_x_u_reco__(:,32)),x_u_res,x_u_res,x_u_res),[90,95,99]); title(sprintf('K<=%0.2f',k_p_r_(32)));
subplot(2,2,4); plot(k_p_r_,corr(a_x_u_pack_(:),real(b_x_u_reco__(:,:))),'ko'); xlabel('max K'); ylabel('correlation'); title('correlation of csum');
figbig;
fname_pre = sprintf('/data/rangan/dir_cryoem/dir_rangan_playroom/dir_principled_marching_jpg/test_principled_marching_trpv1_5_FIGB');
disp(sprintf(' %% writing %s',fname_pre));
print('-djpeg',sprintf('%s.jpg',fname_pre));
print('-depsc',sprintf('%s.eps',fname_pre));
end;%if flag_plot;

%%%%%%%%;
% Set up 2-d k_p grid for images. ;
%%%%%%%%;
n_w_ = zeros(n_k_p_r,1);
for nk=0:n_k_p_r-1;
n_polar_a = round(pi*k_p_r_(1+nk));
if (n_polar_a<6); n_polar_a = 6; end;
if (mod(n_polar_a,2)~=0); n_polar_a = n_polar_a+1; end;
n_w_(1+nk) = n_polar_a*2;
end;%for nk=0:n_k_p_r-1;
n_w_csum_ = cumsum([0;n_w_]);
n_w_sum = sum(n_w_);
%%%%%%%%;
% Now design quadrature weights for integration in 2d. ;
%%%%%%%%;
tmp_P_ = zeros(n_k_p_r,n_k_p_r); %<-- polynomials of order 0:n_k_p_r-1 evaluated on k_p_r_/k_p_r_max. ;
tmp_I_ = zeros(n_k_p_r,1); %<-- integrals of those polynomials on the 2d-disc of radius 1. ;
for nk_p_r=0:n_k_p_r-1;
tmp_p = @(x) x.^nk_p_r;
tmp_P_(1+nk_p_r,:) = tmp_p(k_p_r_/k_p_r_max);
tmp_I_(1+nk_p_r) = 2*pi*1/(nk_p_r+2);
end;%for nk_p_r=0:n_k_p_r-1;
tmp_W_ = pinv(tmp_P_,1e-6)*tmp_I_;
disp(sprintf(' %% weight error: %0.16f',fnorm(tmp_P_*tmp_W_ - tmp_I_)/fnorm(tmp_I_)));
weight_2d_k_p_r_ = tmp_W_*k_p_r_max^2;
weight_2d_k_all_ = zeros(n_w_sum,1);
for nk_p_r=0:n_k_p_r-1;
tmp_ij_ = n_w_csum_(1+nk_p_r) + (0:n_w_(1+nk_p_r)-1);
weight_2d_k_all_(1+tmp_ij_) = weight_2d_k_p_r_(1+nk_p_r) / max(1,n_w_(1+nk_p_r)) / (2*pi)^2;
end;%for nk_p_r=0:n_k_p_r-1;

%%%%%%%%;
% extract ctf function. ;
%%%%%%%%;
fname_num_ctf = sprintf('%s/num_ctf',dir_data);
n_ctf = textread(fname_num_ctf);
fname_ctf_idx = sprintf('%s/ctf_idx',dir_data);
ctf_idx = textread(fname_ctf_idx);
fname_mscope_params = sprintf('%s/mscope_params',dir_data);
mscope_params = textread(fname_mscope_params);
CTF_Voltage_kV_ = mscope_params(1)*ones(n_ctf,1);
CTF_Spherical_Aberration_ = mscope_params(2)*ones(n_ctf,1);
CTF_Detector_Pixel_Size_ = mscope_params(3)*ones(n_ctf,1);
CTF_Amplitude_Contrast_ = mscope_params(4)*ones(n_ctf,1);
fname_ctf_params = sprintf('%s/ctf_params',dir_data);
ctf_params_ = textread(fname_ctf_params);
CTF_Defocus_U_ = ctf_params_(:,1);
CTF_Defocus_V_ = ctf_params_(:,2);
CTF_Defocus_Angle_ = ctf_params_(:,3);
for nctf=0:n_ctf-1;
if (mod(nctf,100)==0); disp(sprintf(' %% nctf %d/%d',nctf,n_ctf)); end;
CTF_Spherical_Aberration = CTF_Spherical_Aberration_(1+nctf);% spherical aberation of the lens in mm ;
CTF_Spherical_Aberration=CTF_Spherical_Aberration*(10.0d0^7.0d0);% convert into Angstroms ;
CTF_Voltage_kV = CTF_Voltage_kV_(1+nctf);% voltage in kVolts ;
CTF_Voltage_1V=CTF_Voltage_kV*1000.0 ;% convert into Volts ;
CTF_lambda = 12.2643247/sqrt(CTF_Voltage_1V+CTF_Voltage_1V^2*0.978466d-6);% electron wavelength in Angstroms ;
CTF_Defocus_U = CTF_Defocus_U_(1+nctf);% defocus values (in Angstroms) ;
CTF_Defocus_V = CTF_Defocus_V_(1+nctf);% defocus values (in Angstroms) ;
CTF_Defocus_Angle = CTF_Defocus_Angle_(1+nctf);% angle of astigmatism ;
CTF_Defocus_Angle = CTF_Defocus_Angle*pi/180.0d0;% convert into radians ;
CTF_Amplitude_Contrast = CTF_Amplitude_Contrast_(1+nctf);% CTF_Amplitude Contrast ;
tmp_w1=sqrt(1.0d0-CTF_Amplitude_Contrast^2);% weights for the amplitude and phase contrasts in CTF ;
tmp_w2=CTF_Amplitude_Contrast;% weights for the amplitude and phase contrasts in CTF ;
%  CTF_Object_Pixel_Size = CTF_Detector_Pixel_Size/CTF_Magnification;
CTF_Object_Pixel_Size = CTF_Detector_Pixel_Size_(1+nctf);% pixel size of the scanner in physical space (not magnified) in Angstroms ;
CTF_lambda_per_box = CTF_lambda/(n_x_u*CTF_Object_Pixel_Size);% n_x_u_max*CTF_Object_Pixel_Size is the box size in Angstroms ;
%  call envelope_fxn(ngridr,xnodesr/pi,D,envelope);
na=0;
for nk = 0:n_k_p_r-1;
for nw=0:n_w_(1+nk)-1;
tmp_theta = (2.0d0*pi*nw)/n_w_(1+nk);
tmp_k_c_1 = (2.0d0*pi)*k_p_r_(1+nk)*cos(tmp_theta);
tmp_k_c_2 = (2.0d0*pi)*k_p_r_(1+nk)*sin(tmp_theta);
tmp_ctf_value = niko_ctf(CTF_Spherical_Aberration,CTF_lambda,tmp_w1,tmp_w2,CTF_Defocus_U,CTF_Defocus_V,CTF_Defocus_Angle,CTF_lambda_per_box,tmp_k_c_1/pi,tmp_k_c_2/pi);
CTF_k_p__(1+na,1+nctf) = -tmp_ctf_value;
na = na+1;
end;%for nw=0:n_w_(1+nk)-1;
end;%for nk = 0:n_k_p_r-1;
flag_plot=0;
if flag_plot;
figure(1);clf;
subplot(1,1,1); 
imagesc_p(n_k_p_r,k_p_r_,n_w_,sum(n_w_),real(CTF_k_p__(:,1)),[-1,+1],colormap_beach());
set(gca,'XTick',[],'YTick',[]); axis image; title('CTF(k)');
end;%if flag_plot;
end;%for nctf=0:n_ctf-1;
CTF_avg_k_p_ = mean(CTF_k_p__,2);
%imagesc_p(n_k_p_r,k_p_r_,n_w_,sum(n_w_),real(CTF_avg_k_p_(:)),[-1,+1],colormap_beach());
CTF_avg_k_p_r_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
tmp_ij_ = n_w_csum_(1+nk_p_r) + (0:n_w_(1+nk_p_r)-1);
CTF_avg_k_p_r_(1+nk_p_r) = mean(CTF_avg_k_p_(1+tmp_ij_));
end;%for nk_p_r=0:n_k_p_r-1;

%%%%%%%%;
% Now convert to a_k_Y_ ; 
%%%%%%%%;
verbose=0;
l_max_ = zeros(n_k_p_r,1);
for nk_p_r=0:n_k_p_r-1;
%l_max_(1+nk_p_r) = 1+ceil(2*pi*k_p_r_(1+nk_p_r));
l_max_(1+nk_p_r) = 1+ceil(2*pi*k_p_r_(1+nk_p_r));
end;%for nk_p_r=0:n_k_p_r-1;
n_lm_ = (l_max_+1).^2;
n_lm_max = max(n_lm_);
n_lm_sum = sum(n_lm_);
n_lm_csum_ = cumsum([0;n_lm_]);
l_max_max = max(l_max_); dWtdkd__l_max_max = 2*l_max_max;
m_max_ = -l_max_max : +l_max_max;
n_m_max = length(m_max_);
Y_l_val_ = zeros(n_lm_sum,1);
Y_m_val_ = zeros(n_lm_sum,1);
for nk_p_r=0:n_k_p_r-1;
l_max = l_max_(1+nk_p_r);
tmp_l_val_ = zeros(n_lm_(1+nk_p_r),1);
tmp_m_val_ = zeros(n_lm_(1+nk_p_r),1);
na=0; 
for l_val=0:l_max;
for m_val=-l_val:+l_val;
tmp_l_val_(1+na) = l_val;
tmp_m_val_(1+na) = m_val;
na=na+1;
end;%for m_val=-l_val:+l_val;
end;%for l_val=0:l_max;
tmp_ij_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
Y_l_val_(1+tmp_ij_) = tmp_l_val_;
Y_m_val_(1+tmp_ij_) = tmp_m_val_;
end;%for nk_p_r=0:n_k_p_r-1;
weight_Y_ = zeros(n_lm_sum,1);
for nk_p_r=0:n_k_p_r-1;
tmp_ij_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
weight_Y_(1+tmp_ij_) = weight_k_p_r_(1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
%%%%%%%%;
tmp_t = tic;
[a_k_Y_quad_] = convert_k_p_to_spharm_1(verbose,n_k_all,n_k_all_csum_,k_p_r_all_,k_p_azimu_b_all_,k_p_polar_a_all_,weight_k_all_,weight_shell_k_,n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,a_k_p_quad_);
tmp_t = toc(tmp_t); disp(sprintf(' %% a_k_Y_quad_ time %0.2fs',tmp_t));
disp(sprintf(' %% Here we should ensure that a_k_Y_ on the outer shells has decayed to the desired precision.'));
disp(sprintf(' %% Moreover, we should ensure that a_k_Y_(l,m) has decayed for large l,m at each shell.'));
flag_plot=0;
if flag_plot;
imagesc_Y(k_p_r_max,n_k_p_r,k_p_r_,l_max_,log10(abs(a_k_Y_quad_)),[-10,0],colormap_beach());
end;%if flag_plot;
tmp_t = tic;
[a_k_p_reco_] = convert_spharm_to_k_p_1(verbose,n_k_all,n_k_all_csum_,k_p_r_all_,k_p_azimu_b_all_,k_p_polar_a_all_,weight_k_all_,weight_shell_k_,n_k_p_r,k_p_r_,weight_k_p_r_,l_max_,a_k_Y_quad_);
tmp_t = toc(tmp_t); disp(sprintf(' %% a_k_Y_quad --> a_k_p_reco_ time %0.2fs',tmp_t));
disp(sprintf(' %% nufft3d3: a_k_p_reco error: %0.16f',fnorm(a_k_p_quad_-a_k_p_reco_)/fnorm(a_k_p_quad_)));
%%%%%%%%;
a_k_Y_quad__ = zeros(n_lm_max,n_k_p_r);
for nk_p_r=0:n_k_p_r-1;
tmp_ij_ = n_lm_csum_(1+nk_p_r) + (0:n_lm_(1+nk_p_r)-1);
a_k_Y_quad__(1:n_lm_(1+nk_p_r),1+nk_p_r) = a_k_Y_quad_(1+tmp_ij_);
end;%for nk_p_r=0:n_k_p_r-1;

%%%%%%%%
% Now generate templates. ;
%%%%%%%%;
verbose=1;
template_k_eq_d = k_eq_d;
viewing_k_eq_d = k_eq_d*8;
[S_k_p__,n_w_,weight_2d_k_p_r_,weight_2d_k_all_,n_viewing_all,viewing_azimu_b_all_,viewing_polar_a_all_,n_viewing_polar_a,viewing_polar_a_,n_viewing_azimu_b_,template_k_c_0__,template_k_c_1__,template_k_c_2__] = get_template_0(verbose,n_k_p_r,k_p_r_,k_p_r_max,weight_k_p_r_,l_max_,a_k_Y_quad_,viewing_k_eq_d,template_k_eq_d);
n_w_max = max(n_w_); n_w_sum = sum(n_w_); n_w_csum_ = cumsum([0;n_w_]);
%%%%%%%%;
flag_plot=0;
if flag_plot;
n_plot=6;
for nplot=0:n_plot-1;
subplot(2,3,1+nplot);
nviewing_all = max(1,min(n_viewing_all,round(n_viewing_all*nplot/n_plot)));
imagesc_p(n_k_p_r,k_p_r_,n_w_,sum(n_w_),real(S_k_p__(:,nviewing_all)),[],colormap_beach()); 
axis image; axisnotick; title(sprintf('nv %d',nviewing_all));
end;%for nplot=0:n_plot-1;
figbig;
end;%if flag_plot;
%%%%%%%%;

%%%%%%%%;
% Ensure that the templates associated with a single shell correspond (exactly) to the rings within the full templates. ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
nk_p_r = 12;
tmp_S_k_p_0__ = S_k_p__(1+n_w_csum_(1+nk_p_r)+[0:n_w_(1+nk_p_r)-1],:);
colormap(colormap_beach());
subplot(1,2,1); 
imagesc(abs(tmp_S_k_p_0__)); xlabel('nviewing_all','Interpreter','none'); ylabel('ngamma_z','Interpreter','none'); title('template ring');
tmp_a_k_Y_quad_ = a_k_Y_quad_(1+n_lm_csum_(1+nk_p_r)+[0:n_lm_(1+nk_p_r)-1]);
tmp_S_k_p_1__ = get_template_0(verbose,1,k_p_r_(1+nk_p_r),k_p_r_max,weight_k_p_r_(1+nk_p_r),l_max_(1+nk_p_r),tmp_a_k_Y_quad_,viewing_k_eq_d,template_k_eq_d);
subplot(1,2,2); 
imagesc(abs(tmp_S_k_p_1__)); xlabel('nviewing_all','Interpreter','none'); ylabel('ngamma_z','Interpreter','none'); title('ring template');
disp(sprintf(' %% nk_p_r %d/%d tmp_S_k_p_0__ vs tmp_S_k_p_1__: %0.16f',nk_p_r,n_k_p_r,fnorm(tmp_S_k_p_0__-tmp_S_k_p_1__)/fnorm(tmp_S_k_p_0__)));
end;%if flag_plot;

%%%%%%%%;
% Now test least-squares solver for some of the shells. ;
%%%%%%%%;
for nk_p_r=0:8:n_k_p_r-1;%for nk_p_r=0:n_k_p_r-1;
tmp_S_k_p__ = S_k_p__(1+n_w_csum_(1+nk_p_r)+[0:n_w_(1+nk_p_r)-1],:);
viewing_gamma_z_all_ = 2*pi*rand(n_viewing_all,1); tmp_M_k_p__ = zeros(n_w_(1+nk_p_r),n_viewing_all);
for nviewing_all=0:n_viewing_all-1; tmp_M_k_p__(:,1+nviewing_all) = rotate_p2p_fx(1,n_w_(1+nk_p_r),n_w_(1+nk_p_r),tmp_S_k_p__(:,1+nviewing_all),+viewing_gamma_z_all_(1+nviewing_all)); end; %<-- Note that the sign of viewing_gamma_z is the same as the next line. ;
[tmp_k_p_polar_a__,tmp_k_p_azimu_b__] = cg_rhs_1(n_viewing_all,n_w_(1+nk_p_r),viewing_polar_a_all_,viewing_azimu_b_all_,+viewing_gamma_z_all_); %<-- Note that the sign of viewing_gamma_z is the same as the previous line. ;
tmp_l_max = l_max_(1+nk_p_r);
tmp_n_polar_a = max(15,1+2*tmp_l_max); tmp_n_azimu_b = 1+2*tmp_n_polar_a;
[legendre_evaluate_ljm___,legendre_evaluate_mlj___,expil__,expi__] = legendre_evaluate_ljm___0(tmp_l_max,cos(linspace(0,pi,tmp_n_polar_a)),tmp_n_azimu_b);
tmp_n_order = 5;
tensor_to_scatter__ = cg_interpolate_n_1(tmp_n_order,tmp_n_polar_a,tmp_n_azimu_b,n_w_(1+nk_p_r)*n_viewing_all,tmp_k_p_polar_a__(:),tmp_k_p_azimu_b__(:));
scatter_to_tensor__ = transpose(tensor_to_scatter__);
tmp_An__ = @(a_k_Y_) tensor_to_scatter__*reshape(cg_evaluate_n_1(tmp_l_max,convert_spharm_to_spharm__0(tmp_l_max,a_k_Y_),tmp_n_polar_a,tmp_n_azimu_b,legendre_evaluate_ljm___),[tmp_n_polar_a*tmp_n_azimu_b,1]);
tmp_At__ = @(a_k_X_) convert_spharm__to_spharm_0(tmp_l_max,cg_evaluate_t_1(tmp_n_polar_a,tmp_n_azimu_b,reshape(scatter_to_tensor__*a_k_X_,[tmp_n_polar_a,tmp_n_azimu_b]),tmp_l_max,legendre_evaluate_mlj___,expil__,expi__));
tmp_AtAn__ = @(a_k_Y_) tmp_At__(tmp_An__(a_k_Y_));
tmp_a_k_Y_0lsq_ = pcg(tmp_AtAn__,tmp_At__(tmp_M_k_p__(:)));
tmp_a_k_Y_quad_ = a_k_Y_quad_(1+n_lm_csum_(1+nk_p_r)+[0:n_lm_(1+nk_p_r)-1]);
disp(sprintf(' %% lsq: nk_p_r %d/%d, tmp_a_k_Y_quad_ vs tmp_a_k_Y_0lsq_: %0.16f',nk_p_r,n_k_p_r,fnorm(tmp_a_k_Y_quad_-tmp_a_k_Y_0lsq_)/fnorm(tmp_a_k_Y_quad_)));
end;%for nk_p_r=0:n_k_p_r-1;

flag_check=1;
if flag_check;
%%%%%%%%;
% Now test out alternating minimization using images copied from templates ;
% generated using just one of the shells (with no added noise). ;
%%%%%%%%;
tmp_verbose=0;
nk_p_r = 12; tmp_n_k_p_r = 1;
tmp_a_k_Y_quad_ = a_k_Y_quad_(1+n_lm_csum_(1+nk_p_r)+[0:n_lm_(1+nk_p_r)-1]); %<-- use as ground truth for this shell. ;
tmp_k_p_r = k_p_r_(1+nk_p_r); tmp_n_w = n_w_(1+nk_p_r); tmp_n_w_max = tmp_n_w; tmp_n_w_sum = tmp_n_w; 
tmp_weight_k_p_r = weight_k_p_r_(1+nk_p_r); tmp_weight_2d_k_p_r = 1;
tmp_l_max = l_max_(1+nk_p_r);
tmp_n_polar_a = max(15,1+2*tmp_l_max); tmp_n_azimu_b = 1+2*tmp_n_polar_a;
[legendre_evaluate_ljm___,legendre_evaluate_mlj___,expil__,expi__] = legendre_evaluate_ljm___0(tmp_l_max,cos(linspace(0,pi,tmp_n_polar_a)),tmp_n_azimu_b);
tmp_n_order = 5;
tmp_S_k_p__ = S_k_p__(1+n_w_csum_(1+nk_p_r)+[0:tmp_n_w-1],:);
viewing_gamma_z_all_ = 2*pi*rand(n_viewing_all,1); 
M_k_p__ = zeros(n_w_sum,n_viewing_all);
tmp_M_k_p__ = zeros(tmp_n_w,n_viewing_all);
tmp_M_k_q__ = zeros(tmp_n_w,n_viewing_all);
for nviewing_all=0:n_viewing_all-1; 
M_k_p__(:,1+nviewing_all) = rotate_p2p_fx(n_k_p_r,n_w_,n_w_sum,S_k_p__(:,1+nviewing_all),+viewing_gamma_z_all_(1+nviewing_all));
tmp_M_k_p__(:,1+nviewing_all) = rotate_p2p_fx(tmp_n_k_p_r,tmp_n_w,tmp_n_w_sum,S_k_p__(1+n_w_csum_(1+nk_p_r)+[0:tmp_n_w-1],1+nviewing_all),+viewing_gamma_z_all_(1+nviewing_all));
tmp_M_k_q__(:,1+nviewing_all) = interp_p_to_q(tmp_n_k_p_r,tmp_n_w,tmp_n_w_sum,tmp_M_k_p__(:,1+nviewing_all));
end;%for nviewing_all=0:n_viewing_all-1; 
n_M = n_viewing_all; 
tmp_n_M = n_viewing_all;
tmp_MM_ = zeros(tmp_n_M,1);
for nM=0:tmp_n_M-1;
tmp_MM_(1+nM) = innerproduct_p_quad(tmp_n_k_p_r,tmp_k_p_r,tmp_weight_2d_k_p_r/(2*pi),tmp_n_w,tmp_n_w_sum,tmp_M_k_p__(:,1+nM),tmp_M_k_p__(:,1+nM));
end;%for nM=0:tmp_n_M-1;
%%%%%%%%;
% initialize current euler-angles randomly. ;
%%%%%%%%;
euler_polar_a_ = pi*rand(tmp_n_M,1); euler_azimu_b_ = 2*pi*rand(tmp_n_M,1); euler_gamma_z_ = 2*pi*rand(tmp_n_M,1);
n_iteration = 8;
for niteration=0:n_iteration-1;
%%%%%%%%;
% use current euler-angles to solve for current model (on single shell). ;
%%%%%%%%;
[tmp_k_p_polar_a__,tmp_k_p_azimu_b__] = cg_rhs_1(tmp_n_M,tmp_n_w,euler_polar_a_,euler_azimu_b_,+euler_gamma_z_);
tensor_to_scatter__ = cg_interpolate_n_1(tmp_n_order,tmp_n_polar_a,tmp_n_azimu_b,tmp_n_w*tmp_n_M,tmp_k_p_polar_a__(:),tmp_k_p_azimu_b__(:));
scatter_to_tensor__ = transpose(tensor_to_scatter__);
tmp_An__ = @(a_k_Y_) tensor_to_scatter__*reshape(cg_evaluate_n_1(tmp_l_max,convert_spharm_to_spharm__0(tmp_l_max,a_k_Y_),tmp_n_polar_a,tmp_n_azimu_b,legendre_evaluate_ljm___),[tmp_n_polar_a*tmp_n_azimu_b,1]);
tmp_At__ = @(a_k_X_) convert_spharm__to_spharm_0(tmp_l_max,cg_evaluate_t_1(tmp_n_polar_a,tmp_n_azimu_b,reshape(scatter_to_tensor__*a_k_X_,[tmp_n_polar_a,tmp_n_azimu_b]),tmp_l_max,legendre_evaluate_mlj___,expil__,expi__));
tmp_AtAn__ = @(a_k_Y_) tmp_At__(tmp_An__(a_k_Y_));
[tmp_a_k_Y_0lsq_,~] = pcg(tmp_AtAn__,tmp_At__(tmp_M_k_p__(:)));
%%%%%%%%;
% Compare current model (on single shell) to tmp_a_k_Y_quad_ (also on single shell). ;
%%%%%%%%;
[X_best,~,~,~,~,~,~] = register_spharm_to_spharm_wigner_0(tmp_n_k_p_r,tmp_k_p_r,k_p_r_max,tmp_weight_k_p_r,0,tmp_l_max,tmp_a_k_Y_quad_,tmp_a_k_Y_0lsq_);
disp(sprintf(' %% [single shell]: tmp_a_k_Y_quad_ vs tmp_a_k_Y_lsq0_: correlation %+0.6f',X_best));
%%%%%%%%;
% use current euler-angles to solve for current model (across all shells). ;
%%%%%%%%;
a_k_Y_0lsq_ = cg_lsq_1(tmp_n_order,n_k_p_r,l_max_,n_w_,n_M,M_k_p__,euler_polar_a_,euler_azimu_b_,euler_gamma_z_);
%%%%%%%%;
% Compare current model (across all shells) to tmp_a_k_Y_quad_ (across all shells). ;
%%%%%%%%;
[X_best,~,~,~,~,~,~] = register_spharm_to_spharm_wigner_0(n_k_p_r,k_p_r_,k_p_r_max,weight_k_p_r_,0,l_max_,a_k_Y_quad_,a_k_Y_0lsq_);
disp(sprintf(' %% [across all shells] a_k_Y_quad_ vs a_k_Y_0lsq_: correlation %+0.6f',X_best));
%%%%%%%%;
% use current model (on single shell) to generate current templates. ;
%%%%%%%%;
tmp_viewing_k_eq_d = k_eq_d*9; %<-- make this slightly different from viewing_k_eq_d to test out code. ;
[tmp_S_k_p__,~,~,~,tmp_n_viewing_all,tmp_viewing_azimu_b_all_,tmp_viewing_polar_a_all_,~,~,~,~,~,~] = get_template_0(tmp_verbose,tmp_n_k_p_r,tmp_k_p_r,k_p_r_max,tmp_weight_k_p_r,tmp_l_max,tmp_a_k_Y_0lsq_,tmp_viewing_k_eq_d,-1,tmp_n_w);
tmp_n_S = tmp_n_viewing_all;
tmp_SS_ = zeros(tmp_n_S,1);
for nS=0:tmp_n_S-1;
tmp_SS_(1+nS) = innerproduct_p_quad(tmp_n_k_p_r,tmp_k_p_r,tmp_weight_2d_k_p_r/(2*pi),tmp_n_w,tmp_n_w_sum,tmp_S_k_p__(:,1+nS),tmp_S_k_p__(:,1+nS));
end;%for nS=0:tmp_n_S-1;
for nS=0:tmp_n_S-1; tmp_S_k_q__(:,1+nS) = interp_p_to_q(tmp_n_k_p_r,tmp_n_w,tmp_n_w_sum,tmp_S_k_p__(:,1+nS)); end;%for nS=0:tmp_n_S-1; 
%%%%%%%%;
% Use current templates to calculate current innerproducts/correlations. ;
%%%%%%%%;
tmp_X___ = zeros(tmp_n_w_max,tmp_n_M,tmp_n_S);
for nS=0:tmp_n_S-1;
for nM=0:tmp_n_M-1;
tmp_X___(:,1+nM,1+nS) = ifft(innerproduct_q_k_stretch_quad_0(tmp_n_k_p_r,tmp_k_p_r,tmp_weight_2d_k_p_r/(2*pi),tmp_n_w,tmp_n_w_sum,tmp_S_k_q__(:,1+nS),tmp_M_k_q__(:,1+nM)))*tmp_n_w_max/sqrt(tmp_MM_(1+nM))/sqrt(tmp_SS_(1+nS)) ; %<-- multiplication by n_w_max not needed in fortran fftw_plan_back. ;
end;%for nM=0:tmp_n_M-1;
end;%for nS=0:tmp_n_S-1;
%%%%%%%%;
% Use current correlations to udate current euler-angles. ;
%%%%%%%%;
flag_M_used_ = zeros(tmp_n_M,1);
tmp_permutation_ = randperm(tmp_n_S);
nS=0;
while (sum(flag_M_used_)<tmp_n_M);
index_M_unused_ = find(flag_M_used_==0)-1;
[~,index_wM_best] = max(real(tmp_X___(:,1+index_M_unused_,1+nS)),[],'all','linear'); index_wM_best = index_wM_best-1;
[nw_best,index_M_best] = ind2sub([tmp_n_w_max,numel(index_M_unused_)],1+index_wM_best); 
nw_best = nw_best-1; index_M_best = index_M_best-1;
nM_best = index_M_unused_(1+index_M_best);
flag_M_used_(1+nM_best)=1;
euler_polar_a_(1+nM_best) = tmp_viewing_polar_a_all_(1+nS);
euler_azimu_b_(1+nM_best) = tmp_viewing_azimu_b_all_(1+nS);
euler_gamma_z_(1+nM_best) = 2*pi*nw_best/tmp_n_w_max;
nS = nS+1; if (nS>=tmp_n_S); nS=0; end;
end;%while (sum(flag_M_used_)<tmp_n_M);
%%%%%%%%;
% Now return to beginning of loop. ;
%%%%%%%%;
end;%for niteration=0:n_iteration-1;
end;%if flag_check;

%%%%%%%%;
% Test innerproducts. ;
%%%%%%%%;
template_2d_k_c_0_ = zeros(n_w_sum,1);
template_2d_k_c_1_ = zeros(n_w_sum,1);
template_2d_k_p_r_ = zeros(n_w_sum,1);
na=0;
for nk_p_r=0:n_k_p_r-1;
k_p_r = k_p_r_(1+nk_p_r);
for nw=0:n_w_(1+nk_p_r)-1;
gamma_z = 2*pi*nw/max(1,n_w_(1+nk_p_r));
template_2d_k_c_0_(1+na) = k_p_r*cos(gamma_z);
template_2d_k_c_1_(1+na) = k_p_r*sin(gamma_z);
template_2d_k_p_r_(1+na) = k_p_r;
na=na+1;
end;%for nw=0:n_w_(1+nk_p_r)-1;
end;%for nk_p_r=0:n_k_p_r-1;
assert(na==n_w_sum);
tmp_delta_x_c_ = [+0.08;-0.12];
S_k_p_form_ = exp(+i*2*pi*(template_2d_k_c_0_*tmp_delta_x_c_(1+0) + template_2d_k_c_1_*tmp_delta_x_c_(1+1)));
I_quad = sum(S_k_p_form_.*weight_2d_k_all_)*(2*pi)^2;
I_form = h2d_(2*pi*k_p_r_max*fnorm(tmp_delta_x_c_))/(2*pi)^2 * (pi*k_p_r_max^2);
disp(sprintf(' %% testing template quadrature: plane-wave: I_form vs I_quad: %0.16f',fnorm(I_form-I_quad)/fnorm(I_form)));
I_quad = innerproduct_p_quad(n_k_p_r,k_p_r_,weight_2d_k_p_r_/(2*pi),n_w_,n_w_sum,ones(n_w_sum,1),S_k_p_form_);
disp(sprintf(' %% testing template quadrature: plane-wave: I_form vs I_quad: %0.16f',fnorm(I_form-I_quad)/fnorm(I_form)));
S_k_p_form_ = 0.3*template_2d_k_p_r_.^3 - 0.9*template_2d_k_p_r_.^5;
I_quad = sum(S_k_p_form_.*weight_2d_k_all_)*(2*pi)^2;
I_form = 0.3*2*pi*k_p_r_max^5/5 - 0.9*2*pi*k_p_r_max^7/7;
disp(sprintf(' %% testing template quadrature: polynomial: I_form vs I_quad: %0.16f',fnorm(I_form-I_quad)/fnorm(I_form)));
I_quad = innerproduct_p_quad(n_k_p_r,k_p_r_,weight_2d_k_p_r_/(2*pi),n_w_,n_w_sum,ones(n_w_sum,1),S_k_p_form_);
disp(sprintf(' %% testing template quadrature: polynomial: I_form vs I_quad: %0.16f',fnorm(I_form-I_quad)/fnorm(I_form)));
%%%%%%%%;
tmp_M_k_p_ = S_k_p__(:,max(1,min(n_viewing_all,round(n_viewing_all*0.25))));
tmp_M_k_q_ = interp_p_to_q(n_k_p_r,n_w_,n_w_sum,tmp_M_k_p_);
tmp_S_k_p_ = S_k_p__(:,max(1,min(n_viewing_all,round(n_viewing_all*0.75))));
tmp_S_k_q_ = interp_p_to_q(n_k_p_r,n_w_,n_w_sum,tmp_S_k_p_);
X0_= zeros(n_w_max,1);
for nw=0:n_w_max-1;
gamma_z = 2*pi*nw/n_w_max;
tmp_T_k_p_ = rotate_p2p_fx(n_k_p_r,n_w_,n_w_sum,tmp_S_k_p_,gamma_z); %<-- T = R(+gamma)*S = S(R(-gamma)*k) ;
X0_(1+nw) = innerproduct_p_quad(n_k_p_r,k_p_r_,weight_2d_k_p_r_/(2*pi),n_w_,n_w_sum,tmp_T_k_p_,tmp_M_k_p_); %<-- <R(+gamma)*S,M> = <S,R(-gamma)*M> ;
end;%for nw=0:n_w_max-1;
X1_ = ifft(innerproduct_q_k_stretch_quad_0(n_k_p_r,k_p_r_,weight_2d_k_p_r_/(2*pi),n_w_,n_w_sum,tmp_S_k_q_,tmp_M_k_q_))*n_w_max; %<-- multiplication by n_w_max not needed in fortran fftw_plan_back. ;
%%%%%%%%;
disp(sprintf(' %% fnorm(X0_-X1_)/fnorm(X0_) = %0.16f',fnorm(X0_-X1_)/fnorm(X0_)));
flag_plot=0;
if flag_plot;
tmp_T_k_p_ = rotate_p2p_fx(n_k_p_r,n_w_,n_w_sum,tmp_S_k_p_,+pi/6);
subplot(2,2,1); imagesc_p(n_k_p_r,k_p_r_,n_w_,sum(n_w_),real(tmp_S_k_p_),[],colormap_beach()); 
axisnotick; axis image; title('real S');
subplot(2,2,2); imagesc_p(n_k_p_r,k_p_r_,n_w_,sum(n_w_),real(tmp_T_k_p_),[],colormap_beach()); 
axisnotick; axis image; title('real T=R(+pi/6)*S=S(R(-pi/6)*k)');
subplot(2,2,3); imagesc_p(n_k_p_r,k_p_r_,n_w_,sum(n_w_),imag(tmp_S_k_p_),[],colormap_beach()); 
axisnotick; axis image; title('imag S');
subplot(2,2,4); imagesc_p(n_k_p_r,k_p_r_,n_w_,sum(n_w_),imag(tmp_T_k_p_),[],colormap_beach()); 
axisnotick; axis image; title('imag T=R(+pi/6)*S=S(R(-pi/6)*k)');
figbig;
end;%if flag_plot;

verbose=1;
%%%%%%%%;
% Now test out principled marching. ;
% First set up cost matrix. ;
%%%%%%%%;
n_polar_a = n_m_max; polar_a_ = linspace(-pi,pi,n_polar_a+1); polar_a_ = polar_a_(1:end-1);
n_azimu_b = n_m_max; azimu_b_ = linspace(0,2*pi,n_azimu_b+1); azimu_b_ = azimu_b_(1:end-1);
n_gamma_z = n_m_max; gamma_z_ = linspace(0,2*pi,n_gamma_z+1); gamma_z_ = gamma_z_(1:end-1);
weight_so3 = (2*pi)*(2*pi)*4; %<-- total volume of so3. ;
weight_sub = ((2*pi)/n_m_max)^3; %<-- abs(sin(polar_a))*weight_sub is used for each summand on so3. ;
%%%%%%%%;

X_ori_ = zeros(n_k_p_r,n_k_p_r);
for nk_p_r_0=0:n_k_p_r-1;
for nk_p_r_1=nk_p_r_0:n_k_p_r-1;
tmp_l_max = min(l_max_(1+nk_p_r_0),l_max_(1+nk_p_r_1));
tmp_n_lm = (tmp_l_max+1).^2;
tmp_ij_1_ = n_lm_csum_(1+nk_p_r_0) + (0:tmp_n_lm-1);
tmp_ij_2_ = n_lm_csum_(1+nk_p_r_1) + (0:tmp_n_lm-1);
polar_a = 0;
X_ori_(1+nk_p_r_0,1+nk_p_r_1) = register_spharm_to_spharm_2(verbose,1,1,1,tmp_l_max,a_k_Y_quad_(1+tmp_ij_1_)*CTF_avg_k_p_r_(1+nk_p_r_0),a_k_Y_quad_(1+tmp_ij_2_)*CTF_avg_k_p_r_(1+nk_p_r_1));
X_ori_(1+nk_p_r_1,1+nk_p_r_0) = conj(X_ori_(1+nk_p_r_0,1+nk_p_r_1));
tmp_sum = 0;
for npolar_a=0:n_polar_a-1;
polar_a = polar_a_(1+npolar_a);
[tmp_X_tau__] = register_spharm_to_spharm_single_beta_2(verbose,1,1,1,tmp_l_max,a_k_Y_quad_(1+tmp_ij_1_)*CTF_avg_k_p_r_(1+nk_p_r_0),a_k_Y_quad_(1+tmp_ij_2_)*CTF_avg_k_p_r_(1+nk_p_r_1),polar_a,n_m_max,azimu_b_,n_m_max,gamma_z_,[],[],[],[]);
tmp_sum = tmp_sum + sum(tmp_X_tau__,'all')*abs(sin(polar_a))*weight_sub; %<-- need quadrature weight to ensure uniform measure over SO3. ;
end;%for npolar_a=0:n_polar_a-1;
if (verbose>1); disp(sprintf(' %% nk_p_r_0 %d nk_p_r_1 %d l_max %d,%d-->%d n_lm %d,%d-->%d --> sum %0.16f',nk_p_r_0,nk_p_r_1,l_max_(1+nk_p_r_0),l_max_(1+nk_p_r_1),tmp_l_max,n_lm_(1+nk_p_r_0),n_lm_(1+nk_p_r_1),tmp_n_lm,real(tmp_sum))); end;
X_tau_(1+nk_p_r_0,1+nk_p_r_1) = tmp_sum;
X_tau_(1+nk_p_r_1,1+nk_p_r_0) = conj(tmp_sum);
end;%for nk_p_r_1=nk_p_r_0:n_k_p_r-1;
if (verbose>0); disp(sprintf(' %% nk_p_r_0 %d nk_p_r_1 %d l_max %d,%d-->%d n_lm %d,%d-->%d --> sum %0.16f',nk_p_r_0,nk_p_r_1,l_max_(1+nk_p_r_0),l_max_(1+nk_p_r_1),tmp_l_max,n_lm_(1+nk_p_r_0),n_lm_(1+nk_p_r_1),tmp_n_lm,real(tmp_sum))); end;
end;%for nk_p_r_0=0:n_k_p_r-1;
%%%%%%%%;
X_ = real(X_ori_)*weight_so3 - real(X_tau_);
%%%%%%%%;
% Compare to cost matrix calculated using a_k_Y_quad__: ;
%%%%%%%%;
flag_check=0;
if flag_check;
Z_ = principled_marching_cost_matrix_0(n_k_p_r,l_max_max,a_k_Y_quad__*diag(CTF_avg_k_p_r_));
disp(sprintf(' %% X_ vs Z_: %0.16f',fnorm(Z_-X_)/fnorm(X_)));
end;%if flag_check;
% Now perform singular-value-decomposition: ;
%%%%%%%%;
n_UX_rank = n_k_p_r-1; %<-- just to check dimensions. ;
[UX_,SX_,VX_] = svds(X_,n_UX_rank);
a_UX_Y_quad__ = zeros(n_lm_max,n_UX_rank);
for nUX_rank=0:n_UX_rank-1;
for nk_p_r=0:n_k_p_r-1;
tmp_l_max = l_max_(1+nk_p_r);
tmp_n_lm = (tmp_l_max+1).^2;
tmp_ij_ = n_lm_csum_(1+nk_p_r) + (0:tmp_n_lm-1);
a_UX_Y_quad__(1:tmp_n_lm,1+nUX_rank) = a_UX_Y_quad__(1:tmp_n_lm,1+nUX_rank) + UX_(1+nk_p_r,1+nUX_rank)*a_k_Y_quad_(1+tmp_ij_)*CTF_avg_k_p_r_(1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
end;%for nUX_rank=0:n_UX_rank-1;
%%%%%%%%;
% Check cost for each principal-mode. ;
%%%%%%%%;
%%%%%%%%;
flag_check=0;
if flag_check;
for nUX_rank=0:n_UX_rank-1;
[tmp_X,tmp_X_ori,tmp_X_tau,tmp_weight_so3] = principled_marching_cost_0(verbose,n_m_max,l_max_max,a_UX_Y_quad__(:,1+nUX_rank),a_UX_Y_quad__(:,1+nUX_rank));
tmp_Z = transpose(UX_(:,1+nUX_rank))*X_*(UX_(:,1+nUX_rank));
disp(sprintf(' %% mode %.3d/%.3d: tmp_Z %0.2f tmp_X %0.2f tmp_X_ori*tmp_weight_so3 %0.2f tmp_X_tau %0.2f ratio %0.2f',nUX_rank,n_UX_rank,tmp_Z,tmp_X,tmp_X_ori*tmp_weight_so3,tmp_X_tau,(tmp_X_ori*tmp_weight_so3)/tmp_X_tau));
end;%for nUX_rank=0:n_UX_rank-1;
end;%if flag_check;
flag_plot=0;
if flag_plot;
clf;
colormap(colormap_beach());
subplot(1,2,1); imagesc(log10(abs(UX_)),[-3,0]); xlabel('rank'); ylabel('shell'); title('log10(abs(UX)) [-3,0]'); 
subplot(1,2,2); plot(log10(abs(diag(SX_))),'ko'); xlabel('rank'); ylabel('log10(\sigma)'); title('log10(SX)');
figbig;
fname_pre = sprintf('/data/rangan/dir_cryoem/dir_rangan_playroom/dir_principled_marching_jpg/test_principled_marching_trpv1_5_FIGC');
disp(sprintf(' %% writing %s',fname_pre));
print('-djpeg',sprintf('%s.jpg',fname_pre));
print('-depsc',sprintf('%s.eps',fname_pre));
end;%if flag_plot;

%%%%%%%%;
% First set up a tensor-product spherical grid (in k_p_ space). ;
%%%%%%%%;
k_u_res = 64;
k_u_polar_a_ = linspace(0,pi,k_u_res);
k_u_azimu_b_ = linspace(0,2*pi,2*k_u_res);
[K_u_polar_a_,K_u_azimu_b_] = ndgrid(k_u_polar_a_,k_u_azimu_b_); n_K_u = k_u_res*2*k_u_res;
K_u_weight_ = sin(K_u_polar_a_);
%%%%%%%%;
% Now look at the functions on each shell associated with these 'principal-modes'. ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
n_plot = 6;
%plot_nk_p_r_ = max(1,min(n_k_p_r,round(linspace(1,n_k_p_r,n_plot))));
plot_nk_p_r_ = 0:n_plot-1;
quad_lim_ = 0.5 * abs(a_UX_Y_quad__(1,1)) * [-1,+1];
for nplot=0:n_plot-1;
nk_p_r = plot_nk_p_r_(1+nplot);
[b_k_p_quad_] = reshape(convert_spharm_to_k_p_1(verbose,n_K_u,0,ones(n_K_u,1),K_u_azimu_b_(:),K_u_polar_a_(:),K_u_weight_(:),K_u_weight_(:),1,1,1,l_max_max,a_UX_Y_quad__(:,1+nk_p_r)),k_u_res,2*k_u_res);
subplot(3,n_plot,1 + nplot + 0*n_plot); imagesc(real(b_k_p_quad_),quad_lim_); axisnotick; title(sprintf('real nk_p_r: %d, real(quad)',nk_p_r),'Interpreter','none');
subplot(3,n_plot,1 + nplot + 1*n_plot); imagesc(imag(b_k_p_quad_),quad_lim_); axisnotick; title(sprintf('imag nk_p_r: %d, imag(quad)',nk_p_r),'Interpreter','none');
subplot(3,n_plot,1 + nplot + 2*n_plot); imagesc( abs(b_k_p_quad_),quad_lim_); axisnotick; title(sprintf(' abs nk_p_r: %d,  abs(quad)',nk_p_r),'Interpreter','none');
end;%for nplot=0:n_plot-1;
colormap(colormap_beach());
figbig;
fname_pre = sprintf('/data/rangan/dir_cryoem/dir_rangan_playroom/dir_principled_marching_jpg/test_principled_marching_trpv1_5_FIGD');
disp(sprintf(' %% writing %s',fname_pre));
print('-djpeg',sprintf('%s.jpg',fname_pre));
print('-depsc',sprintf('%s.eps',fname_pre));
end;%if flag_plot;

%%%%%%%%;
% Now look at some of the images associated with trpv1. ;
%%%%%%%%;
fname_euler_angle = sprintf('%s/euler_angles',dir_data);
fp = fopen(fname_euler_angle,'r');
euler_angle_ = textscan(fp,'%f%f%f\n%f%f\n');
fclose(fp);
delta_read_x_ = euler_angle_{4}*(2/n_x_u);
delta_read_y_ = euler_angle_{5}*(2/n_x_u);
flag_plot=0;
if flag_plot;
clf;
imagesc(log10(1+hist2d_0(delta_read_x_,delta_read_y_,n_x_u,n_x_u,[-1,+1],[-1,+1])),[0,3]); 
axis image; xlabel('x'); ylabel('y'); title('delta read');
colormap(colormap_beach());
fname_pre = sprintf('/data/rangan/dir_cryoem/dir_rangan_playroom/dir_principled_marching_jpg/test_principled_marching_trpv1_5_FIGE');
disp(sprintf(' %% writing %s',fname_pre));
print('-djpeg',sprintf('%s.jpg',fname_pre));
print('-depsc',sprintf('%s.eps',fname_pre));
end;%if flag_plot;
grid_x_u_ = linspace(-1,+1,n_x_u+1); grid_x_u_ = x_p_r_max*grid_x_u_(1:end-1);
fname_image_mda = sprintf('%s/images_mda',dir_data);
M_x_c___ = MDA_read_r8(fname_image_mda);
n_image_sub = size(M_x_c___,3);
flag_plot=0;
if flag_plot;
%%%%%%%%;
% Compare images with shifted images. ;
%%%%%%%%;
N_x_c___ = M_x_c___;
O_x_c___ = M_x_c___;
P_x_c___ = M_x_c___;
for nimage_sub=0:n_image_sub-1;
M_x_c_ = squeeze(M_x_c___(:,:,1+nimage_sub));
M_k_p_ = interp_x_c_to_k_p_nufft(n_x_u,diameter_x_c,n_x_u,diameter_x_c,M_x_c_,n_k_p_r,k_p_r_,n_w_) ;
N_k_p_ = transf_p_to_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,M_k_p_,-1*delta_read_x_(1+nimage_sub),-1*delta_read_y_(1+nimage_sub));
N_x_c___(:,:,1+nimage_sub) = interp_k_p_to_x_c_nufft(n_x_u,diameter_x_c,n_x_u,diameter_x_c,n_k_p_r,k_p_r_,n_w_,N_k_p_.*weight_2d_k_all_);
O_k_p_ = transf_p_to_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,M_k_p_,+1*delta_read_x_(1+nimage_sub),+1*delta_read_y_(1+nimage_sub));
O_x_c___(:,:,1+nimage_sub) = interp_k_p_to_x_c_nufft(n_x_u,diameter_x_c,n_x_u,diameter_x_c,n_k_p_r,k_p_r_,n_w_,O_k_p_.*weight_2d_k_all_);
P_k_p_ = transf_p_to_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,M_k_p_,0*delta_read_x_(1+nimage_sub),0*delta_read_y_(1+nimage_sub));
P_x_c___(:,:,1+nimage_sub) = interp_k_p_to_x_c_nufft(n_x_u,diameter_x_c,n_x_u,diameter_x_c,n_k_p_r,k_p_r_,n_w_,P_k_p_.*weight_2d_k_all_);
end;%for nimage_sub=0:n_image_sub-1;
M_x_c_avg__ = real(mean(M_x_c___,3));
N_x_c_avg__ = real(mean(N_x_c___,3));
O_x_c_avg__ = real(mean(O_x_c___,3));
P_x_c_avg__ = real(mean(P_x_c___,3));
subplot(2,2,1); imagesc(M_x_c_avg__); axis image; axisnotick; colormap(colormap_beach()); title('M (orig)');
subplot(2,2,2); imagesc(N_x_c_avg__); axis image; axisnotick; colormap(colormap_beach()); title('N (-delta)');
subplot(2,2,3); imagesc(O_x_c_avg__); axis image; axisnotick; colormap(colormap_beach()); title('O (+delta)');
subplot(2,2,4); imagesc(P_x_c_avg__); axis image; axisnotick; colormap(colormap_beach()); title('P (none)');
figbig;
fname_pre = sprintf('/data/rangan/dir_cryoem/dir_rangan_playroom/dir_principled_marching_jpg/test_principled_marching_trpv1_5_FIGF');
disp(sprintf(' %% writing %s',fname_pre));
print('-djpeg',sprintf('%s.jpg',fname_pre));
print('-depsc',sprintf('%s.eps',fname_pre));
clear N_x_c___ O_x_c___ P_x_c___ ;
end;%if flag_plot;

flag_plot=0;
if flag_plot;
for nimage_sub=1;%for nimage_sub=1:n_image_sub;
M_x_c_ = squeeze(M_x_c___(:,:,nimage_sub));
M_k_p_ = interp_x_c_to_k_p_nufft(n_x_u,diameter_x_c,n_x_u,diameter_x_c,M_x_c_,n_k_p_r,k_p_r_,n_w_) ;
N_k_p_ = interp_x_c_to_k_p_nufft(n_x_u,diameter_x_c,n_x_u,diameter_x_c,M_x_c_,n_k_p_r,k_p_r_,n_w_max*ones(n_k_p_r,1));
%figure(1+nimage_sub); 
figure(1); 
colormap(colormap_beach()); 
subplot(2,2,1); imagesc_c(n_x_u,grid_x_u_,n_x_u,grid_x_u_,real(M_x_c_),[],colormap_beach()); 
set(gca,'XTick',[],'YTick',[]); axis image; title('M(x)');
subplot(2,2,2); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,real(M_k_p_),[],colormap_beach());
set(gca,'XTick',[],'YTick',[]); axis image; title('real(M(k))');
subplot(2,2,3); imagesc_p(n_k_p_r,k_p_r_,n_w_,n_w_sum,imag(M_k_p_),[],colormap_beach());
set(gca,'XTick',[],'YTick',[]); axis image; title('imag(M(k))');
subplot(2,2,4); imagesc_p(n_k_p_r,k_p_r_,n_w_max*ones(n_k_p_r,1),n_w_max*n_k_p_r,real(N_k_p_),[],colormap_beach());
set(gca,'XTick',[],'YTick',[]); axis image; title('real(N(k))');
drawnow();
end;%for nimage_sub=1:n_image_sub;
end;%if flag_plot;

%%%%%%%%;
% Now generate meta-images. ;
%%%%%%%%;
UX_M_k_p___ = zeros(n_w_max,n_image_sub,n_UX_rank);
UX_M_k_q___ = zeros(n_w_max,n_image_sub,n_UX_rank);
for nimage_sub=0:n_image_sub-1;
if (mod(nimage_sub,100)==0); disp(sprintf(' %% nimage_sub %d/%d',nimage_sub,n_image_sub)); end;
M_x_c_ = squeeze(M_x_c___(:,:,1+nimage_sub));
M_k_p_ = interp_x_c_to_k_p_nufft(n_x_u,diameter_x_c,n_x_u,diameter_x_c,M_x_c_,n_k_p_r,k_p_r_,n_w_max*ones(n_k_p_r,1)) ;
N_k_p_ = transf_p_to_p(n_k_p_r,k_p_r_,n_w_max*ones(n_k_p_r,1),n_w_max*n_k_p_r,M_k_p_,+1*delta_read_x_(1+nimage_sub),+1*delta_read_y_(1+nimage_sub));
N_k_p__ = reshape(N_k_p_,n_w_max,n_k_p_r);
for nUX_rank=0:n_UX_rank-1;
tmp_UX_M_k_p_ = zeros(n_w_max,1);
for nk_p_r=0:n_k_p_r-1;
tmp_UX_M_k_p_ = tmp_UX_M_k_p_ + UX_(1+nk_p_r,1+nUX_rank)*N_k_p__(:,1+nk_p_r);
end;%for nk_p_r=0:n_k_p_r-1;
UX_M_k_p___(:,1+nimage_sub,1+nUX_rank) = tmp_UX_M_k_p_;
UX_M_k_q___(:,1+nimage_sub,1+nUX_rank) = interp_p_to_q(1,n_w_max,n_w_max,tmp_UX_M_k_p_);
end;%for nUX_rank=0:n_UX_rank-1;
end;%for nimage_sub=0:n_image_sub-1;
flag_plot=0;
if flag_plot;
colormap(colormap_beach());
nUX_rank=1-1; clim_ = 1.5*std(real(UX_M_k_p___(:,:,1+nUX_rank)),1,'all')*[-1,+1];
nUX_rank= 1-1; subplot(2,3,1); imagesc(real(squeeze(UX_M_k_p___(:,:,1+nUX_rank))),clim_); xlabel('nimage'); ylabel('gamma'); title(sprintf('real(rank==%d) [%0.2f,%0.2f]',1+nUX_rank,clim_));
nUX_rank= 2-1; subplot(2,3,2); imagesc(real(squeeze(UX_M_k_p___(:,:,1+nUX_rank))),clim_); xlabel('nimage'); ylabel('gamma'); title(sprintf('real(rank==%d) [%0.2f,%0.2f]',1+nUX_rank,clim_));
nUX_rank= 4-1; subplot(2,3,3); imagesc(real(squeeze(UX_M_k_p___(:,:,1+nUX_rank))),clim_); xlabel('nimage'); ylabel('gamma'); title(sprintf('real(rank==%d) [%0.2f,%0.2f]',1+nUX_rank,clim_));
nUX_rank= 8-1; subplot(2,3,4); imagesc(real(squeeze(UX_M_k_p___(:,:,1+nUX_rank))),clim_); xlabel('nimage'); ylabel('gamma'); title(sprintf('real(rank==%d) [%0.2f,%0.2f]',1+nUX_rank,clim_));
nUX_rank=16-1; subplot(2,3,5); imagesc(real(squeeze(UX_M_k_p___(:,:,1+nUX_rank))),clim_); xlabel('nimage'); ylabel('gamma'); title(sprintf('real(rank==%d) [%0.2f,%0.2f]',1+nUX_rank,clim_));
nUX_rank=32-1; subplot(2,3,6); imagesc(real(squeeze(UX_M_k_p___(:,:,1+nUX_rank))),clim_); xlabel('nimage'); ylabel('gamma'); title(sprintf('real(rank==%d) [%0.2f,%0.2f]',1+nUX_rank,clim_));
figbig;
fname_pre = sprintf('/data/rangan/dir_cryoem/dir_rangan_playroom/dir_principled_marching_jpg/test_principled_marching_trpv1_5_FIGG');
disp(sprintf(' %% writing %s',fname_pre));
print('-djpeg',sprintf('%s.jpg',fname_pre));
print('-depsc',sprintf('%s.eps',fname_pre));
end;%if flag_plot;
flag_plot=0;
if flag_plot;
colormap(colormap_beach());
nUX_rank= 1-1; subplot(2,3,1); imagesc(log10(abs(squeeze(UX_M_k_q___(:,:,1+nUX_rank)))),[-5,0]); xlabel('nimage'); ylabel('q'); title(sprintf('log10(abs(rank %d)) [-5,0]',1+nUX_rank));
nUX_rank= 2-1; subplot(2,3,2); imagesc(log10(abs(squeeze(UX_M_k_q___(:,:,1+nUX_rank)))),[-5,0]); xlabel('nimage'); ylabel('q'); title(sprintf('log10(abs(rank %d)) [-5,0]',1+nUX_rank));
nUX_rank= 4-1; subplot(2,3,3); imagesc(log10(abs(squeeze(UX_M_k_q___(:,:,1+nUX_rank)))),[-5,0]); xlabel('nimage'); ylabel('q'); title(sprintf('log10(abs(rank %d)) [-5,0]',1+nUX_rank));
nUX_rank= 8-1; subplot(2,3,4); imagesc(log10(abs(squeeze(UX_M_k_q___(:,:,1+nUX_rank)))),[-5,0]); xlabel('nimage'); ylabel('q'); title(sprintf('log10(abs(rank %d)) [-5,0]',1+nUX_rank));
nUX_rank=16-1; subplot(2,3,5); imagesc(log10(abs(squeeze(UX_M_k_q___(:,:,1+nUX_rank)))),[-5,0]); xlabel('nimage'); ylabel('q'); title(sprintf('log10(abs(rank %d)) [-5,0]',1+nUX_rank));
nUX_rank=32-1; subplot(2,3,6); imagesc(log10(abs(squeeze(UX_M_k_q___(:,:,1+nUX_rank)))),[-5,0]); xlabel('nimage'); ylabel('q'); title(sprintf('log10(abs(rank %d)) [-5,0]',1+nUX_rank));
figbig;
fname_pre = sprintf('/data/rangan/dir_cryoem/dir_rangan_playroom/dir_principled_marching_jpg/test_principled_marching_trpv1_5_FIGH');
disp(sprintf(' %% writing %s',fname_pre));
print('-djpeg',sprintf('%s.jpg',fname_pre));
print('-depsc',sprintf('%s.eps',fname_pre));
end;%if flag_plot;
flag_plot=0;
if flag_plot;
clf;
n_plot=6;
for nplot=0:n_plot-1;
tmp_ = log10(abs(svds(reshape(permute(UX_M_k_q___(:,:,1+(0:nplot)),[1,3,2]),[n_w_max*(1+nplot),n_image_sub]),n_w_max)));
subplot(2,3,1+nplot);
plot(tmp_,'o'); xlim([1,n_w_max]); ylim([-7+tmp_(1),tmp_(1)+1]);
xlabel('pc'); ylabel('log10(sigma)');
title(sprintf('spectrum of UX_M_k_q___(:,:,nUX_rank==1:%d)',1+nplot),'Interpreter','none');
end;%for nplot=0:n_plot-1;
figbig;
fname_pre = sprintf('/data/rangan/dir_cryoem/dir_rangan_playroom/dir_principled_marching_jpg/test_principled_marching_trpv1_5_FIGI');
disp(sprintf(' %% writing %s',fname_pre));
print('-djpeg',sprintf('%s.jpg',fname_pre));
print('-depsc',sprintf('%s.eps',fname_pre));
end;%if flag_plot;

%%%%%%%%;
% Now set up least-squares solver. ;
%%%%%%%%;

disp('returning'); return;

