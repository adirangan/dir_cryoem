% Testing taylor-function expansion T_ of F_ = exp(i*z*cos(2*pi*j/N - w)) ; 
% Also testing bessel-function expansion J_ of F_ (note that this does not naturally factorize) ;
% Also testing svd-expansion of F_ (note that this factorizes by construction) ; (save a factor of 4 compared to T_ ?) ;

% First generate taylor-expansion ;
l_max = 15; % order
n_T = round((l_max+1)*(l_max+2)/2);
f_ = zeros(n_T,1);
p_ = zeros(n_T,1);
b_ = zeros(n_T,1);
B_ = zeros(n_T,1);
l_ = zeros(n_T,1);
j_ = zeros(n_T,1);
%l_factorial = 1;
ci = -i/2; f = 1; ic=1;
for l=0:l_max;
%l_start = round(l*(l+1)/2);
%l_factorial = l_factorial * max(1,l);
if (l>0); f = f*ci/max(1,l); end;
j_factorial = 1;
lmj_factorial = 1;
for j=0:l;
j_factorial = j_factorial * max(1,j);
%f_(1 + l_start + j) = (-i/2)^l / l_factorial;
%f_(1 + l_start + j) = f;
%p_(1 + l_start + j) = -l + 2*j;
%b_(1 + l_start + j) = lmj_factorial / j_factorial;
%B_(1 + l_start + j) = nchoosek(l,j);
f_(ic) = f;
p_(ic) = -l + 2*j;
b_(ic) = lmj_factorial / j_factorial;
B_(ic) = nchoosek(l,j);
lmj_factorial = lmj_factorial * max(1,l-j);
%l_(1 + l_start + j) = l;
%j_(1 + l_start + j) = j;
l_(ic) = l;
j_(ic) = j;
ic = ic+1;
end;%for j=0:l;
end;%for l=0:l_max;

% Generate svd-expansion ;
eps_target = 10.0 ;
R_target = 75 ;
z_target = 2*pi*sqrt(2) ;
D_target = z_target/R_target;
n_r = 512 ; n_d = 256 ;
r_ = linspace(0,R_target,n_r);
d_ = linspace(0,z_target/R_target,n_d);
clear S_l_ S_u_ S_s_ S_v_ ;
[R_,D_] = meshgrid(r_,d_); Z_ = R_.*D_;
l = 0; n_S = 0; continue_flag=1;
while (continue_flag);
if (l==0); l_ = [0]; else l_ = [-l,+l] ; end;
for l_tmp = l_;
J_tmp = besselj(l_tmp,Z_);
[U,S,V] = svds(J_tmp,8); S = diag(S); [S_ret] = find(S>eps_target) ;
if ~isempty(S_ret);
disp(sprintf(' %% l %+.2d, found %d terms [%0.2f,..,%0.2f];',l_tmp,length(S_ret),S(S_ret(1)),S(S_ret(end))));
for ij = 1:length(S_ret);
S_l_(1+n_S) = l_tmp;
S_u_(:,1+n_S) = U(:,S_ret(ij));
S_s_(1,1+n_S) = S(S_ret(ij),1);
S_v_(:,1+n_S) = V(:,S_ret(ij));
n_S = n_S + 1;
end;%for ij = 1:length(S_ret);
end;%if ~isempty(S_ret);
end;% for l_tmp = l_;
l=l+1;
if (l>l_max); continue_flag=0; else continue_flag=1; end;
end;%while (continue_flag);
disp(sprintf(' %% total of n_S %d terms found;',n_S));

ftag = sprintf('R%.3dz%.3de%.4d',floor(R_target),floor(10*z_target),floor(100*eps_target));
fname = sprintf('svd_r_%s',ftag);
export_f77dat(n_r,r_,'real','svd_r_',fname,'512 r-values for svd-expansion of factorized bessel functions, max-R 50, max-z 7.5, target epsilon 10.00');
fname = sprintf('svd_d_%s',ftag);
export_f77dat(n_d,d_,'real','svd_d_',fname,'256 d-values for svd-expansion of factorized bessel functions, max-R 50, max-z 7.5, target epsilon 10.00');
fname = sprintf('svd_l_%s',ftag);
export_f77dat(n_S,S_l_,'integer','svd_l_',fname,'34 l-values for svd-expansion of factorized bessel functions, max-R 50, max-z 7.5, target epsilon 10.00');
fname = sprintf('svd_U_d_%s',ftag);
export_f77dat(n_d*n_S,S_u_,'real','svd_U_d_',fname,'256-by-34 d-values for svd-expansion of factorized bessel functions, max-R 50, max-z 7.5, target epsilon 10.00');
fname = sprintf('svd_s_%s',ftag);
export_f77dat(n_S,S_s_,'real','svd_s_',fname,'34 singular-values for svd-expansion of factorized bessel functions, max-R 50, max-z 7.5, target epsilon 10.00');
fname = sprintf('svd_V_r_%s',ftag);
export_f77dat(n_r*n_S,S_v_,'real','svd_V_r_',fname,'512-by-34 r-values for svd-expansion of factorized bessel functions, max-R 50, max-z 7.5, target epsilon 10.00');

n_z = 16; z_ = linspace(0,z_target,n_z);
n_phi = 1024;
phi_ = 2*pi*(0:n_phi-1)/n_phi;
for nz=1:n_z;
z = z_(nz);

% Calculate function F_ ;
F_ = exp(-i*z*cos(phi_));

% Calculate bessel expansion J_ ; 
J_ = zeros(size(phi_)); j_max = 12;
for l=0:l_max;
if (l==0); J_ = J_ + besselj(0,z); end;
if (l>0); J_ = J_ + exp(+i*l*pi/2)*besselj(-l,z)*exp(+i*l*phi_) + exp(-i*l*pi/2)*besselj(+l,z)*exp(-i*l*phi_); end;
EJ_tmp = mean(abs(F_-J_).^2);
%disp(sprintf(' z %0.2f l %d EJ_tmp %0.4f',z,l,EJ_tmp));
end;%for l=0:l_max;
EJ_(nz) = mean(abs(F_-J_).^2);
 
% Calculate taylor-expansion T_ ;
T_ = zeros(size(phi_));
for l=0:l_max;
l_start = round(l*(l+1)/2);
for j=0:l;
f = f_(1 + l_start + j);
p = p_(1 + l_start + j);
b = b_(1 + l_start + j);
T_ = T_ + f*b*exp(i*p*phi_)*z^l;
%T_ = T_ + f*b*cos(p*phi_)*z^l;
end;%for j=0:l;
ET_tmp = mean(abs(F_-T_).^2);
%disp(sprintf(' z %0.2f l %d ET_tmp %0.4f',z,l,ET_tmp));
end;%for l=0:l_max;
ET_(nz) = mean(abs(F_-T_).^2);

% Calculate svd-expansion S_ ;
S_ = zeros(size(phi_));
z_d = z/R_target + rand()*(z_target-z)/R_target; z_r = z/z_d;
for ns=0:n_S-1;
S_u = interp1(transpose(d_),S_u_(:,1+ns),z_d);
S_v = interp1(transpose(r_),S_v_(:,1+ns),z_r);
S_ = S_ + S_u*S_s_(1+ns)*S_v*exp(-i*S_l_(1+ns)*pi/2)*exp(-i*S_l_(1+ns)*phi_);
ES_tmp = mean(abs(F_-S_).^2);
end;%for ns=0:n_S-1;
ES_(nz) = mean(abs(F_-S_).^2);

% plot results ;
disp_flag=1;
if disp_flag;
subplot(4,4,nz);
hold on;
plot(phi_,real(F_),'r-',phi_,imag(F_),'b-');
%plot(phi_,real(J_),'m-',phi_,imag(J_),'g-');
plot(phi_,real(T_),'r:',phi_,imag(T_),'b:');
plot(phi_,real(S_),'m:',phi_,imag(S_),'g:');
hold off;
xlim([0,2*pi]); 
%title(sprintf('z=%0.2f, log10(EJ)=%0.2f, log10(ET)=%0.2f, log10(ES)=%0.2f',z,log10(EJ_(nz)),log10(ET_(nz)),log10(ES_(nz))));
title(sprintf('z=%0.2f, log10(ET)=%0.2f, log10(ES)=%0.2f',z,log10(ET_(nz)),log10(ES_(nz))));
end;%if disp_flag;

end;%for nz=1:n_z;

%display errors ; 
for nz=1:n_z;
disp(sprintf('z=%0.1f; log10(EJ_(%d)) = %+6.2f, log10(ET_(%d)) = %+6.2f, log10(ES_(%d)) = %+6.2f',z_(nz),nz-1,log10(EJ_(nz)),nz-1,log10(ET_(nz)),nz-1,log10(ES_(nz))));
end;%for nz=1:n_z;
