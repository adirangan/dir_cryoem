function gen_Jsvd_0(K_max,N_pixels,eps_target);
% Generating svd-expansion of F_ (note that this factorizes by construction) ; 
% the maximum delta is chosen so that the expansion works from ;
% K_max to K_max-1 ;
% try: ;
%{

  if exist('./dir_gen_Jsvd/gen_Jsvd_blockdecl.txt','file'); delete('./dir_gen_Jsvd/gen_Jsvd_blockdecl.txt'); end;
  if exist('./dir_gen_Jsvd/gen_Jsvd_blockdata.txt','file'); delete('./dir_gen_Jsvd/gen_Jsvd_blockdata.txt'); end;
  if exist('./dir_gen_Jsvd/gen_Jsvd_blockpick.txt','file'); delete('./dir_gen_Jsvd/gen_Jsvd_blockpick.txt'); end;
  eps_target_ = [0.1,1,10];
  for ne=1:length(eps_target_); for nn=1:1:3; for nk=2:2:48; % Note: loop-order important for blockpick ;
  eps_target = eps_target_(ne);
  K_max = nk; 
  N_pixels = nn;  
  gen_Jsvd_0(K_max,N_pixels,eps_target);
  end;end;end;%for ne=1:length(eps_target_); for nn=1:1:3; for nk=2:2:48;

 %}

% Generate svd-expansion ;
l_max = 15; % maximum order ;
eps_target = eps_target;
R_target = ceil(2*pi*K_max) ;
R_preget = ceil(2*pi*max(1,(K_max-1))) ;
z_target = N_pixels*pi*sqrt(2)*R_target/R_preget ;
D_target = z_target/R_target;
n_r = 128 ; n_d = 128 ;
r_ = linspace(0,R_target,n_r);
d_ = linspace(0,D_target,n_d);
clear S_l_ S_u_ S_s_ S_v_ ;
[R_,D_] = meshgrid(r_,d_); Z_ = R_.*D_;
l = 0; n_S = 0; continue_flag=1;
while (continue_flag);
if (l==0); l_ = [0]; else l_ = [-l,+l] ; end;
for l_tmp = l_;
J_tmp = besselj(l_tmp,Z_);
[U,S,V] = svds(J_tmp,8); S = diag(S); [S_ret] = find(S>eps_target) ;
if ~isempty(S_ret);
disp(sprintf(' %% l %+.2d, found %d terms [%0.2f,..,%0.2f];',l_tmp,length(S_ret),S(S_ret(1)),S(S_ret(end))));
for ij = 1:length(S_ret);
S_l_(1+n_S) = l_tmp;
S_u_(:,1+n_S) = U(:,S_ret(ij));
S_s_(1,1+n_S) = S(S_ret(ij),1);
S_v_(:,1+n_S) = V(:,S_ret(ij));
n_S = n_S + 1;
end;%for ij = 1:length(S_ret);
end;%if ~isempty(S_ret);
end;% for l_tmp = l_;
l=l+1;
if (l>l_max); continue_flag=0; else continue_flag=1; end;
end;%while (continue_flag);
disp(sprintf(' %% total of n_S %d terms found;',n_S));

dname = sprintf('%s/dir_gen_Jsvd',pwd);
ftag = sprintf('K%.3dN%.1de%.4d',floor(K_max),floor(N_pixels),floor(100*eps_target));

fname = sprintf('%s/gen_Jsvd_blockdecl.txt',dname);
fp = fopen(fname,'a');
fprintf(fp,'      include ''gen_Jsvd_%s_decl''\n',ftag);
fclose(fp);
fname = sprintf('%s/gen_Jsvd_blockdata.txt',dname);
fp = fopen(fname,'a');
fprintf(fp,'      include ''gen_Jsvd_%s_decl''\n',ftag);
fprintf(fp,'      include ''gen_Jsvd_%s_data''\n',ftag);
fclose(fp);
fname = sprintf('%s/gen_Jsvd_blockpick.txt',dname);
fp = fopen(fname,'a');
fprintf(fp,'      else if (K_max.le.%d .and. N_pixels.le.%d .and. \n',K_max,N_pixels);
fprintf(fp,'     $        eps_target.le.%0.3fd0) then\n',eps_target);
fprintf(fp,'      if (verbose.gt.0) then\n');
fprintf(fp,'         write(6,''(A,I0)'') ''using: gen_Jsvd_%s, n_S='',%d\n',ftag,n_S);
fprintf(fp,'      end if\n');
fprintf(fp,'      p_n_svd_r = loc(gen_Jsvd_%s_n_r)\n',ftag);
fprintf(fp,'      p_svd_r_ = loc(gen_Jsvd_%s_r_)\n',ftag);
fprintf(fp,'      p_n_svd_d = loc(gen_Jsvd_%s_n_d)\n',ftag);
fprintf(fp,'      p_svd_d_ = loc(gen_Jsvd_%s_d_)\n',ftag);
fprintf(fp,'      p_n_svd_l = loc(gen_Jsvd_%s_n_S)\n',ftag);
fprintf(fp,'      p_svd_l_ = loc(gen_Jsvd_%s_S_l_)\n',ftag);
fprintf(fp,'      p_svd_U_d_ = loc(gen_Jsvd_%s_S_u_)\n',ftag);
fprintf(fp,'      p_svd_s_ = loc(gen_Jsvd_%s_S_s_)\n',ftag);
fprintf(fp,'      p_svd_V_r_ = loc(gen_Jsvd_%s_S_v_)\n',ftag);
fclose(fp);

fname = sprintf('%s/gen_Jsvd_%s_decl',dname,ftag);
fp = fopen(fname,'w');
save_f77data(1,n_r,'integer',sprintf('gen_Jsvd_%s_n_r',ftag),fp,'decl');
save_f77data(1,n_d,'integer',sprintf('gen_Jsvd_%s_n_d',ftag),fp,'decl');
save_f77data(1,n_S,'integer',sprintf('gen_Jsvd_%s_n_S',ftag),fp,'decl');
save_f77data(n_r,r_,'real',sprintf('gen_Jsvd_%s_r_',ftag),fp,'decl');
save_f77data(n_d,d_,'real',sprintf('gen_Jsvd_%s_d_',ftag),fp,'decl');
save_f77data(n_S,S_l_,'integer',sprintf('gen_Jsvd_%s_S_l_',ftag),fp,'decl');
save_f77data(n_d*n_S,S_u_,'real',sprintf('gen_Jsvd_%s_S_u_',ftag),fp,'decl');
save_f77data(1.0*n_S,S_s_,'real',sprintf('gen_Jsvd_%s_S_s_',ftag),fp,'decl');
save_f77data(n_r*n_S,S_v_,'real',sprintf('gen_Jsvd_%s_S_v_',ftag),fp,'decl');
fprintf(fp,'      common /gen_Jsvd_%s/\n',ftag);
fprintf(fp,'     $       gen_Jsvd_%s_n_r\n',ftag);
fprintf(fp,'     $     , gen_Jsvd_%s_n_d\n',ftag);
fprintf(fp,'     $     , gen_Jsvd_%s_n_S\n',ftag);
fprintf(fp,'     $     , gen_Jsvd_%s_r_\n',ftag);
fprintf(fp,'     $     , gen_Jsvd_%s_d_\n',ftag);
fprintf(fp,'     $     , gen_Jsvd_%s_S_l_\n',ftag);
fprintf(fp,'     $     , gen_Jsvd_%s_S_u_\n',ftag);
fprintf(fp,'     $     , gen_Jsvd_%s_S_s_\n',ftag);
fprintf(fp,'     $     , gen_Jsvd_%s_S_v_\n',ftag);
fclose(fp);
fname = sprintf('%s/gen_Jsvd_%s_data',dname,ftag);
fp = fopen(fname,'w');
save_f77data(1,n_r,'integer',sprintf('gen_Jsvd_%s_n_r',ftag),fp,'data');
save_f77data(1,n_d,'integer',sprintf('gen_Jsvd_%s_n_d',ftag),fp,'data');
save_f77data(1,n_S,'integer',sprintf('gen_Jsvd_%s_n_S',ftag),fp,'data');
save_f77data(n_r,r_,'real',sprintf('gen_Jsvd_%s_r_',ftag),fp,'data');
save_f77data(n_d,d_,'real',sprintf('gen_Jsvd_%s_d_',ftag),fp,'data');
save_f77data(n_S,S_l_,'integer',sprintf('gen_Jsvd_%s_S_l_',ftag),fp,'data');
save_f77data(n_d*n_S,S_u_,'real',sprintf('gen_Jsvd_%s_S_u_',ftag),fp,'data');
save_f77data(1.0*n_S,S_s_,'real',sprintf('gen_Jsvd_%s_S_s_',ftag),fp,'data');
save_f77data(n_r*n_S,S_v_,'real',sprintf('gen_Jsvd_%s_S_v_',ftag),fp,'data');
fclose(fp);

n_z = 16; z_ = linspace(0,z_target,n_z);
n_phi = 1024;
phi_ = 2*pi*(0:n_phi-1)/n_phi;
disp_flag=0;
if disp_flag;
figure();clf;
end;%if disp_flag;
for nz=1:n_z;
z = z_(nz);

% Calculate function F_ ;
F_ = exp(-i*z*cos(phi_));

% Calculate bessel expansion J_ ; 
J_ = zeros(size(phi_)); j_max = 12;
for l=0:l_max;
if (l==0); J_ = J_ + besselj(0,z); end;
if (l>0); J_ = J_ + exp(+i*l*pi/2)*besselj(-l,z)*exp(+i*l*phi_) + exp(-i*l*pi/2)*besselj(+l,z)*exp(-i*l*phi_); end;
EJ_tmp = mean(abs(F_-J_).^2);
%disp(sprintf(' z %0.2f l %d EJ_tmp %0.4f',z,l,EJ_tmp));
end;%for l=0:l_max;
EJ_(nz) = mean(abs(F_-J_).^2);
 
% Calculate svd-expansion S_ ;
S_ = zeros(size(phi_));
z_d = z/R_target + rand()*(z_target-z)/R_target; z_r = z/z_d;
for ns=0:n_S-1;
S_u = interp1(transpose(d_),S_u_(:,1+ns),z_d);
S_v = interp1(transpose(r_),S_v_(:,1+ns),z_r);
S_ = S_ + S_u*S_s_(1+ns)*S_v*exp(-i*S_l_(1+ns)*pi/2)*exp(-i*S_l_(1+ns)*phi_);
ES_tmp = mean(abs(F_-S_).^2);
end;%for ns=0:n_S-1;
ES_(nz) = mean(abs(F_-S_).^2);

% plot results ;
if disp_flag;
subplot(4,4,nz);
hold on;
plot(phi_,real(F_),'r-',phi_,imag(F_),'b-');
%plot(phi_,real(J_),'m-',phi_,imag(J_),'g-');
plot(phi_,real(S_),'m:',phi_,imag(S_),'g:');
hold off;
xlim([0,2*pi]); 
%title(sprintf('z=%0.2f, log10(EJ)=%0.2f, log10(ES)=%0.2f',z,log10(EJ_(nz)),log10(ES_(nz))));
title(sprintf('z=%0.2f, log10(ES)=%0.2f',z,log10(ES_(nz))));
end;%if disp_flag;

end;%for nz=1:n_z;

if disp_flag;
fname = sprintf('%s/gen_Jsvd_%s.eps',dname,ftag);
print('-depsc',fname);
fname = sprintf('%s/gen_Jsvd_%s.jpg',dname,ftag);
print('-djpeg',fname);
end% if disp_flag;

%display errors ; 
for nz=1:n_z;
disp(sprintf('z=%0.1f; log10(EJ_(%d)) = %+6.2f, log10(ES_(%d)) = %+6.2f',z_(nz),nz-1,log10(EJ_(nz)),nz-1,log10(ES_(nz))));
end;%for nz=1:n_z;
