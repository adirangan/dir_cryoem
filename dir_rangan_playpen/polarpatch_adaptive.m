function clim = polarpatch_adaptive(r_,n_w_,A_,c_,clim,offset_x,offset_y,radius);

if (nargin<1);
D_target = 2.0;
n_quad_order = 20; quad_weight_polycoef_ = [1 1];
trad = (D_target-0)/2; tmid = (D_target+0)/2;
[quad_node_,quad_weight_,quad_Lx_,quad_Lv_] = orthopoly_node_weight_matrix_0(n_quad_order,quad_weight_polycoef_);
quad_weight_ = quad_weight_ .* (D_target.^2/4);
quad_node_scale_ = quad_node_*trad + tmid;
r_ = quad_node_scale_;
n_A=0; n_w_ = zeros(n_quad_order,1);
for nq=1:n_quad_order;
tmp = max(3,ceil(2*pi*n_quad_order*quad_node_scale_(nq)/D_target));
n_w_(nq) = tmp;
n_A = n_A + tmp;
end;%for nq=1:n_quad_order;
delta_d_sample_ = zeros(n_A,1); delta_w_sample_ = zeros(n_A,1); quad_weight_sample_ = zeros(n_A,1);
ic=0;
for nq=1:n_quad_order;
tmp = max(3,ceil(2*pi*n_quad_order*quad_node_scale_(nq)/D_target));
delta_d_sample_(ic + (1:tmp),1) = quad_node_scale_(nq);
tmp_ = linspace(0,2*pi,tmp+1);
delta_w_sample_(ic + (1:tmp),1) = transpose(tmp_(1:tmp));
quad_weight_sample_(ic + (1:tmp),1) = quad_weight_(nq)*2*pi/tmp;
ic = ic + tmp;
end;%for nq=1:n_quad_order;
A_sample_ = zeros(n_A,1);
z = 2*pi*1.5/D_target;
A_sample_ = cos(z.*delta_d_sample_.*cos(delta_w_sample_-pi/6));
figure; subplot(1,1,1); hold on;
polarpatch_adaptive(r_,n_w_,A_sample_,colormap(colormap_beach(64)),[-1,+1]);
disp('returning'); return;
end;%if (nargin<1);

if nargin<4; c_ = colormap('hot'); end;
if nargin<5; clim = mean(A_(:)) + 2.0*std(A_(:))*[-1,+1]; end;
if nargin<7; offset_x = 0; offset_y = 0; end;
if nargin<8; radius = 1; end;
% c_ = colormap('hot'); clim = mean(A_(:)) + 2.0*std(A_(:))*[-1,+1]; offset_x=0;offset_y=0; radius=1;

colormap(c_); n_c = size(c_,1);
n_r = length(r_); assert(length(n_w_)>=n_r); n_A = sum(n_w_); assert(length(A_)>=n_A);
r_pre_ = 0.5*( [0,reshape(r_(1:end-1),1,n_r-1)] + reshape(r_(1:end),1,n_r) ); r_pre_(1)=0;
r_pos_ = 0.5*( [reshape(r_(2:end),1,n_r-1),r_(end)] + reshape(r_(1:end),1,n_r) ); r_pos_(end) = r_(end) + (r_(end)-r_(end-1))/2;
w_ = cell(n_r,1); w_pre_ = cell(n_r,1); w_pos_ = cell(n_r,1);
r_pre_rep_ = cell(n_r,1); r_pos_rep_ = cell(n_r,1);
for nr=1:n_r;
dw = 2*pi/n_w_(nr);
w_{nr} = linspace(0,2*pi-dw,n_w_(nr));
w_pre_{nr} = w_{nr}-dw/2;
w_pos_{nr} = w_{nr}+dw/2;
r_pre_rep_{nr} = r_pre_(nr)*ones(1,n_w_(nr));
r_pos_rep_{nr} = r_pos_(nr)*ones(1,n_w_(nr));
end;%for nr=1:n_r;
w_pre_cat_ = zeros(1,n_A); w_pos_cat_ = zeros(1,n_A);
r_pre_cat_ = zeros(1,n_A); r_pos_cat_ = zeros(1,n_A);
ic = 0;
for nr=1:n_r;
ij_ = ic + (1:n_w_(nr));
w_pre_cat_(ij_) = w_pre_{nr};
w_pos_cat_(ij_) = w_pos_{nr};
r_pre_cat_(ij_) = r_pre_rep_{nr};
r_pos_cat_(ij_) = r_pos_rep_{nr};
ic = ic+n_w_(nr);
end;%for nr=1:n_r;
cos_pre_cat_ = cos(w_pre_cat_);
cos_pos_cat_ = cos(w_pos_cat_);
sin_pre_cat_ = sin(w_pre_cat_);
sin_pos_cat_ = sin(w_pos_cat_);
x_pre_pre_ = r_pre_cat_ .* cos_pre_cat_;
x_pos_pre_ = r_pos_cat_ .* cos_pre_cat_;
x_pre_pos_ = r_pre_cat_ .* cos_pos_cat_;
x_pos_pos_ = r_pos_cat_ .* cos_pos_cat_;
y_pre_pre_ = r_pre_cat_ .* sin_pre_cat_;
y_pos_pre_ = r_pos_cat_ .* sin_pre_cat_;
y_pre_pos_ = r_pre_cat_ .* sin_pos_cat_;
y_pos_pos_ = r_pos_cat_ .* sin_pos_cat_;
x__ = transpose([x_pre_pre_(:) , x_pre_pos_(:) , x_pos_pos_(:) , x_pos_pre_(:)]);
y__ = transpose([y_pre_pre_(:) , y_pre_pos_(:) , y_pos_pos_(:) , y_pos_pre_(:)]);
n__ = max(1,min(n_c,floor(n_c*(A_(:)-min(clim))/diff(clim))));
c__ = c_(n__,:); c__ = reshape(c__,1,n_A,3);
p=patch(x__*radius+offset_x,y__*radius+offset_y,c__);set(p,'EdgeColor','none'); 
if offset_x==0 & offset_y==0 & radius==1; xlim(max(r_(:))*[-1,+1]); ylim(max(r_(:))*[-1,+1]); axis off; end;

