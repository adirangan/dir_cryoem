% testing functional lsq. ;
% analytically calculate the overlap integral between two plane-waves on a disc, ;
% as well as the derivative of that overlap integral. : ;
% Can explicitly write down function that can be used to determine the derivative ;
% of terms like f_{j}^{\dagger} f_{j^{\prime}}, ;
% as well as the error E. ;
% Now calculating total (average) error across disc using lsq-interpolation. ;
% Using quadrature grid. ;

verbose=1;
h_ = @(kd) 4*pi*besselj(1,2*pi*kd) ./ kd ; 
dh_ = @(kd) -4*pi*besselj(1,2*pi*kd)./(kd+1e-9).^2 + 4*pi^2*(besselj(0,2*pi*kd)-besselj(2,2*pi*kd))./(kd+1e-9) ; 

n_point = 128; max_x_c = 1; 
[max_k_c,max_k_p,grid_x_c_,d_x_c,X_x_c_,Y_x_c_,R_x_c_,W_x_c_,grid_k_c_,d_k_c,X_k_c_,Y_k_c_,R_k_c_,W_k_c_,grid_x_r_,grid_x_w_,R_x_p_,W_x_p_,grid_k_r_,d_k_r,grid_k_w_,d_k_w,R_k_p_,W_k_p_,X_k_p_,Y_k_p_] = test_F_grid_0(n_point,max_x_c);
N_pixel = 1.5; % number of wavelengths allowed in displacement grid. ;
R_target = max_k_p-0.5; z_target = N_pixel*pi*sqrt(2); D_target = z_target/(2*pi*R_target); C = 2*pi*max_k_p;

n_quad_order = 16; quad_weight_polycoef_ = [1 1];
trad = (D_target-0)/2; tmid = (D_target+0)/2;
[quad_node_,quad_weight_,quad_Lx_,quad_Lv_] = orthopoly_node_weight_matrix_0(n_quad_order,quad_weight_polycoef_);
quad_weight_ = quad_weight_ .* (D_target.^2/4);
quad_node_scale_ = quad_node_*trad + tmid; 
n_A=0; n_w_ = zeros(n_quad_order,1);
for nq=1:n_quad_order;
tmp = max(3,ceil(2*pi*n_quad_order*quad_node_scale_(nq)/D_target));
n_w_(nq) = tmp;
n_A = n_A + tmp;
end;%for nq=1:n_quad_order;
delta_d_sample_ = zeros(n_A,1); delta_w_sample_ = zeros(n_A,1); quad_weight_sample_ = zeros(n_A,1);
ic=0;
for nq=1:n_quad_order;
tmp = max(3,ceil(2*pi*n_quad_order*quad_node_scale_(nq)/D_target));
delta_d_sample_(ic + (1:tmp),1) = quad_node_scale_(nq);
tmp_ = linspace(0,2*pi,tmp+1);
delta_w_sample_(ic + (1:tmp),1) = transpose(tmp_(1:tmp));
quad_weight_sample_(ic + (1:tmp),1) = quad_weight_(nq)*2*pi/tmp;
ic = ic + tmp;
end;%for nq=1:n_quad_order;
delta_sample_ = zeros(n_A,2);
delta_sample_(:,1) = cos(delta_w_sample_).*delta_d_sample_;
delta_sample_(:,2) = sin(delta_w_sample_).*delta_d_sample_;
flag_disp=0;
if flag_disp;
figure(1); subplot(1,1,1); hold on;
c_ = colormap('hot'); n_c = size(c_,1); clim = [min(quad_weight_sample_),max(quad_weight_sample_)];
for na=1:n_A;
nc = max(1,min(n_c,floor(n_c*(quad_weight_sample_(na,1) - clim(1))/diff(clim))));
plot(delta_sample_(na,1),delta_sample_(na,2),'.','Color',c_(nc,:),'MarkerSize',25);
end;%for na=1:n_A;
plot(D_target*cos(linspace(0,2*pi,256)),D_target*sin(linspace(0,2*pi,256)),'k-');
set(gca,'XTick',[],'YTick',[]);axis square;
title('quad weight');
end;%if flag_disp;

n_node = 32;
%%%%%%%%%%%%%%%%;
delta_node_ = zeros(2,n_node);
for nnode=1:n_node; 
delta_d = D_target*rand(); delta_w = 2*pi*rand();
delta_node_(:,nnode) = delta_d*[cos(delta_w);sin(delta_w)];
end;%for nnode=1:n_node;
%%%%%%%%%%%%%%%%;

rng(1);
dt = 0.05;
n_iteration = 128;
E_sum_ = zeros(n_iteration,1);
for niteration=1:n_iteration;
%%%%%%%%%%%%%%%%;
H_ = zeros(n_node,n_node);
for nnodeA=1:n_node; for nnodeB=1:n_node;
d = (delta_node_(:,nnodeB) - delta_node_(:,nnodeA));
if (nnodeA~=nnodeB); H_(nnodeA,nnodeB) = h_(norm(d)*max_k_p); end;
if (nnodeA==nnodeB); H_(nnodeA,nnodeB) = (2*pi).^2; end;
end;end;%for nnodeA=1:n_node; for nnodeB=1:n_node;
%G_ = inv(H_);
%%%%%%%%%%%%%%%%;
E_sample_ = zeros(n_A,1);
dEk_sample___ = zeros(n_A,2,n_node);
for na=1:n_A;
delta_t = transpose(delta_sample_(na,:));
dd_ = repmat(delta_t,1,n_node) - delta_node_; hypot_dd_ = hypot(dd_(1,:),dd_(2,:)); 
ft_ = transpose(h_(hypot_dd_*max_k_p)); ft_(find(hypot_dd_==0))=(2*pi)^2;
%alpha_ = G_*ft_;
alpha_ = H_\ft_;
E = (2*pi).^2 - transpose(ft_)*alpha_;
E_sample_(na) = abs(E);
for k=1:n_node;
dd_ = delta_node_ - repmat(delta_node_(:,k),1,n_node); hypot_dd_ = hypot(dd_(1,:),dd_(2,:));
dhk__ = - repmat(dh_(hypot_dd_*max_k_p)*max_k_p,2,1) .* dd_*diag(1./hypot_dd_);
dhk__(:,find(hypot_dd_==0)) = [0;0];
dd = delta_t-delta_node_(:,k); hypot_dd = hypot(dd(1),dd(2));
dftk_ = - dh_(hypot_dd*max_k_p)*max_k_p * dd/hypot_dd;
dEk_ = 2*alpha_(k)*(dhk__*alpha_) - 2*alpha_(k)*dftk_;
dEk_sample___(na,:,k) = dEk_*quad_weight_sample_(na);
end;%for k=1:n_node;
end;%for na=1:n_A;
E_sum = sum(E_sample_.*quad_weight_sample_);
E_sum_(niteration) = E_sum;
dEk_sum__ = sum(dEk_sample___,1); dEk_sum__ = reshape(dEk_sum__,2,n_node);
%%%%%%%%%%%%%%%%;
flag_disp=1;
if flag_disp;
figure(2); clf; 
subplot(2,2,1); cla; hold on;
c_ = colormap('hot'); n_c = size(c_,1); clim = [0,max(E_sample_)];
for na=1:n_A;
nc = max(1,min(n_c,floor(n_c*(E_sample_(na,1) - clim(1))/diff(clim))));
plot(delta_sample_(na,1),delta_sample_(na,2),'.','Color',c_(nc,:),'MarkerSize',25);
end;%for na=1:n_A;
plot(D_target*cos(linspace(0,2*pi,256)),D_target*sin(linspace(0,2*pi,256)),'k-');
plot(delta_node_(1,:),delta_node_(2,:),'p','MarkerSize',25,'MarkerFaceColor','g');
set(gca,'XTick',[],'YTick',[]);axis square;
title(sprintf(' ni %d/%d: Error<=%f',niteration,n_iteration,max(E_sample_)));
hold off;
subplot(2,2,3); cla; hold on;
c_ = colormap('hot'); n_c = size(c_,1); clim = log10(max(E_sample_)) + [-3,0];
for na=1:n_A;
nc = max(1,min(n_c,floor(n_c*(log10(E_sample_(na,1)) - clim(1))/diff(clim))));
plot(delta_sample_(na,1),delta_sample_(na,2),'.','Color',c_(nc,:),'MarkerSize',25);
end;%for na=1:n_A;
plot(D_target*cos(linspace(0,2*pi,256)),D_target*sin(linspace(0,2*pi,256)),'k-');
plot(delta_node_(1,:),delta_node_(2,:),'p','MarkerSize',25,'MarkerFaceColor','g');
set(gca,'XTick',[],'YTick',[]);axis square;
title(sprintf(' ni %d/%d: log10(Error)<=%f',niteration,n_iteration,log10(max(E_sample_))));
hold off;
subplot(2,2,2); cla; hold on;
plot(1:niteration,E_sum_(1:niteration),'k.-');ylim([0,max(E_sum_)]); xlim([1,n_iteration]); xlabel('iteration'); ylabel('Total Error');
hold off;
subplot(2,2,4); cla; hold on;
plot(1:niteration,log10(abs(E_sum_(1:niteration))),'k.-');ylim([-9,0]); xlim([1,n_iteration]); xlabel('iteration'); ylabel('log10(Total Error)');
hold off;
set(gcf,'Position',1+[0,0,1024*1.5,1024]);
drawnow();
end;%if flag_disp;
%%%%%%%%%%%%%%%%;
delta_node_ = delta_node_ - dt*dEk_sum__;
for nnode=1:n_node;
tmp = hypot(delta_node_(1,nnode),delta_node_(2,nnode));
if (tmp>D_target); delta_node_(:,nnode) = D_target * delta_node_(:,nnode)/tmp; end;
end;%for nnode=1:n_node;
%%%%%%%%%%%%%%%%;
end;%for niteration=1:n_iteration;

% compact representation of various derivatives. ;
%dd_ = delta_node_ - repmat(delta_node_(:,k),1,n_node); hypot_dd_ = hypot(dd_(1,:),dd_(2,:));
%dhk__ = - repmat(dh_(hypot_dd_*max_k_p)*max_k_p,2,1) .* dd_*diag(1./hypot_dd_);
%dhk__(:,find(hypot_dd_==0)) = [0;0];
%dd = delta_t-delta_node_(:,k); hypot_dd = hypot(dd(1),dd(2));
%dftk_ = - dh_(hypot_dd*max_k_p)*max_k_p * dd/hypot_dd,;
%dEk_ = 2*alpha_(k)*(dhk__*alpha_) - 2*alpha_(k)*dftk_;



