function Functional_SVD_3(K_max,N_pixel,eps_target,l_max);
% Tests functional SVD. ;
% This time the test involves the non-separable bessel function. ;
% We go out to N_pixel. ;

% K_max = 128; N_pixel = 3.0; eps_target = 0.1; l_max = 16; %default ;
ni=1;
if (nargin<ni); K_max = 128; end; ni = ni+1; % Largest value of K (not including 2*pi). ;
if (nargin<ni); N_pixel = 3.0; end; ni = ni+1; % Maximum pixels for displacement. ;
if (nargin<ni); eps_target = 0.1; end; ni = ni+1; % epsilon used in svd. ;
if (nargin<ni); l_max = 16; end; ni = ni+1; % maximum bessel order. ;

[n_svd_r,svd_r_,svd_r_m,svd_r_c,svd_r_w_,svd_r_Lv_,n_svd_d,svd_d_,svd_d_m,svd_d_c,svd_d_w_,svd_d_Lv_,n_svd_l,svd_l_,svd_U_d_,svd_s_,svd_V_r_] = gen_Jsvd_3(K_max,N_pixel,eps_target,l_max);

R_target = K_max-0.5; % Target maximum R (i.e., K). ;
z_target = N_pixel*pi*sqrt(2); % Target maximum product of 2*pi*R*D. ;
D_target = z_target/(2*pi*R_target); % Target maximum D. ;
r_max = 2*pi*R_target;
d_max = D_target;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% sample on quadrature grid. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
a_N = length(svd_r_); b_N = length(svd_d_); w_ = svd_d_w_*transpose(svd_r_w_);
[A_t_,B_t_] = meshgrid(svd_r_,svd_d_);
E_quad_ = zeros(1+2*l_max,1);
disp_flag=1;
if disp_flag;
colormap(colormap_beach(64));
n_plot = 0;
%prows = 3; pcols = ceil((1 + 2*l_max)/prows);
for nl=1:(1+2*l_max);
l_tmp = nl-1-l_max;
fh_J = @(a,b) besselj(l_tmp,a.*b);
J_t_ = fh_J(A_t_,B_t_);
H_t_ = zeros(size(J_t_));
ij_tmp_ = find(svd_l_==l_tmp);
if ( isempty(ij_tmp_)); disp(sprintf(' %% l_tmp %d, no terms',l_tmp)); end;
if (~isempty(ij_tmp_));
disp(sprintf(' %% l_tmp %d, %d terms',l_tmp,length(ij_tmp_)));
for ij=ij_tmp_;
U_t_ = zeros(1,b_N);
b_K = size(svd_U_d_,1);
for nkB=0:b_K-1;
b_tmp = polyval(svd_d_Lv_(1+nkB,:),(svd_d_-svd_d_m)/svd_d_c);
U_t_ = U_t_ + svd_U_d_(1+nkB,ij)*transpose(b_tmp);
end;%for nkB=0:b_K-1;
V_t_ = zeros(1,a_N);
a_K = size(svd_V_r_,1);
for nkA=0:a_K-1;
a_tmp = polyval(svd_r_Lv_(1+nkA,:),(svd_r_-svd_r_m)/svd_r_c);
V_t_ = V_t_ + svd_V_r_(1+nkA,ij)*transpose(a_tmp);
end;%for nkA=0:a_K-1;
H_t_ = H_t_ + transpose(U_t_)*svd_s_(ij)*V_t_;
end;%for ij=ij_tmp_;
E_tmp = w_.*((J_t_-H_t_).^2);
E_quad_(nl) = sum(E_tmp(:));
%subplot(prows,pcols,nl);
%figure(1+n_plot); n_plot = n_plot+1;
figure(1);
imagesc(J_t_ - H_t_); xlabel('a=r'); ylabel('b=d'); title(sprintf('J-USV: l %d',l_tmp)); colorbar;
drawnow; %pause();
end;%if (~isempty(ij_tmp_));
end;%for nl=1:(1+2*l_max);
end;%if disp_flag;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% sample on uniform grid. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;

a_N = 128; b_N = 129;
a_m = r_max/2; a_r = a_m;
b_m = d_max/2; b_r = b_m;
a_x_ = linspace(-1,+1,a_N);
a_t_ = linspace(a_m-a_r,a_m+a_r,a_N); 
b_x_ = linspace(-1,+1,b_N);
b_t_ = linspace(b_m-b_r,b_m+b_r,b_N); 
[A_t_,B_t_] = meshgrid(a_t_,b_t_);

E_unif_ = zeros(1+2*l_max,1);
disp_flag=1;
if disp_flag;
colormap(colormap_beach(64));
n_plot = 0;
%prows = 3; pcols = ceil((1 + 2*l_max)/prows);
for nl=1:(1+2*l_max);
l_tmp = nl-1-l_max;
fh_J = @(a,b) besselj(l_tmp,a.*b);
J_t_ = fh_J(A_t_,B_t_);
H_t_ = zeros(size(J_t_));
ij_tmp_ = find(svd_l_==l_tmp);
if ( isempty(ij_tmp_)); disp(sprintf(' %% l_tmp %d, no terms',l_tmp)); end;
if (~isempty(ij_tmp_));
disp(sprintf(' %% l_tmp %d, %d terms',l_tmp,length(ij_tmp_)));
for ij=ij_tmp_;
U_t_ = zeros(1,b_N);
b_K = size(svd_U_d_,1);
for nkB=0:b_K-1;
b_tmp = polyval(svd_d_Lv_(1+nkB,:),b_x_);
U_t_ = U_t_ + svd_U_d_(1+nkB,ij)*b_tmp;
end;%for nkB=0:b_K-1;
V_t_ = zeros(1,a_N);
a_K = size(svd_V_r_,1);
for nkA=0:a_K-1;
a_tmp = polyval(svd_r_Lv_(1+nkA,:),a_x_);
V_t_ = V_t_ + svd_V_r_(1+nkA,ij)*a_tmp;
end;%for nkA=0:a_K-1;
H_t_ = H_t_ + transpose(U_t_)*svd_s_(ij)*V_t_;
end;%for ij=ij_tmp_;
E_unif_(nl) = (2/(a_N-1))*(2/(b_N-1))*linspace(0,2,b_N)*((J_t_-H_t_).^2)*transpose(linspace(0,2,a_N));
%subplot(prows,pcols,nl);
%figure(1+n_plot); n_plot = n_plot+1;
figure(1);
imagesc(J_t_ - H_t_); xlabel('a=r'); ylabel('b=d'); title(sprintf('J-USV: l %d',l_tmp)); colorbar;
drawnow; %pause();
end;%if (~isempty(ij_tmp_));
end;%for nl=1:(1+2*l_max);
end;%if disp_flag;

%{
% plot only the 0-bessel function. ;
colormap(colormap_beach(64));
prows = 3; pcols = ceil((1 + 2*l_max)/prows);
%for nl=1:(1+2*l_max);
nl = 1+l_max;
l_tmp = nl-1-l_max;
fh_J = @(a,b) besselj(l_tmp,a.*b);
J_t_ = fh_J(A_t_,B_t_);
H_t_ = zeros(size(J_t_));
ij_tmp_ = find(svd_l_==l_tmp);
for ij=ij_tmp_;
U_t_ = zeros(1,b_N);
b_K = size(svd_U_d_,1);
for nkB=0:b_K-1;
b_tmp = polyval(svd_d_Lv_(1+nkB,:),b_x_);
U_t_ = U_t_ + svd_U_d_(1+nkB,ij)*b_tmp;
end;%for nkB=0:b_K-1;
V_t_ = zeros(1,a_N);
a_K = size(svd_V_r_,1);
for nkA=0:a_K-1;
a_tmp = polyval(svd_r_Lv_(1+nkA,:),a_x_);
V_t_ = V_t_ + svd_V_r_(1+nkA,ij)*a_tmp;
end;%for nkA=0:a_K-1;
H_t_ = H_t_ + transpose(U_t_)*svd_s_(ij)*V_t_;
end;%for ij=ij_tmp_;
imagesc(J_t_ - H_t_); xlabel('a=r'); ylabel('b=d'); title(sprintf('J-USV: l %d',l_tmp)); 
%end;%for nl=1:(1+2*l_max);
 %}


