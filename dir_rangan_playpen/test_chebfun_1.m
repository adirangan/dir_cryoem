
addpath('/data/rangan/dir_cryoem/chebfun'); %savepath;

clear;

verbose=1;
h_ = @(kd) 4*pi*besselj(1,2*pi*kd) ./ kd ; 
hx_ = @(kd) 4*pi^2*(besselj(0,2*pi*kd) + besselj(2,2*pi*kd));
dh_ = @(kd) -4*pi*besselj(1,2*pi*kd)./kd.^2 + 4*pi^2*(besselj(0,2*pi*kd)-besselj(2,2*pi*kd))./kd ; 
%dhx_ = @(kd) 4*pi^3*(besselj(-1,2*pi*kd) - besselj(+1,2*pi*kd) + besselj(+1,2*pi*kd) - besselj(+3,2*pi*kd));
dhx_ = @(kd) 4*pi^3*(besselj(-1,2*pi*kd) - besselj(+3,2*pi*kd));

n_point = 128; max_x_c = 1; 
[max_k_c,max_k_p,grid_x_c_,d_x_c,X_x_c_,Y_x_c_,R_x_c_,W_x_c_,grid_k_c_,d_k_c,X_k_c_,Y_k_c_,R_k_c_,W_k_c_,grid_x_r_,grid_x_w_,R_x_p_,W_x_p_,grid_k_r_,d_k_r,grid_k_w_,d_k_w,R_k_p_,W_k_p_,X_k_p_,Y_k_p_] = test_F_grid_0(n_point,max_x_c);

N_pixel = 1.5; % number of wavelengths allowed in displacement grid. ;
R_target = max_k_p-0.5; z_target = N_pixel*pi*sqrt(2); D_target = z_target/(2*pi*R_target); C = 2*pi*max_k_p;

n_quad_order = 24; quad_weight_polycoef_ = [1 1];
trad = (D_target-0)/2; tmid = (D_target+0)/2;
[quad_node_,quad_weight_] = jacpts(n_quad_order,0,1);
quad_Lv_ = zeros(1+n_quad_order,1+n_quad_order);
for nq=0:n_quad_order;
quad_Lv_(1+nq,1+n_quad_order-nq:1+n_quad_order) = poly(jacpoly(nq,0,1))*sqrt(nq+1)/sqrt(2);
end;%for nq=1:n_quad_order;
quad_Lx_ = zeros(n_quad_order,n_quad_order);
for nq=0:n_quad_order-1;
tmp = jacpoly(nq,0,1)*sqrt(nq+1)/sqrt(2);
quad_Lx_(1+nq,:) = tmp(quad_node_);
end;%for nq=0:n_quad_order-1;
quad_weight_ = quad_weight_ .* (D_target.^2/4);
quad_node_scale_ = quad_node_*trad + tmid; 
r_ = quad_node_scale_;
n_A=0; n_w_ = zeros(n_quad_order,1);
for nq=1:n_quad_order;
%tmp = max(3,ceil(2*pi*n_quad_order*quad_node_scale_(nq)/D_target));
tmp = max(3,ceil(2*pi*n_quad_order*quad_node_scale_(n_quad_order)/D_target));
n_w_(nq) = tmp;
n_A = n_A + tmp;
end;%for nq=1:n_quad_order;
n_w = n_w_(end); n_q = n_quad_order;
delta_d_sample_ = zeros(n_A,1); delta_w_sample_ = zeros(n_A,1); quad_weight_sample_ = zeros(n_A,1);
ic=0;
for nq=1:n_quad_order;
%tmp = max(3,ceil(2*pi*n_quad_order*quad_node_scale_(nq)/D_target));
tmp = max(3,ceil(2*pi*n_quad_order*quad_node_scale_(n_quad_order)/D_target));
delta_d_sample_(ic + (1:tmp),1) = quad_node_scale_(nq);
tmp_ = linspace(0,2*pi,tmp+1);
delta_w_sample_(ic + (1:tmp),1) = transpose(tmp_(1:tmp));
quad_weight_sample_(ic + (1:tmp),1) = quad_weight_(nq)*2*pi/tmp;
ic = ic + tmp;
end;%for nq=1:n_quad_order;
delta_sample_ = zeros(n_A,2);
delta_sample_(:,1) = cos(delta_w_sample_).*delta_d_sample_;
delta_sample_(:,2) = sin(delta_w_sample_).*delta_d_sample_;
flag_disp=0;
if flag_disp;
figure(1); 
subplot(1,2,1); hold on;
clim = [min(quad_weight_sample_),max(quad_weight_sample_)];
polarpatch_adaptive(r_,n_w_,quad_weight_sample_,colormap('hot'),clim);
set(gca,'XTick',[],'YTick',[]);axis square;
title(sprintf('quad weight: [%f,%f]',clim));
subplot(1,2,2); hold on;
plot(quad_weight_sample_); xlabel('node'); title('quad weight');
end;%if flag_disp;

quad_Li_ = inv(transpose(quad_Lx_));
R2pi_max = 2*pi*R_target;
dd1__ = repmat(transpose(delta_d_sample_),n_A,1);
dd2__ = repmat(delta_d_sample_,1,n_A);
dw1__ = repmat(transpose(delta_w_sample_),n_A,1);
dw2__ = repmat(delta_w_sample_,1,n_A);
dd__ = sqrt(dd1__.^2 + dd2__.^2 - 2*dd1__.*dd2__.*cos(dw2__-dw1__));
tic;
FF_eval__ = pi*R2pi_max.^2 * (besselj(0,R2pi_max*dd__) + besselj(2,R2pi_max*dd__));
t_tmp=toc; disp(sprintf(' %% evaluation: %f',t_tmp));
tic;
FF_tmp__ = reshape(FF_eval__,n_w,n_q,n_w,n_q);
t_tmp=toc; disp(sprintf(' %% reshape: %f',t_tmp));
tic;
FF_tmp__ = ifft(FF_tmp__,[],1)*sqrt(n_w);
FF_tmp__ = ifft(FF_tmp__,[],3)*sqrt(n_w);
t_tmp=toc; disp(sprintf(' %% ifft: %f',t_tmp));
tic;
FF_tmp__ = permute(FF_tmp__,[2,1,3,4]);
t_tmp=toc; disp(sprintf(' %% permute: %f',t_tmp));
tic;
for nw1=1:n_w;for nw2=1:n_w;for nd2=1:n_q;
FF_tmp__(:,nw1,nw2,nd2) = quad_Li_*FF_tmp__(:,nw1,nw2,nd2);
end;end;end;%for nw1=1:n_w;for nw2=1:n_w;for nd2=1:n_q;
t_tmp=toc; disp(sprintf(' %% apply quad_Li: %f',t_tmp));
tic;
FF_tmp__ = permute(FF_tmp__,[4,2,3,1]);
t_tmp=toc; disp(sprintf(' %% permute again: %f',t_tmp));
tic;
for nw1=1:n_w;for nw2=1:n_w;for nd2=1:n_q;
FF_tmp__(:,nw1,nw2,nd2) = quad_Li_*FF_tmp__(:,nw1,nw2,nd2);
end;end;end;%for nw1=1:n_w;for nw2=1:n_w;for nd2=1:n_q;
t_tmp=toc; disp(sprintf(' %% apply quad_Li: %f',t_tmp));
tic;
FF_tmp__ = permute(FF_tmp__,[2,4,3,1]);
t_tmp=toc; disp(sprintf(' %% permute final: %f',t_tmp));
FF_coeffs__ = reshape(FF_tmp__,n_w*n_q,n_w*n_q);
tic;
n_s = max(n_q,n_w);
[FF_U_,FF_SS_] = eigs(FF_coeffs__,n_s);
FF_SS_ = real(diag(FF_SS_));
FF_S_ = sqrt(abs(FF_SS_));
FF_U_coeffs_ = reshape(FF_U_,n_w,n_q,n_s);
t_tmp=toc; disp(sprintf(' %% svd: %f',t_tmp));
tic;
FF_U_tmp_ = fft(FF_U_coeffs_,[],1)/sqrt(n_w);
FF_U_tmp_ = permute(FF_U_tmp_,[2,1,3]);
for nw=1:n_w; for ns=1:n_s;
FF_U_tmp_(:,nw,ns) = transpose(quad_Lx_)*FF_U_tmp_(:,nw,ns);
end;end;%for nw=1:n_w; for ns=1:n_s;
FF_U_tmp_ = permute(FF_U_tmp_,[2,1,3]);
FF_U_eval_ = reshape(FF_U_tmp_,n_w*n_q,n_s);
t_tmp=toc; disp(sprintf(' %% U_eval: %f',t_tmp));

flag_disp=0;
if flag_disp;
figure(2); clf;
prows = 6; pcols = 8;
for ns=1:min(n_s,prows*pcols);
subplot(prows,pcols,ns); hold on;
subplot(prows,pcols,ns); 
imagesc(squeeze(log10(abs(FF_U_coeffs_(1:10,:,ns)))),[-15,0]);
end;%for ns=1:min(n_s,prows*pcols);
end;%if flag_disp;

flag_disp=0;
if flag_disp;
plot(1:n_s,log10(FF_S_./FF_S_(1)),'.');
title('singular values');
xlabel('ns'); ylabel('log10(abs(s))');
end;%if flag_disp;

flag_disp=1;
if flag_disp;
figure(3); clf;
prows = 6; pcols = 8;
for ns=1:min(n_s,prows*pcols);
subplot(prows,pcols,ns); hold on;
tmp_ = FF_U_eval_(:,ns);
clim = 2.0*std(abs(tmp_(:)))*[-1,+1];
polarpatch_adaptive(r_,n_w_,real(tmp_),colormap(colormap_beach(64)),clim,-1.25*D_target,0,1);
polarpatch_adaptive(r_,n_w_,imag(tmp_),colormap(colormap_beach(64)),clim,+1.25*D_target,0,1);
set(gca,'XTick',[],'YTick',[]);
xlim(2.5*D_target*[-1,+1]); ylim(D_target*[-1,+1]); axis equal;
%title(sprintf('ns %d: s %f, [%f,%f]',ns,FF_S_(ns),clim));
title(sprintf('ns %d: s %0.2f',ns,FF_S_(ns)));
end;%for ns=1:min(n_s,prows*pcols);
end;%if flag_disp;
