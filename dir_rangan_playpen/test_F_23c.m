function test_F_23c(N_pixel);
% comparing svd-expansion with functional lsq. ;
% analytically calculate the overlap integral between two plane-waves on a disc, ;
% as well as the derivative of that overlap integral. : ;
% Can explicitly write down function that can be used to determine the derivative ;
% of terms like f_{j}^{\dagger} f_{j^{\prime}}, ;
% as well as the error E. ;
% We can calculate the total (average) error across disc using either svd-expansion or lsq-interpolation. ;
% Using quadrature grid. ;
% Switching to pseudoinverse. ;
% Pulling out delta_t independent term from derivative. ;
% Using roughly equispaced initial nodes. ;
% Attempting to vectorize derivative calculation. ;
% Upgrading to jacpts instead of using orthopoly_node_weight_matrix_0. ;
% Measuring the l2-error instead of the l1-error. ;

if (nargin<1); N_pixel = 1.5; end;
%clear; N_pixel = 3.0;

setup;verbose=1;n_figure = 0;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% generate grids. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
n_point = 128; max_x_c = 1; 
[max_k_c,max_k_p,grid_x_c_,d_x_c,X_x_c_,Y_x_c_,R_x_c_,W_x_c_,grid_k_c_,d_k_c,X_k_c_,Y_k_c_,R_k_c_,W_k_c_,grid_x_r_,grid_x_w_,R_x_p_,W_x_p_,grid_k_r_,d_k_r,grid_k_w_,d_k_w,R_k_p_,W_k_p_,X_k_p_,Y_k_p_] = test_F_grid_0(n_point,max_x_c);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% Determine svd expansion ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
%N_pixel = 0.5; % number of wavelengths allowed in displacement grid. ;
%eps_target = 0.1; % tolerance used for svd-expansion. ;
l_max = 32; % maximum order of bessel-functions to retain. ;
n_r_degree = 63; % degree of orthonormal-polynomial to use for r = |k|. ;
n_d_degree = 65; % degree of orthonormal-polynomial to use for d = |delta|. ;
R_target = max_k_p-0.5; z_target = N_pixel*pi*sqrt(2); D_target = z_target/(2*pi*R_target);

flag_skip=0;
if ~flag_skip;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% compare T with svd-expansion on ray from a jacobi polar grid. ;
% slightly faster than above ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
if (N_pixel<=5.0); l_max = 48; end;
if (N_pixel> 5.0); l_max=96; end;
n_r_degree = 96; n_d_degree = 96;
eps_final = 1e-8;
clear n_svd_r svd_r_ svd_r_m svd_r_c svd_r_w_ svd_r_Jv_ n_svd_d svd_d_ svd_d_m svd_d_c svd_d_w_ svd_d_Jv_ n_svd_l svd_l_ svd_U_d_ svd_s_ svd_V_r_;
[n_svd_r,svd_r_,svd_r_m,svd_r_c,svd_r_w_,svd_r_Jv_,n_svd_d,svd_d_,svd_d_m,svd_d_c,svd_d_w_,svd_d_Jv_,n_svd_l,svd_l_,svd_U_d_,svd_s_,svd_V_r_] = gen_Jsvd_5b(max_k_p,N_pixel,eps_final,l_max,n_r_degree,n_d_degree);
if (max(svd_l_==l_max)); disp(sprintf(' %% Warning! svd_l_ equals l_max, you may want to increase l_max in test_F_23c')); end;
n_d_w = max(3,ceil(2*pi*n_d_degree)); n_d_w_ = n_d_w*ones(n_svd_d,1);
d_quad_weight_ = ( (2*pi/n_d_w)*ones(n_d_w,1) * transpose(svd_d_w_) ) .* ((D_target).^2/4);
n_w = max(3,ceil(2*pi*n_r_degree)); n_w_ = n_w*ones(n_svd_r,1);
r_quad_weight_ = ( (2*pi/n_w)*ones(n_w,1) * transpose(svd_r_w_) ) .* ((2*pi*R_target).^2/4);
delta_w = 1*pi/6; 
r_d_ = svd_r_; r_w_ = linspace(0,2*pi,n_w+1); r_w_ = r_w_(1:end-1); e_w_ = exp(+i*(transpose(r_w_)-delta_w)); 
U_d__ = zeros(n_svd_l,n_d_degree);
V_r__ = zeros(n_svd_l,n_r_degree);
XSV__ = zeros(n_w,n_r_degree,n_svd_l);
for ns=1:n_svd_l;
%disp(sprintf(' %% ns %d/%d',ns,n_svd_l));
U_d_ = zeros(1,n_d_degree);
for nkB=0:n_d_degree-1;
b_tmp = svd_d_Jv_{1+nkB}((reshape(svd_d_,1,n_d_degree) - svd_d_m)/svd_d_c);
U_d_ = U_d_ + svd_U_d_(1+nkB,ns)*b_tmp;
end;% for nkB=0:n_d_degree-1;
U_d__(ns,:) = U_d_;
V_r_ = zeros(1,n_r_degree);
for nkA=0:n_r_degree-1;
a_tmp = svd_r_Jv_{1+nkA}((reshape(svd_r_,1,n_r_degree) - svd_r_m)/svd_r_c);
V_r_ = V_r_ + svd_V_r_(1+nkA,ns)*a_tmp;
end;%for nkA=0:n_r_degree-1;
V_r__(ns,:) = V_r_;
XSV__(:,:,ns) = exp(-i*svd_l_(ns)*pi/2)*(e_w_.^(svd_l_(ns)) * V_r__(ns,:));
end;%for ns=1:n_svd_l;
%%%%%%%%;
%%
%
%%
%%%%%%%%;
[~,svd_j_] = sort(svd_s_,'descend'); [~,svd_j_] = sort(svd_j_);
%n_svd_term_ = 1 + floor(pi*[1,2,4,8,16].^2);
n_svd_term_ = 1 + floor(pi*[1:8].^2);
E2_abs__ = zeros(n_d_degree,length(n_svd_term_));
E2_rel__ = zeros(n_d_degree,length(n_svd_term_));
for nsvd_term_ = 1:length(n_svd_term_);
n_svd_term = n_svd_term_(nsvd_term_);
for ndelta = 1:n_svd_d;
delta_d = svd_d_(ndelta);
nkB = ndelta-1;
disp(sprintf(' %% %% ndelta %d/%d; delta_d %f',ndelta,n_svd_d,delta_d));
[T_k_p_] = test_F_T_k_p_1(r_d_,r_w_,delta_d,delta_w);
Tlim_k = [-1,+1]; 
X_k_p_ = zeros(n_w,n_r_degree);
for ns=1:n_svd_l;
if (svd_j_(ns)<=n_svd_term);
X_k_p_ = X_k_p_ + U_d__(ns,1+nkB).*svd_s_(ns).*XSV__(:,:,ns);
end;%if (svd_j_(ns)<=n_svd_term);
end;%for ns=1:n_svd_l;
Xlim_k = [-1,+1];
Dlim_k = sqrt(10)*eps_final*[-1,+1];
flag_disp=0;
if flag_disp;
subplot(2,3,1); polarpatch_adaptive(r_d_,n_w_,real(T_k_p_(:)),colormap(colormap_beach(64)),Tlim_k,-1.25*2*pi*R_target,0,1); title('real(T)'); set(gca,'Xtick',[],'Ytick',[]); axis equal;
subplot(2,3,4); polarpatch_adaptive(r_d_,n_w_,imag(T_k_p_(:)),colormap(colormap_beach(64)),Tlim_k,-1.25*2*pi*R_target,0,1); title('imag(T)'); set(gca,'Xtick',[],'Ytick',[]); axis equal;
subplot(2,3,2); polarpatch_adaptive(r_d_,n_w_,real(X_k_p_(:)),colormap(colormap_beach(64)),Xlim_k,-1.25*2*pi*R_target,0,1); title('real(X)'); set(gca,'Xtick',[],'Ytick',[]); axis equal;
subplot(2,3,5); polarpatch_adaptive(r_d_,n_w_,imag(X_k_p_(:)),colormap(colormap_beach(64)),Xlim_k,-1.25*2*pi*R_target,0,1); title('imag(X)'); set(gca,'Xtick',[],'Ytick',[]); axis equal;
subplot(2,3,3); polarpatch_adaptive(r_d_,n_w_,real(T_k_p_(:)-X_k_p_(:)),colormap(colormap_beach(64)),Dlim_k,-1.25*2*pi*R_target,0,1); title(sprintf('real(T-X) %0.2f',Dlim_k(2))); set(gca,'Xtick',[],'Ytick',[]); axis equal;
subplot(2,3,6); polarpatch_adaptive(r_d_,n_w_,imag(T_k_p_(:)-X_k_p_(:)),colormap(colormap_beach(64)),Dlim_k,-1.25*2*pi*R_target,0,1); title(sprintf('imag(T-X) %0.2f',Dlim_k(2))); set(gca,'Xtick',[],'Ytick',[]); axis equal;
drawnow();
end;%if flag_disp;
tmp_1 = sum(sum((abs(T_k_p_ - X_k_p_).^2).*r_quad_weight_));
tmp_2 = sum(sum((abs(T_k_p_).^2).*r_quad_weight_));
tmp_E2_abs = tmp_1; tmp_E2_rel = tmp_1./tmp_2;
E2_abs__(ndelta,nsvd_term_) = tmp_E2_abs;
E2_rel__(ndelta,nsvd_term_) = tmp_E2_rel;
end;%for ndelta = 1:n_svd_d;
end;%for nsvd_term_ = 1:length(n_svd_term_);
E2_abs_ = transpose(E2_abs__)*svd_d_w_*2*pi .* ((D_target).^2/4) / (pi*(D_target).^2);
E2_rel_ = transpose(E2_rel__)*svd_d_w_*2*pi .* ((D_target).^2/4) / (pi*(D_target).^2);
%%%%%%%%;
flag_disp=0;
if flag_disp;
n_figure = n_figure+1; figure(n_figure); clf;
subplot(2,2,1); plot(svd_d_*(R_target),log10(E2_abs__)); xlabel('d*R'); ylabel('log10(E)'); title('E abs'); xlim([0,D_target*R_target]); ylim([-10,5]);
subplot(2,2,2); plot(svd_d_*(R_target),log10(E2_rel__)); xlabel('d*R'); ylabel('log10(E)'); title('E rel'); xlim([0,D_target*R_target]); ylim([-10,0]);
subplot(2,2,3); plot(-log10(eps_target_),log10(E2_rel_),'ro-'); xlabel('-log10(eps)'); ylabel('log10(E)'); title('E rel');
subplot(2,2,4); plot(n_svd_term_,log10(E2_rel_),'ro-'); xlabel('n terms'); ylabel('log10(E)'); title('E rel');
fname_base = sprintf('test_F23c_E2_N%.2d',round(10*N_pixel));
print('-djpeg',sprintf('./dir_svd/%s.jpg',fname_base));
print('-depsc',sprintf('./dir_svd/%s.eps',fname_base));
%disp('returning'); return;
end;%if flag_disp;
end;%if ~flag_skip;

flag_skip=0;
if ~flag_skip;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% compare T with brute-force + linear-interpolation on ray from a jacobi polar grid. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
jj_ = @(delta) besselj(0,delta*(2*pi*R_target)) + besselj(2,delta*(2*pi*R_target));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% First svd-expansion; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
verbose=1;
eps_target = 1.0; l_max=0; n_r_degree = 63; n_d_degree = 128;
%%%%%%%%;
n_d_w = max(3,ceil(2*pi*n_d_degree)); n_d_w_ = n_d_w*ones(n_svd_d,1);
d_quad_weight_ = ( (2*pi/n_d_w)*ones(n_d_w,1) * transpose(svd_d_w_) ) .* ((D_target).^2/4);
n_w = max(3,ceil(2*pi*n_r_degree)); n_w_ = n_w*ones(n_svd_r,1);
r_quad_weight_ = ( (2*pi/n_w)*ones(n_w,1) * transpose(svd_r_w_) ) .* ((2*pi*R_target).^2/4);
r_d_ = svd_r_; r_w_ = linspace(0,2*pi,n_w+1); r_w_ = r_w_(1:end-1); 
delta_w = 1*pi/6; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% Now brute-force + linear-interpolation;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
verbose=1;
%n_node_ = 1 + [1,2,4,8,16,32,64];
n_node_ = 1 + [1:8];
delta_d_node_all_ = [];
for nnode_=1:length(n_node_);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
n_node = n_node_(nnode_);
%if (verbose); disp(sprintf(' %% n_node %f',n_node)); end;
%T_k_p__ = cell(n_node,1);
delta_d_node_ = zeros(n_node,1);
for nnode=1:n_node;
delta_d = D_target * ((nnode-1)/(n_node-1)); delta_w = 1*pi/6;
delta_d_node_(nnode) = delta_d;
%T_k_p__{nnode} = test_F_T_k_p_1(r_d_,r_w_,delta_d,delta_w);
end;%for nnode=1:n_node;
delta_d_node_all_ = union(delta_d_node_all_,delta_d_node_);
end;%for nnode_=1:length(n_node_);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
delta_d_sample_ = union(union(svd_d_,delta_d_node_all_),linspace(0,D_target,1024)); n_delta_d_sample = length(delta_d_sample_);
[~,~,svd_to_sample_] = intersect(svd_d_,delta_d_sample_,'stable');
F2_abs__ = zeros(n_delta_d_sample,length(n_node_));
F2_rel__ = zeros(n_delta_d_sample,length(n_node_));
for nnode_=1:length(n_node_);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
n_node = n_node_(nnode_);
if (verbose); disp(sprintf(' %% n_node %f',n_node)); end;
%T_k_p__ = cell(n_node,1);
delta_d_node_ = zeros(n_node,1);
for nnode=1:n_node;
delta_d = D_target * ((nnode-1)/(n_node-1)); delta_w = 1*pi/6;
delta_d_node_(nnode) = delta_d;
%T_k_p__{nnode} = test_F_T_k_p_1(r_d_,r_w_,delta_d,delta_w);
end;%for nnode=1:n_node;
%%%%%%%%%%%%%%%%;
for nd=1:n_delta_d_sample;
%%%%%%%%%%%%%%%% ;
delta_d_sample = delta_d_sample_(nd); delta_w = 1*pi/6; 
nnode_pre = max(find(delta_d_node_<=delta_d_sample));
nnode_pos = min(find(delta_d_node_>=delta_d_sample));
if (nnode_pre==nnode_pos); tmp_error = 0; end;
if (nnode_pre<nnode_pos); 
delta_d_all = delta_d_node_(nnode_pos) - delta_d_node_(nnode_pre);
delta_d_pre = delta_d_sample - delta_d_node_(nnode_pre);
delta_d_pos = delta_d_node_(nnode_pos) - delta_d_sample;
w_pre = delta_d_pos/delta_d_all;
w_pos = delta_d_pre/delta_d_all;
%[T_k_p_] = test_F_T_k_p_1(r_d_,r_w_,delta_d_sample,delta_w);
%%%%%%%%%%%%%%%% ;
%ij_par = find(abs(delta_d_node_ - delta_d_sample)<1e-7);
%if (~isempty(ij_par)); 
%if (verbose>1); disp(sprintf(' %% nd %d delta_d_sample %f ij_par %d',nd,delta_d_sample,ij_par)); end;
%B_k_p_ = T_k_p__{ij_par};
%end;%if (~isempty(ij_par)); 
%if (isempty(ij_par));
%ij_pre = max(find(delta_d_node_<delta_d_sample));
%ij_pos = min(find(delta_d_node_>delta_d_sample));
%if (verbose>2); disp(sprintf(' %% nd %d delta_d_sample %f ij_pre %d ij_pos %d',nd,delta_d_sample,ij_pre,ij_pos)); end;
%d_pre = delta_d_sample - delta_d_node_(ij_pre); d_pos = delta_d_node_(ij_pos) - delta_d_sample;
%w_pre = d_pos/(d_pos+d_pre); w_pos = d_pre/(d_pos+d_pre);
%B_k_p_ = w_pre*T_k_p__{ij_pre} + w_pos*T_k_p__{ij_pos};
%end;%if (isempty(ij_par));
tmp_error = pi*(2*pi*R_target)^2 * ( w_pre^2 + w_pos^2 + 2*w_pre*w_pos*jj_(delta_d_pre+delta_d_pos) + 1 - 2*w_pre*jj_(delta_d_pre) - 2*w_pos*jj_(delta_d_pos) );
end;%if (nnode_pre<nnode_pos); 
%%%%%%%%%%%%%%%% ;
%tmp_1 = sum(sum((abs(T_k_p_ - B_k_p_).^2).*r_quad_weight_));
tmp_3 = tmp_error;
%tmp_2 = sum(sum((abs(T_k_p_).^2).*r_quad_weight_));
tmp_2 = pi*(2*pi*R_target)^2;
%tmp_F2_abs = tmp_1; tmp_F2_rel = tmp_1./tmp_2;
tmp_F2_abs = tmp_3; tmp_F2_rel = tmp_3./tmp_2;
F2_abs__(nd,nnode_) = tmp_F2_abs;
F2_rel__(nd,nnode_) = tmp_F2_rel;
%%%%%%%%%%%%%%%% ;
end;%for nd=1:n_delta_d_sample;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
end;%for nnode_=1:length(n_node_);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
F2_abs_ = transpose(F2_abs__(svd_to_sample_,:))*svd_d_w_*2*pi .* ((D_target).^2/4) / (pi*(D_target).^2);
F2_rel_ = transpose(F2_rel__(svd_to_sample_,:))*svd_d_w_*2*pi .* ((D_target).^2/4) / (pi*(D_target).^2);
%%%%%%%%;
flag_disp=0;
if flag_disp;
n_figure = n_figure+1; figure(n_figure); clf;
%subplot(2,2,1); plot(svd_d_,log10(F2_abs__)); xlabel('d'); ylabel('log10(F)'); title('F abs');
%subplot(2,2,2); plot(svd_d_,log10(F2_rel__)); xlabel('d'); ylabel('log10(F)'); title('F rel');
subplot(2,2,1); plot(delta_d_sample_*R_target,log10(max(1e-10,F2_abs__))); xlabel('d*R'); ylabel('log10(F)'); title('F abs'); xlim([0,D_target*R_target]); ylim([-10,5]);
subplot(2,2,2); plot(delta_d_sample_*R_target,log10(max(1e-10,F2_rel__))); xlabel('d*R'); ylabel('log10(F)'); title('F rel'); xlim([0,D_target*R_target]); ylim([-10,0]);
subplot(2,2,3); plot(n_node_,log10(F2_rel_),'bs-'); xlabel('n nodes'); ylabel('log10(F)'); title('F rel');
subplot(2,2,4); plot(ceil(pi*n_node_.^2),log10(F2_rel_),'bs-'); xlabel('n terms'); ylabel('log10(F)'); title('F rel');
fname_base = sprintf('test_F23c_F2_N%.2d',round(10*N_pixel));
print('-djpeg',sprintf('./dir_svd/%s.jpg',fname_base));
print('-depsc',sprintf('./dir_svd/%s.eps',fname_base));
%disp('returning'); return;
end;%if flag_disp;
end;%if ~flag_skip;

flag_skip=0;
if ~flag_skip;
n_figure = n_figure+1; figure(n_figure); clf;
subplot(1,1,1);
hold on;
plot(svd_d_*R_target,log10(max(1e-14,E2_rel__)),'g-','LineWidth',2); 
plot(delta_d_sample_*R_target,log10(max(1e-14,F2_rel__)),'r-','LineWidth',0.5); 
xlim([0,D_target*R_target]); ylim([-14,0.25]);
set(gca,'XTick',0:0.5:2.0,'YTick',-14:2:0);
xlabel('d*R'); ylabel('log10(error)'); title('relative error');
%legend('svd-expansion','linear-interpolation');
fname_base = sprintf('test_F23c_E2vsF2_N%.2d_FigA',round(10*N_pixel));
print('-djpeg',sprintf('./dir_svd/%s.jpg',fname_base));
print('-depsc',sprintf('./dir_svd/%s.eps',fname_base));
end;%if ~flag_skip;
