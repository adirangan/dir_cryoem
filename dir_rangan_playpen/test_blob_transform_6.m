clear; setup; verbose=1; n_figure = 1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% generate grids. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
n_point = 32; max_x_c = 1; 
[max_k_c,max_k_p,grid_x_c_,d_x_c,X_x_c_,Y_x_c_,R_x_c_,W_x_c_,grid_k_c_,d_k_c,X_k_c_,Y_k_c_,R_k_c_,W_k_c_,grid_x_r_,grid_x_w_,R_x_p_,W_x_p_,grid_k_r_,d_k_r,grid_k_w_,d_k_w,R_k_p_,W_k_p_,X_k_p_,Y_k_p_] = test_F_grid_0(n_point,max_x_c);
n_x_c = length(grid_x_c_); max_x_c = 1;     n_x_r = length(grid_x_r_); n_x_w = length(grid_x_w_); n_x_w_ = n_x_w*ones(n_x_r,1); n_x_A = sum(n_x_w_);
n_k_c = length(grid_k_c_); max_k_c = n_k_c; n_k_r = length(grid_k_r_); n_k_w = length(grid_k_w_); n_k_w_ = n_k_w*ones(n_k_r,1); n_k_A = sum(n_k_w_);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% Set parameters for svd expansion ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
N_pixel = 4.5; % number of wavelengths allowed in displacement grid. ;
eps_target = 0.001; % tolerance used for svd-expansion. ;
if (N_pixel<=5.0); l_max = 32; n_k_degree = 63; n_d_degree = 65; end;
if (N_pixel> 5.0); l_max=96; n_k_degree = 94; n_d_degree = 98; end;
l_max = 8; n_k_degree = 12; n_d_degree = 13;
K_target = max_k_p-0.5; z_target = N_pixel*pi*sqrt(2); D_target = z_target/(2*pi*K_target);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% Calculate svd-expansion. ; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
clear n_svd_k svd_k_ svd_k_m svd_k_c svd_k_w_ svd_k_Jv_ n_svd_d svd_d_ svd_d_m svd_d_c svd_d_w_ svd_d_Jv_ n_svd_l svd_l_ svd_U_d_ svd_s_ svd_V_k_;
[n_svd_k,svd_r_,svd_r_m,svd_r_c,svd_r_w_,svd_r_Jv_,n_svd_d,svd_d_,svd_d_m,svd_d_c,svd_d_w_,svd_d_Jv_,n_svd_l,svd_l_,svd_U_d_,svd_s_,svd_V_k_] = gen_Jsvd_5b(max_k_p,N_pixel,eps_target,l_max,n_k_degree,n_d_degree);
svd_k_ = svd_r_/(2*pi); svd_k_m = svd_r_m/(2*pi); svd_k_c = svd_r_c/(2*pi); svd_k_w_ = svd_r_w_;
if (max(svd_l_==l_max)); disp(sprintf(' %% Warning! svd_l_ equals l_max, you may want to increase l_max in test_F_23c')); end;
%%%%%%%%;
n_eta_max = 0; for nl=-l_max:l_max; n_eta_max = max(n_eta_max,length(find(svd_l_==nl))); end;
svd_s__ = zeros(2*l_max+1,n_eta_max);
for nl=-l_max:l_max; 
tmp_ij_ = find(svd_l_==nl);
tmp_s_ = sort(svd_s_(tmp_ij_),'descend');
assert(length(tmp_s_)<=n_eta_max);
svd_s__(1+l_max+nl,1:length(tmp_s_)) = tmp_s_;
end;%for nl=-l_max:l_max; 
flag_plot=0;
if flag_plot;
colormap('hot');
imagesc(log10(svd_s__),[-10,1]); %colorbar;
set(gca,'YTick',1:2*l_max+1,'YTickLabel',-l_max:l_max,'XTick',1:n_eta_max,'XTickLabel',1:n_eta_max);
xlabel('term number'); ylabel('bessel order'); title('magnitude of \Sigma');
set(gcf,'Position',1+[0,0,512,1024]);
end;%if flag_plot;
%%%%%%%%;
grid_d_r_ = svd_d_; n_d_r = length(grid_d_r_); n_d_w = max(3,ceil(2*pi*n_d_degree)); n_d_w_ = n_d_w*ones(n_svd_d,1);
d_p_quad_weight_ = ( (2*pi/n_d_w)*ones(n_d_w,1) * transpose(svd_d_w_) ) .* ((D_target).^2/4);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% Redefine frequency-space polar grid. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
grid_k_r_ = svd_k_; n_k_r = length(grid_k_r_); n_k_w = max(3,ceil(2*pi*n_k_degree)); n_k_w_ = n_k_w*ones(n_svd_k,1); n_k_A = sum(n_k_w_);
grid_k_w_ = linspace(0,2*pi,n_k_w+1); grid_k_w_ = reshape(grid_k_w_(1:end-1),n_k_w,1);
k_p_quad_weight_ = ( (2*pi/n_k_w)*ones(n_k_w,1) * transpose(svd_k_w_) ) .* ((K_target).^2/4);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% generate blobs. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
F_x_c_ = zeros(n_x_c,n_x_c);
G_x_c_ = zeros(n_x_c,n_x_c);
tic;
n_F = 32;
for nF=1:n_F;
tmp_t = 1.5 + (nF-1)/(n_F-1);
tmp_x_c = 0*max_x_c/2 -0.1 + 0.0625*(tmp_t-1).^2.25 + 0.125*tmp_t*cos(+13.0*2*pi*tmp_t); 
tmp_y_c = 0*max_x_c/2 + 0.125*tmp_t*sin(+14.0*2*pi*tmp_t); 
tmp_sx = 1/64; tmp_sx = (1/48) * (1.50 + (2-tmp_t)*sin(+5.0*2*pi*tmp_t));
tmp_sy = 1/64; tmp_sy = (1/64) * (1.50 + (2-tmp_t)*cos(+2.0*2*pi*tmp_t));
tmp_gamma = 2*pi*tmp_t; tmp_c = cos(tmp_gamma); tmp_s = sin(tmp_gamma);
tmp_X_x_c_ = X_x_c_ - (tmp_x_c); tmp_Y_x_c_ = Y_x_c_ - (tmp_y_c);
tmp_X2_x_c_ = tmp_c*tmp_X_x_c_ - tmp_s*tmp_Y_x_c_; tmp_Y2_x_c_ = tmp_s*tmp_X_x_c_ + tmp_c*tmp_Y_x_c_;
tmp_R_x_c_ = exp( - tmp_X2_x_c_.^2/2/tmp_sx.^2 - tmp_Y2_x_c_.^2/2/tmp_sy.^2); tmp_W_x_c_ = atan2(tmp_Y_x_c_,tmp_X_x_c_);
F_x_c_ = F_x_c_ + 1/(2*pi*tmp_sx*tmp_sy) * tmp_R_x_c_ ;
tmp_x_c = 0*max_x_c/2 -0.1 + 0.0625*(tmp_t-1).^2.25 + 0.125*tmp_t*cos(+13.0*2*pi*tmp_t) + 0.01*tmp_t*sin(+16.0*2*pi*tmp_t);
tmp_y_c = 0*max_x_c/2 + 0.125*tmp_t*sin(+14.0*2*pi*tmp_t) + 0.01*tmp_t*cos(+3.0*2*pi*tmp_t); 
tmp_sx = 1/64; tmp_sx = (1/48) * (1.50 + (2-tmp_t)*sin(+5.0*2*pi*tmp_t));
tmp_sy = 1/64; tmp_sy = (1/64) * (1.50 + (2-tmp_t)*cos(+2.0*2*pi*tmp_t));
tmp_gamma = 2*pi*tmp_t; tmp_c = cos(tmp_gamma); tmp_s = sin(tmp_gamma);
tmp_X_x_c_ = X_x_c_ - (tmp_x_c); tmp_Y_x_c_ = Y_x_c_ - (tmp_y_c);
tmp_X2_x_c_ = tmp_c*tmp_X_x_c_ - tmp_s*tmp_Y_x_c_; tmp_Y2_x_c_ = tmp_s*tmp_X_x_c_ + tmp_c*tmp_Y_x_c_;
tmp_R_x_c_ = exp( - tmp_X2_x_c_.^2/2/tmp_sx.^2 - tmp_Y2_x_c_.^2/2/tmp_sy.^2); tmp_W_x_c_ = atan2(tmp_Y_x_c_,tmp_X_x_c_);
G_x_c_ = G_x_c_ + 1/(2*pi*tmp_sx*tmp_sy) * tmp_R_x_c_ ;
end;%for nF=1:n_F;
n_E = 128;
for nE=1:n_E;
tmp_t = (nE-1)/(n_E-1);
tmp_x_c = 0*max_x_c/2 + 0.05*(tmp_t-1) + 0.5*tmp_t*cos(+22.7*2*pi*tmp_t) - 0.06; 
tmp_y_c = 0*max_x_c/2 + 0.05*(tmp_t-1) + 0.5*tmp_t*sin(+28.2*2*pi*tmp_t) + 0.01; 
tmp_sx = 1/64; tmp_sy = 1/64;
tmp_gamma = 0; tmp_c = cos(tmp_gamma); tmp_s = sin(tmp_gamma);
tmp_X_x_c_ = X_x_c_ - (tmp_x_c); tmp_Y_x_c_ = Y_x_c_ - (tmp_y_c);
tmp_X2_x_c_ = tmp_c*tmp_X_x_c_ - tmp_s*tmp_Y_x_c_; tmp_Y2_x_c_ = tmp_s*tmp_X_x_c_ + tmp_c*tmp_Y_x_c_;
tmp_R_x_c_ = exp( - tmp_X2_x_c_.^2/2/tmp_sx.^2 - tmp_Y2_x_c_.^2/2/tmp_sy.^2); tmp_W_x_c_ = atan2(tmp_Y_x_c_,tmp_X_x_c_);
F_x_c_ = F_x_c_ + 0.125 * 1/(2*pi*tmp_sx*tmp_sy) * tmp_R_x_c_ ;
tmp_x_c = 0*max_x_c/2 + 0.05*(tmp_t-1) + 0.5*tmp_t*cos(+9.4*2*pi*tmp_t) + 0.03; 
tmp_y_c = 0*max_x_c/2 + 0.05*(tmp_t-1) + 0.5*tmp_t*sin(+4.9*2*pi*tmp_t) - 0.02; 
tmp_sx = 1/64; tmp_sy = 1/64;
tmp_gamma = 0; tmp_c = cos(tmp_gamma); tmp_s = sin(tmp_gamma);
tmp_X_x_c_ = X_x_c_ - (tmp_x_c); tmp_Y_x_c_ = Y_x_c_ - (tmp_y_c);
tmp_X2_x_c_ = tmp_c*tmp_X_x_c_ - tmp_s*tmp_Y_x_c_; tmp_Y2_x_c_ = tmp_s*tmp_X_x_c_ + tmp_c*tmp_Y_x_c_;
tmp_R_x_c_ = exp( - tmp_X2_x_c_.^2/2/tmp_sx.^2 - tmp_Y2_x_c_.^2/2/tmp_sy.^2); tmp_W_x_c_ = atan2(tmp_Y_x_c_,tmp_X_x_c_);
G_x_c_ = G_x_c_ + 0.125 * 1/(2*pi*tmp_sx*tmp_sy) * tmp_R_x_c_ ;
end;%for nE=1:n_E;
tmp_gamma = 2*pi/12; G_x_c_ = rotate_c_to_c(n_x_c,max_x_c,n_x_c,max_x_c,G_x_c_,tmp_gamma);
F_x_c_ = F_x_c_ - mean(F_x_c_(:));
G_x_c_ = G_x_c_ - mean(G_x_c_(:));
Flim_x = max(0,mean(F_x_c_(:)) + 1.0*std(F_x_c_(:))*[-1,+1]);
Glim_x = max(0,mean(G_x_c_(:)) + 1.0*std(G_x_c_(:))*[-1,+1]);
disp(sprintf(' %% calculating F_x_c_ G_x_c_: time %f',toc));
%%%%%%%%;
F_x_p_ = interp_c_to_p(n_x_c,max_x_c,n_x_c,max_x_c,F_x_c_,n_x_r,grid_x_r_,n_x_w_,n_x_A);
G_x_p_ = interp_c_to_p(n_x_c,max_x_c,n_x_c,max_x_c,G_x_c_,n_x_r,grid_x_r_,n_x_w_,n_x_A);
flag_plot=1;
if flag_plot;
figure(n_figure); clf; n_figure = n_figure + 1;
colormap(1-colormap('gray'));
subplot(2,2,1);imagesc(recenter2(real(transpose(F_x_c_))),Flim_x);title('A1','interpreter','none'); set(gca,'Ydir','normal'); xlim([1,n_x_c]); ylim([1,n_x_c]); axis square;
set(gca,'XTick',[1,n_x_c/2+1,n_x_c],'XTickLabel',[grid_x_c_(1),grid_x_c_(end/2+1),floor(10*grid_x_c_(end))/10]-max_x_c/2);set(gca,'YTick',[1,n_x_c/2+1,n_x_c],'YTickLabel',[grid_x_c_(1),grid_x_c_(end/2+1),floor(10*grid_x_c_(end))/10]-max_x_c/2);
subplot(2,2,2);imagesc(recenter2(real(transpose(G_x_c_))),Glim_x);title('A2','interpreter','none'); set(gca,'Ydir','normal'); xlim([1,n_x_c]); ylim([1,n_x_c]); axis square;
set(gca,'XTick',[1,n_x_c/2+1,n_x_c],'XTickLabel',[grid_x_c_(1),grid_x_c_(end/2+1),floor(10*grid_x_c_(end))/10]-max_x_c/2);set(gca,'YTick',[1,n_x_c/2+1,n_x_c],'YTickLabel',[grid_x_c_(1),grid_x_c_(end/2+1),floor(10*grid_x_c_(end))/10]-max_x_c/2);
subplot(2,2,3); polarpatch_adaptive(grid_x_r_,n_x_w_,real(F_x_p_(:)),colormap(1-colormap('gray')),Flim_x,0,0,1); title('real(F)'); set(gca,'Xtick',[],'Ytick',[]); axis equal;
subplot(2,2,4); polarpatch_adaptive(grid_x_r_,n_x_w_,real(G_x_p_(:)),colormap(1-colormap('gray')),Glim_x,0,0,1); title('real(G)'); set(gca,'Xtick',[],'Ytick',[]); axis equal;
set(gcf,'Position',1+[0,0,512,512]);
end;%if flag_plot;
%%%%%%%%;
F_k_c_ = fft2(F_x_c_)/n_x_c.^2;
G_k_c_ = fft2(G_x_c_)/n_x_c.^2;
F_k_p_ = interp_c_to_p(n_k_c,max_k_c,n_k_c,max_k_c,F_k_c_,n_k_r,grid_k_r_,n_k_w_,n_k_A); F_k_p_ = reshape(F_k_p_,n_k_w,n_k_degree);
G_k_p_ = interp_c_to_p(n_k_c,max_k_c,n_k_c,max_k_c,G_k_c_,n_k_r,grid_k_r_,n_k_w_,n_k_A); G_k_p_ = reshape(G_k_p_,n_k_w,n_k_degree);
Flim_k = max(0,mean(abs(F_k_c_(:))) + 0.5*std(abs(F_k_c_(:)))*[-1,+1]);
Glim_k = max(0,mean(abs(G_k_c_(:))) + 0.5*std(abs(G_k_c_(:)))*[-1,+1]);
flag_plot=1;
if flag_plot;
figure(n_figure); clf; n_figure = n_figure + 1;
colormap(colormap_beach());
subplot(2,2,1);imagesc(recenter2(real(transpose(F_k_c_))),Flim_k);title('A1','interpreter','none'); set(gca,'Ydir','normal'); xlim([1,n_k_c]); ylim([1,n_k_c]); axis square;
set(gca,'XTick',[1,n_k_c/2+1,n_k_c],'XTickLabel',[grid_k_c_(1),grid_k_c_(end/2+1),floor(10*grid_k_c_(end))/10]-max_k_c/2);set(gca,'YTick',[1,n_k_c/2+1,n_k_c],'YTickLabel',[grid_k_c_(1),grid_k_c_(end/2+1),floor(10*grid_k_c_(end))/10]-max_k_c/2);
subplot(2,2,2);imagesc(recenter2(real(transpose(G_k_c_))),Glim_k);title('A2','interpreter','none'); set(gca,'Ydir','normal'); xlim([1,n_k_c]); ylim([1,n_k_c]); axis square;
set(gca,'XTick',[1,n_k_c/2+1,n_k_c],'XTickLabel',[grid_k_c_(1),grid_k_c_(end/2+1),floor(10*grid_k_c_(end))/10]-max_k_c/2);set(gca,'YTick',[1,n_k_c/2+1,n_k_c],'YTickLabel',[grid_k_c_(1),grid_k_c_(end/2+1),floor(10*grid_k_c_(end))/10]-max_k_c/2);
subplot(2,2,3); polarpatch_adaptive(grid_k_r_,n_k_w_,real(F_k_p_(:)),colormap(colormap_beach()),Flim_k,0,0,1); title('real(F)'); set(gca,'Xtick',[],'Ytick',[]); axis equal;
subplot(2,2,4); polarpatch_adaptive(grid_k_r_,n_k_w_,real(G_k_p_(:)),colormap(colormap_beach()),Glim_k,0,0,1); title('real(G)'); set(gca,'Xtick',[],'Ytick',[]); axis equal;
set(gcf,'Position',1+[0,0,512,512]);
end;%if flag_plot;
%%%%%%%%;
F_k_q_ = interp_p_to_q(n_k_r,n_k_w_,n_k_A,F_k_p_(:)); F_k_q_ = reshape(F_k_q_,n_k_w,n_k_degree);
G_k_q_ = interp_p_to_q(n_k_r,n_k_w_,n_k_A,G_k_p_(:)); G_k_q_ = reshape(G_k_q_,n_k_w,n_k_degree);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Use svd-expansion to calculate U_d_ and V_k_. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
U_d__ = zeros(n_svd_l,n_d_degree);
V_k__ = zeros(n_svd_l,n_k_degree);
for ns=1:n_svd_l;
%disp(sprintf(' %% ns %d/%d',ns,n_svd_l));
U_d_ = zeros(1,n_d_degree);
for nd=0:n_d_degree-1;
b_tmp = svd_d_Jv_{1+nd}((reshape(svd_d_,1,n_d_degree) - svd_d_m)/svd_d_c);
U_d_ = U_d_ + svd_U_d_(1+nd,ns)*b_tmp;
end;%for nd=0:n_d_degree-1;
U_d__(ns,:) = U_d_;
V_k_ = zeros(1,n_k_degree);
for nk=0:n_k_degree-1;
a_tmp = svd_r_Jv_{1+nk}((reshape(svd_k_,1,n_k_degree) - svd_k_m)/svd_k_c);
V_k_ = V_k_ + svd_V_k_(1+nk,ns)*a_tmp;
end;%for nk=0:n_k_degree-1;
V_k__(ns,:) = V_k_;
end;%for ns=1:n_svd_l;
%%%%%%%%;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% First test out translation operator. ;
% We use an 'off-grid' translation. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
tmp_nd = round(n_d_degree*0.75);
delta_r = 0.5*(grid_d_r_(tmp_nd)+grid_d_r_(tmp_nd+1)); delta_w = 1*pi/6;
T_tru_ = transpose(exp(-i*(delta_r*svd_r_) * cos(transpose(grid_k_w_) - delta_w)));
%%%%%%%%;
e_w_ = exp(+i*(grid_k_w_-delta_w)); 
V_k___ = zeros(n_k_w,n_k_degree,n_svd_l);
for ns=1:n_svd_l;
V_k___(:,:,ns) = exp(-i*svd_l_(ns)*pi/2)*(e_w_.^(svd_l_(ns)) * V_k__(ns,:));
end;%for ns=1:n_svd_l;
U_d_ = zeros(n_svd_l,1);
for ns=1:n_svd_l;
for nd=0:n_d_degree-1;
b_tmp = svd_d_Jv_{1+nd}((delta_r - svd_d_m)/svd_d_c);
U_d_(ns) = U_d_(ns) + svd_U_d_(1+nd,ns)*b_tmp;
end;%for nd=0:n_d_degree-1;
end;%for ns=1:n_svd_l;
T_svd_ = zeros(n_k_w,n_k_degree);
for ns=1:n_svd_l;
T_svd_ = T_svd_ + U_d_(ns).*svd_s_(ns).*V_k___(:,:,ns);
end;%for ns=1:n_svd_l;
Tlim_k = [-1,+1];
flag_plot=1;
if flag_plot;
figure(n_figure); clf; n_figure = n_figure + 1;
subplot(2,3,1); polarpatch_adaptive(grid_k_r_,n_k_w_,real(T_tru_(:)),colormap(colormap_beach()),Tlim_k,0,0,1); title('real tru'); axis square;
subplot(2,3,2); polarpatch_adaptive(grid_k_r_,n_k_w_,real(T_svd_(:)),colormap(colormap_beach()),Tlim_k,0,0,1); title('real svd'); axis square;
subplot(2,3,3); polarpatch_adaptive(grid_k_r_,n_k_w_,real(T_tru_(:) - T_svd_(:)),colormap(colormap_beach()),eps_target*Tlim_k,0,0,1); title('real dif'); axis square;
subplot(2,3,4); polarpatch_adaptive(grid_k_r_,n_k_w_,imag(T_tru_(:)),colormap(colormap_beach()),Tlim_k,0,0,1); title('imag tru'); axis square;
subplot(2,3,5); polarpatch_adaptive(grid_k_r_,n_k_w_,imag(T_svd_(:)),colormap(colormap_beach()),Tlim_k,0,0,1); title('imag dif'); axis square;
subplot(2,3,6); polarpatch_adaptive(grid_k_r_,n_k_w_,imag(T_tru_(:) - T_svd_(:)),colormap(colormap_beach()),eps_target*Tlim_k,0,0,1); title('imag dif'); axis square;
end;%if flag_plot;

flag_skip=1;
if ~flag_skip;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now test out innerproduct for a particular translation. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
ngamma = round(n_k_w*0.125);
gamma_w = 2*pi*ngamma/n_k_w;
tmp_nd = round(n_d_degree*0.75);
delta_r = 0.5*(grid_d_r_(tmp_nd)+grid_d_r_(tmp_nd+1)); delta_w = 1*pi/6;
%%%%%%%%;
T_tru_ = transpose(exp(-i*(delta_r*svd_r_) * cos(transpose(grid_k_w_) - delta_w)));
H_k_p_ = G_k_p_( 1 + periodize( [0:n_k_w-1] + ngamma , 0 , n_k_w ) , : );
X_0 = sum(conj( F_k_p_(:) .* T_tru_(:) ).*H_k_p_(:).*k_p_quad_weight_(:));  %<-- true innerproduct in polar coordinates. ;
disp(sprintf(' %% %0.16f+i*%0.16f',real(X_0),imag(X_0)));
%%%%%%%%;
U_d_ = zeros(n_svd_l,1);
for ns=1:n_svd_l;
for nd=0:n_d_degree-1;
b_tmp = svd_d_Jv_{1+nd}((delta_r - svd_d_m)/svd_d_c);
U_d_(ns) = U_d_(ns) + svd_U_d_(1+nd,ns)*b_tmp;
end;%for nd=0:n_d_degree-1;
end;%for ns=1:n_svd_l;
%%%%%%%%;
T_svd_ = zeros(n_k_w,n_k_degree);
for ns=1:n_svd_l;
T_svd_ = T_svd_ + U_d_(ns).*svd_s_(ns).*V_k___(:,:,ns);
end;%for ns=1:n_svd_l;
%%%%%%%%;
X_1 = sum(conj( F_k_p_(:) .* T_svd_(:) ).*H_k_p_(:).*k_p_quad_weight_(:)); %<-- approximate innerproduct in polar coordinates. ;
disp(sprintf(' %% %0.16f+i*%0.16f',real(X_1),imag(X_1)));
%%%%%%%%;
X_2 = 0;  %<-- true innerproduct in bessel coordinates. ;
for npsi=1:n_k_w;
tmp_psi = grid_k_w_(npsi);
for nk=1:n_k_degree;
tmp_f = 0;
for nq2=0:n_k_w-1;
tmp_f = tmp_f + F_k_q_(1+nq2,nk)*exp(+i*nq2*(tmp_psi-gamma_w))*exp(-i*delta_r*svd_r_(nk)*cos(tmp_psi-gamma_w-delta_w))/sqrt(n_k_w); %<-- note that we divide by sqrt(n_k_w) to invert fourier-transform. ;
end;%for nq2=0:n_k_w-1;
tmp_g = 0;
for nq0=0:n_k_w-1;
tmp_psi = grid_k_w_(npsi);
tmp_g = tmp_g + G_k_q_(1+nq0,nk)*exp(+i*nq0*tmp_psi)/sqrt(n_k_w); %<-- note that we divide by sqrt(n_k_w) to invert fourier-transform. ;
end;%for nq0=0:n_k_w-1;
X_2 = X_2 + conj(tmp_f)*tmp_g*k_p_quad_weight_(1,nk);
end;%for nk=1:n_k_degree;
end;%for npsi=1:n_k_w;
disp(sprintf(' %% %0.16f+i*%0.16f',real(X_2),imag(X_2)));
%%%%%%%%;
X_3 = 0; X_4 = 0; %<-- true innerproducts. ;
for nk=1:n_k_degree;
for npsi=1:n_k_w;
tmp_psi = grid_k_w_(npsi);
tmp_f = 0; 
for nq2=0:n_k_w-1;
tmp_f = tmp_f + F_k_q_(1+nq2,nk)*exp(+i*nq2*(tmp_psi-gamma_w))*exp(-i*delta_r*svd_r_(nk)*cos(tmp_psi-gamma_w-delta_w))/sqrt(n_k_w);
end;%for nq2=0:n_k_w-1;
tmp_g = 0; 
for nq0=0:n_k_w-1;
tmp_g = tmp_g + G_k_q_(1+nq0,nk)*exp(+i*nq0*tmp_psi)/sqrt(n_k_w);
end;%for nq0=0:n_k_w-1;
X_3 = X_3 + conj(tmp_f)*tmp_g*k_p_quad_weight_(1,nk);
X_4 = X_4 + conj(F_k_p_(npsi,nk)*T_tru_(npsi,nk))*H_k_p_(npsi,nk)*k_p_quad_weight_(1,nk);
end;%for npsi=1:n_k_w;
end;%for nk=1:n_k_degree;
disp(sprintf(' %% %0.16f+i*%0.16f vs %0.16f+i*%0.16f',real(X_3),imag(X_3),real(X_4),imag(X_4)));
%%%%%%%%;
X_5 = 0; %<-- bessel-approximation to innerproduct. ;
for nk=1:n_k_degree;
for npsi=1:n_k_w;
tmp_psi = grid_k_w_(npsi);
tmp_f = 0; 
for nq2=0:n_k_w-1;
for nq1=[0:n_k_w-1]-n_k_w/2;
tmp_f = tmp_f + F_k_q_(1+nq2,nk)*exp(+i*nq2*(tmp_psi-gamma_w))*besselj(nq1,delta_r*svd_r_(nk))*exp(-i*nq1*pi/2)*exp(+i*nq1*(tmp_psi-gamma_w-delta_w))/sqrt(n_k_w);
end;%for nq1=[0:n_k_w-1]-n_k_w/2;
end;%for nq2=0:n_k_w-1;
tmp_g = 0; 
for nq0=0:n_k_w-1;
tmp_g = tmp_g + G_k_q_(1+nq0,nk)*exp(+i*nq0*tmp_psi)/sqrt(n_k_w);
end;%for nq0=0:n_k_w-1;
X_5 = X_5 + conj(tmp_f)*tmp_g*k_p_quad_weight_(1,nk);
end;%for npsi=1:n_k_w;
end;%for nk=1:n_k_degree;
disp(sprintf(' %% %0.16f+i*%0.16f',real(X_5),imag(X_5)));
%%%%%%%%;
X_6 = 0; %<-- bessel-approximation to innerproduct. ;
for nk=1:n_k_degree;
for npsi=1:n_k_w;
tmp_psi = grid_k_w_(npsi);
tmp_f = 0; 
for nq2=0:n_k_w-1;
for nq1=[0:n_k_w-1]-n_k_w/2;
nq3 = periodize(nq2-nq1,0,n_k_w);
tmp_f = tmp_f + F_k_q_(1+nq3,nk)*besselj(nq1,delta_r*svd_r_(nk))*exp(-i*nq1*pi/2)*exp(-i*nq1*delta_w)*exp(+i*nq2*(tmp_psi-gamma_w))/sqrt(n_k_w);
end;%for nq1=[0:n_k_w-1]-n_k_w/2;
end;%for nq2=0:n_k_w-1;
tmp_g = 0; 
for nq0=0:n_k_w-1;
tmp_g = tmp_g + G_k_q_(1+nq0,nk)*exp(+i*nq0*tmp_psi)/sqrt(n_k_w);
end;%for nq0=0:n_k_w-1;
X_6 = X_6 + conj(tmp_f)*tmp_g*k_p_quad_weight_(1,nk);
end;%for npsi=1:n_k_w;
end;%for nk=1:n_k_degree;
disp(sprintf(' %% %0.16f+i*%0.16f',real(X_6),imag(X_6)));
%%%%%%%%;
X_7 = 0; %<-- bessel-approximation to innerproduct. ;
for nk=1:n_k_degree;
for nq1=[0:n_k_w-1]-n_k_w/2;
for nq0=0:n_k_w-1;
nq3 = periodize(nq0-nq1,0,n_k_w);
X_7 = X_7 + conj(F_k_q_(1+nq3,nk))*G_k_q_(1+nq0,nk)*besselj(nq1,delta_r*svd_r_(nk))*exp(+i*nq1*pi/2)*exp(+i*nq1*delta_w)*exp(+i*nq0*(gamma_w)) * k_p_quad_weight_(1,nk);
end;%for nq0=0:n_k_w-1;
end;%for nq1=[0:n_k_w-1]-n_k_w/2;
end;%for nk=1:n_k_degree;
disp(sprintf(' %% %0.16f+i*%0.16f',real(X_7),imag(X_7)));
%%%%%%%%;
X_8 = 0; %<-- bessel-approximation to innerproduct. ;
tmp_h_ = zeros(n_k_w,1);
for nq0=0:n_k_w-1;
tmp_h = 0;
for nk=1:n_k_degree;
for nq1=[0:n_k_w-1]-n_k_w/2;
nq3 = periodize(nq0-nq1,0,n_k_w);
tmp_h = tmp_h + conj(F_k_q_(1+nq3,nk))*G_k_q_(1+nq0,nk)*besselj(nq1,delta_r*svd_r_(nk))*exp(+i*nq1*pi/2)*exp(+i*nq1*delta_w) * k_p_quad_weight_(1,nk);
end;%for nq1=[0:n_k_w-1]-n_k_w/2;
end;%for nk=1:n_k_degree;
tmp_h_(1+nq0) = tmp_h;
end;%for nq0=0:n_k_w-1;
e_w_ = exp(+i*transpose([0:n_k_w-1])*gamma_w);
X_8 = sum(tmp_h_.*e_w_);
tmp_f_ = ifft(tmp_h_)*n_k_w; X_9 = tmp_f_(1+ngamma);
disp(sprintf(' %% %0.16f+i*%0.16f vs %0.16f+i*%0.16f',real(X_8),imag(X_8),real(X_9),imag(X_9)));
%%%%%%%%;
X_10 = 0; %<-- svd-approximation to innerproduct. ;
tmp_h_ = zeros(n_k_w,1);
for nq0=0:n_k_w-1;
tmp_h = 0;
for nk=1:n_k_degree;
for nq1=[0:n_k_w-1]-n_k_w/2;
nq3 = periodize(nq0-nq1,0,n_k_w);
tmp_j = 0; tmp_ij_ = find(svd_l_==nq1); for nl=1:length(tmp_ij_); ns = tmp_ij_(nl); tmp_j = tmp_j + U_d_(ns) * svd_s_(ns) * V_k__(ns,nk); end;
tmp_h = tmp_h + conj(F_k_q_(1+nq3,nk))*G_k_q_(1+nq0,nk)*tmp_j*exp(+i*nq1*pi/2)*exp(+i*nq1*delta_w) * k_p_quad_weight_(1,nk);
end;%for nq1=[0:n_k_w-1]-n_k_w/2;
end;%for nk=1:n_k_degree;
tmp_h_(1+nq0) = tmp_h;
end;%for nq0=0:n_k_w-1;
tmp_f_ = ifft(tmp_h_)*n_k_w; X_10 = tmp_f_(1+ngamma);
disp(sprintf(' %% %0.16f+i*%0.16f',real(X_10),imag(X_10)));
%%%%%%%%;
X_11 = 0; %<-- svd-approximation to innerproduct. ;
tmp_v_ = zeros(n_svd_l,1);
tmp_v__ = zeros(n_svd_l,n_k_w);
for ns=1:n_svd_l;
tmp_l = svd_l_(ns); nq1 = tmp_l;
for nq0=0:n_k_w-1;
nq3 = periodize(nq0-nq1,0,n_k_w);
for nk=1:n_k_degree;
tmp_v__(ns,1+nq0) = tmp_v__(ns,1+nq0) + conj(F_k_q_(1+nq3,nk))*G_k_q_(1+nq0,nk) * svd_s_(ns) * V_k__(ns,nk) * k_p_quad_weight_(1,nk);
end;%for nk=1:n_k_degree;
end;%for nq0=0:n_k_w-1;
end;%for ns=1:n_svd_l;
tmp_v_ = ifft(tmp_v__,[],2)*n_k_w; tmp_v_ = tmp_v_(:,1+ngamma);
tmp_u_ = zeros(n_svd_l,1);
for ns=1:n_svd_l;
tmp_l = svd_l_(ns); nq1 = tmp_l;
tmp_u_(ns) = U_d_(ns)*exp(+i*nq1*pi/2)*exp(+i*nq1*delta_w);
end;%for ns=1:n_svd_l;
X_11 = transpose(tmp_u_)*tmp_v_;
disp(sprintf(' %% %0.16f+i*%0.16f',real(X_11),imag(X_11)));
%%%%%%%%;
end;%if ~flag_skip;

flag_skip=0;
if ~flag_skip;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now test out innerproduct for multiple translations. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
ngamma = round(n_k_w*0.125);
gamma_w = 2*pi*ngamma/n_k_w;
%%%%%%%%;
n_delta_x = 1+8; n_delta_y = 1+8; n_delta = n_delta_x*n_delta_y; 
delta_x_ = linspace(-1,1,n_delta_x)*D_target/sqrt(2);
delta_y_ = linspace(-1,1,n_delta_x)*D_target/sqrt(2);
delta_r_ = zeros(n_delta,1); delta_w_ = zeros(n_delta,1);
ndelta=1;
for ndelta_y=1:n_delta_y; for ndelta_x=1:n_delta_x; 
delta_x = delta_x_(ndelta_x); delta_y = delta_y_(ndelta_y);
delta_r = sqrt(delta_x^2 + delta_y^2); delta_w = atan2(delta_y,delta_x);
delta_r_(ndelta) = delta_r; delta_w_(ndelta) = delta_w;
ndelta = ndelta+1;
end;end;%for ndelta_y=1:n_delta_y; for ndelta_x=1:n_delta_x; 
%%%%%%%%;
X_0_ = zeros(n_delta,1); %<-- true innerproduct for one particular rotation. ;
for ndelta=1:n_delta;
delta_r = delta_r_(ndelta); delta_w = delta_w_(ndelta);
T_tru_ = transpose(exp(-i*(delta_r*svd_r_) * cos(transpose(grid_k_w_) - delta_w)));
H_k_p_ = G_k_p_( 1 + periodize( [0:n_k_w-1] + ngamma , 0 , n_k_w ) , : );
X_0 = sum(conj( F_k_p_(:) .* T_tru_(:) ).*H_k_p_(:).*k_p_quad_weight_(:));
X_0_(ndelta) = X_0;
end;%for ndelta=1:n_delta;
%%%%%%%%;
U_d__ = zeros(n_delta,n_svd_l);
for ns=1:n_svd_l;
for nd=0:n_d_degree-1;
tmp_b_ = svd_d_Jv_{1+nd}((delta_r_ - svd_d_m)/svd_d_c);
U_d__(:,ns) = U_d__(:,ns) + svd_U_d_(1+nd,ns)*tmp_b_;
end;%for nd=0:n_d_degree-1;
end;%for ns=1:n_svd_l;
%%%%%%%%;
V_k__ = zeros(n_svd_l,n_k_degree);
for ns=1:n_svd_l;
V_k_ = zeros(1,n_k_degree);
for nk=0:n_k_degree-1;
a_tmp = svd_r_Jv_{1+nk}((reshape(svd_k_,1,n_k_degree) - svd_k_m)/svd_k_c);
V_k_ = V_k_ + svd_V_k_(1+nk,ns)*a_tmp;
end;%for nk=0:n_k_degree-1;
V_k__(ns,:) = V_k_;
end;%for ns=1:n_svd_l;
%%%%%%%%;
X_1_ = zeros(n_delta,1); %<-- svd-approximation to innerproduct for one particular rotation. ;
tmp_v_ = zeros(n_svd_l,1);
tmp_v__ = zeros(n_svd_l,n_k_w);
for ns=1:n_svd_l;
tmp_l = svd_l_(ns); nq1 = tmp_l;
for nq0=0:n_k_w-1;
nq3 = periodize(nq0-nq1,0,n_k_w);
for nk=1:n_k_degree;
tmp_v__(ns,1+nq0) = tmp_v__(ns,1+nq0) + conj(F_k_q_(1+nq3,nk))*G_k_q_(1+nq0,nk) * svd_s_(ns) * V_k__(ns,nk) * k_p_quad_weight_(1,nk);
end;%for nk=1:n_k_degree;
end;%for nq0=0:n_k_w-1;
end;%for ns=1:n_svd_l;
tmp_v_ = ifft(tmp_v__,[],2)*n_k_w; tmp_v_ = tmp_v_(:,1+ngamma);
tmp_u__ = zeros(n_delta,n_svd_l);
for ndelta=1:n_delta;
delta_w = delta_w_(ndelta);
for ns=1:n_svd_l;
tmp_l = svd_l_(ns); nq1 = tmp_l;
tmp_u__(ndelta,ns) = U_d__(ndelta,ns)*exp(+i*nq1*pi/2)*exp(+i*nq1*delta_w);
end;%for ns=1:n_svd_l;
end;%for ndelta=1:n_delta;
X_1_ = tmp_u__*tmp_v_;
%%%%%%%%;
Xlim_ = [min(real(X_0_)),max(real(X_0_))];
D_1_ = (X_0_-X_1_)./abs(X_0_);
Dlim_ = [min(real(D_1_)),max(real(D_1_))];
subplot(2,3,1);imagesc(reshape(real(X_0_),n_delta_x,n_delta_y),Xlim_); title('X_0');
subplot(2,3,2);imagesc(reshape(real(X_1_),n_delta_x,n_delta_y),Xlim_); title('X_1');
subplot(2,3,3);imagesc(reshape(real(D_1_),n_delta_x,n_delta_y),Dlim_); title('\Delta X');
subplot(2,3,4);imagesc(reshape(imag(X_0_),n_delta_x,n_delta_y),Xlim_); title('X_0');
subplot(2,3,5);imagesc(reshape(imag(X_1_),n_delta_x,n_delta_y),Xlim_); title('X_1');
subplot(2,3,6);imagesc(reshape(imag(D_1_),n_delta_x,n_delta_y),Dlim_); title('\Delta X');
end;%if ~flag_skip;
%%%%%%%%;
disp('returning'); return;
