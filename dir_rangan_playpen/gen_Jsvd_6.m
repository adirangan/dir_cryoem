function gen_Jsvd_6(N_pixel,eps_target);
% Generating svd-expansion of F_ (note that this factorizes by construction) ; 
% The svd-expansion is stored in terms of polynomial coefficients (requiring chebfun). ;
% The svd-expansion is also defined only in terms of N_pixel and eps_target. ;
%{

  if exist('./dir_gen_Jsvd_6/gen_Jsvd_svddecl.txt','file'); delete('./dir_gen_Jsvd_6/gen_Jsvd_svddecl.txt'); end;
  if exist('./dir_gen_Jsvd_6/gen_Jsvd_svdfree.txt','file'); delete('./dir_gen_Jsvd_6/gen_Jsvd_svdfree.txt'); end;
  if exist('./dir_gen_Jsvd_6/gen_Jsvd_svdpick.txt','file'); delete('./dir_gen_Jsvd_6/gen_Jsvd_svdpick.txt'); end;
  if exist('./dir_gen_Jsvd_6/gen_Jsvd_svdload.txt','file'); delete('./dir_gen_Jsvd_6/gen_Jsvd_svdload.txt'); end;
  eps_target_ = 0.000001; N_pixel_ = 0.5:0.5:5;
  for ne=1:length(eps_target_); for nn=1:length(N_pixel_); % Note: loop-order important for svdpick ;
  eps_target = eps_target_(ne); N_pixel = N_pixel_(nn);  
  gen_Jsvd_6(N_pixel,eps_target);
  end;end;%for ne=1:length(eps_target_); for nn=1:length(N_pixel_);

 %}

if (nargin<2);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Here we compare original svd-expansion (unit weight) with jacpoly expansion (radial weight) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
clear; n_figure=0; N_pixel_use = 2.0*sqrt(2);
%%%%%%%%%%%%%%%%;
% form svd-expansion with unit weight. ;
%%%%%%%%%%%%%%%%;
K_max = 36; N_pixel = N_pixel_use; eps_target = 0.0001;
% Generate svd-expansion ;
q_l_max = 15; % maximum order ;
eps_target = eps_target;
q_R_target = ceil(2*pi*K_max) ;
q_R_preget = 2*pi*K_max; %q_R_preget = 2*pi*ceil(max(1,(K_max-0.5))) ;%q_R_preget = ceil(2*pi*max(1,(K_max-1))) ;
q_z_target = N_pixel*pi*sqrt(2) ;%q_z_target = N_pixel*pi*sqrt(2)*q_R_target/q_R_preget ;
q_D_target = q_z_target/q_R_target;
q_n_r = 127 ; q_n_d = 129 ;
q_r_ = linspace(0,q_R_target,q_n_r);
q_d_ = linspace(0,q_D_target,q_n_d);
clear q_l_ q_U_d_ q_s_ q_V_r_ ;
[q_R_,q_D_] = meshgrid(q_r_,q_d_); Z_ = q_R_.*q_D_;
l = 0; q_n_l = 0; continue_flag=1;
while (continue_flag);
if (l==0); l_ = [0]; else l_ = [-l,+l] ; end;
for l_tmp = l_;
J_tmp = besselj(l_tmp,Z_);
[tmp_U,tmp_S,tmp_V] = svds(J_tmp,8); tmp_S = diag(tmp_S); [tmp_S_ret] = find(tmp_S>eps_target) ;
if ~isempty(tmp_S_ret);
disp(sprintf(' %% l %+.2d, found %d terms [%0.2f,..,%0.2f];',l_tmp,length(tmp_S_ret),tmp_S(tmp_S_ret(1)),tmp_S(tmp_S_ret(end))));
for ij = 1:length(tmp_S_ret);
q_l_(1+q_n_l) = l_tmp;
q_U_d_(:,1+q_n_l) = tmp_U(:,tmp_S_ret(ij));
q_s_(1,1+q_n_l) = tmp_S(tmp_S_ret(ij),1);
q_V_r_(:,1+q_n_l) = tmp_V(:,tmp_S_ret(ij));
q_n_l = q_n_l + 1;
end;%for ij = 1:length(tmp_S_ret);
end;%if ~isempty(tmp_S_ret);
end;% for l_tmp = l_;
l=l+1;
if (l>q_l_max); continue_flag=0; else continue_flag=1; end;
end;%while (continue_flag);
disp(sprintf(' %% total of q_n_l %d terms found;',q_n_l));
%%%%%%%%;
% form bessel-functions;
%%%%%%%%;
q_J__ = zeros(q_n_d,q_n_r,1+2*q_l_max);
for nl=1:1+2*q_l_max;
tmp_l = nl-q_l_max-1;
tmp_ij_ = find(q_l_==tmp_l);
q_J_ = zeros(q_n_d,q_n_r);
for ni=1:length(tmp_ij_);
ij = tmp_ij_(ni);
q_J_ = q_J_ + q_U_d_(:,ij) * q_s_(1,ij) * transpose(q_V_r_(:,ij));
end;%for ni=1:length(tmp_ij_);
q_J__(:,:,nl) = q_J_;
end;%for nl=1:1+2*q_l_max;
%%%%%%%%;
% plot bessel-functions;
%%%%%%%%;
flag_disp=0;
if flag_disp;
n_figure=n_figure+1;figure(n_figure);clf;
prows = floor(sqrt(size(q_J__,3))); pcols = ceil(size(q_J__,3)/prows);
for nl=1:1+2*q_l_max;
tmp_l = nl-q_l_max-1;
subplot(prows,pcols,nl); 
colormap(colormap_beach(64));
imagesc(squeeze(q_J__(:,:,nl)),[-1,+1]/abs(1+tmp_l)); 
set(gca,'XTick',[],'YTick',[]);
title(sprintf('J_{%+d}',tmp_l));
end;%for nl=1:1+2*q_l_max;
set(gcf,'Position',1+[0,0,1024*1.5,1024]);
end;%if flag_disp;
%%%%%%%%%%%%%%%%;
% form svd-expansion via jacpoly. ;
%%%%%%%%%%%%%%%%;
K_max = 1; N_pixel = N_pixel_use; p_l_max = 48; n_r_degree = 35; n_d_degree = 36; verbose=1;
p_R_target = K_max; p_z_target = N_pixel*pi*sqrt(2); p_D_target = p_z_target/(2*pi*p_R_target);
eps_target = 0.0001;
[n_svd_r,svd_r_,svd_r_m,svd_r_c,svd_r_w_,svd_r_Jv_,n_svd_d,svd_d_,svd_d_m,svd_d_c,svd_d_w_,svd_d_Jv_,n_svd_l,svd_l_,svd_U_d_,svd_s_,svd_V_r_] = gen_Jsvd_5b(K_max,N_pixel,eps_target,p_l_max,n_r_degree,n_d_degree);
%p_n_d = n_svd_d; d_value_ = reshape(svd_d_,1,p_n_d);
%p_n_r = n_svd_r; p_r_value_ = reshape(svd_r_,1,p_n_r);
p_n_d = 129; p_d_value_ = linspace(0,svd_d_(end),p_n_d);
p_n_r = 127; p_r_value_ = linspace(0,svd_r_(end),p_n_r);
p_U_d_ = zeros(p_n_d,n_svd_l);
p_s_ = zeros(1,n_svd_l);
p_V_r_ = zeros(p_n_r,n_svd_l);
p_n_l = n_svd_l;
p_j_d_ = zeros(n_d_degree,n_svd_l);
p_j_r_ = zeros(n_r_degree,n_svd_l);
o_U_d_ = zeros(p_n_d,n_svd_l);
o_V_r_ = zeros(p_n_r,n_svd_l);
for nl=1:n_svd_l;
%%%%%%%%;
tmp_U_d_ = zeros(1,length(p_d_value_));
tmp_p_j_ = zeros(n_d_degree,1);
for nd_degree=0:n_d_degree-1;
tmp_d = svd_d_Jv_{1+nd_degree}((p_d_value_ - svd_d_m)/svd_d_c);
tmp_U_d_ = tmp_U_d_ + svd_U_d_(1+nd_degree,nl)*tmp_d;
tmp_j_ = poly(svd_d_Jv_{1+nd_degree}*svd_U_d_(1+nd_degree,nl)); tmp_j_ = tmp_j_(end:-1:1);
if (length(tmp_j_)>n_d_degree); disp(sprintf(' %% Warning! chebfun d-degree exceeds %d',n_d_degree)); end;
tmp_n = min(n_d_degree,length(tmp_j_));
tmp_p_j_(1:tmp_n) = tmp_p_j_(1:tmp_n) + transpose(tmp_j_(1:tmp_n));
end;% for nd_degree=0:n_d_degree-1;
p_U_d_(:,nl) = tmp_U_d_;
p_j_d_(:,nl) = tmp_p_j_;
o_U_d_(:,nl) = polyval(p_j_d_(end:-1:1,nl),(p_d_value_ - svd_d_m)/svd_d_c);
%%%%%%%%;
p_s_(nl) = svd_s_(nl);
%%%%%%%%;
tmp_V_r_ = zeros(1,length(p_r_value_));
tmp_p_j_ = zeros(n_r_degree,1);
%n_r_degree = size(svd_V_r_,1);
tmp_r_j_ = zeros(n_r_degree,1);
for nr_degree=0:n_r_degree-1;
tmp_r = svd_r_Jv_{1+nr_degree}((p_r_value_ - svd_r_m)/svd_r_c);
tmp_V_r_ = tmp_V_r_ + svd_V_r_(1+nr_degree,nl)*tmp_r;
tmp_j_ = poly(svd_r_Jv_{1+nr_degree}*svd_V_r_(1+nr_degree,nl)); tmp_j_ = tmp_j_(end:-1:1);
if (length(tmp_j_)>n_r_degree); disp(sprintf(' %% Warning! chebfun r-degree exceeds %d',n_r_degree)); end;
tmp_n = min(n_r_degree,length(tmp_j_));
tmp_p_j_(1:tmp_n) = tmp_p_j_(1:tmp_n) + transpose(tmp_j_(1:tmp_n));
end;%for nr_degree=0:n_r_degree-1;
p_V_r_(:,nl) = tmp_V_r_;
p_j_r_(:,nl) = tmp_p_j_;
o_V_r_(:,nl) = polyval(p_j_r_(end:-1:1,nl),(p_r_value_ - svd_r_m)/svd_r_c);
%%%%%%%%;
end;%for nl=1:n_svd_l;
%%%%%%%%;
% form bessel-functions;
%%%%%%%%;
p_J__ = zeros(p_n_d,p_n_r,1+2*p_l_max);
o_J__ = zeros(p_n_d,p_n_r,1+2*p_l_max);
for nl=1:1+2*p_l_max;
tmp_l = nl-p_l_max-1;
tmp_ij_ = find(svd_l_==tmp_l);
p_J_ = zeros(p_n_d,p_n_r);
o_J_ = zeros(p_n_d,p_n_r);
for ni=1:length(tmp_ij_);
ij = tmp_ij_(ni);
p_J_ = p_J_ + p_U_d_(:,ij) * p_s_(1,ij) * transpose(p_V_r_(:,ij));
o_J_ = o_J_ + o_U_d_(:,ij) * p_s_(1,ij) * transpose(o_V_r_(:,ij));
end;%for ni=1:length(tmp_ij_);
p_J__(:,:,nl) = p_J_;
o_J__(:,:,nl) = o_J_;
end;%for nl=1:1+2*p_l_max;
%%%%%%%%;
% plot bessel-functions;
%%%%%%%%;
flag_disp=0;
if flag_disp;
n_figure=n_figure+1;figure(n_figure);clf;
prows = floor(sqrt(size(p_J__,3))); pcols = ceil(size(p_J__,3)/prows);
for nl=1:1+2*p_l_max;
tmp_l = nl-p_l_max-1;
subplot(prows,pcols,nl); 
colormap(colormap_beach(64));
imagesc(squeeze(p_J__(:,:,nl)),[-1,+1]/abs(1+tmp_l)); 
set(gca,'XTick',[],'YTick',[]);
title(sprintf('J_{%+d}',tmp_l));
end;%for nl=1:1+2*p_l_max;
set(gcf,'Position',1+[0,0,1024*1.5,1024]);
end;%if flag_disp;
%%%%%%%%;
flag_disp=0;
if flag_disp;
n_figure=n_figure+1;figure(n_figure);clf;
prows = floor(sqrt(size(o_J__,3))); pcols = ceil(size(o_J__,3)/prows);
for nl=1:1+2*p_l_max;
tmp_l = nl-p_l_max-1;
subplot(prows,pcols,nl); 
colormap(colormap_beach(64));
imagesc(squeeze(o_J__(:,:,nl)),[-1,+1]/abs(1+tmp_l)); 
set(gca,'XTick',[],'YTick',[]);
title(sprintf('J_{%+d}',tmp_l));
end;%for nl=1:1+2*p_l_max;
set(gcf,'Position',1+[0,0,1024*1.5,1024]);
end;%if flag_disp;
%%%%%%%%;
% plot difference;
%%%%%%%%;
flag_disp=0;
if flag_disp;
n_figure=n_figure+1;figure(n_figure);clf;
tmp_n = min(p_l_max,q_l_max);
prows = floor(sqrt(tmp_n)); pcols = ceil(tmp_n/prows);
for nl=1:tmp_n;
tmp_q = nl-1 + q_l_max;
tmp_p = nl-1 + p_l_max;
subplot(prows,pcols,nl);
colormap(colormap_beach(64));
imagesc(squeeze(p_J__(:,:,tmp_p)) - squeeze(q_J__(:,:,tmp_q))); colorbar;
set(gca,'XTick',[],'YTick',[]);
title(sprintf('error for J_{%+d}',nl-1));
end;%for nl=1:tmp_n;
set(gcf,'Position',1+[0,0,1024*1.5,1024]);
end;%if flag_disp;
%%%%%%%%;
flag_disp=0;
if flag_disp;
n_figure=n_figure+1;figure(n_figure);clf;
tmp_n = min(p_l_max,q_l_max);
prows = floor(sqrt(tmp_n)); pcols = ceil(tmp_n/prows);
for nl=1:tmp_n;
tmp_q = nl-1 + q_l_max;
tmp_p = nl-1 + p_l_max;
subplot(prows,pcols,nl);
colormap(colormap_beach(64));
imagesc(squeeze(o_J__(:,:,tmp_p)) - squeeze(q_J__(:,:,tmp_q))); colorbar;
set(gca,'XTick',[],'YTick',[]);
title(sprintf('error for J_{%+d}',nl-1));
end;%for nl=1:tmp_n;
set(gcf,'Position',1+[0,0,1024*1.5,1024]);
end;%if flag_disp;
%%%%%%%%%%%%%%%%;

flag_disp=1;
if flag_disp;
n_figure=n_figure+1;figure(n_figure);clf; n_subplot = 0;
tmp_l=0; tmp_p = tmp_l+1 + p_l_max;
colormap(colormap_beach(64));
n_subplot=n_subplot+1;subplot(2,5,n_subplot);
imagesc(squeeze(o_J__(:,:,tmp_p)),1.0*[-1,+1]); 
set(gca,'XTick',[],'YTick',[]); axis square;
title(sprintf('J_{%+d}',tmp_l));
p_n_d = 129; p_d_value_ = linspace(0,svd_d_(end),p_n_d);
p_n_r = 127; p_r_value_ = linspace(0,svd_r_(end),p_n_r);
tmp_ij_ = find(svd_l_==tmp_l);
o_J_ = zeros(p_n_d,p_n_r);
for ni=1:min(4,length(tmp_ij_));
ij = tmp_ij_(ni);
tmp_J_ = transpose(polyval(p_j_d_(end:-1:1,ij),(p_d_value_ - svd_d_m)/svd_d_c)) * p_s_(1,ij) * polyval(p_j_r_(end:-1:1,ij),(p_r_value_ - svd_r_m)/svd_r_c);
o_J_ = o_J_ + tmp_J_ ;
n_subplot=n_subplot+1;subplot(2,5,n_subplot);
imagesc(tmp_J_,1.0*[-1,+1]); 
set(gca,'XTick',[],'YTick',[]); axis square;
title(sprintf('tmp_J_{%+d}[%d]',tmp_l,ni));
n_subplot=n_subplot+1;subplot(2,5,n_subplot);
imagesc(o_J_,1.0*[-1,+1]); 
set(gca,'XTick',[],'YTick',[]); axis square;
title(sprintf('o_J_{%+d}[%d]',tmp_l,ni));
end;%for ni=1:min(4,length(tmp_ij_));
set(gcf,'Position',1+[0,0,1024*1.5,1024]);
print('-djpeg',sprintf('./dir_svd/gen_Jsvd_6_N%2d_Fig_C.jpg',round(100*N_pixel)));
print('-depsc',sprintf('./dir_svd/gen_Jsvd_6_N%2d_Fig_C.eps',round(100*N_pixel)));
end;%if flag_disp;

flag_disp=1;
if flag_disp;
n_figure=n_figure+1;figure(n_figure);clf; n_subplot = 0;
tmp_l=0; tmp_p = tmp_l+1 + p_l_max;
p_n_d = 129; p_d_value_ = linspace(0,svd_d_(end),p_n_d);
p_n_r = 127; p_r_value_ = linspace(0,svd_r_(end),p_n_r);
tmp_ij_ = find(svd_l_==tmp_l);
for ni=1:min(4,length(tmp_ij_));
ij = tmp_ij_(ni);
tmp_U_d_ = polyval(p_j_d_(end:-1:1,ij),(p_d_value_ - svd_d_m)/svd_d_c) * sqrt(p_s_(1,ij)) ;
tmp_V_r_ = sqrt(p_s_(1,ij)) * polyval(p_j_r_(end:-1:1,ij),(p_r_value_ - svd_r_m)/svd_r_c) ;
n_subplot=n_subplot+1;subplot(8,1,n_subplot);
%plot(p_d_value_,tmp_U_d_,'r-',p_d_value_,0*p_d_value_,'k-'); ylim(1.5*[-1,+1]); xlim([0,p_d_value_(end)]);
area(p_d_value_,tmp_U_d_,'FaceColor',0.8*[1,1,1]); ylim(1.5*[-1,+1]); xlim([0,p_d_value_(end)]);
set(gca,'XTick',[],'YTick',[]);
n_subplot=n_subplot+1;subplot(8,1,n_subplot);
%plot(p_r_value_,tmp_V_r_,'b-',p_r_value_,0*p_r_value_,'k-'); ylim(1.5*[-1,+1]); xlim([0,p_r_value_(end)]);
area(p_r_value_,tmp_V_r_,'FaceColor',0.8*[1,1,1]); ylim(1.5*[-1,+1]); xlim([0,p_r_value_(end)]);
set(gca,'XTick',[],'YTick',[]);
end;%for ni=1:min(4,length(tmp_ij_));
set(gcf,'Position',1+[0,0,1024*1.5,1024]);
print('-djpeg',sprintf('./dir_svd/gen_Jsvd_6_N%2d_Fig_D.jpg',round(100*N_pixel)));
print('-depsc',sprintf('./dir_svd/gen_Jsvd_6_N%2d_Fig_D.eps',round(100*N_pixel)));
end;%if flag_disp;

disp('returning');return;
end;%if (nargin<2);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

K_max = 1; p_l_max = 48; n_r_degree = 35; n_d_degree = 36; verbose=1;
if (verbose); disp(sprintf(' %% [entering gen_Jsvd_6] K_max %d p_l_max %d n_r_degree %d n_d_degree %d N_pixel %d eps_target %0.16f',K_max,p_l_max,n_r_degree,n_d_degree,N_pixel,eps_target)); end;
[n_svd_r,svd_r_,svd_r_m,svd_r_c,svd_r_w_,svd_r_Jv_,n_svd_d,svd_d_,svd_d_m,svd_d_c,svd_d_w_,svd_d_Jv_,n_svd_l,svd_l_,svd_U_d_,svd_s_,svd_V_r_] = gen_Jsvd_5b(K_max,N_pixel,eps_target,p_l_max,n_r_degree,n_d_degree);
svd_j_d_ = zeros(n_d_degree,n_svd_l);
svd_j_r_ = zeros(n_r_degree,n_svd_l);
for nl=1:n_svd_l;
%%%%%%%%;
tmp_p_j_ = zeros(n_d_degree,1);
for nd_degree=0:n_d_degree-1;
tmp_j_ = poly(svd_d_Jv_{1+nd_degree}*svd_U_d_(1+nd_degree,nl)); tmp_j_ = tmp_j_(end:-1:1);
if (length(tmp_j_)>n_d_degree); disp(sprintf(' %% Warning! chebfun d-degree exceeds %d',n_d_degree)); end;
tmp_n = min(n_d_degree,length(tmp_j_));
tmp_p_j_(1:tmp_n) = tmp_p_j_(1:tmp_n) + transpose(tmp_j_(1:tmp_n));
end;% for nd_degree=0:n_d_degree-1;
svd_j_d_(:,nl) = tmp_p_j_;
%%%%%%%%;
tmp_p_j_ = zeros(n_r_degree,1);
for nr_degree=0:n_r_degree-1;
tmp_j_ = poly(svd_r_Jv_{1+nr_degree}*svd_V_r_(1+nr_degree,nl)); tmp_j_ = tmp_j_(end:-1:1);
if (length(tmp_j_)>n_r_degree); disp(sprintf(' %% Warning! chebfun r-degree exceeds %d',n_r_degree)); end;
tmp_n = min(n_r_degree,length(tmp_j_));
tmp_p_j_(1:tmp_n) = tmp_p_j_(1:tmp_n) + transpose(tmp_j_(1:tmp_n));
end;%for nr_degree=0:n_r_degree-1;
svd_j_r_(:,nl) = tmp_p_j_;
%%%%%%%%;
end;%for nl=1:n_svd_l;

dpos = 'dir_gen_Jsvd_6';
dname = sprintf('%s/%s',pwd,dpos); if (~exist(dname,'dir')); mkdir(dname); end;
ftag = sprintf('N%.2dl10e%d',floor(10*N_pixel),round(-log10(eps_target)));

fname = sprintf('%s/gen_Jsvd_svddecl.txt',dname);
if (~exist(fname,'file'));
fp = fopen(fname,'w');
fprintf(fp,'      integer *4 n_svd_r,n_svd_d,n_svd_l !used as n_svd_r_degree and n_svd_d_degree ;\n');
fprintf(fp,'      integer *4 nsvd_r,nsvd_d,nsvd_l !used as nsvd_r_degree and nsvd_d_degree ;\n');
fprintf(fp,'      real *8, allocatable :: svd_r_(:) !unused ;\n');
fprintf(fp,'      real *8, allocatable :: svd_d_(:) !unused ;\n');
fprintf(fp,'      integer *4, allocatable :: svd_l_(:) !l-index ;\n');
fprintf(fp,'      real *8, allocatable :: svd_U_d_(:) !real *8 array of size n_svd_d_degree -x- n_svd_l ; polynomial coefficients for evaluation of U_d_ ; note that these polynomials should be evaluated in the [-1,+1] interval (e.g., at (d_value - d_m) / d_c ) ;\n');
fprintf(fp,'      real *8, allocatable :: svd_s_(:) !real *8 array of size n_svd_l ; s-values ;\n');
fprintf(fp,'      real *8, allocatable :: svd_V_r_(:) !real *8 array of size n_svd_r_degree -x- n_svd_l ; polynomial coefficients for evaluation of V_r_ ; note that these polynomials should be evaluated in the [-1,+1] interval (e.g., at (r_value - r_m) / r_c ) ;\n');
fprintf(fp,'      integer *4 svd_unitnumber\n');
fprintf(fp,'      parameter (svd_unitnumber=143857)\n');
fprintf(fp,'      character(len=64) svd_fname,svd_format_string\n');
fclose(fp);
end;%if (~exist(fname,'file')); 

fname = sprintf('%s/gen_Jsvd_svdfree.txt',dname);
if (~exist(fname,'file'));
fp = fopen(fname,'w');
fprintf(fp,'      deallocate(svd_V_r_)\n');
fprintf(fp,'      deallocate(svd_s_)\n');
fprintf(fp,'      deallocate(svd_U_d_)\n');
fprintf(fp,'      deallocate(svd_l_)\n');
fprintf(fp,'      deallocate(svd_d_)\n');
fprintf(fp,'      deallocate(svd_r_)\n');
fclose(fp);
end;%if (~exist(fname,'file')); 

fname = sprintf('%s/gen_Jsvd_svdpick.txt',dname);
fp = fopen(fname,'a');
fprintf(fp,'      else if (N_pixel.le.%d .and. \n',N_pixel);
fprintf(fp,'     $        eps_target.le.%0.3fd0) then\n',eps_target);
fprintf(fp,'      if (verbose.gt.0) then\n');
fprintf(fp,'         write(6,''(A,I0)'') ''using: gen_Jsvd_%s, n_svd_l='',%d\n',ftag,n_svd_l);
fprintf(fp,'      end if\n');
fprintf(fp,'      write(svd_fname,''(A)'') \n');
fprintf(fp,'     $ ''./%s/gen_Jsvd_%s.txt''\n',dpos,ftag);
fclose(fp);

fname = sprintf('%s/gen_Jsvd_svdload.txt',dname);
if (~exist(fname,'file'));
fp = fopen(fname,'w');
fprintf(fp,'      open(svd_unitnumber,file=svd_fname,status=''old'',\n');
fprintf(fp,'     $ form=''formatted'',action=''read'')\n');
fprintf(fp,'      read(svd_unitnumber,*) n_svd_r\n');
fprintf(fp,'      read(svd_unitnumber,*) n_svd_d\n');
fprintf(fp,'      read(svd_unitnumber,*) n_svd_l\n');
fprintf(fp,'      allocate(svd_r_(0:n_svd_r-1))\n');
fprintf(fp,'      read(svd_unitnumber,*) (svd_r_(nsvd_r),nsvd_r=0,n_svd_r-1)\n');
fprintf(fp,'      allocate(svd_d_(0:n_svd_d-1))\n');
fprintf(fp,'      read(svd_unitnumber,*) (svd_d_(nsvd_d),nsvd_d=0,n_svd_d-1)\n');
fprintf(fp,'      allocate(svd_l_(0:n_svd_l-1))\n');
fprintf(fp,'      read(svd_unitnumber,*) (svd_l_(nsvd_l),nsvd_l=0,n_svd_l-1)\n');
fprintf(fp,'      allocate(svd_U_d_(0:n_svd_d*n_svd_l-1))\n');
fprintf(fp,'      read(svd_unitnumber,*)\n');
fprintf(fp,'     $ (svd_U_d_(nsvd_d),nsvd_d=0,n_svd_d*n_svd_l-1)\n');
fprintf(fp,'      allocate(svd_s_(0:n_svd_l-1))\n');
fprintf(fp,'      read(svd_unitnumber,*) (svd_s_(nsvd_l),nsvd_l=0,n_svd_l-1)\n');
fprintf(fp,'      allocate(svd_V_r_(0:n_svd_r*n_svd_l-1))\n');
fprintf(fp,'      read(svd_unitnumber,*)\n');
fprintf(fp,'     $ (svd_V_r_(nsvd_r),nsvd_r=0,n_svd_r*n_svd_l-1)\n');
fprintf(fp,'      close(svd_unitnumber,status=''keep'')\n');
fclose(fp);
end;%if (~exist(fname,'file'));

fname = sprintf('%s/gen_Jsvd_%s.txt',dname,ftag);
fp = fopen(fname,'w');
fprintf(fp,'%d\n',n_svd_r);fprintf(fp,'%d\n',n_svd_d);fprintf(fp,'%d\n',n_svd_l);
fprintf(fp,'%0.16f\n',svd_r_);
fprintf(fp,'%0.16f\n',svd_d_);
fprintf(fp,'%d\n',svd_l_(:));
fprintf(fp,'%0.16f\n',svd_j_d_(:));
fprintf(fp,'%0.16f\n',svd_s_(:));
fprintf(fp,'%0.16f\n',svd_j_r_(:));
fclose(fp);
