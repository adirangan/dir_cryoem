% testing functional lsq. ;
% analytically calculate the overlap integral between two plane-waves on a disc, ;
% as well as the derivative of that overlap integral. : ;
% Can explicitly write down function that can be used to determine the derivative ;
% of terms like f_{j}^{\dagger} f_{j^{\prime}}, ;
% as well as the error E. ;
% Now calculating total (average) error across disc using lsq-interpolation. ;
% Using quadrature grid. ;
% Switching to pseudoinverse. ;
% Pulling out delta_t independent term from derivative. ;
% Using roughly equispaced initial nodes. ;
% Attempting to vectorize derivative calculation. ;

verbose=1;
h_ = @(kd) 4*pi*besselj(1,2*pi*kd) ./ kd ; 
dh_ = @(kd) -4*pi*besselj(1,2*pi*kd)./kd.^2 + 4*pi^2*(besselj(0,2*pi*kd)-besselj(2,2*pi*kd))./kd ; 

n_point = 128; max_x_c = 1; 
[max_k_c,max_k_p,grid_x_c_,d_x_c,X_x_c_,Y_x_c_,R_x_c_,W_x_c_,grid_k_c_,d_k_c,X_k_c_,Y_k_c_,R_k_c_,W_k_c_,grid_x_r_,grid_x_w_,R_x_p_,W_x_p_,grid_k_r_,d_k_r,grid_k_w_,d_k_w,R_k_p_,W_k_p_,X_k_p_,Y_k_p_] = test_F_grid_0(n_point,max_x_c);

N_pixel = 1.5; % number of wavelengths allowed in displacement grid. ;
R_target = max_k_p-0.5; z_target = N_pixel*pi*sqrt(2); D_target = z_target/(2*pi*R_target); C = 2*pi*max_k_p;

n_quad_order = 16; quad_weight_polycoef_ = [1 1];
trad = (D_target-0)/2; tmid = (D_target+0)/2;
[quad_node_,quad_weight_,quad_Lx_,quad_Lv_] = orthopoly_node_weight_matrix_0(n_quad_order,quad_weight_polycoef_);
quad_weight_ = quad_weight_ .* (D_target.^2/4);
quad_node_scale_ = quad_node_*trad + tmid; 
n_A=0; n_w_ = zeros(n_quad_order,1);
for nq=1:n_quad_order;
tmp = max(3,ceil(2*pi*n_quad_order*quad_node_scale_(nq)/D_target));
n_w_(nq) = tmp;
n_A = n_A + tmp;
end;%for nq=1:n_quad_order;
delta_d_sample_ = zeros(n_A,1); delta_w_sample_ = zeros(n_A,1); quad_weight_sample_ = zeros(n_A,1);
ic=0;
for nq=1:n_quad_order;
tmp = max(3,ceil(2*pi*n_quad_order*quad_node_scale_(nq)/D_target));
delta_d_sample_(ic + (1:tmp),1) = quad_node_scale_(nq);
tmp_ = linspace(0,2*pi,tmp+1);
delta_w_sample_(ic + (1:tmp),1) = transpose(tmp_(1:tmp));
quad_weight_sample_(ic + (1:tmp),1) = quad_weight_(nq)*2*pi/tmp;
ic = ic + tmp;
end;%for nq=1:n_quad_order;
delta_sample_ = zeros(n_A,2);
delta_sample_(:,1) = cos(delta_w_sample_).*delta_d_sample_;
delta_sample_(:,2) = sin(delta_w_sample_).*delta_d_sample_;
flag_disp=0;
if flag_disp;
figure(1); subplot(1,1,1); hold on;
c_ = colormap('hot'); n_c = size(c_,1); clim = [min(quad_weight_sample_),max(quad_weight_sample_)];
for na=1:n_A;
nc = max(1,min(n_c,floor(n_c*(quad_weight_sample_(na,1) - clim(1))/diff(clim))));
plot(delta_sample_(na,1),delta_sample_(na,2),'.','Color',c_(nc,:),'MarkerSize',25);
end;%for na=1:n_A;
plot(D_target*cos(linspace(0,2*pi,256)),D_target*sin(linspace(0,2*pi,256)),'k-');
set(gca,'XTick',[],'YTick',[]);axis square;
title('quad weight');
end;%if flag_disp;

n_node = 37; %n_node = 19; n_node = 37; 
svd_tolerance = 1e-6; rng(1);
%%%%%%%%%%%%%%%%;
delta_s = sqrt(6/n_node)*D_target;
delta_node_ = delta_s*hexgrid_0(n_node);
delta_node_ = delta_node_ + randn(size(delta_node_))*delta_s/8;
%%%%%%%%%%%%%%%%;

dt = 0.05;
n_iteration = 1024;
E_sum_ = zeros(n_iteration,1);
t_start = tic; t_draw = toc(t_start);
for niteration=1:n_iteration;
%%%%%%%%%%%%%%%%;
H_ = zeros(n_node,n_node);
for nnodeA=1:n_node; for nnodeB=1:n_node;
d = (delta_node_(:,nnodeB) - delta_node_(:,nnodeA));
if (nnodeA~=nnodeB); H_(nnodeA,nnodeB) = h_(norm(d)*max_k_p); end;
if (nnodeA==nnodeB); H_(nnodeA,nnodeB) = (2*pi).^2; end;
end;end;%for nnodeA=1:n_node; for nnodeB=1:n_node;
[HU_,HS_,HV_] = svd(H_); HS_ = diag(HS_); H_ij_ = find(HS_./HS_(1) < svd_tolerance);
GS_ = 1./HS_; GS_(H_ij_)=0; GS_ = diag(GS_);
G_ = HV_*GS_*transpose(HU_);
dhx__ = zeros(n_node,n_node);
dhy__ = zeros(n_node,n_node);
ddx_ = repmat(delta_node_(1,:),n_node,1) - repmat(transpose(delta_node_(1,:)),1,n_node);
ddy_ = repmat(delta_node_(2,:),n_node,1) - repmat(transpose(delta_node_(2,:)),1,n_node);
hypot_dd_ = hypot(ddx_,ddy_);
tmp_ = dh_(hypot_dd_*max_k_p)*max_k_p./hypot_dd_; tmp_(find(hypot_dd_==0)) = 0;
dhx__ = - tmp_ .* ddx_;
dhy__ = - tmp_ .* ddy_;
%%%%%%%%%%%%%%%%;
dEk_sample___ = zeros(n_A,2,n_node);
ddx_ = repmat(delta_sample_(:,1)',n_node,1) - repmat(delta_node_(1,:)',1,n_A);
ddy_ = repmat(delta_sample_(:,2)',n_node,1) - repmat(delta_node_(2,:)',1,n_A);
hypot_dd_ = hypot(ddx_,ddy_);
ij_=find(hypot_dd_==0);
ft_ = h_(hypot_dd_*max_k_p); ft_(ij_) = (2*pi)^2;
alpha_= G_*ft_;
E_sample_ = (2*pi).^2 - sum(alpha_.*ft_,1);
E_sum = abs(E_sample_)*quad_weight_sample_;
tmp_ = dh_(hypot_dd_*max_k_p)*max_k_p./hypot_dd_; tmp_(ij_) = 0;
dftx_ = - tmp_.*ddx_;
dfty_ = - tmp_.*ddy_;
dEx_sample_ = 2*alpha_.*(dhx__*alpha_) - 2*alpha_.*dftx_;
dEy_sample_ = 2*alpha_.*(dhy__*alpha_) - 2*alpha_.*dfty_;
t_mid = toc(t_start); disp(sprintf(' %% ni %d/%d; time %f',niteration,n_iteration,t_mid));
E_sum_(niteration) = E_sum;
dEx_sum_ = dEx_sample_*quad_weight_sample_;
dEy_sum_ = dEy_sample_*quad_weight_sample_;
%%%%%%%%%%%%%%%%;
if (t_mid-t_draw>3.0); flag_disp=1; else flag_disp=0; end;
if (niteration==n_iteration); flag_disp=1; end;
if flag_disp;
figure(2); clf; 
subplot(2,2,1); cla; hold on;
c_ = colormap('hot'); n_c = size(c_,1); clim = [0,max(E_sample_)];
for na=1:n_A;
nc = max(1,min(n_c,floor(n_c*(E_sample_(1,na) - clim(1))/diff(clim))));
plot(delta_sample_(na,1),delta_sample_(na,2),'.','Color',c_(nc,:),'MarkerSize',25);
end;%for na=1:n_A;
plot(D_target*cos(linspace(0,2*pi,256)),D_target*sin(linspace(0,2*pi,256)),'k-');
plot(delta_node_(1,:),delta_node_(2,:),'p','MarkerSize',25,'MarkerFaceColor','g');
set(gca,'XTick',[],'YTick',[]);axis square;
title(sprintf(' ni %d/%d: Error<=%f',niteration,n_iteration,max(E_sample_)));
hold off;
subplot(2,2,3); cla; hold on;
c_ = colormap('hot'); n_c = size(c_,1); clim = log10(max(E_sample_)) + [-3,0];
for na=1:n_A;
nc = max(1,min(n_c,floor(n_c*(log10(E_sample_(1,na)) - clim(1))/diff(clim))));
plot(delta_sample_(na,1),delta_sample_(na,2),'.','Color',c_(nc,:),'MarkerSize',25);
end;%for na=1:n_A;
plot(D_target*cos(linspace(0,2*pi,256)),D_target*sin(linspace(0,2*pi,256)),'k-');
plot(delta_node_(1,:),delta_node_(2,:),'p','MarkerSize',25,'MarkerFaceColor','g');
set(gca,'XTick',[],'YTick',[]);axis square;
title(sprintf(' ni %d/%d: log10(Error)<=%f',niteration,n_iteration,log10(max(E_sample_))));
hold off;
subplot(2,2,2); cla; hold on;
plot(1:niteration,E_sum_(1:niteration),'k.-');ylim([0,max(E_sum_)]); xlim([1,n_iteration]); xlabel('iteration'); ylabel('Total Error');
hold off;
subplot(2,2,4); cla; hold on;
plot(1:niteration,log10(abs(E_sum_(1:niteration))),'k.-');ylim([-9,0]); xlim([1,n_iteration]); xlabel('iteration'); ylabel('log10(Total Error)');
hold off;
set(gcf,'Position',1+[0,0,1024*1.5,1024]);
drawnow(); t_mid = toc(t_start); t_draw = t_mid;
end;%if flag_disp;
%%%%%%%%%%%%%%%%;
delta_node_ = delta_node_ - dt*transpose([ dEx_sum_ , dEy_sum_ ]);
for nnode=1:n_node;
tmp = hypot(delta_node_(1,nnode),delta_node_(2,nnode));
if (tmp>1.25*D_target); delta_node_(:,nnode) = 1.25*D_target * delta_node_(:,nnode)/tmp; end;
end;%for nnode=1:n_node;
%%%%%%%%%%%%%%%%;
end;%for niteration=1:n_iteration;



