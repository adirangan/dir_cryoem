function C_q_ = innerproduct_q__k_only(n_r,grid_p_,n_w_,n_A,T_q_,M_q_);
% Assumes that M_q_ is the same size and dimensions as T_q_.;
% Assumes quasi-uniform polar-grid.;
% Assumes that C_q_ is large enough to hold all n_w_(n_r-1) modes;
% (assuming of course that n_w_(n_r-1) is the largest value within n_w_).;
% Stores C_q_ in fft ordering (mode 0 , mode 1 , ... , mode -1);
verbose=0;
if (verbose>0);
disp(sprintf(' %% [entering innerproduct_q__k_only]'));
end;%if;
n_w_max = n_w_(1+n_r-1);
if (verbose>0);
disp(sprintf(' %% n_w_max %d',n_w_max));
end;%if;
for nw=0:n_w_max-1;
C_q_(1+nw) = 0.0 + i*0.0;
end;%for;
C_q = 0.0 + i*0.0;
ic = 0;
for nr=0:n_r-1;
if (nr>0);
R_pre = 0.5*(grid_p_(1+nr-1) + grid_p_(1+nr));
 else;
R_pre = grid_p_(1+0);
end;%if;
if (nr<n_r-1);
R_pos = 0.5*(grid_p_(1+nr+1) + grid_p_(1+nr));
 else;
R_pos = grid_p_(1+n_r-1);
end;%if;
dr = R_pos - R_pre;
%    We set the zero-mode to zero;
if (grid_p_(1+nr)<=0.0d0);
dr = 0.0d0;
end;%if;
if (verbose>1);
disp(sprintf(' %% nr %d n_w_(%d) %d R_pre %f R_pos %f dr %f',nr,1+nr,n_w_(1+nr),R_pre,R_pos,dr));
end;%if;
dw = 2*pi/(1.0d0*max(1,n_w_(1+nr)));
dA = (R_pre*dr + (dr.^2)/2)*dw;
%    We assume that the fourier basis is orthonormal (not merely orthogonal);
dAn = dA;
for nw=0:n_w_(1+nr)-1;
if (nw>n_w_(1+nr)/2);
nw_fix = nw - n_w_(1+nr) + n_w_max;
if (verbose>2 & nr<5);
disp(sprintf(' %% nw %d nw_fix %d (full loop)',nw,nw_fix));
end;%if;
C_q = conj(T_q_(1+ic))*M_q_(1+ic);
nw_C = nw_fix;
C_q_(1+nw_C) = C_q_(1+nw_C) + C_q*dAn;
 elseif (nw==n_w_(1+nr)/2);
nw_fix = nw;
if (verbose>2 & nr<5);
disp(sprintf(' %% nw %d nw_fix %d (half orig)',nw,nw_fix));
end;%if;
C_q = 0.5*conj(T_q_(1+ic))*M_q_(1+ic);
nw_C = nw_fix;
C_q_(1+nw_C) = C_q_(1+nw_C) + C_q*dAn;
nw_fix = nw - n_w_(1+nr) + n_w_max;
if (verbose>2 & nr<5);
disp(sprintf(' %% nw %d nw_fix %d (half loop)',nw,nw_fix));
end;%if;
C_q = 0.5*conj(T_q_(1+ic))*M_q_(1+ic);
nw_C = nw_fix;
C_q_(1+nw_C) = C_q_(1+nw_C) + C_q*dAn;
 else;
nw_fix = nw;
if (verbose>2 & nr<5);
disp(sprintf(' %% nw %d nw_fix %d (full orig)',nw,nw_fix));
end;%if;
C_q = conj(T_q_(1+ic))*M_q_(1+ic);
nw_C = nw_fix;
C_q_(1+nw_C) = C_q_(1+nw_C) + C_q*dAn;
end;%if;
ic = ic + 1;
end;%for;
end;%for;
if (verbose>0);
disp(sprintf(' %% [finished innerproduct_q__k_only]'));
end;%if;

